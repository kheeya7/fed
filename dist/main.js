!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=163)}([function(e,t,n){"use strict";e.exports=n(155)},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var l in r)n.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}void 0!==e&&e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){e.exports=n(147)()},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,l){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,a,i,l],u=0;(s=new Error(t.replace(/%s/g,function(){return c[u++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(154)},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var i=n(1),l=n.n(i),s=n(0),c=n.n(s),u=n(11),d=n.n(u),p=function(e){return c.a.forwardRef(function(t,n){return c.a.createElement("div",r({},t,{ref:n,className:l()(t.className,e)}))})},f=n(46),m=n.n(f),h=n(27),g=n.n(h),b=c.a.createContext(new Map),v=b.Provider,y=b.Consumer;function x(e,t){"string"==typeof t&&(t={prefix:t});var n=e.prototype&&e.prototype.isReactComponent,o=t,a=o.prefix,i=o.forwardRefAs,l=void 0===i?n?"ref":"innerRef":i;return g()(function(t,n){var o=r({},t);return o[l]=n,c.a.createElement(y,null,function(t){return c.a.createElement(e,r({},o,{bsPrefix:o.bsPrefix||t.get(a)||a}))})},{displayName:"Bootstrap("+(e.displayName||e.name)+")"})}var w=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).prefixes=new Map,Object.keys(t.props.prefixes).forEach(function(e){t.prefixes.set(e,t.props.prefixes[e])}),t}return a(t,e),t.prototype.render=function(){return c.a.createElement(v,{value:this.prefixes},this.props.children)},t}(c.a.Component),E=function(e){return e[0].toUpperCase()+m()(e).slice(1)};function k(e,t){var n,i,s=void 0===t?{}:t,u=s.displayName,d=void 0===u?E(e):u,p=s.Component,f=void 0===p?"div":p,m=s.defaultProps;return x((i=n=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.bsPrefix,a=e.as,i=void 0===a?f:a,s=o(e,["className","bsPrefix","as"]);return c.a.createElement(i,r({},m,s,{className:l()(t,n)}))},t}(c.a.Component),n.displayName=d,i),e)}var _,C=n(16),T=n.n(C),S=n(28),O=n.n(S);function P(e){e.offsetHeight}var N=((_={})[C.ENTERING]="show",_[C.ENTERED]="show",_),j=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleEnter=function(e){P(e),t.props.onEnter&&t.props.onEnter(e)},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.children,a=o(e,["className","children"]);return c.a.createElement(T.a,r({addEndListener:O.a},a,{onEnter:this.handleEnter}),function(e,o){return c.a.cloneElement(n,r({},o,{className:l()("fade",t,n.props.className,N[e])}))})},t}(c.a.Component);j.defaultProps={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1};var I=j,D=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.label,n=e.onClick;return c.a.createElement("button",{type:"button",className:"close",onClick:n},c.a.createElement("span",{"aria-hidden":"true"},"×"),c.a.createElement("span",{className:"sr-only"},t))},t}(c.a.Component);D.defaultProps={label:"Close"};var A=D;function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var M=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter(function(e){return null!=e}).reduce(function(e,t){if("function"!=typeof t)throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return null===e?t:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},null)};function L(e){return!e||"#"===e.trim()}var U=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).handleClick=r.handleClick.bind(R(R(r))),r.handleKeyDown=r.handleKeyDown.bind(R(R(r))),r}a(t,e);var n=t.prototype;return n.handleClick=function(e){var t=this.props,n=t.disabled,r=t.href,o=t.onClick;(n||L(r))&&e.preventDefault(),n?e.stopPropagation():o&&o(e)},n.handleKeyDown=function(e){" "===e.key&&(e.preventDefault(),this.handleClick(e))},n.render=function(){var e=this.props,t=e.as,n=e.disabled,a=e.onKeyDown,i=e.innerRef,l=o(e,["as","disabled","onKeyDown","innerRef"]);return L(l.href)&&(l.role=l.role||"button",l.href=l.href||"#"),n&&(l.tabIndex=-1,l["aria-disabled"]=!0),i&&(l.ref=i),c.a.createElement(t,r({},l,{onClick:this.handleClick,onKeyDown:M(this.handleKeyDown,a)}))},t}(c.a.Component);U.defaultProps={as:"a"};var F=U,H=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleClose=function(e){t.props.onClose(!1,e)},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.show,a=e.closeLabel,i=e.className,s=e.children,u=e.variant,d=e.dismissible,p=e.transition,f=(e.onClose,o(e,["bsPrefix","show","closeLabel","className","children","variant","dismissible","transition","onClose"])),m=c.a.createElement("div",r({role:"alert"},p?f:void 0,{className:l()(i,t,u&&t+"-"+u,d&&t+"-dismissible")}),d&&c.a.createElement(A,{onClick:this.handleClose,label:a}),s);return p?c.a.createElement(p,r({unmountOnExit:!0},f,{in:n}),m):n?m:null},t}(c.a.Component);H.defaultProps={show:!0,transition:I,closeLabel:"Close alert"};var z=d()(x(H,"alert"),{show:"onClose"}),B=p("h4");z.Link=k("alert-link",{Component:F}),z.Heading=k("alert-heading",{Component:B});var W=z,q=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.variant,a=e.pill,i=e.className,s=o(e,["bsPrefix","variant","pill","className"]);return c.a.createElement("span",r({},s,{className:l()(i,t,a&&t+"-pill",n&&t+"-"+n)}))},t}(c.a.Component);q.defaultProps={pill:!1};var V=x(q,"badge"),K=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.active,a=e.className,i=e.as,s=o(e,["bsPrefix","active","className","as"]),u=s.href,d=s.title,p=s.target,f=o(s,["href","title","target"]),m={href:u,title:d,target:p};return c.a.createElement(i,{className:l()(t,a,{active:n}),"aria-current":n?"page":void 0},n?c.a.createElement("span",r({},f,{className:l()({active:n})})):c.a.createElement(F,r({},f,m)))},t}(c.a.Component);K.defaultProps={active:!1,as:"li"};var G=x(K,"breadcrumb-item"),$=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.listProps,i=e.children,s=e.label,u=e.as,d=o(e,["bsPrefix","className","listProps","children","label","as"]);return c.a.createElement(u,r({"aria-label":s,className:n},d),c.a.createElement("ol",r({},a,{className:l()(t,a.className)}),i))},t}(c.a.Component);$.defaultProps={label:"breadcrumb",listProps:{},as:"nav"};var X=x($,"breadcrumb");X.Item=G;var Y=X,Q=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.variant,a=e.size,i=e.active,s=e.className,u=e.block,d=e.type,p=e.as,f=e.innerRef,m=o(e,["bsPrefix","variant","size","active","className","block","type","as","innerRef"]),h=l()(s,t,i&&"active",t+"-"+n,u&&t+"-block",a&&t+"-"+a);if(m.href)return c.a.createElement(F,r({},m,{as:p,innerRef:f,className:l()(h,m.disabled&&"disabled")}));var g=p||"button";return f&&(m.ref=f),c.a.createElement(g,r({},m,{type:d,className:h}))},t}(c.a.Component);Q.defaultProps={variant:"primary",active:!1,disabled:!1,type:"button"};var J=x(Q,{prefix:"btn",forwardRefAs:"innerRef"}),Z=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.size,a=e.toggle,i=e.vertical,s=e.className,u=e.as,d=o(e,["bsPrefix","size","toggle","vertical","className","as"]),p=t;return i&&(p=t+"-vertical"),c.a.createElement(u,r({},d,{className:l()(s,p,n&&t+"-"+n,a&&t+"-toggle")}))},t}(c.a.Component);Z.defaultProps={vertical:!1,toggle:!1,role:"group",as:"div"};var ee=x(Z,"btn-group"),te=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=o(e,["bsPrefix","className"]);return c.a.createElement("div",r({},a,{className:l()(n,t)}))},t}(c.a.Component);te.defaultProps={role:"toolbar"};var ne=x(te,"btn-toolbar"),re=c.a.createContext(null),oe=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.variant,i=e.as,s=o(e,["bsPrefix","className","variant","as"]),u=a?t+"-"+a:t;return c.a.createElement(i,r({className:l()(u,n)},s))},t}(c.a.Component);oe.defaultProps={as:"img",variant:null};var ae=x(oe,"card-img"),ie=k("card-body"),le=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={},t}return a(t,e),t.getDerivedStateFromProps=function(e){return{cardContext:{cardHeaderBsPrefix:e.bsPrefix+"-header"}}},t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.as,i=e.bg,s=e.text,u=e.border,d=e.body,p=e.children,f=o(e,["bsPrefix","className","as","bg","text","border","body","children"]),m=l()(n,t,i&&"bg-"+i,s&&"text-"+s,u&&"border-"+u);return c.a.createElement(re.Provider,{value:this.state.cardContext},c.a.createElement(a,r({className:m},f),d?c.a.createElement(ie,null,p):p))},t}(c.a.Component);le.defaultProps={as:"div",body:!1};var se=p("h5"),ce=p("h6"),ue=x(le,"card");ue.Img=ae,ue.Title=k("card-title",{Component:se}),ue.Subtitle=k("card-subtitle",{Component:ce}),ue.Body=ie,ue.Link=k("card-link",{Component:"a"}),ue.Text=k("card-text",{Component:"p"}),ue.Header=k("card-header"),ue.Footer=k("card-footer"),ue.ImgOverlay=k("card-img-overlay");var de=ue,pe=k("card-columns"),fe=k("card-deck"),me=k("card-group"),he=n(15),ge=n.n(he),be=n(68),ve=n.n(be),ye=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.className,a=e.bsPrefix,i=o(e,["as","className","bsPrefix"]);return c.a.createElement(t,r({},i,{className:l()(n,a)}))},t}(c.a.Component);ye.defaultProps={as:"div"};var xe=x(ye,"carousel-caption"),we=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.children,a=e.className,i=o(e,["bsPrefix","children","className"]);return c.a.createElement("div",r({},i,{className:l()(a,t)}),n)},t}(c.a.Component),"carousel-item");function Ee(e,t){var n=0;return c.a.Children.map(e,function(e){return c.a.isValidElement(e)?t(e,n++):e})}function ke(e,t){var n=0;c.a.Children.forEach(e,function(e){c.a.isValidElement(e)&&t(e,n++)})}var _e=function(e){return c.a.Children.toArray(e).filter(c.a.isValidElement).length},Ce={slide:!0,fade:!1,interval:5e3,keyboard:!0,pauseOnHover:!0,wrap:!0,indicators:!0,controls:!0,activeIndex:0,prevIcon:c.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-prev-icon"}),prevLabel:"Previous",nextIcon:c.a.createElement("span",{"aria-hidden":"true",className:"carousel-control-next-icon"}),nextLabel:"Next"},Te=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).handleSlideEnd=function(){var e=r._pendingIndex;r._isSliding=!1,r._pendingIndex=null,null!=e?r.to(e):r.cycle()},r.handleMouseOut=function(){r.cycle()},r.handleMouseOver=function(){r.props.pauseOnHover&&r.pause()},r.handleKeyDown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.key){case"ArrowLeft":e.preventDefault(),r.handlePrev(e);break;case"ArrowRight":e.preventDefault(),r.handleNext(e)}},r.handleNextWhenVisible=function(){r.isUnmounted||document.hidden||"hidden"===ge()(r.carousel.current,"visibility")||r.handleNext()},r.handleNext=function(e){if(!r._isSliding){var t=r.props,n=t.wrap,o=t.activeIndex+1;if(o>_e(r.props.children)-1){if(!n)return;o=0}r.select(o,e,"next")}},r.handlePrev=function(e){if(!r._isSliding){var t=r.props,n=t.wrap,o=t.activeIndex-1;if(o<0){if(!n)return;o=_e(r.props.children)-1}r.select(o,e,"prev")}},r.state={prevClasses:"",currentClasses:"active"},r.isUnmounted=!1,r.carousel=c.a.createRef(),r}a(t,e);var n=t.prototype;return n.componentDidMount=function(){this.cycle()},t.getDerivedStateFromProps=function(e,t){var n=t.activeIndex;if(e.activeIndex!==n){var r=_e(e.children)-1,o=Math.max(0,Math.min(e.activeIndex,r));return{direction:0===o&&n>=r||n<=o?"next":"prev",previousActiveIndex:n,activeIndex:o}}return null},n.componentDidUpdate=function(e,t){var n=this,r=this.props,o=r.bsPrefix;if(r.slide&&this.state.activeIndex!==t.activeIndex&&!this._isSliding){var a,i,s=this.state,c=s.activeIndex,u=s.direction;"next"===u?(a=o+"-item-next",i=o+"-item-left"):"prev"===u&&(a=o+"-item-prev",i=o+"-item-right"),this._isSliding=!0,this.pause(),this.safeSetState({prevClasses:"active",currentClasses:a},function(){var e=n.carousel.current.children[c];P(e),n.safeSetState({prevClasses:l()("active",i),currentClasses:l()(a,i)},function(){return ve.a.end(e,function(){return n.safeSetState({prevClasses:"",currentClasses:"active"},n.handleSlideEnd)})})})}},n.componentWillUnmount=function(){clearTimeout(this.timeout),this.isUnmounted=!0},n.safeSetState=function(e,t){var n=this;this.isUnmounted||this.setState(e,function(){return!n.isUnmounted&&t()})},n.pause=function(){this._isPaused=!0,clearInterval(this._interval),this._interval=null},n.cycle=function(){this._isPaused=!1,clearInterval(this._interval),this._interval=null,this.props.interval&&!this._isPaused&&(this._interval=setInterval(document.visibilityState?this.handleNextWhenVisible:this.handleNext,this.props.interval))},n.to=function(e,t){var n=this.props.children;e<0||e>_e(n)-1||(this._isSliding?this._pendingIndex=e:this.select(e,t))},n.select=function(e,t,n){var r=this;clearTimeout(this.selectThrottle),t&&t.persist&&t.persist(),this.selectThrottle=setTimeout(function(){clearTimeout(r.timeout);var o=r.props,a=o.activeIndex,i=o.onSelect;e===a||r._isSliding||r.isUnmounted||i(e,n||(e<a?"prev":"next"),t)},50)},n.renderControls=function(e){var t=this.props.bsPrefix,n=e.wrap,r=e.children,o=e.activeIndex,a=e.prevIcon,i=e.nextIcon,l=e.prevLabel,s=e.nextLabel,u=_e(r);return[(n||0!==o)&&c.a.createElement(F,{key:"prev",className:t+"-control-prev",onClick:this.handlePrev},a,l&&c.a.createElement("span",{className:"sr-only"},l)),(n||o!==u-1)&&c.a.createElement(F,{key:"next",className:t+"-control-next",onClick:this.handleNext},i,s&&c.a.createElement("span",{className:"sr-only"},s))]},n.renderIndicators=function(e,t){var n=this,r=this.props.bsPrefix,o=[];return ke(e,function(e,r){o.push(c.a.createElement("li",{key:r,className:r===t?"active":null,onClick:function(e){return n.to(r,e)}})," ")}),c.a.createElement("ol",{className:r+"-indicators"},o)},n.render=function(){var e=this.props,t=e.bsPrefix,n=e.slide,a=e.fade,i=e.indicators,u=e.controls,d=e.wrap,p=e.prevIcon,f=e.prevLabel,m=e.nextIcon,h=e.nextLabel,g=e.className,b=e.children,v=e.keyboard,y=(e.activeIndex,e.pauseOnHover,e.interval,e.onSelect,e.onSlideEnd,o(e,["bsPrefix","slide","fade","indicators","controls","wrap","prevIcon","prevLabel","nextIcon","nextLabel","className","children","keyboard","activeIndex","pauseOnHover","interval","onSelect","onSlideEnd"])),x=this.state,w=x.activeIndex,E=x.previousActiveIndex,k=x.prevClasses,_=x.currentClasses;return c.a.createElement("div",r({},y,{className:l()(g,t,n&&"slide",a&&t+"-fade"),onKeyDown:v?this.handleKeyDown:void 0,onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut}),i&&this.renderIndicators(b,w),c.a.createElement("div",{className:t+"-inner",ref:this.carousel},Ee(b,function(e,n){var r=n===w,o=n===E;return Object(s.cloneElement)(e,{className:l()(e.props.className,t+"-item",r&&_,o&&k)})})),u&&this.renderControls({wrap:d,children:b,activeIndex:w,prevIcon:p,prevLabel:f,nextIcon:m,nextLabel:h}))},t}(c.a.Component);Te.defaultProps=Ce;var Se=x(d()(Te,{activeIndex:"onSelect"}),"carousel");Se.Caption=xe,Se.Item=we;var Oe=Se,Pe=["xl","lg","md","sm","xs"],Ne=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]),s=[],u=[];return Pe.forEach(function(e){var n,r,o,a=i[e];if(delete i[e],null!=a&&"object"==typeof a){var l=a.span;n=void 0===l||l,r=a.offset,o=a.order}else n=a;var c="xs"!==e?"-"+e:"";null!=n&&s.push(!0===n?""+t+c:""+t+c+"-"+n),null!=o&&u.push("order"+c+"-"+o),null!=r&&u.push("offset"+c+"-"+r)}),s.length||s.push(t),c.a.createElement(a,r({},i,{className:l.a.apply(void 0,[n].concat(s,u))}))},t}(c.a.Component);Ne.defaultProps={as:"div"};var je,Ie=x(Ne,"col"),De={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};var Ae=((je={})[C.EXITED]="collapse",je[C.EXITING]="collapsing",je[C.ENTERING]="collapsing",je[C.ENTERED]="collapse show",je),Re={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,dimension:"height",getDimensionValue:function(e,t){var n=t["offset"+e[0].toUpperCase()+e.slice(1)],r=De[e];return n+parseInt(ge()(t,r[0]),10)+parseInt(ge()(t,r[1]),10)}},Me=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleEnter=function(e){e.style[t.getDimension()]="0"},t.handleEntering=function(e){var n=t.getDimension();e.style[n]=t._getScrollDimensionValue(e,n)},t.handleEntered=function(e){e.style[t.getDimension()]=null},t.handleExit=function(e){var n=t.getDimension();e.style[n]=t.props.getDimensionValue(n,e)+"px",P(e)},t.handleExiting=function(e){e.style[t.getDimension()]="0"},t}a(t,e);var n=t.prototype;return n.getDimension=function(){return"function"==typeof this.props.dimension?this.props.dimension():this.props.dimension},n._getScrollDimensionValue=function(e,t){return e["scroll"+t[0].toUpperCase()+t.slice(1)]+"px"},n.render=function(){var e=this,t=this.props,n=t.onEnter,a=t.onEntering,i=t.onEntered,s=t.onExit,u=t.onExiting,d=t.className,p=t.children,f=o(t,["onEnter","onEntering","onEntered","onExit","onExiting","className","children"]);delete f.dimension,delete f.getDimensionValue;var m=M(this.handleEnter,n),h=M(this.handleEntering,a),g=M(this.handleEntered,i),b=M(this.handleExit,s),v=M(this.handleExiting,u);return c.a.createElement(T.a,r({addEndListener:O.a},f,{"aria-expanded":f.role?f.in:null,onEnter:m,onEntering:h,onEntered:g,onExit:b,onExiting:v}),function(t,n){return c.a.cloneElement(p,r({},n,{className:l()(d,p.props.className,Ae[t],"width"===e.getDimension()&&"width")}))})},t}(c.a.Component);Me.defaultProps=Re;var Le=Me,Ue=n(12),Fe=n.n(Ue),He=n(47),ze=n.n(He),Be=n(7),We=n.n(Be),qe=n(45),Ve=n.n(qe),Ke=c.a.createContext(null),Ge=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.alignRight,i=e.rootCloseEvent,s=e.flip,u=e.popperConfig,d=e.show,p=e.as,f=o(e,["bsPrefix","className","alignRight","rootCloseEvent","flip","popperConfig","show","as"]);return c.a.createElement(Ke.Consumer,null,function(e){return c.a.createElement(Ve.a,{flip:s,show:d,alignEnd:a,usePopper:!e,popperConfig:u,rootCloseEvent:i},function(e){var o=e.placement,a=e.show,i=e.alignEnd,s=e.close,u=e.props;!function(e){var t=e.ref;e.ref=t.__wrapped||(t.__wrapped=function(e){return t(Object(Be.findDOMNode)(e))})}(u),"string"!=typeof p&&(u.show=a,u.close=s,u.alignRight=i);var d=f.style;return o&&(d=r({},d,u.style),f["x-placement"]=o),c.a.createElement(p,r({},f,u,{style:d,className:l()(n,t,a&&"show",i&&t+"-right")}))})})},t}(c.a.Component);Ge.defaultProps={alignRight:!1,as:"div",flip:!0};var $e=x(Ge,"dropdown-menu"),Xe=(n(29),n(44)),Ye=n.n(Xe),Qe=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.split,a=e.className,i=e.children,s=e.childBsPrefix,u=e.as,d=o(e,["bsPrefix","split","className","children","childBsPrefix","as"]);return c.a.createElement(Ye.a,null,function(e){var o=e.toggle,p=e.props;return c.a.createElement(u,r({onClick:o,bsPrefix:s,className:l()(a,t,n&&t+"-split")},function(e){var t=e.ref;return e.ref=t.__wrapped||(t.__wrapped=function(e){return t(Object(Be.findDOMNode)(e))}),e}(p),d),i)})},t}(c.a.Component);Qe.defaultProps={as:J};var Je=x(Qe,"dropdown-toggle"),Ze=function(e,t){return null!=e?String(e):t||null},et=c.a.createContext(),tt=c.a.createContext(null),nt=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var n=t.props,r=n.disabled,o=n.onSelect,a=n.onClick,i=n.eventKey,l=n.href,s=Ze(i,l);r||(a&&a(e),o&&o(s,e),null!==s&&t.contextSelect&&t.contextSelect(s,e))},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.active,a=e.className,i=e.children,s=(e.eventKey,e.onSelect,e.as),u=o(e,["bsPrefix","active","className","children","eventKey","onSelect","as"]);return c.a.createElement(s,r({},u,{className:l()(a,t,n&&"active",u.disabled&&"disabled"),onClick:this.handleClick}),i)},t}(c.a.Component);nt.defaultProps={as:F,disabled:!1};var rt=Fe()([et,tt],function(e,t,n){var r=(t||{}).activeKey,o=Ze(n.eventKey,n.href);return{onSelect:M(n.onSelect,e),active:null==n.active&&null!=o?Ze(r)===o:n.active}},x(nt,"dropdown-item")),ot=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e,n){t.props.onSelect&&t.props.onSelect(e,n),t.handleToggle(!1,n,"select")},t.handleToggle=function(e,n,r){void 0===r&&(r=n.type),n.currentTarget===document&&(r="rootClose"),t.props.onToggle(e,n,{source:r})},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.drop,a=e.show,i=e.className,s=e.as,u=e.alignRight,d=(e.onSelect,e.onToggle,e.navbar,o(e,["bsPrefix","drop","show","className","as","alignRight","onSelect","onToggle","navbar"]));return delete d.onToggle,c.a.createElement(et.Provider,{value:this.handleSelect},c.a.createElement(ze.a.ControlledComponent,{drop:n,show:a,alignEnd:u,onToggle:this.handleToggle,itemSelector:"."+t+"-item:not(.disabled):not(:disabled)"},function(e){var o=e.props;return c.a.createElement(s,r({},d,o,{className:l()(i,a&&"show",(!n||"down"===n)&&t,"up"===n&&"dropup","right"===n&&"dropright","left"===n&&"dropleft")}))}))},t}(c.a.Component);ot.defaultProps={as:"div",navbar:!1};var at=x(ze.a.deferControlTo(ot),"dropdown"),it=Fe()(et,function(e,t){return{onSelect:M(t.onSelect,e)}},at);it.Toggle=Je,it.Menu=$e,it.Item=rt,it.Header=k("dropdown-header",{defaultProps:{role:"heading"}}),it.Divider=k("dropdown-divider",{defaultProps:{role:"separator"}});var lt=it,st=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.title,n=e.children,r=e.bsPrefix,a=e.rootCloseEvent,i=e.variant,l=e.size,s=e.menuRole,u=e.disabled,d=e.href,p=e.id,f=o(e,["title","children","bsPrefix","rootCloseEvent","variant","size","menuRole","disabled","href","id"]);return c.a.createElement(lt,f,c.a.createElement(lt.Toggle,{id:p,href:d,size:l,variant:i,disabled:u,childBsPrefix:r},t),c.a.createElement(lt.Menu,{role:s,rootCloseEvent:a},n))},t}(c.a.Component),ct=n(65),ut=n.n(ct),dt=c.a.createContext({controlId:void 0});dt.Transform=ut()(dt);var pt=dt;function ft(e){var t=e.bsPrefix,n=e.innerRef,a=e.className,i=e.children,s=e.controlId,u=e.as,d=o(e,["bsPrefix","innerRef","className","children","controlId","as"]);return c.a.createElement(pt.Provider,{value:{controlId:s}},c.a.createElement(u,r({},d,{ref:n,className:l()(a,t)}),i))}ft.defaultProps={as:"div"};var mt=x(ft,"form-group"),ht=(n(4),function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.className,a=e.type,i=o(e,["as","className","type"]);return c.a.createElement(t,r({},i,{className:l()(n,a&&a+"-feedback")}))},t}(c.a.Component));ht.defaultProps={type:"valid",as:"div"};var gt=ht,bt=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e,t,n=this.props,a=n.bsPrefix,i=n.type,s=n.size,u=n.id,d=n.inputRef,p=n.className,f=n.isValid,m=n.isInvalid,h=n.plaintext,g=n.readOnly,b=n.as,v=o(n,["bsPrefix","type","size","id","inputRef","className","isValid","isInvalid","plaintext","readOnly","as"]);if(h)(t={})[a+"-plaintext"]=!0,e=t;else if("file"===i){var y;(y={})[a+"-file"]=!0,e=y}else{var x;(x={})[a]=!0,x[a+"-"+s]=s,e=x}return c.a.createElement(b,r({},v,{type:i,id:u,ref:d,readOnly:g,className:l()(p,e,f&&"is-valid",m&&"is-invalid")}))},t}(c.a.Component);bt.defaultProps={as:"input"};var vt=Fe()(pt,function(e,t){var n=e.controlId;return{id:t.id||n}},x(bt,{prefix:"form-control",forwardRefAs:"inputRef"}));vt.Feedback=gt;var yt=vt;function xt(e){var t=e.id,n=e.bsPrefix,a=e.className,i=e.isValid,s=e.isInvalid,u=e.innerRef,d=e.isStatic,p=o(e,["id","bsPrefix","className","isValid","isInvalid","innerRef","isStatic"]);return c.a.createElement(pt.Consumer,null,function(e){var o=e.controlId,f=e.custom;return c.a.createElement("input",r({},p,{ref:u,id:t||o,className:l()(a,!f&&n,f&&"custom-control-input",i&&"is-valid",s&&"is-invalid",d&&"position-static")}))})}xt.defaultProps={type:"checkbox"};var wt=x(xt,"form-check-input");function Et(e){var t=e.bsPrefix,n=e.className,a=e.innerRef,i=e.htmlFor,s=o(e,["bsPrefix","className","innerRef","htmlFor"]);return c.a.createElement(pt.Consumer,null,function(e){var o=e.controlId,u=e.custom;return c.a.createElement("label",r({},s,{ref:a,htmlFor:i||o,className:l()(n,!u&&t,u&&"custom-control-label")}))})}Et.defaultProps={type:"checkbox"};var kt=x(Et,"form-check-label"),_t=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.id,n=e.bsPrefix,a=e.inline,i=e.disabled,s=e.isValid,u=e.isInvalid,d=e.feedback,p=e.inputRef,f=e.className,m=e.style,h=e.title,g=e.type,b=e.label,v=e.children,y=e.custom,x=o(e,["id","bsPrefix","inline","disabled","isValid","isInvalid","feedback","inputRef","className","style","title","type","label","children","custom"]),w=null!=b&&!1!==b&&!v,E=c.a.createElement(wt,r({},x,{type:g,ref:p,isValid:s,isInvalid:u,isStatic:!w,disabled:i}));return c.a.createElement(pt.Transform,{mapToValue:function(e){var n=e.controlId;return{controlId:t||n,custom:y}}},c.a.createElement("div",{style:m,className:l()(f,!y&&n,y&&"custom-control custom-"+g,a&&(y?"custom-control":n)+"-inline")},v||c.a.createElement(c.a.Fragment,null,E,w&&c.a.createElement(kt,{title:h},b),(s||u)&&c.a.createElement(gt,{type:s?"valid":"invalid"},d))))},t}(c.a.Component);_t.defaultProps={type:"checkbox",inline:!1,disabled:!1,isValid:!1,isInvalid:!1,title:""};var Ct=x(_t,{forwardRefAs:"inputRef",prefix:"form-check"});Ct.Input=wt,Ct.Label=kt;var Tt=Ct;function St(e){var t=e.bsPrefix,n=e.column,a=e.srOnly,i=e.className,s=e.innerRef,u=o(e,["bsPrefix","column","srOnly","className","innerRef"]),d=l()(i,t,a&&"sr-only",n&&"col-form-label");return n?c.a.createElement(Ie,r({},u,{className:d,as:"label"})):c.a.createElement("label",r({},u,{ref:s,className:d}))}St.defaultProps={column:!1,srOnly:!1};var Ot=Fe()(pt,function(e,t){var n=e.controlId;return{htmlFor:t.htmlFor||n}},x(St,"form-label"));function Pt(e){var t=e.bsPrefix,n=e.className,a=e.innerRef,i=e.as,s=o(e,["bsPrefix","className","innerRef","as"]);return c.a.createElement(i,r({},s,{ref:a,className:l()(n,t)}))}Pt.defaultProps={as:"small"};var Nt=x(Pt,"form-text");function jt(e){var t=e.bsPrefix,n=e.inline,a=e.className,i=e.innerRef,s=e.validated,u=e.as,d=o(e,["bsPrefix","inline","className","innerRef","validated","as"]);return c.a.createElement(u,r({},d,{ref:i,className:l()(a,s&&"was-validated",n&&t+"-inline")}))}jt.defaultProps={inline:!1,as:"form"};var It=x(jt,"form");It.Row=k("form-row"),It.Group=mt,It.Control=yt,It.Check=Tt,It.Label=Ot,It.Text=Nt;var Dt=It,At=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.fluid,a=e.as,i=e.className,s=o(e,["bsPrefix","fluid","as","className"]);return c.a.createElement(a,r({},s,{className:l()(i,n?t+"-fluid":t)}))},t}(c.a.Component);At.defaultProps={as:"div",fluid:!1};var Rt=x(At,"container"),Mt=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.fluid,i=e.rounded,s=e.roundedCircle,u=e.thumbnail,d=o(e,["bsPrefix","className","fluid","rounded","roundedCircle","thumbnail"]),p=l()(a&&t+"-fluid",i&&"rounded",s&&"rounded-circle",u&&t+"-thumbnail");return c.a.createElement("img",r({},d,{className:l()(n,p)}))},t}(c.a.Component);Mt.defaultProps={fluid:!1,rounded:!1,roundedCircle:!1,thumbnail:!1};var Lt=x(Mt,"img"),Ut=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=o(e,["className"]);return c.a.createElement(Lt,r({},n,{className:l()(t,"figure-img")}))},t}(c.a.Component);Ut.defaultProps={fluid:!0};var Ft=Ut,Ht=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},t}(c.a.Component);Ht.defaultProps={as:"figcaption"};var zt=x(Ht,"figure-caption"),Bt=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},t}(c.a.Component);Bt.defaultProps={as:"figure"};var Wt=x(Bt,"figure");Wt.Image=Ft,Wt.Caption=zt;var qt=Wt,Vt=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.size,a=e.className,i=e.as,s=o(e,["bsPrefix","size","className","as"]);return c.a.createElement(i,r({},s,{className:l()(a,t,n&&t+"-"+n)}))},t}(c.a.Component);Vt.defaultProps={as:"div"};var Kt=k("input-group-append"),Gt=k("input-group-prepend"),$t=k("input-group-text",{Component:"span"}),Xt=x(Vt,"input-group");Xt.Text=$t,Xt.Radio=function(e){return c.a.createElement($t,null,c.a.createElement("input",r({type:"radio"},e)))},Xt.Checkbox=function(e){return c.a.createElement($t,null,c.a.createElement("input",r({type:"checkbox"},e)))},Xt.Append=Kt,Xt.Prepend=Gt;var Yt=Xt,Qt=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e,t=this.props,n=t.as,a=t.className,i=t.fluid,s=t.bsPrefix,u=o(t,["as","className","fluid","bsPrefix"]),d=((e={})[s]=!0,e[s+"-fluid"]=i,e);return c.a.createElement(n,r({},u,{className:l()(a,d)}))},t}(c.a.Component);Qt.defaultProps={as:"div",fluid:!1};var Jt=x(Qt,"jumbotron"),Zt=n(13),en=n.n(Zt),tn=c.a.createContext(null),nn=function(){},rn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleSelect=function(e,n){var r=t.props,o=r.onSelect,a=r.parentOnSelect;null!=e&&(o&&o(e,n),a&&a(e,n))},t.handleKeyDown=function(e){var n,r=t.props.onKeyDown;switch(r&&r(e),e.key){case"ArrowLeft":case"ArrowUp":n=t.getNextActiveChild(-1);break;case"ArrowRight":case"ArrowDown":n=t.getNextActiveChild(1);break;default:return}n&&(e.preventDefault(),t.handleSelect(n.dataset.rbEventKey,e),t._needsRefocus=!0)},t.attachRef=function(e){t.listNode=e},t.state={navContext:null},t}a(t,e),t.getDerivedStateFromProps=function(e){var t=e.activeKey,n=e.getControlledId,r=e.getControllerId;return{navContext:{role:e.role,activeKey:Ze(t),getControlledId:n||nn,getControllerId:r||nn}}};var n=t.prototype;return n.componentDidUpdate=function(){if(this._needsRefocus&&this.listNode){var e=this.listNode.querySelector("[data-rb-event-key].active");e&&e.focus()}},n.getNextActiveChild=function(e){if(!this.listNode)return null;var t=en()(this.listNode,"[data-rb-event-key]:not(.disabled)"),n=this.listNode.querySelector(".active"),r=t.indexOf(n);if(-1===r)return null;var o=r+e;return o>=t.length&&(o=0),o<0&&(o=t.length-1),t[o]},n.render=function(){var e=this.props,t=e.as,n=(e.onSelect,e.parentOnSelect,e.getControlledId,e.getControllerId,e.activeKey,o(e,["as","onSelect","parentOnSelect","getControlledId","getControllerId","activeKey"]));return"tablist"===n.role&&(n.onKeyDown=this.handleKeyDown),c.a.createElement(et.Provider,{value:this.handleSelect},c.a.createElement(tt.Provider,{value:this.state.navContext},c.a.createElement(t,r({},n,{onKeyDown:this.handleKeyDown,ref:this.attachRef}))))},t}(c.a.Component);rn.defaultProps={as:"ul"};var on=Fe()([et,tn],function(e,t,n){var r=n.role;if(!t)return{parentOnSelect:e};var o=t.activeKey,a=t.getControllerId,i=t.getControlledId;return{activeKey:o,parentOnSelect:e,role:r||"tablist",getControllerId:a,getControlledId:i}},rn),an=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.active,a=t.className,i=t.tabIndex,s=t.eventKey,u=t.onSelect,d=t.as,p=o(t,["active","className","tabIndex","eventKey","onSelect","as"]),f=Ze(s,p.href);return c.a.createElement(et.Consumer,null,function(t){return c.a.createElement(tt.Consumer,null,function(o){var s=n;return o&&(p.role||"tablist"!==o.role||(p.role="tab"),p["data-rb-event-key"]=f,p.id=o.getControllerId(f),p["aria-controls"]=o.getControlledId(f),s=null==n&&null!=f?o.activeKey===f:n),"tab"===p.role&&(p.tabIndex=s?i:-1,p["aria-selected"]=s),c.a.createElement(d,r({},p,{className:l()(a,s&&"active"),onClick:function(n){var r=e.props.onClick;r&&r(n),null!=f&&(u&&u(f,n),t&&t(f,n))}}))})})},t}(c.a.Component);an.defaultProps={disabled:!1};var ln=an,sn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var n=t.props,r=n.onClick;if(n.disabled)return e.preventDefault(),void e.stopPropagation();r&&r(e)},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.active,a=e.disabled,i=e.className,s=e.variant,u=e.action,d=e.as,p=e.eventKey,f=o(e,["bsPrefix","active","disabled","className","variant","action","as","eventKey"]);return c.a.createElement(ln,r({},f,{eventKey:Ze(p,f.href),as:d||(u?f.href?"a":"button":"div"),onClick:this.handleClick,className:l()(i,t,n&&"active",a&&"disabled",s&&t+"-"+s,u&&t+"-action")}))},t}(c.a.Component);sn.defaultProps={variant:null,active:!1,disabled:!1};var cn=x(sn,"list-group-item"),un=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.className,n=e.bsPrefix,a=e.variant,i=o(e,["className","bsPrefix","variant"]);return c.a.createElement(on,r({},i,{className:l()(t,n,a&&n+"-"+a)}))},t}(c.a.Component);un.defaultProps={as:"div",variant:null};var dn=d()(x(un,"list-group"),{activeKey:"onSelect"});dn.Item=cn;var pn=dn,fn=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]);return c.a.createElement(a,r({},i,{className:l()(n,t)}))},t}(c.a.Component);fn.defaultProps={as:"div"};var mn=x(fn,"media");mn.Body=k("media-body");var hn=mn,gn=n(34),bn=n.n(gn),vn=n(20),yn=n.n(vn),xn=n(14),wn=n.n(xn),En=n(21),kn=n.n(En),_n=n(64),Cn=n.n(_n),Tn=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},t}(c.a.Component);Tn.defaultProps={as:"div"};var Sn=x(Tn,"modal-body"),On=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.centered,i=e.size,s=e.children,u=o(e,["bsPrefix","className","centered","size","children"]),d=t+"-dialog";return c.a.createElement("div",r({},u,{className:l()(d,n,i&&t+"-"+i,a&&d+"-centered")}),c.a.createElement("div",{className:l()(t+"-content")},s))},t}(c.a.Component),"modal"),Pn=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},t}(c.a.Component);Pn.defaultProps={as:"div"};var Nn=x(Pn,"modal-footer"),jn=c.a.createContext({onHide:function(){}}),In=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.closeLabel,a=e.closeButton,i=e.onHide,s=e.className,u=e.children,d=o(e,["bsPrefix","closeLabel","closeButton","onHide","className","children"]);return c.a.createElement(jn.Consumer,null,function(e){return c.a.createElement("div",r({},d,{className:l()(s,t)}),u,a&&c.a.createElement(A,{label:n,onClick:M(e&&e.onHide,i)}))})},t}(c.a.Component);In.defaultProps={closeLabel:"Close",closeButton:!1};var Dn=x(In,"modal-header"),An=p("h4"),Rn=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.as,n=e.bsPrefix,a=e.className,i=o(e,["as","bsPrefix","className"]);return c.a.createElement(t,r({},i,{className:l()(a,n)}))},t}(c.a.Component);Rn.defaultProps={as:An};var Mn=x(Rn,"modal-title"),Ln=n(43),Un=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Fn=".sticky-top",Hn=".navbar-toggler",zn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).adjustAndStore=function(e,t,n){var r=t.style[e];t.dataset[e]=r,ge()(t,e,parseFloat(ge()(t,e))+n+"px")},t.restore=function(e,t){var n=t.dataset[e];void 0!==n&&(delete t.dataset[e],ge()(t,e,n))},t}a(t,e);var n=t.prototype;return n.setContainerStyle=function(t,n){var r=this;if(e.prototype.setContainerStyle.call(this,t,n),t.overflowing){var o=kn()();en()(n,Un).forEach(function(e){return r.adjustAndStore("paddingRight",e,o)}),en()(n,Fn).forEach(function(e){return r.adjustAndStore("margingRight",e,-o)}),en()(n,Hn).forEach(function(e){return r.adjustAndStore("margingRight",e,o)})}},n.removeContainerStyle=function(t,n){var r=this;e.prototype.removeContainerStyle.call(this,t,n),en()(n,Un).forEach(function(e){return r.restore("paddingRight",e)}),en()(n,Fn).forEach(function(e){return r.restore("margingRight",e)}),en()(n,Hn).forEach(function(e){return r.restore("margingRight",e)})},t}(n.n(Ln).a),Bn={show:!1,backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,animation:!0,dialogAs:On,manager:new zn};function Wn(e){return c.a.createElement(I,e)}function qn(e){return c.a.createElement(I,e)}var Vn=function(e){function t(t,n){var o;return(o=e.call(this,t,n)||this).setModalRef=function(e){o._modal=e},o.handleDialogMouseDown=function(){o._waitingForMouseUp=!0},o.handleMouseUp=function(e){o._waitingForMouseUp&&e.target===o._modal.dialog&&(o._ignoreBackdropClick=!0),o._waitingForMouseUp=!1},o.handleClick=function(e){o._ignoreBackdropClick||e.target!==e.currentTarget?o._ignoreBackdropClick=!1:o.props.onHide()},o.handleEnter=function(e){var t;e&&(e.style.display="block",o.updateDialogStyle(e));for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];o.props.onEnter&&(t=o.props).onEnter.apply(t,[e].concat(r))},o.handleEntering=function(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];o.props.onEntering&&(t=o.props).onEntering.apply(t,[e].concat(r)),bn.a.on(window,"resize",o.handleWindowResize)},o.handleExited=function(e){var t;e&&(e.style.display="");for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];o.props.onExited&&(t=o.props).onExited.apply(t,r),bn.a.off(window,"resize",o.handleWindowResize)},o.handleWindowResize=function(){o.updateDialogStyle(o._modal.dialog)},o.renderBackdrop=function(e){var t=o.props,n=t.bsPrefix,a=t.backdropClassName;return c.a.createElement("div",r({},e,{className:l()(n+"-backdrop",a)}))},o.state={style:{}},o.modalContext={onHide:function(){return o.props.onHide()}},o}a(t,e);var n=t.prototype;return n.componentWillUnmount=function(){bn.a.off(window,"resize",this.handleWindowResize)},n.updateDialogStyle=function(e){if(wn.a){var t=this.props.manager.isContainerOverflowing(this._modal),n=e.scrollHeight>yn()(e).documentElement.clientHeight;this.setState({style:{paddingRight:t&&!n?kn()():void 0,paddingLeft:!t&&n?kn()():void 0}})}},n.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.style,i=e.dialogClassName,s=e.children,u=e.dialogAs,d=e.show,p=e.manager,f=e.animation,m=e.backdrop,h=e.keyboard,g=e.onEscapeKeyDown,b=e.onShow,v=e.onHide,y=e.container,x=e.autoFocus,w=e.enforceFocus,E=e.restoreFocus,k=e.onEntered,_=e.onExit,C=e.onExiting,T=(e.onExited,e.onEntering,e.onEnter,e.onEntering,e.backdropClassName,e.backdropStyle,o(e,["bsPrefix","className","style","dialogClassName","children","dialogAs","show","manager","animation","backdrop","keyboard","onEscapeKeyDown","onShow","onHide","container","autoFocus","enforceFocus","restoreFocus","onEntered","onExit","onExiting","onExited","onEntering","onEnter","onEntering","backdropClassName","backdropStyle"])),S=!0===m?this.handleClick:null;return c.a.createElement(jn.Provider,{value:this.modalContext},c.a.createElement(Cn.a,{show:d,backdrop:m,container:y,keyboard:h,autoFocus:x,enforceFocus:w,restoreFocus:E,onEscapeKeyDown:g,onShow:b,onHide:v,onEntered:k,onExit:_,onExiting:C,manager:p,ref:this.setModalRef,style:r({},a,this.state.style),className:l()(n,t),containerClassName:t+"-open",transition:f?Wn:void 0,backdropTransition:f?qn:void 0,renderBackdrop:this.renderBackdrop,onClick:S,onMouseUp:this.handleMouseUp,onEnter:this.handleEnter,onEntering:this.handleEntering,onExited:this.handleExited},c.a.createElement(u,r({},T,{onMouseDown:this.handleDialogMouseDown,className:i}),s)))},t}(c.a.Component);Vn.defaultProps=Bn;var Kn=x(Vn,"modal");Kn.Body=Sn,Kn.Header=Dn,Kn.Title=Mn,Kn.Footer=Nn,Kn.Dialog=On,Kn.TRANSITION_DURATION=300,Kn.BACKDROP_TRANSITION_DURATION=150;var Gn=Kn,$n=(n(119),function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.children,i=e.as,s=o(e,["bsPrefix","className","children","as"]);return c.a.createElement(i,r({},s,{className:l()(n,t)}),a)},t}(c.a.Component));$n.defaultProps={as:"div"};var Xn=x($n,"nav-item"),Yn={disabled:!1,as:F};function Qn(e){var t=e.bsPrefix,n=e.disabled,a=e.className,i=e.href,s=e.eventKey,u=e.onSelect,d=e.innerRef,p=e.as,f=o(e,["bsPrefix","disabled","className","href","eventKey","onSelect","innerRef","as"]);return c.a.createElement(ln,r({},f,{href:i,ref:d,eventKey:s,as:p,disabled:n,onSelect:u,className:l()(a,t,n&&"disabled")}))}Qn.defaultProps=Yn;var Jn=x(Qn,"nav-link"),Zn=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e,t=this.props,n=t.as,a=t.bsPrefix,i=t.navbarBsPrefix,s=t.cardHeaderBsPrefix,u=t.variant,d=t.fill,p=t.justify,f=t.navbar,m=t.className,h=t.children,g=t.activeKey,b=o(t,["as","bsPrefix","navbarBsPrefix","cardHeaderBsPrefix","variant","fill","justify","navbar","className","children","activeKey"]);return c.a.createElement(on,r({as:n,activeKey:g,className:l()(m,(e={},e[a]=!f,e[i+"-nav"]=f,e[s+"-"+u]=!!s,e[a+"-"+u]=!!u,e[a+"-fill"]=d,e[a+"-justified"]=p,e))},b),h)},t}(c.a.Component);Zn.defaultProps={justify:!1,fill:!1,as:"div"};var er=d()(x(Zn,"nav"),{activeKey:"onSelect"}),tr=Fe()([Ke,re],function(e,t,n){var r=n.navbar;return e||t?e?{navbarBsPrefix:e.bsPrefix,navbar:null==r||r}:{cardHeaderBsPrefix:t.cardHeaderBsPrefix}:{}},er);tr.Item=Xn,tr.Link=Jn,tr._Nav=Zn;var nr=tr,rr=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.as,i=o(e,["bsPrefix","className","as"]),s=a||(i.href?"a":"span");return c.a.createElement(s,r({},i,{className:l()(n,t)}))},t}(c.a.Component),"navbar-brand"),or=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.children,n=e.bsPrefix,a=o(e,["children","bsPrefix"]);return c.a.createElement(Ke.Consumer,null,function(e){return c.a.createElement(Le,r({in:!(!e||!e.expanded)},a),c.a.createElement("div",{className:n},t))})},t}(c.a.Component),"navbar-collapse"),ar=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleClick=function(e){var n=t.props.onClick,r=t.navbarContext.onToggle;n&&n(e),r&&r()},t}return a(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.bsPrefix,a=t.className,i=t.children,s=t.label,u=t.as,d=o(t,["bsPrefix","className","children","label","as"]);return"button"===u&&(d.type="button"),c.a.createElement(Ke.Consumer,null,function(t){return e.navbarContext=t||{},c.a.createElement(u,r({},d,{onClick:e.handleClick,"aria-label":s,className:l()(a,n,!(!t||!t.expanded)&&"collapsed")}),i||c.a.createElement("span",{className:n+"-icon"}))})},t}(c.a.Component);ar.defaultProps={label:"Toggle navigation",as:"button"};var ir=x(ar,"navbar-toggler"),lr=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).handleCollapse=function(){var e=t.props,n=e.onToggle,r=e.expanded,o=e.collapseOnSelect,a=e.onSelect;a&&a.apply(void 0,arguments),o&&r&&n(!1)},t.handleToggle=function(){var e=t.props;(0,e.onToggle)(!e.expanded)},t.state={navbarContext:{onToggle:t.handleToggle}},t}return a(t,e),t.getDerivedStateFromProps=function(e,t){var n=e.bsPrefix,o=e.expanded;return{navbarContext:r({},t.navbarContext,{bsPrefix:n,expanded:o})}},t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.expand,a=e.variant,i=e.bg,s=e.fixed,u=e.sticky,d=e.className,p=e.children,f=e.as,m=(e.expanded,e.onToggle,e.onSelect,e.collapseOnSelect,o(e,["bsPrefix","expand","variant","bg","fixed","sticky","className","children","as","expanded","onToggle","onSelect","collapseOnSelect"]));void 0===m.role&&"nav"!==f&&(m.role="navigation");var h=t+"-expand";return"string"==typeof n&&(h=h+"-"+n),c.a.createElement(Ke.Provider,{value:this.state.navbarContext},c.a.createElement(et.Provider,{value:this.handleCollapse},c.a.createElement(f,r({},m,{className:l()(d,t,n&&h,a&&t+"-"+a,i&&"bg-"+i,u&&"sticky-"+u,s&&"fixed-"+s)}),p)))},t}(c.a.Component);lr.defaultProps={as:"nav",expand:!0,variant:"light",collapseOnSelect:!1};var sr=x(d()(lr,{expanded:"onToggle"}),"navbar");sr.Brand=rr,sr.Toggle=ir,sr.Collapse=or,sr.Text=k("navbar-text",{Component:"span"});var cr=sr,ur=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.id,n=e.title,a=e.children,i=e.bsPrefix,l=e.rootCloseEvent,s=e.menuRole,u=e.disabled,d=e.active,p=o(e,["id","title","children","bsPrefix","rootCloseEvent","menuRole","disabled","active"]);return c.a.createElement(lt,r({},p,{as:Xn}),c.a.createElement(lt.Toggle,{id:t,eventKey:null,active:d,disabled:u,childBsPrefix:i,as:Jn},n),c.a.createElement(lt.Menu,{role:s,rootCloseEvent:l},a))},t}(c.a.Component);ur.Item=lt.Item,ur.Divider=lt.Divider,ur.Header=lt.Header;var dr=ur,pr=n(63),fr=n.n(pr),mr={transition:I,rootClose:!1,show:!1,placement:"top"};function hr(e){var t=e.children,n=e.transition,a=o(e,["children","transition"]);return n=!0===n?I:n||null,c.a.createElement(fr.a,r({},a,{transition:n}),function(e){var a=e.props,i=e.arrowProps,s=e.show,u=o(e,["props","arrowProps","show"]);return function(e,t){var n=e.ref,r=t.ref;e.ref=n.__wrapped||(n.__wrapped=function(e){return n(Object(Be.findDOMNode)(e))}),t.ref=r.__wrapped||(r.__wrapped=function(e){return r(Object(Be.findDOMNode)(e))})}(a,i),"function"==typeof t?t(r({},u,a,{show:s,arrowProps:i})):c.a.cloneElement(t,r({},u,a,{arrowProps:i,className:l()(t.props.className,!n&&s&&"show"),style:r({},t.props.style,a.style)}))})}hr.defaultProps=mr;var gr=hr,br=n(26),vr=n.n(br),yr=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){return this.props.children},t}(c.a.Component),xr=function(e){return e&&"object"==typeof e?e:{show:e,hide:e}},wr=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).getTarget=function(){return We.a.findDOMNode(r.trigger.current)},r.handleShow=function(){clearTimeout(r._timeout),r._hoverState="show";var e=xr(r.props.delay);e.show?r._timeout=setTimeout(function(){"show"===r._hoverState&&r.show()},e.show):r.show()},r.handleHide=function(){clearTimeout(r._timeout),r._hoverState="hide";var e=xr(r.props.delay);e.hide?r._timeout=setTimeout(function(){"hide"===r._hoverState&&r.hide()},e.hide):r.hide()},r.handleFocus=function(e){var t=r.getChildProps().onFocus;r.handleShow(e),t&&t(e)},r.handleBlur=function(e){var t=r.getChildProps().onBlur;r.handleHide(e),t&&t(e)},r.handleClick=function(e){var t=r.getChildProps().onClick;r.state.show?r.hide():r.show(),t&&t(e)},r.handleMouseOver=function(e){r.handleMouseOverOut(r.handleShow,e,"fromElement")},r.handleMouseOut=function(e){return r.handleMouseOverOut(r.handleHide,e,"toElement")},r.trigger=c.a.createRef(),r.state={show:!!t.defaultShow},r.ariaModifier={enabled:!0,order:900,fn:function(e){var t=e.instance.popper,n=r.getTarget();if(!r.state.show||!n)return e;var o=t.getAttribute("role")||"";return t.id&&"tooltip"===o.toLowerCase()&&n.setAttribute("aria-describedby",t.id),e}},r}a(t,e);var n=t.prototype;return n.componentWillUnmount=function(){clearTimeout(this._timeout)},n.getChildProps=function(){return c.a.Children.only(this.props.children).props},n.handleMouseOverOut=function(e,t,n){var r=t.currentTarget,o=t.relatedTarget||t.nativeEvent[n];o&&o===r||vr()(r,o)||e(t)},n.hide=function(){this.setState({show:!1})},n.show=function(){this.setState({show:!0})},n.render=function(){var e=this.props,t=e.trigger,n=e.overlay,a=e.children,i=e.popperConfig,l=void 0===i?{}:i,u=o(e,["trigger","overlay","children","popperConfig"]);delete u.delay,delete u.defaultShow;var d=c.a.Children.only(a),p={},f=null==t?[]:[].concat(t);return-1!==f.indexOf("click")&&(p.onClick=this.handleClick),-1!==f.indexOf("focus")&&(p.onFocus=this.handleShow,p.onBlur=this.handleHide),-1!==f.indexOf("hover")&&(p.onMouseOver=this.handleMouseOver,p.onMouseOut=this.handleMouseOut),c.a.createElement(c.a.Fragment,null,c.a.createElement(yr,{ref:this.trigger},Object(s.cloneElement)(d,p)),c.a.createElement(gr,r({},u,{popperConfig:r({},l,{modifiers:r({},l.modifiers,{ariaModifier:this.ariaModifier})}),show:this.state.show,onHide:this.handleHide,target:this.getTarget}),n))},t}(c.a.Component);wr.defaultProps={defaultOverlayShown:!1,trigger:["hover","focus"]};var Er=wr;function kr(e){var t=e.active,n=e.disabled,a=e.className,i=e.style,s=e.activeLabel,u=e.children,d=o(e,["active","disabled","className","style","activeLabel","children"]),p=t||n?"span":F;return c.a.createElement("li",{style:i,className:l()(a,"page-item",{active:t,disabled:n})},c.a.createElement(p,r({className:"page-link",disabled:n},d),u,t&&s&&c.a.createElement("span",{className:"sr-only"},s)))}function _r(e,t,n){var r,i;return void 0===n&&(n=e),i=r=function(e){function r(){return e.apply(this,arguments)||this}return a(r,e),r.prototype.render=function(){var e=this.props,r=e.children,a=o(e,["children"]);return delete a.active,c.a.createElement(kr,a,c.a.createElement("span",{"aria-hidden":"true"},r||t),c.a.createElement("span",{className:"sr-only"},n))},r}(c.a.Component),r.displayName=e,i}kr.defaultProps={active:!1,disabled:!1,activeLabel:"(current)"};var Cr=_r("First","«"),Tr=_r("Prev","‹","Previous"),Sr=_r("Ellipsis","…","More"),Or=_r("Next","›"),Pr=_r("Last","»"),Nr=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.children,i=e.size,s=o(e,["bsPrefix","className","children","size"]);return c.a.createElement("ul",r({},s,{className:l()(n,t,i&&t+"-"+i)}),a)},t}(c.a.Component),"pagination");Nr.First=Cr,Nr.Prev=Tr,Nr.Ellipsis=Sr,Nr.Item=kr,Nr.Next=Or,Nr.Last=Pr;var jr=Nr;function Ir(e){var t=e.bsPrefix,n=e.innerRef,a=e.placement,i=e.className,s=e.style,u=e.title,d=e.children,p=e.arrowProps,f=(e.scheduleUpdate,e.outOfBoundaries,o(e,["bsPrefix","innerRef","placement","className","style","title","children","arrowProps","scheduleUpdate","outOfBoundaries"]));return c.a.createElement("div",r({role:"tooltip",ref:n,style:s,"x-placement":a,className:l()(i,t,"bs-popover-"+a)},f),c.a.createElement("div",r({className:"arrow"},p)),u&&c.a.createElement("div",{className:t+"-header h3"},u),c.a.createElement("div",{className:t+"-body"},d))}Ir.defaultProps={placement:"right"};var Dr=x(Ir,"popover"),Ar=1e3;var Rr=function(e){function t(){return e.apply(this,arguments)||this}a(t,e);var n=t.prototype;return n.renderProgressBar=function(e){var t,n=e.min,a=e.now,i=e.max,s=e.label,u=e.srOnly,d=e.striped,p=e.animated,f=e.className,m=e.style,h=e.variant,g=e.bsPrefix,b=o(e,["min","now","max","label","srOnly","striped","animated","className","style","variant","bsPrefix"]);return c.a.createElement("div",r({},b,{role:"progressbar",className:l()(f,g+"-bar",(t={},t["bg-"+h]=h,t[g+"-bar-animated"]=p,t[g+"-bar-striped"]=p||d,t)),style:r({width:function(e,t,n){var r=(e-t)/(n-t)*100;return Math.round(r*Ar)/Ar}(a,n,i)+"%"},m),"aria-valuenow":a,"aria-valuemin":n,"aria-valuemax":i}),u?c.a.createElement("span",{className:"sr-only"},s):s)},n.render=function(){var e=this.props,t=e.isChild,n=o(e,["isChild"]);if(t)return this.renderProgressBar(n);var a=n.min,i=n.now,u=n.max,d=n.label,p=n.srOnly,f=n.striped,m=n.animated,h=n.bsPrefix,g=n.variant,b=n.className,v=n.children,y=o(n,["min","now","max","label","srOnly","striped","animated","bsPrefix","variant","className","children"]);return c.a.createElement("div",r({},y,{className:l()(b,h)}),v?Ee(v,function(e){return Object(s.cloneElement)(e,{isChild:!0})}):this.renderProgressBar({min:a,now:i,max:u,label:d,srOnly:p,striped:f,animated:m,bsPrefix:h,variant:g}))},t}(c.a.Component);Rr.defaultProps={min:0,max:100,animated:!1,isChild:!1,srOnly:!1,striped:!1};var Mr=x(Rr,"progress"),Lr=Mr,Ur=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.children,i=e.aspectRatio,s=o(e,["bsPrefix","className","children","aspectRatio"]),u=c.a.Children.only(a);return c.a.createElement("div",r({},s,{className:l()(t,n,i&&t+"-"+i)}),c.a.cloneElement(u,{className:l()(u.props.className,t+"-item")}))},t}(c.a.Component);Ur.defaultProps={aspectRatio:"1by1"};var Fr=x(Ur,"embed-responsive"),Hr=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.noGutters,a=e.as,i=e.className,s=o(e,["bsPrefix","noGutters","as","className"]);return c.a.createElement(a,r({},s,{className:l()(i,t,n&&"no-gutters")}))},t}(c.a.Component);Hr.defaultProps={as:"div",noGutters:!1};var zr=x(Hr,"row"),Br=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.id,n=e.bsPrefix,a=e.size,i=e.variant,l=e.title,s=e.toggleLabel,u=e.children,d=e.onClick,p=e.href,f=e.target,m=e.menuRole,h=e.rootCloseEvent,g=o(e,["id","bsPrefix","size","variant","title","toggleLabel","children","onClick","href","target","menuRole","rootCloseEvent"]);return c.a.createElement(lt,r({},g,{as:ee}),c.a.createElement(J,{size:a,variant:i,disabled:g.disabled,bsPrefix:n,href:p,target:f,onClick:d},l),c.a.createElement(lt.Toggle,{split:!0,id:t,size:a,variant:i,disabled:g.disabled,childBsPrefix:n},c.a.createElement("span",{className:"sr-only"},s)),c.a.createElement(lt.Menu,{role:m,rootCloseEvent:h},u))},t}(c.a.Component);Br.defaultProps={toggleLabel:"Toggle dropdown"};var Wr=Br,qr=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).getControlledId=function(e){return t.getKey(e,"tabpane")},t.getControllerId=function(e){return t.getKey(e,"tab")},t.state={tabContext:{onSelect:t.props.onSelect,activeKey:t.props.activeKey,transition:t.props.transition,mountOnEnter:t.props.mountOnEnter,unmountOnExit:t.props.unmountOnExit,getControlledId:t.getControlledId,getControllerId:t.getControllerId}},t}a(t,e),t.getDerivedStateFromProps=function(e,t){var n=e.activeKey,o=e.mountOnEnter,a=e.unmountOnExit,i=e.transition;return{tabContext:r({},t.tabContext,{activeKey:n,mountOnEnter:o,unmountOnExit:a,transition:i})}};var n=t.prototype;return n.getKey=function(e,t){var n=this.props,r=n.generateChildId,o=n.id;return r?r(e,t):o?o+"-"+t+"-"+e:null},n.render=function(){var e=this.props,t=e.children,n=e.onSelect;return c.a.createElement(tn.Provider,{value:this.state.tabContext},c.a.createElement(et.Provider,{value:n},t))},t}(c.a.Component),Vr=d()(qr,{activeKey:"onSelect"}),Kr=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.as,a=e.className,i=o(e,["bsPrefix","as","className"]);return c.a.createElement(n,r({},i,{className:l()(a,t)}))},t}(c.a.Component);Kr.defaultProps={as:"div"};var Gr=x(Kr,"tab-content"),$r=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.active,a=e.className,i=e.onEnter,s=e.onEntering,u=e.onEntered,d=e.onExit,p=e.onExiting,f=e.onExited,m=e.mountOnEnter,h=e.unmountOnExit,g=e.transition,b=e.as,v=void 0===b?"div":b,y=(e.eventKey,o(e,["bsPrefix","active","className","onEnter","onEntering","onEntered","onExit","onExiting","onExited","mountOnEnter","unmountOnExit","transition","as","eventKey"]));if(!n&&h)return null;var x=c.a.createElement(v,r({},y,{role:"tabpanel","aria-hidden":!n,className:l()(a,t,{active:n})}));return g&&(x=c.a.createElement(g,{in:n,onEnter:i,onEntering:s,onEntered:u,onExit:d,onExiting:p,onExited:f,mountOnEnter:m,unmountOnExit:m},x)),c.a.createElement(tn.Provider,{value:null},c.a.createElement(et.Provider,{value:null},x))},t}(c.a.Component),Xr=Fe()(tn,function(e,t){if(!e)return null;var n=e.activeKey,r=e.getControlledId,a=e.getControllerId,i=o(e,["activeKey","getControlledId","getControllerId"]),l=!1!==t.transition&&!1!==i.transition,s=Ze(t.eventKey);return{active:null==t.active&&null!=s?Ze(n)===s:t.active,id:r(t.eventKey),"aria-labelledby":a(t.eventKey),transition:l&&(t.transition||i.transition||I),mountOnEnter:null!=t.mountOnEnter?t.mountOnEnter:i.mountOnEnter,unmountOnExit:null!=t.unmountOnExit?t.unmountOnExit:i.unmountOnExit}},x($r,"tab-pane")),Yr=function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){throw new Error("ReactBootstrap: The `Tab` component is not meant to be rendered! It's an abstract component that is only valid as a direct Child of the `Tabs` Component. For custom tabs components use TabPane and TabsContainer directly")},t}(c.a.Component);Yr.Container=Vr,Yr.Content=Gr,Yr.Pane=Xr;var Qr=Yr,Jr=x(function(e){function t(){return e.apply(this,arguments)||this}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.bsPrefix,n=e.className,a=e.striped,i=e.bordered,s=e.hover,u=e.size,d=e.variant,p=e.responsive,f=o(e,["bsPrefix","className","striped","bordered","hover","size","variant","responsive"]),m=l()(t,n,d&&t+"-"+d,u&&t+"-"+u,a&&t+"-striped",i&&t+"-bordered",s&&t+"-hover"),h=c.a.createElement("table",r({},f,{className:m}));if(p){var g=t+"-responsive";return"string"==typeof p&&(g=g+"-"+p),c.a.createElement("div",{className:g},h)}return h},t}(c.a.Component),"table"),Zr=Vr.ControlledComponent;var eo=function(e){function t(){return e.apply(this,arguments)||this}a(t,e);var n=t.prototype;return n.renderTab=function(e){var t=e.props,n=t.title,r=t.eventKey,o=t.disabled,a=t.tabClassName;return null==n?null:c.a.createElement(Xn,{as:Jn,eventKey:r,disabled:o,className:a},n)},n.render=function(){var e=this.props,t=e.id,n=e.onSelect,a=e.transition,i=e.mountOnEnter,l=e.unmountOnExit,s=e.children,u=e.activeKey,d=void 0===u?function(e){var t;return ke(e,function(e){null==t&&(t=e.props.eventKey)}),t}(s):u,p=o(e,["id","onSelect","transition","mountOnEnter","unmountOnExit","children","activeKey"]);return c.a.createElement(Zr,{id:t,activeKey:d,onSelect:n,transition:a,mountOnEnter:i,unmountOnExit:l},c.a.createElement(nr,r({},p,{role:"tablist",as:"nav"}),Ee(s,this.renderTab)),c.a.createElement(Gr,null,Ee(s,function(e){var t=r({},e.props);return delete t.title,delete t.disabled,delete t.tabClassName,c.a.createElement(Xr,t)})))},t}(c.a.Component);eo.defaultProps={variant:"tabs",mountOnEnter:!1,unmountOnExit:!1};var to=d()(eo,{activeKey:"onSelect"}),no=function(){},ro=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={focused:!1},t.handleFocus=function(e){"INPUT"===e.target.tagName&&t.setState({focused:!0})},t.handleBlur=function(e){"INPUT"===e.target.tagName&&t.setState({focused:!1})},t}return a(t,e),t.prototype.render=function(){var e=this.props,t=e.children,n=e.name,a=e.className,i=e.checked,s=e.type,u=e.onChange,d=e.value,p=e.disabled,f=e.inputRef,m=e.innerRef,h=o(e,["children","name","className","checked","type","onChange","value","disabled","inputRef","innerRef"]),g=this.state.focused;return c.a.createElement(J,r({},h,{ref:m,className:l()(a,g&&"focus",p&&"disabled"),type:null,active:!!i,as:"label"}),c.a.createElement("input",{name:n,type:s,value:d,ref:f,autoComplete:"off",checked:!!i,disabled:!!p,onFocus:this.handleFocus,onBlur:this.handleBlur,onChange:u||no}),t)},t}(c.a.Component),oo=c.a.forwardRef(function(e,t){return c.a.createElement(ro,r({innerRef:t},e))}),ao=n(5),io=n.n(ao),lo=function(e){function t(){return e.apply(this,arguments)||this}a(t,e);var n=t.prototype;return n.getValues=function(){var e=this.props.value;return null==e?[]:[].concat(e)},n.handleToggle=function(e,t){var n=this.props,r=n.type,o=n.onChange,a=this.getValues(),i=-1!==a.indexOf(e);"radio"!==r?o(i?a.filter(function(t){return t!==e}):[].concat(a,[e]),t):i||o(e,t)},n.render=function(){var e=this,t=this.props,n=t.children,a=t.type,i=t.name,l=o(t,["children","type","name"]);delete l.onChange,delete l.value;var s=this.getValues();return"radio"!==a||i||io()(!1),c.a.createElement(ee,r({},l,{toggle:!0}),Ee(n,function(t){var n=t.props,r=n.value,o=n.onChange;return c.a.cloneElement(t,{type:a,name:t.name||i,checked:-1!==s.indexOf(r),onChange:M(o,function(t){return e.handleToggle(r,t)})})}))},t}(c.a.Component);lo.defaultProps={type:"radio"};var so=d()(lo,{value:"onChange"});so.Button=oo;var co=so;function uo(e){var t=e.bsPrefix,n=e.innerRef,a=e.placement,i=e.className,s=e.style,u=e.children,d=e.arrowProps,p=(e.scheduleUpdate,e.outOfBoundaries,o(e,["bsPrefix","innerRef","placement","className","style","children","arrowProps","scheduleUpdate","outOfBoundaries"]));return c.a.createElement("div",r({ref:n,style:s,role:"tooltip","x-placement":a,className:l()(i,t,"bs-tooltip-"+a)},p),c.a.createElement("div",r({className:"arrow"},d)),c.a.createElement("div",{className:t+"-inner"},u))}uo.defaultProps={placement:"right"};var po=x(uo,"tooltip");n.d(t,"Alert",function(){return W}),n.d(t,"Badge",function(){return V}),n.d(t,"Breadcrumb",function(){return Y}),n.d(t,"BreadcrumbItem",function(){return G}),n.d(t,"Button",function(){return J}),n.d(t,"ButtonGroup",function(){return ee}),n.d(t,"ButtonToolbar",function(){return ne}),n.d(t,"Card",function(){return de}),n.d(t,"CardColumns",function(){return pe}),n.d(t,"CardDeck",function(){return fe}),n.d(t,"CardImg",function(){return ae}),n.d(t,"CardGroup",function(){return me}),n.d(t,"Carousel",function(){return Oe}),n.d(t,"CarouselItem",function(){return we}),n.d(t,"CloseButton",function(){return A}),n.d(t,"Col",function(){return Ie}),n.d(t,"Collapse",function(){return Le}),n.d(t,"Dropdown",function(){return lt}),n.d(t,"DropdownButton",function(){return st}),n.d(t,"Fade",function(){return I}),n.d(t,"Form",function(){return Dt}),n.d(t,"FormControl",function(){return yt}),n.d(t,"FormCheck",function(){return Tt}),n.d(t,"FormGroup",function(){return mt}),n.d(t,"FormLabel",function(){return Ot}),n.d(t,"FormText",function(){return Nt}),n.d(t,"Container",function(){return Rt}),n.d(t,"Image",function(){return Lt}),n.d(t,"Figure",function(){return qt}),n.d(t,"InputGroup",function(){return Yt}),n.d(t,"Jumbotron",function(){return Jt}),n.d(t,"ListGroup",function(){return pn}),n.d(t,"ListGroupItem",function(){return cn}),n.d(t,"Media",function(){return hn}),n.d(t,"Modal",function(){return Gn}),n.d(t,"ModalBody",function(){return Sn}),n.d(t,"ModalDialog",function(){return On}),n.d(t,"ModalFooter",function(){return Nn}),n.d(t,"ModalTitle",function(){return Mn}),n.d(t,"Nav",function(){return nr}),n.d(t,"Navbar",function(){return cr}),n.d(t,"NavbarBrand",function(){return rr}),n.d(t,"NavDropdown",function(){return dr}),n.d(t,"NavItem",function(){return Xn}),n.d(t,"Overlay",function(){return gr}),n.d(t,"OverlayTrigger",function(){return Er}),n.d(t,"PageItem",function(){return kr}),n.d(t,"Pagination",function(){return jr}),n.d(t,"Popover",function(){return Dr}),n.d(t,"ProgressBar",function(){return Lr}),n.d(t,"ResponsiveEmbed",function(){return Fr}),n.d(t,"Row",function(){return zr}),n.d(t,"SafeAnchor",function(){return F}),n.d(t,"SplitButton",function(){return Wr}),n.d(t,"Tab",function(){return Qr}),n.d(t,"TabContainer",function(){return Vr}),n.d(t,"TabContent",function(){return Gr}),n.d(t,"Table",function(){return Jr}),n.d(t,"TabPane",function(){return Xr}),n.d(t,"Tabs",function(){return to}),n.d(t,"ThemeProvider",function(){return w}),n.d(t,"ToggleButton",function(){return oo}),n.d(t,"ToggleButtonGroup",function(){return co}),n.d(t,"Tooltip",function(){return po})},function(e,t,n){"use strict";t.__esModule=!0,t.default=function e(t,n,a){void 0===a&&(a=[]);var l=t.displayName||t.name||"Component";var s=o.canAcceptRef(t);var c=Object.keys(n);var u=c.map(o.defaultKey);!s&&a.length&&invariant(!1);var d=function(e){function l(){for(var t,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(t=e.call.apply(e,[this].concat(o))||this).handlers=Object.create(null),c.forEach(function(e){var r=n[e];t.handlers[r]=function(n){if(t.props[r]){var o;t._notifying=!0;for(var a=arguments.length,i=new Array(a>1?a-1:0),l=1;l<a;l++)i[l-1]=arguments[l];(o=t.props)[r].apply(o,[n].concat(i)),t._notifying=!1}t._values[e]=n,t.unmounted||t.forceUpdate()}}),a.length&&(t.attachRef=function(e){t.inner=e}),t}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(l,e);var s=l.prototype;return s.shouldComponentUpdate=function(){return!this._notifying},s.componentWillMount=function(){var e=this,t=this.props;this._values=Object.create(null),c.forEach(function(n){e._values[n]=t[o.defaultKey(n)]})},s.componentWillReceiveProps=function(e){var t=this,n=this.props;c.forEach(function(r){!o.isProp(e,r)&&o.isProp(n,r)&&(t._values[r]=e[o.defaultKey(r)])})},s.componentWillUnmount=function(){this.unmounted=!0},s.render=function(){var e=this,n=this.props,o=n.innerRef,a=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["innerRef"]);u.forEach(function(e){delete a[e]});var l={};return c.forEach(function(t){var n=e.props[t];l[t]=void 0!==n?n:e._values[t]}),r.default.createElement(t,i({},a,l,this.handlers,{ref:o||this.attachRef}))},l}(r.default.Component);d.displayName="Uncontrolled("+l+")";d.propTypes=i({innerRef:function(){}},o.uncontrolledPropTypes(n,l));a.forEach(function(e){d.prototype[e]=function(){var t;return(t=this.inner)[e].apply(t,arguments)}});var p=d;r.default.forwardRef&&((p=r.default.forwardRef(function(e,t){return r.default.createElement(d,i({},e,{innerRef:t}))})).propTypes=d.propTypes);p.ControlledComponent=t;p.deferControlTo=function(t,r,o){return void 0===r&&(r={}),e(t,i({},n,r),o)};return p};var r=a(n(0)),o=(a(n(5)),function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(141)));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t,n){return 2===arguments.length?c(e,t):c({consumers:e,mapToProps:t},n)};var r=a(n(0)),o=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l=function(e){var t="string"==typeof e?e:e.name||e.displayName;return t?"ContextTransform("+t+")":"ContextTransform"},s=function(e){return e.Consumer||e};function c(e,t){var n=e.consumers,a=e.mapToProps,c=e.displayName,u=e.forwardRefAs,d=void 0===u?"ref":u,p=n;Array.isArray(n)||(p=[n]);var f=s(p[0]);var m=1===p.length?function(e,n){var o,l=i(((o={})[d]=n,o),e);return r.default.createElement(f,null,function(n){return r.default.createElement(t,i({},l,a(n,e)))})}:function(e,n){var o,l=i(((o={})[d]=n,o),e);return p.reduceRight(function(e,t){return function(){for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];var i=s(t);return r.default.createElement(i,null,function(t){return e.apply(void 0,o.concat([t]))})}},function(){for(var n=arguments.length,o=new Array(n),s=0;s<n;s++)o[s]=arguments[s];return r.default.createElement(t,i({},l,a.apply(void 0,o.concat([e]))))})()};return(0,o.default)(m,{displayName:c||l(t)})}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n,a="#"===t[0],i="."===t[0],l=a||i?t.slice(1):t;if(r.test(l))return a?(e=e.getElementById?e:document,(n=e.getElementById(l))?[n]:[]):e.getElementsByClassName&&i?o(e.getElementsByClassName(l)):o(e.getElementsByTagName(t));return o(e.querySelectorAll(t))};var r=/^[\w-]*$/,o=Function.prototype.bind.call(Function.prototype.call,[].slice);e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e,t,n){var r="",u="",d=t;if("string"==typeof t){if(void 0===n)return e.style[(0,o.default)(t)]||(0,i.default)(e).getPropertyValue((0,a.default)(t));(d={})[t]=n}Object.keys(d).forEach(function(t){var n=d[t];n||0===n?(0,c.default)(t)?u+=t+"("+n+") ":r+=(0,a.default)(t)+": "+n+";":(0,l.default)(e,(0,a.default)(t))}),u&&(r+=s.transform+": "+u+";");e.style.cssText+=";"+r};var o=r(n(60)),a=r(n(138)),i=r(n(136)),l=r(n(135)),s=n(40),c=r(n(134));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(2)),o=l(n(0)),a=l(n(7)),i=n(140);n(139);function l(e){return e&&e.__esModule?e:{default:e}}var s="unmounted";t.UNMOUNTED=s;var c="exited";t.EXITED=c;var u="entering";t.ENTERING=u;var d="entered";t.ENTERED=d;t.EXITING="exiting";var p=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n.transitionGroup,i=a&&!a.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=c,r.appearStatus=u):o=d:o=t.unmountOnExit||t.mountOnEnter?s:c,r.state={status:o},r.nextCallback=null,r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.getChildContext=function(){return{transitionGroup:null}},t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===s?{status:c}:null},n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==u&&n!==d&&(t=u):n!==u&&n!==d||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=a.default.findDOMNode(this);t===u?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===c&&this.setState({status:s})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:u},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a.enter,function(){n.safeSetState({status:d},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:d},function(){n.props.onEntered(e)})},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:c},function(){t.props.onExited(e)})})})):this.safeSetState({status:c},function(){t.props.onExited(e)})},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===s)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var a=o.default.Children.only(n);return o.default.cloneElement(a,r)},t}(o.default.Component);function f(){}p.contextTypes={transitionGroup:r.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:f,onEntering:f,onEntered:f,onExit:f,onExiting:f,onExited:f},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4;var m=(0,i.polyfill)(p);t.default=m},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";n.r(t);var r=n(4),o=n.n(r),a=n(0),i=n.n(a),l=n(2),s=n.n(l),c=n(9),u=n.n(c),d=n(5),p=n.n(d);function f(e){return"/"===e.charAt(0)}function m(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&f(e),a=t&&f(t),i=o||a;if(e&&f(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var l=void 0;if(r.length){var s=r[r.length-1];l="."===s||".."===s||""===s}else l=!1;for(var c=0,u=r.length;u>=0;u--){var d=r[u];"."===d?m(r,u):".."===d?(m(r,u),c++):c&&(m(r,u),c--)}if(!i)for(;c--;c)r.unshift("..");!i||""===r[0]||r[0]&&f(r[0])||r.unshift("");var p=r.join("/");return l&&"/"!==p.substr(-1)&&(p+="/"),p},g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var b=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":g(t);if(r!==(void 0===n?"undefined":g(n)))return!1;if("object"===r){var o=t.valueOf(),a=n.valueOf();if(o!==t||a!==n)return e(o,a);var i=Object.keys(t),l=Object.keys(n);return i.length===l.length&&i.every(function(r){return e(t[r],n[r])})}return!1},v=function(e){return"/"===e.charAt(0)?e:"/"+e},y=function(e){return"/"===e.charAt(0)?e.substr(1):e},x=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},w=function(e,t){return x(e,t)?e.substr(t.length):e},E=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},k=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},C=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=_({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=h(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},T=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&b(e.state,t.state)},S=function(){var e=null,t=[];return{setPrompt:function(t){return u()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):(u()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},O=!("undefined"==typeof window||!window.document||!window.document.createElement),P=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},N=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},j=function(e,t){return t(window.confirm(e))},I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},A=function(){try{return window.history.state||{}}catch(e){return{}}},R=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e.forceRefresh,a=void 0!==o&&o,i=e.getUserConfirmation,l=void 0===i?j:i,s=e.keyLength,c=void 0===s?6:s,d=e.basename?E(v(e.basename)):"",f=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return u()(!d||x(a,d),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+d+'".'),d&&(a=w(a,d)),C(a,r,n)},m=function(){return Math.random().toString(36).substr(2,c)},h=S(),g=function(e){D(W,e),W.length=t.length,h.notifyListeners(W.location,W.action)},b=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||T(f(e.state))},y=function(){T(f(A()))},_=!1,T=function(e){_?(_=!1,g()):h.confirmTransitionTo(e,"POP",l,function(t){t?g({action:"POP",location:e}):R(e)})},R=function(e){var t=W.location,n=L.indexOf(t.key);-1===n&&(n=0);var r=L.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(_=!0,F(o))},M=f(A()),L=[M.key],U=function(e){return d+k(e)},F=function(e){t.go(e)},H=0,z=function(e){1===(H+=e)?(P(window,"popstate",b),r&&P(window,"hashchange",y)):0===H&&(N(window,"popstate",b),r&&N(window,"hashchange",y))},B=!1,W={length:t.length,action:"POP",location:M,createHref:U,push:function(e,r){u()(!("object"===(void 0===e?"undefined":I(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=C(e,r,m(),W.location);h.confirmTransitionTo(o,"PUSH",l,function(e){if(e){var r=U(o),i=o.key,l=o.state;if(n)if(t.pushState({key:i,state:l},null,r),a)window.location.href=r;else{var s=L.indexOf(W.location.key),c=L.slice(0,-1===s?0:s+1);c.push(o.key),L=c,g({action:"PUSH",location:o})}else u()(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){u()(!("object"===(void 0===e?"undefined":I(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=C(e,r,m(),W.location);h.confirmTransitionTo(o,"REPLACE",l,function(e){if(e){var r=U(o),i=o.key,l=o.state;if(n)if(t.replaceState({key:i,state:l},null,r),a)window.location.replace(r);else{var s=L.indexOf(W.location.key);-1!==s&&(L[s]=o.key),g({action:"REPLACE",location:o})}else u()(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=h.setPrompt(e);return B||(z(1),B=!0),function(){return B&&(B=!1,z(-1)),t()}},listen:function(e){var t=h.appendListener(e);return z(1),function(){z(-1),t()}}};return W},M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},L={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+y(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:y,decodePath:v},slash:{encodePath:v,decodePath:v}},U=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},F=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)},H=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};p()(O,"Hash history needs a DOM");var t=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=e.getUserConfirmation,o=void 0===r?j:r,a=e.hashType,i=void 0===a?"slash":a,l=e.basename?E(v(e.basename)):"",s=L[i],c=s.encodePath,d=s.decodePath,f=function(){var e=d(U());return u()(!l||x(e,l),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+l+'".'),l&&(e=w(e,l)),C(e)},m=S(),h=function(e){M(V,e),V.length=t.length,m.notifyListeners(V.location,V.action)},g=!1,b=null,y=function(){var e=U(),t=c(e);if(e!==t)F(t);else{var n=f(),r=V.location;if(!g&&T(r,n))return;if(b===k(n))return;b=null,_(n)}},_=function(e){g?(g=!1,h()):m.confirmTransitionTo(e,"POP",o,function(t){t?h({action:"POP",location:e}):I(e)})},I=function(e){var t=V.location,n=H.lastIndexOf(k(t));-1===n&&(n=0);var r=H.lastIndexOf(k(e));-1===r&&(r=0);var o=n-r;o&&(g=!0,z(o))},D=U(),A=c(D);D!==A&&F(A);var R=f(),H=[k(R)],z=function(e){u()(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},B=0,W=function(e){1===(B+=e)?P(window,"hashchange",y):0===B&&N(window,"hashchange",y)},q=!1,V={length:t.length,action:"POP",location:R,createHref:function(e){return"#"+c(l+k(e))},push:function(e,t){u()(void 0===t,"Hash history cannot push state; it is ignored");var n=C(e,void 0,void 0,V.location);m.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=k(n),r=c(l+t);if(U()!==r){b=t,function(e){window.location.hash=e}(r);var o=H.lastIndexOf(k(V.location)),a=H.slice(0,-1===o?0:o+1);a.push(t),H=a,h({action:"PUSH",location:n})}else u()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),h()}})},replace:function(e,t){u()(void 0===t,"Hash history cannot replace state; it is ignored");var n=C(e,void 0,void 0,V.location);m.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=k(n),r=c(l+t);U()!==r&&(b=t,F(r));var o=H.indexOf(k(V.location));-1!==o&&(H[o]=t),h({action:"REPLACE",location:n})}})},go:z,goBack:function(){return z(-1)},goForward:function(){return z(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=m.setPrompt(e);return q||(W(1),q=!0),function(){return q&&(q=!1,W(-1)),t()}},listen:function(e){var t=m.appendListener(e);return W(1),function(){W(-1),t()}}};return V},z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},W=function(e,t,n){return Math.min(Math.max(e,t),n)},q=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,o=e.initialIndex,a=void 0===o?0:o,i=e.keyLength,l=void 0===i?6:i,s=S(),c=function(e){B(g,e),g.length=g.entries.length,s.notifyListeners(g.location,g.action)},d=function(){return Math.random().toString(36).substr(2,l)},p=W(a,0,r.length-1),f=r.map(function(e){return C(e,void 0,"string"==typeof e?d():e.key||d())}),m=k,h=function(e){var n=W(g.index+e,0,g.entries.length-1),r=g.entries[n];s.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},g={length:f.length,action:"POP",location:f[p],index:p,entries:f,createHref:m,push:function(e,n){u()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=C(e,n,d(),g.location);s.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=g.index+1,n=g.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){u()(!("object"===(void 0===e?"undefined":z(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=C(e,n,d(),g.location);s.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(g.entries[g.index]=r,c({action:"REPLACE",location:r}))})},go:h,goBack:function(){return h(-1)},goForward:function(){return h(1)},canGo:function(e){var t=g.index+e;return t>=0&&t<g.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return g},V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function K(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var G=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=K(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},K(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:V({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);G.propTypes={history:s.a.object.isRequired,children:s.a.node},G.contextTypes={router:s.a.object},G.childContextTypes={router:s.a.object.isRequired};var $=G,X=$;function Y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Q=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Y(this,e.call.apply(e,[this].concat(a))),r.history=R(r.props),Y(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(X,{history:this.history,children:this.props.children})},t}(i.a.Component);Q.propTypes={basename:s.a.string,forceRefresh:s.a.bool,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var J=Q;function Z(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ee=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Z(this,e.call.apply(e,[this].concat(a))),r.history=H(r.props),Z(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(X,{history:this.history,children:this.props.children})},t}(i.a.Component);ee.propTypes={basename:s.a.string,getUserConfirmation:s.a.func,hashType:s.a.oneOf(["hashbang","noslash","slash"]),children:s.a.node};var te=ee,ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function re(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var oe=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},ae=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=re(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!oe(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},re(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>"),p()(void 0!==t,'You must specify the "to" property');var o=this.context.router.history,a="string"==typeof t?C(t,null,null,o.location):t,l=o.createHref(a);return i.a.createElement("a",ne({},r,{onClick:this.handleClick,href:l,ref:n}))},t}(i.a.Component);ae.propTypes={onClick:s.a.func,target:s.a.string,replace:s.a.bool,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired,innerRef:s.a.oneOfType([s.a.string,s.a.func])},ae.defaultProps={replace:!1},ae.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired,createHref:s.a.func.isRequired}).isRequired}).isRequired};var ie=ae;function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var se=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.history=q(r.props),le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement($,{history:this.history,children:this.props.children})},t}(i.a.Component);se.propTypes={initialEntries:s.a.array,initialIndex:s.a.number,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var ce=se,ue=n(32),de=n.n(ue),pe={},fe=0,me=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,o=r.path,a=r.exact,i=void 0!==a&&a,l=r.strict,s=void 0!==l&&l,c=r.sensitive,u=void 0!==c&&c;if(null==o)return n;var d=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=pe[n]||(pe[n]={});if(r[e])return r[e];var o=[],a={re:de()(e,o,t),keys:o};return fe<1e4&&(r[e]=a,fe++),a}(o,{end:i,strict:s,sensitive:u}),p=d.re,f=d.keys,m=p.exec(e);if(!m)return null;var h=m[0],g=m.slice(1),b=e===h;return i&&!b?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:b,params:f.reduce(function(e,t,n){return e[t.name]=g[n],e},{})}},he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ge(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var be=function(e){return 0===i.a.Children.count(e)},ve=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=ge(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},ge(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:he({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,l=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var s=t.route,c=(r||s.location).pathname;return me(c,{path:o,strict:a,exact:i,sensitive:l},s.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!be(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!be(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,l=a.history,s=a.route,c=a.staticContext,u={match:e,location:this.props.location||s.location,history:l,staticContext:c};return r?e?i.a.createElement(r,u):null:o?e?o(u):null:"function"==typeof n?n(u):n&&!be(n)?i.a.Children.only(n):null},t}(i.a.Component);ve.propTypes={computedMatch:s.a.object,path:s.a.string,exact:s.a.bool,strict:s.a.bool,sensitive:s.a.bool,component:s.a.func,render:s.a.func,children:s.a.oneOfType([s.a.func,s.a.node]),location:s.a.object},ve.contextTypes={router:s.a.shape({history:s.a.object.isRequired,route:s.a.object.isRequired,staticContext:s.a.object})},ve.childContextTypes={router:s.a.object.isRequired};var ye=ve,xe=ye,we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var ke=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,l=e.className,s=e.activeStyle,c=e.style,u=e.isActive,d=e["aria-current"],p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","aria-current"]),f="object"===(void 0===t?"undefined":Ee(t))?t.pathname:t,m=f&&f.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1");return i.a.createElement(xe,{path:m,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(u?u(r,n):r);return i.a.createElement(ie,we({to:t,className:o?[l,a].filter(function(e){return e}).join(" "):l,style:o?we({},c,s):c,"aria-current":o&&d||null},p))}})};ke.propTypes={to:ie.propTypes.to,exact:s.a.bool,strict:s.a.bool,location:s.a.object,activeClassName:s.a.string,className:s.a.string,activeStyle:s.a.object,style:s.a.object,isActive:s.a.func,"aria-current":s.a.oneOf(["page","step","location","date","time","true"])},ke.defaultProps={activeClassName:"active","aria-current":"page"};var _e=ke;var Ce=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);Ce.propTypes={when:s.a.bool,message:s.a.oneOfType([s.a.func,s.a.string]).isRequired},Ce.defaultProps={when:!0},Ce.contextTypes={router:s.a.shape({history:s.a.shape({block:s.a.func.isRequired}).isRequired}).isRequired};var Te=Ce,Se={},Oe=0,Pe=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=Se[t]||(Se[t]={});if(n[e])return n[e];var r=de.a.compile(e);return Oe<1e4&&(n[e]=r,Oe++),r}(e)(t,{pretty:!0})},Ne=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var je=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=C(e.to),n=C(this.props.to);T(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?Pe(n,t.params):Ne({},n,{pathname:Pe(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(i.a.Component);je.propTypes={computedMatch:s.a.object,push:s.a.bool,from:s.a.string,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired},je.defaultProps={push:!1},je.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired}).isRequired,staticContext:s.a.object}).isRequired};var Ie=je,De=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Ae(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Re=function(e){return"/"===e.charAt(0)?e:"/"+e},Me=function(e,t){return e?De({},t,{pathname:Re(e)+t.pathname}):t},Le=function(e){return"string"==typeof e?e:k(e)},Ue=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},Fe=function(){},He=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=Ae(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Re(r.props.basename+Le(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=Me(n,C(e)),o.url=Le(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=Me(n,C(e)),o.url=Le(o.location)},r.handleListen=function(){return Fe},r.handleBlock=function(){return Fe},Ae(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Re(e);return 0!==t.pathname.indexOf(n)?t:De({},t,{pathname:t.pathname.substr(n.length)})}(t,C(n)),push:this.handlePush,replace:this.handleReplace,go:Ue("go"),goBack:Ue("goBack"),goForward:Ue("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement($,De({},r,{history:o}))},t}(i.a.Component);He.propTypes={basename:s.a.string,context:s.a.object.isRequired,location:s.a.oneOfType([s.a.string,s.a.object])},He.defaultProps={basename:"",location:"/"},He.childContextTypes={router:s.a.object.isRequired};var ze=He;var Be=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(null==r&&i.a.isValidElement(t)){var a=t.props,l=a.path,s=a.exact,c=a.strict,u=a.sensitive,d=a.from,p=l||d;o=t,r=me(n.pathname,{path:p,exact:s,strict:c,sensitive:u},e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);Be.contextTypes={router:s.a.shape({route:s.a.object.isRequired}).isRequired},Be.propTypes={children:s.a.node,location:s.a.object};var We=Be,qe=Pe,Ve=me,Ke=n(69),Ge=n.n(Ke),$e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Xe=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(ye,{children:function(t){return i.a.createElement(e,$e({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:s.a.func},Ge()(t,e)};n.d(t,"BrowserRouter",function(){return J}),n.d(t,"HashRouter",function(){return te}),n.d(t,"Link",function(){return ie}),n.d(t,"MemoryRouter",function(){return ce}),n.d(t,"NavLink",function(){return _e}),n.d(t,"Prompt",function(){return Te}),n.d(t,"Redirect",function(){return Ie}),n.d(t,"Route",function(){return xe}),n.d(t,"Router",function(){return X}),n.d(t,"StaticRouter",function(){return ze}),n.d(t,"Switch",function(){return We}),n.d(t,"generatePath",function(){return qe}),n.d(t,"matchPath",function(){return Ve}),n.d(t,"withRouter",function(){return Xe})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(0)),a=i(n(50));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement(a.default,null,o.default.createElement("a",{href:"mailto:kheeya7@hotmail.com"},"Contact Kate ",o.default.createElement("i",{className:"fa fa-angle-right"})))}}]),t}();t.default=l},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e&&e.ownerDocument||document},e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e){if((!o&&0!==o||e)&&a.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return o};var o,a=r(n(14));e.exports=t.default},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectSummary=s;var r=i(n(0)),o=i(n(2)),a=n(10);function i(e){return e&&e.__esModule?e:{default:e}}function l(e){return r.default.createElement("div",{className:"project-summary-item"},r.default.createElement(a.Image,{src:e.imagePath}),r.default.createElement("div",{className:"project-summary-title"},e.title),r.default.createElement("div",{className:"project-summary-text"},e.description))}function s(e){return r.default.createElement(a.Row,null,e.summaryData.map(function(e){return r.default.createElement(l,{imagePath:e.imagePath,title:e.title,description:e.description,key:e.title})}))}s.propTypes={summaryData:o.default.array},s.defaultProps={summaryData:[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectDescription=t.SectionSubtitle=t.SectionTitle=t.Paragraph=t.Title=void 0;var r=s(n(91)),o=n(90),a=n(89),i=s(n(88)),l=s(n(87));function s(e){return e&&e.__esModule?e:{default:e}}t.Title=r.default,t.Paragraph=o.Paragraph,t.SectionTitle=i.default,t.SectionSubtitle=l.default,t.ProjectDescription=a.ProjectDescription},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(14)).default?function(e,t){return e.contains?e.contains(t):e.compareDocumentPosition?e===t||!!(16&e.compareDocumentPosition(t)):a(e,t)}:a;function a(e,t){if(t)do{if(t===e)return!0}while(t=t.parentNode);return!1}t.default=o,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=t.displayName,o=t.propTypes,a=t.defaultProps,i=t.allowFallback,l=void 0!==i&&i,s=function(t,n){return e(t,n)};return Object.assign(s,{displayName:n}),r.default.forwardRef||!l?Object.assign(r.default.forwardRef(s),{propTypes:o,defaultProps:a}):Object.assign(function(e){return s(e,null)},{displayName:n,propTypes:o,defaultProps:a})};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0))},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(40)),a=r(n(15));function i(e,t,n){var r,a={target:e,currentTarget:e};function i(e){e.target===e.currentTarget&&(clearTimeout(r),e.target.removeEventListener(o.default.end,i),t.call(this))}o.default.end?null==n&&(n=s(e)||0):n=0,o.default.end?(e.addEventListener(o.default.end,i,!1),r=setTimeout(function(){return i(a)},1.5*(n||100))):setTimeout(i.bind(null,a),0)}i._parseDuration=s;var l=i;function s(e){var t=(0,a.default)(e,o.default.duration),n=-1===t.indexOf("ms")?1e3:1;return parseFloat(t)*n}t.default=l,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,n,r,o,a){var i=r||"<<anonymous>>",l=a||n;if(null==t[n])return new Error("The "+o+" `"+l+"` is required to make `"+i+"` accessible for users of assistive technologies such as screen readers.");for(var s=arguments.length,c=Array(s>5?s-5:0),u=5;u<s;u++)c[u-5]=arguments[u];return e.apply(void 0,[t,n,r,o,a].concat(c))}},e.exports=t.default},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,l=0,s=[],c=n(158);function u(e,t){for(var n=0;n<e.length;n++){var o=e[n],a=r[o.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](o.parts[i]);for(;i<o.parts.length;i++)a.parts.push(g(o.parts[i],t))}else{var l=[];for(i=0;i<o.parts.length;i++)l.push(g(o.parts[i],t));r[o.id]={id:o.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function p(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),h(t,e.attrs),p(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var s=l++;n=i||(i=m(t)),r=v.bind(null,n,s,!1),o=v.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){f(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return u(n,t),function(e){for(var o=[],a=0;a<n.length;a++){var i=n[a];(l=r[i.id]).refs--,o.push(l)}e&&u(d(e,t),t);for(a=0;a<o.length;a++){var l;if(0===(l=o[a]).refs){for(var s=0;s<l.parts.length;s++)l.parts[s]();delete r[l.id]}}}};var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function v(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=b(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){var r=n(145);e.exports=m,e.exports.parse=a,e.exports.compile=function(e,t){return s(a(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,l="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var d=n[0],p=n[1],f=n.index;if(l+=e.slice(i,f),i=f+d.length,p)l+=p[1];else{var m=e[i],h=n[2],g=n[3],b=n[4],v=n[5],y=n[6],x=n[7];l&&(r.push(l),l="");var w=null!=h&&null!=m&&m!==h,E="+"===y||"*"===y,k="?"===y||"*"===y,_=n[2]||s,C=b||v;r.push({name:g||a++,prefix:h||"",delimiter:_,optional:k,repeat:E,partial:w,asterisk:!!x,pattern:C?u(C):x?".*":"[^"+c(_)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",s=n||{},c=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var d=e[u];if("string"!=typeof d){var p,f=s[d.name];if(null==f){if(d.optional){d.partial&&(a+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(f)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var m=0;m<f.length;m++){if(p=c(f[m]),!t[u].test(p))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(p)+"`");a+=(0===m?d.prefix:d.delimiter)+p}}else{if(p=d.asterisk?l(f):c(f),!t[u].test(p))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+p+'"');a+=d.prefix+p}}else a+=d}return a}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function p(e){return e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=c(s);else{var u=c(s.prefix),f="(?:"+s.pattern+")";t.push(s),s.repeat&&(f+="(?:"+u+f+")*"),i+=f=s.optional?s.partial?u+"("+f+")?":"(?:"+u+"("+f+"))?":u+"("+f+")"}}var m=c(n.delimiter||"/"),h=i.slice(-m.length)===m;return o||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=a?"$":o&&h?"":"(?="+m+"|$)",d(new RegExp("^"+i,p(n)),t)}function m(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(m(e[o],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",p(n)),t)}(e,t,n):function(e,t,n){return f(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.6
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){o=1;break}var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:u(c(e))}var d=n&&!(!window.MSInputMethodContext||!document.documentMode),p=n&&/MSIE 10/.test(navigator.userAgent);function f(e){return 11===e?d:10===e?p:d||p}function m(e){if(!e)return document.documentElement;for(var t=f(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===s(n,"position")?m(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i=a.commonAncestorContainer;if(e!==i&&t!==i||r.contains(o))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||m(e.firstElementChild)===e)}(i)?i:m(i);var l=h(e);return l.host?g(l.host,t):g(e,h(t).host)}function b(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function v(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],f(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function x(e){var t=e.body,n=e.documentElement,r=f(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),k=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function C(e){return _({},e,{right:e.left+e.width,bottom:e.top+e.height})}function T(e){var t={};try{if(f(10)){t=e.getBoundingClientRect();var n=b(e,"top"),r=b(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?x(e.ownerDocument):{},i=a.width||e.clientWidth||o.right-o.left,l=a.height||e.clientHeight||o.bottom-o.top,c=e.offsetWidth-i,u=e.offsetHeight-l;if(c||u){var d=s(e);c-=v(d,"x"),u-=v(d,"y"),o.width-=c,o.height-=u}return C(o)}function S(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===t.nodeName,a=T(e),i=T(t),l=u(e),c=s(t),d=parseFloat(c.borderTopWidth,10),p=parseFloat(c.borderLeftWidth,10);n&&o&&(i.top=Math.max(i.top,0),i.left=Math.max(i.left,0));var m=C({top:a.top-i.top-d,left:a.left-i.left-p,width:a.width,height:a.height});if(m.marginTop=0,m.marginLeft=0,!r&&o){var h=parseFloat(c.marginTop,10),g=parseFloat(c.marginLeft,10);m.top-=d-h,m.bottom-=d-h,m.left-=p-g,m.right-=p-g,m.marginTop=h,m.marginLeft=g}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(m=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=b(t,"top"),o=b(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}(m,t)),m}function O(e){if(!e||!e.parentElement||f())return document.documentElement;for(var t=e.parentElement;t&&"none"===s(t,"transform");)t=t.parentElement;return t||document.documentElement}function P(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?O(e):g(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=S(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:b(n),l=t?0:b(n,"left");return C({top:i-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:a})}(i,o);else{var l=void 0;"scrollParent"===r?"BODY"===(l=u(c(t))).nodeName&&(l=e.ownerDocument.documentElement):l="window"===r?e.ownerDocument.documentElement:r;var d=S(l,i,o);if("HTML"!==l.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===s(t,"position")||e(c(t)))}(i))a=d;else{var p=x(e.ownerDocument),f=p.height,m=p.width;a.top+=d.top-d.marginTop,a.bottom=f+d.top,a.left+=d.left-d.marginLeft,a.right=m+d.left}}var h="number"==typeof(n=n||0);return a.left+=h?n:n.left||0,a.top+=h?n:n.top||0,a.right-=h?n:n.right||0,a.bottom-=h?n:n.bottom||0,a}function N(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=P(n,r,a,o),l={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},s=Object.keys(l).map(function(e){return _({key:e},l[e],{area:function(e){return e.width*e.height}(l[e])})}).sort(function(e,t){return t.area-e.area}),c=s.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),u=c.length>0?c[0].key:s[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function j(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return S(n,r?O(t):g(t,n),r)}function I(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function A(e,t,n){n=n.split("-")[0];var r=I(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",l=a?"left":"top",s=a?"height":"width",c=a?"width":"height";return o[i]=t[i]+t[s]/2-r[s]/2,o[l]=n===l?t[l]-r[c]:t[D(l)],o}function R(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function M(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=R(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))}),t}function L(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function U(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function F(e){var t=e.ownerDocument;return t?t.defaultView:window}function H(e,t,n,r){n.updateBound=r,F(e).addEventListener("resize",n.updateBound,{passive:!0});var o=u(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(u(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(e,t){return F(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}(this.reference,this.state))}function B(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&B(t[n])&&(r="px"),e.style[n]=t[n]+r})}var q=n&&/Firefox/i.test(navigator.userAgent);function V(e,t,n){var r=R(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var K=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],G=K.slice(3);function $(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=G.indexOf(e),r=G.slice(n+1).concat(G.slice(0,n));return t?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Y(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=i.indexOf(R(i,function(e){return-1!==e.search(/,|\s/)}));i[l]&&-1===i[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,c=-1!==l?[i.slice(0,l).concat([i[l].split(s)[0]]),[i[l].split(s)[1]].concat(i.slice(l+1))]:[i];return(c=c.map(function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var l=void 0;switch(i){case"%p":l=n;break;case"%":case"%r":default:l=r}return C(l)[t]/100*a}if("vh"===i||"vw"===i)return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){B(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",c=l?"width":"height",u={start:k({},s,a[s]),end:k({},s,a[s]+a[c]-i[c])};e.offsets.popper=_({},i,u[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,l=r.split("-")[0],s=void 0;return s=B(+n)?[+n,0]:Y(n,a,i,l),"left"===l?(a.top+=s[0],a.left-=s[1]):"right"===l?(a.top+=s[0],a.left+=s[1]):"top"===l?(a.left+=s[0],a.top-=s[1]):"bottom"===l&&(a.left+=s[0],a.top+=s[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||m(e.instance.popper);e.instance.reference===n&&(n=m(n));var r=U("transform"),o=e.instance.popper.style,a=o.top,i=o.left,l=o[r];o.top="",o.left="",o[r]="";var s=P(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=l,t.boundaries=s;var c=t.priority,u=e.offsets.popper,d={primary:function(e){var n=u[e];return u[e]<s[e]&&!t.escapeWithReference&&(n=Math.max(u[e],s[e])),k({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=u[n];return u[e]>s[e]&&!t.escapeWithReference&&(r=Math.min(u[n],s[e]-("right"===e?u.width:u.height))),k({},n,r)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=_({},u,d[t](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),l=i?"right":"bottom",s=i?"left":"top",c=i?"width":"height";return n[l]<a(r[s])&&(e.offsets.popper[s]=a(r[s])-n[c]),n[s]>a(r[l])&&(e.offsets.popper[s]=a(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,i=a.popper,l=a.reference,c=-1!==["left","right"].indexOf(o),u=c?"height":"width",d=c?"Top":"Left",p=d.toLowerCase(),f=c?"left":"top",m=c?"bottom":"right",h=I(r)[u];l[m]-h<i[p]&&(e.offsets.popper[p]-=i[p]-(l[m]-h)),l[p]+h>i[m]&&(e.offsets.popper[p]+=l[p]+h-i[m]),e.offsets.popper=C(e.offsets.popper);var g=l[p]+l[u]/2-h/2,b=s(e.instance.popper),v=parseFloat(b["margin"+d],10),y=parseFloat(b["border"+d+"Width"],10),x=g-e.offsets.popper[p]-v-y;return x=Math.max(Math.min(i[u]-h,x),0),e.arrowElement=r,e.offsets.arrow=(k(n={},p,Math.round(x)),k(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(L(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=P(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=D(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case X.FLIP:i=[r,o];break;case X.CLOCKWISE:i=$(r);break;case X.COUNTERCLOCKWISE:i=$(r,!0);break;default:i=t.behavior}return i.forEach(function(l,s){if(r!==l||i.length===s+1)return e;r=e.placement.split("-")[0],o=D(r);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,p="left"===r&&d(c.right)>d(u.left)||"right"===r&&d(c.left)<d(u.right)||"top"===r&&d(c.bottom)>d(u.top)||"bottom"===r&&d(c.top)<d(u.bottom),f=d(c.left)<d(n.left),m=d(c.right)>d(n.right),h=d(c.top)<d(n.top),g=d(c.bottom)>d(n.bottom),b="left"===r&&f||"right"===r&&m||"top"===r&&h||"bottom"===r&&g,v=-1!==["top","bottom"].indexOf(r),y=!!t.flipVariations&&(v&&"start"===a&&f||v&&"end"===a&&m||!v&&"start"===a&&h||!v&&"end"===a&&g);(p||b||y)&&(e.flipped=!0,(p||b)&&(r=i[s+1]),y&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=_({},e.offsets.popper,A(e.instance.popper,e.offsets.reference,e.placement)),e=M(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(l?o[i?"width":"height"]:0),e.placement=D(t),e.offsets.popper=C(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=R(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=R(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,l=m(e.instance.popper),s=T(l),c={position:o.position},u=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,a=-1!==["left","right"].indexOf(e.placement),i=-1!==e.placement.indexOf("-"),l=o.width%2==r.width%2,s=o.width%2==1&&r.width%2==1,c=function(e){return e},u=t?a||i||l?Math.round:Math.floor:c,d=t?Math.round:c;return{left:u(s&&!i&&t?r.left-1:r.left),top:d(r.top),bottom:d(r.bottom),right:u(r.right)}}(e,window.devicePixelRatio<2||!q),d="bottom"===n?"top":"bottom",p="right"===r?"left":"right",f=U("transform"),h=void 0,g=void 0;if(g="bottom"===d?"HTML"===l.nodeName?-l.clientHeight+u.bottom:-s.height+u.bottom:u.top,h="right"===p?"HTML"===l.nodeName?-l.clientWidth+u.right:-s.width+u.right:u.left,i&&f)c[f]="translate3d("+h+"px, "+g+"px, 0)",c[d]=0,c[p]=0,c.willChange="transform";else{var b="bottom"===d?-1:1,v="right"===p?-1:1;c[d]=g*b,c[p]=h*v,c.willChange=d+", "+p}var y={"x-placement":e.placement};return e.attributes=_({},y,e.attributes),e.styles=_({},c,e.styles),e.arrowStyles=_({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return W(e.instance.popper,e.styles),function(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=j(o,t,e,n.positionFixed),i=N(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},J=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=_({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=_({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return _({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return E(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=N(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=A(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=M(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,L(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[U("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();J.Utils=("undefined"!=typeof window?window:e).PopperUtils,J.placements=K,J.Defaults=Q,t.default=J}.call(this,n(25))},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(58));t.on=o.default;var a=r(n(57));t.off=a.default;var i=r(n(129));t.filter=i.default;var l=r(n(38));t.listen=l.default;var s={on:o.default,off:a.default,filter:i.default,listen:l.default};t.default=s},function(e,t,n){"use strict";n.r(t);var r=n(67),o=n.n(r),a=n(17),i=n.n(a),l=n(22),s=n.n(l),c=n(3),u=n.n(c),d=n(6),p=n.n(d),f=n(0),m=n(33),h=n(66),g=n.n(h)()({setReferenceNode:void 0,referenceNode:void 0}),b=function(e){function t(){var t;return t=e.call(this)||this,p()(u()(u()(t)),"setReferenceNode",function(e){e&&t.state.context.referenceNode!==e&&t.setState(function(t){var n=t.context;return{context:i()({},n,{referenceNode:e})}})}),t.state={context:{setReferenceNode:t.setReferenceNode,referenceNode:void 0}},t}return s()(t,e),t.prototype.render=function(){return f.createElement(g.Provider,{value:this.state.context},this.props.children)},t}(f.Component),v=function(e){return Array.isArray(e)?e[0]:e},y=function(e){if("function"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(void 0,n)}},x={position:"absolute",top:0,left:0,opacity:0,pointerEvents:"none"},w={},E=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return t=e.call.apply(e,[this].concat(r))||this,p()(u()(u()(t)),"state",{data:void 0,placement:void 0}),p()(u()(u()(t)),"popperInstance",void 0),p()(u()(u()(t)),"popperNode",null),p()(u()(u()(t)),"arrowNode",null),p()(u()(u()(t)),"setPopperNode",function(e){e&&t.popperNode!==e&&(y(t.props.innerRef,e),t.popperNode=e,t.updatePopperInstance())}),p()(u()(u()(t)),"setArrowNode",function(e){t.arrowNode=e}),p()(u()(u()(t)),"updateStateModifier",{enabled:!0,order:900,fn:function(e){var n=e.placement;return t.setState({data:e,placement:n}),e}}),p()(u()(u()(t)),"getOptions",function(){return{placement:t.props.placement,eventsEnabled:t.props.eventsEnabled,positionFixed:t.props.positionFixed,modifiers:i()({},t.props.modifiers,{arrow:i()({},t.props.modifiers&&t.props.modifiers.arrow,{enabled:!!t.arrowNode,element:t.arrowNode}),applyStyle:{enabled:!1},updateStateModifier:t.updateStateModifier})}}),p()(u()(u()(t)),"getPopperStyle",function(){return t.popperNode&&t.state.data?i()({position:t.state.data.offsets.popper.position},t.state.data.styles):x}),p()(u()(u()(t)),"getPopperPlacement",function(){return t.state.data?t.state.placement:void 0}),p()(u()(u()(t)),"getArrowStyle",function(){return t.arrowNode&&t.state.data?t.state.data.arrowStyles:w}),p()(u()(u()(t)),"getOutOfBoundariesState",function(){return t.state.data?t.state.data.hide:void 0}),p()(u()(u()(t)),"destroyPopperInstance",function(){t.popperInstance&&(t.popperInstance.destroy(),t.popperInstance=null)}),p()(u()(u()(t)),"updatePopperInstance",function(){t.destroyPopperInstance();var e=u()(u()(t)).popperNode,n=t.props.referenceElement;n&&e&&(t.popperInstance=new m.default(n,e,t.getOptions()))}),p()(u()(u()(t)),"scheduleUpdate",function(){t.popperInstance&&t.popperInstance.scheduleUpdate()}),t}s()(t,e);var n=t.prototype;return n.componentDidUpdate=function(e,t){this.props.placement!==e.placement||this.props.referenceElement!==e.referenceElement||this.props.positionFixed!==e.positionFixed?this.updatePopperInstance():this.props.eventsEnabled!==e.eventsEnabled&&this.popperInstance&&(this.props.eventsEnabled?this.popperInstance.enableEventListeners():this.popperInstance.disableEventListeners()),t.placement!==this.state.placement&&this.scheduleUpdate()},n.componentWillUnmount=function(){y(this.props.innerRef,null),this.destroyPopperInstance()},n.render=function(){return v(this.props.children)({ref:this.setPopperNode,style:this.getPopperStyle(),placement:this.getPopperPlacement(),outOfBoundaries:this.getOutOfBoundariesState(),scheduleUpdate:this.scheduleUpdate,arrowProps:{ref:this.setArrowNode,style:this.getArrowStyle()}})},t}(f.Component);p()(E,"defaultProps",{placement:"bottom",eventsEnabled:!0,referenceElement:void 0,positionFixed:!1});var k=m.default.placements;function _(e){var t=e.referenceElement,n=o()(e,["referenceElement"]);return f.createElement(g.Consumer,null,function(e){var r=e.referenceNode;return f.createElement(E,i()({referenceElement:void 0!==t?t:r},n))})}var C=n(4),T=n.n(C),S=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return t=e.call.apply(e,[this].concat(r))||this,p()(u()(u()(t)),"refHandler",function(e){y(t.props.innerRef,e),y(t.props.setReferenceNode,e)}),t}return s()(t,e),t.prototype.render=function(){return T()(Boolean(this.props.setReferenceNode),"`Reference` should not be used outside of a `Manager` component."),v(this.props.children)({ref:this.refHandler})},t}(f.Component);function O(e){return f.createElement(g.Consumer,null,function(t){var n=t.setReferenceNode;return f.createElement(S,i()({setReferenceNode:n},e))})}n.d(t,"Popper",function(){return _}),n.d(t,"placements",function(){return k}),n.d(t,"Manager",function(){return b}),n.d(t,"Reference",function(){return O})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(t,n,r,o,a,i){var l=o||"<<anonymous>>",s=i||r;if(null==n[r])return t?new Error("Required "+a+" `"+s+"` was not specified in `"+l+"`."):null;for(var c=arguments.length,u=Array(c>6?c-6:0),d=6;d<c;d++)u[d-6]=arguments[d];return e.apply(void 0,[n,r,l,a,s].concat(u))}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=i(n(0)),a=i(n(36));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)(function(e,t,n,a,i){var l=e[t],s=void 0===l?"undefined":r(l);return o.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+n+"`, expected a ReactComponent or a DOMElement. You can usually obtain a ReactComponent or DOMElement from a ReactElement by attaching a ref to it."):"object"===s&&"function"==typeof l.render||1===l.nodeType?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+n+"`, expected a ReactComponent or a DOMElement.")}),e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(14)),a=r(n(58)),i=r(n(57)),l=function(){};o.default&&(l=function(e,t,n,r){return(0,a.default)(e,t,n,r),function(){(0,i.default)(e,t,n,r)}});var s=l;t.default=s,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(0)).default.createContext({menuRef:function(){},toggleRef:function(){},onToggle:function(){},toggleNode:void 0,alignEnd:null,show:null,drop:null});t.default=r,e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,a,i,l,s,c,u,d,p,f,m,h=r(n(14)),g="transform";if(t.transform=g,t.animationEnd=i,t.transitionEnd=a,t.transitionDelay=u,t.transitionTiming=c,t.transitionDuration=s,t.transitionProperty=l,t.animationDelay=m,t.animationTiming=f,t.animationDuration=p,t.animationName=d,h.default){var b=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),a="",i=0;i<o.length;i++){var l=o[i];if(l+"TransitionProperty"in n){a="-"+l.toLowerCase(),e=r[l]("TransitionEnd"),t=r[l]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:a}}();o=b.prefix,t.transitionEnd=a=b.transitionEnd,t.animationEnd=i=b.animationEnd,t.transform=g=o+"-"+g,t.transitionProperty=l=o+"-transition-property",t.transitionDuration=s=o+"-transition-duration",t.transitionDelay=u=o+"-transition-delay",t.transitionTiming=c=o+"-transition-timing-function",t.animationName=d=o+"-animation-name",t.animationDuration=p=o+"-animation-duration",t.animationTiming=f=o+"-animation-delay",t.animationDelay=m=o+"-animation-timing-function"}var v={transform:g,end:a,property:l,timing:c,delay:u,duration:s};t.default=v},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,l=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(l[c]=n[c]);if(r){i=r(n);for(var u=0;u<i.length;u++)a.call(n,i[u])&&(l[i[u]]=n[i[u]])}}return l}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(125)),o=s(n(15)),a=s(n(21)),i=s(n(122)),l=n(120);function s(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e){var t=void 0===e?{}:e,n=t.hideSiblingNodes,r=void 0===n||n,o=t.handleContainerOverflow,i=void 0===o||o;this.hideSiblingNodes=r,this.handleContainerOverflow=i,this.modals=[],this.containers=[],this.data=[],this.scrollbarSize=(0,a.default)()}var t=e.prototype;return t.isContainerOverflowing=function(e){var t=this.data[this.containerIndexFromModal(e)];return t&&t.overflowing},t.containerIndexFromModal=function(e){return function(e,t){var n=-1;return e.some(function(e,r){if(t(e,r))return n=r,!0}),n}(this.data,function(t){return-1!==t.modals.indexOf(e)})},t.setContainerStyle=function(e,t){var n={overflow:"hidden"};e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing&&(n.paddingRight=parseInt((0,o.default)(t,"paddingRight")||0,10)+this.scrollbarSize+"px"),(0,o.default)(t,n)},t.removeContainerStyle=function(e,t){var n=e.style;Object.keys(n).forEach(function(e){t.style[e]=n[e]})},t.add=function(e,t,n){var o=this.modals.indexOf(e),a=this.containers.indexOf(t);if(-1!==o)return o;if(o=this.modals.length,this.modals.push(e),this.hideSiblingNodes&&(0,l.hideSiblings)(t,e),-1!==a)return this.data[a].modals.push(e),o;var s={modals:[e],classes:n?n.split(/\s+/):[],overflowing:(0,i.default)(t)};return this.handleContainerOverflow&&this.setContainerStyle(s,t),s.classes.forEach(r.default.addClass.bind(null,t)),this.containers.push(t),this.data.push(s),o},t.remove=function(e){var t=this.modals.indexOf(e);if(-1!==t){var n=this.containerIndexFromModal(e),o=this.data[n],a=this.containers[n];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(t,1),0===o.modals.length)o.classes.forEach(r.default.removeClass.bind(null,a)),this.handleContainerOverflow&&this.removeContainerStyle(o,a),this.hideSiblingNodes&&(0,l.showSiblings)(a,e),this.containers.splice(n,1),this.data.splice(n,1);else if(this.hideSiblingNodes){var i=o.modals[o.modals.length-1],s=i.backdrop,c=i.dialog;(0,l.ariaHidden)(!1,c),(0,l.ariaHidden)(!1,s)}}},t.isTopModal=function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e},e}();t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=i(n(2)),o=i(n(0)),a=i(n(39));function i(e){return e&&e.__esModule?e:{default:e}}var l={children:r.default.func.isRequired};function s(e){var t=e.children;return o.default.createElement(a.default.Consumer,null,function(e){var n=e.show,r=e.toggle,o=e.toggleRef;return t({show:n,toggle:r,props:{ref:o,"aria-haspopup":!0,"aria-expanded":!!n}})})}s.displayName="ReactOverlaysDropdownToggle",s.propTypes=l;var c=s;t.default=c,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=c(n(2)),o=c(n(0)),a=n(35),i=c(n(39)),l=c(n(59)),s=c(n(12));function c(e){return e&&e.__esModule?e:{default:e}}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var d=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).state={toggleId:null},t.popperIsInitialized=!1,t.handleClose=function(e){t.props.onToggle&&t.props.onToggle(!1,e)},t}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.getSnapshotBeforeUpdate=function(e){var t=!e.show&&this.props.show&&this.popperIsInitialized&&e.toggleNode===this.props.toggleNode;return this.props.show&&this.props.usePopper&&!this.popperIsInitialized&&(this.popperIsInitialized=!0),!!t},n.componentDidUpdate=function(e,t,n){n&&this.scheduleUpdate&&this.scheduleUpdate()},n.render=function(){var e=this,t=this.props,n=t.show,r=t.flip,i=t.menuRef,s=t.alignEnd,c=t.drop,d=t.usePopper,p=t.toggleNode,f=t.rootCloseEvent,m=t.popperConfig,h=void 0===m?{}:m,g=s?"bottom-end":"bottom-start";"up"===c&&(g=s?"top-end":"top-start"),"right"===c&&(g=s?"right-end":"right-start"),"left"===c&&(g=s?"left-end":"left-start");var b=null,v={ref:i,"aria-labelledby":p&&p.id},y={show:n,alignEnd:s,close:this.handleClose};return d?(this.popperIsInitialized||n)&&(p&&(h.referenceElement=p),b=o.default.createElement(a.Popper,u({},h,{innerRef:i,placement:g,eventsEnabled:!!n,modifiers:u({flip:{enabled:!!r}},h.modifiers)}),function(t){var n=t.ref,r=t.style,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["ref","style"]);return e.scheduleUpdate=o.scheduleUpdate,e.props.children(u({},o,y,{props:u({},v,{ref:n,style:r})}))})):b=this.props.children(u({},y,{props:v})),b&&o.default.createElement(l.default,{disabled:!n,event:f,onRootClose:this.handleClose},b)},t}(o.default.Component);d.displayName="ReactOverlaysDropdownMenu",d.propTypes={children:r.default.func.isRequired,show:r.default.bool,alignEnd:r.default.bool,flip:r.default.bool,usePopper:r.default.oneOf([!0,!1]),popperConfig:r.default.object,rootCloseEvent:r.default.string,onToggle:r.default.func,menuRef:r.default.func,drop:r.default.string,toggleNode:r.default.any},d.defaultProps={usePopper:!0};var p=(0,s.default)(i.default,function(e,t){var n=e.show,r=e.alignEnd,o=e.toggle;return{drop:e.drop,menuRef:e.menuRef,toggleNode:e.toggleNode,onToggle:o,show:null==n?t.show:n,alignEnd:null==r?t.alignEnd:r}},d);t.default=p,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})};var r=/-(.)/g;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=f(n(133)),o=f(n(13)),a=f(n(0)),i=f(n(7)),l=f(n(2)),s=f(n(11)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(35)),u=f(n(39)),d=f(n(45)),p=f(n(44));function f(e){return e&&e.__esModule?e:{default:e}}function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var h={children:l.default.func.isRequired,drop:l.default.oneOf(["up","left","right","down"]),itemSelector:l.default.string.isRequired,alignEnd:l.default.bool,show:l.default.bool,onToggle:l.default.func},g=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).handleClick=function(e){r.toggleOpen(e)},r.handleKeyDown=function(e){var t=e.key,n=e.target;if(!/input|textarea/i.test(n.tagName)||!(" "===t||"Escape"!==t&&r.menu.contains(n)))switch(t){case"ArrowUp":var o=r.getNextFocusedChild(n,-1);return o&&o.focus&&o.focus(),void e.preventDefault();case"ArrowDown":if(e.preventDefault(),r.props.show){var a=r.getNextFocusedChild(n,1);a&&a.focus&&a.focus()}else r.toggleOpen(e);return;case"Escape":case"Tab":r.props.onToggle(!1,e)}},r._focusInDropdown=!1,r.menu=null,r.state={context:{close:r.handleClose,toggle:r.handleClick,menuRef:function(e){r.menu=e},toggleRef:function(e){var t=e&&i.default.findDOMNode(e);r.setState(function(e){return{context:m({},e.context,{toggleNode:t})}})}}},r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e),t.getDerivedStateFromProps=function(e,t){var n=e.drop,r=e.alignEnd,o=e.show;return{lastShow:t.context.show,context:m({},t.context,{drop:n,show:o,alignEnd:r})}};var n=t.prototype;return n.componentDidUpdate=function(e){var t=this.props.show,n=e.show;t&&!n&&this.maybeFocusFirst(),!t&&n&&this._focusInDropdown&&(this._focusInDropdown=!1,this.focus())},n.getNextFocusedChild=function(e,t){if(!this.menu)return null;var n=this.props.itemSelector,r=(0,o.default)(this.menu,n),a=r.indexOf(e)+t;return r[a=Math.max(0,Math.min(a,r.length))]},n.hasMenuRole=function(){return this.menu&&(0,r.default)(this.menu,"[role=menu]")},n.focus=function(){var e=this.state.context.toggleNode;e&&e.focus&&e.focus()},n.maybeFocusFirst=function(){if(this.hasMenuRole()){var e=this.props.itemSelector,t=(0,o.default)(this.menu,e)[0];t&&t.focus&&t.focus()}},n.toggleOpen=function(e){var t=!this.props.show;this.props.onToggle(t,e)},n.render=function(){var e=this.props,t=e.children;return delete function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["children"]).onToggle,this.menu&&this.state.lastShow&&!this.props.show&&(this._focusInDropdown=this.menu.contains(document.activeElement)),a.default.createElement(u.default.Provider,{value:this.state.context},a.default.createElement(c.Manager,null,t({props:{onKeyDown:this.handleKeyDown}})))},t}(a.default.Component);g.displayName="ReactOverlaysDropdown",g.propTypes=h,g.defaultProps={itemSelector:"* > *"};var b=(0,s.default)(g,{show:"onToggle"});b.Menu=d.default,b.Toggle=p.default;var v=b;t.default=v,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=n(0),a=o.PureComponent,i=n(2),l=n(42);function s(){}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a),r(t,[{key:"render",value:function(){var e={ref:"iframe",frameBorder:"0",src:this.props.url,target:"_parent",allowFullScreen:this.props.allowFullScreen||!1,style:l({},{position:this.props.position||"absolute",display:this.props.display||"block",height:this.props.height||"100%",width:this.props.width||"100%"},this.props.styles||{}),height:this.props.height||"100%",name:this.props.name||"",width:this.props.width||"100%",onLoad:this.props.onLoad||s,onMouseOver:this.props.onMouseOver||s,onMouseOut:this.props.onMouseOut||s};return o.createElement("iframe",l(e,this.props.id?{id:this.props.id}:{},this.props.sandbox?{sandbox:this.props.sandbox}:{},this.props.allow?{allow:this.props.allow}:{},this.props.className?{className:this.props.className}:{},this.props.title?{title:this.props.title}:{},this.props.ariaHidden?{"aria-hidden":"true"}:{}))}}]),t}();c.propTypes={url:i.string.isRequired,id:i.string,title:i.string,className:i.string,width:i.string,position:i.string,display:i.string,name:i.string,height:i.string,onLoad:i.func,sandbox:i.string,allow:i.string,onMouseOver:i.func,onMouseOut:i.func,styles:i.object,allowFullScreen:i.bool,ariaHidden:i.bool},t.default=c},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],u=!1,d=-1;function p(){u&&s&&(u=!1,s.length?c=s.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=l(p);u=!0;for(var t=c.length;t;){for(s=c,c=[];++d<t;)s&&s[d].run();d=-1,t=c.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new m(e,t)),1!==c.length||u||l(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0));var a=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"bg-main pad-5 separator"},o.default.createElement("h2",{className:"text-center"},this.props.children))}}]),t}();t.default=a},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return null==e?t:(e="function"==typeof e?e():e,r.default.findDOMNode(e)||null)};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(7));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(2)),o=u(n(37)),a=u(n(14)),i=u(n(20)),l=u(n(0)),s=u(n(7)),c=u(n(51));function u(e){return e&&e.__esModule?e:{default:e}}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var p={container:r.default.oneOfType([o.default,r.default.func]),onContainerResolved:r.default.func},f=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];if(t=e.call.apply(e,[this].concat(r))||this,!a.default)return d(t);var i=t.props.container;return"function"==typeof i&&(i=i()),i&&!s.default.findDOMNode(i)?d(t):(t.setContainer(i),t)}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.UNSAFE_componentWillReceiveProps=function(e){e.container!==this.props.container&&this.setContainer(e.container)},n.componentDidMount=function(){this._container?this.props.onContainerResolved&&this.props.onContainerResolved():(this.setContainer(this.props.container),this.forceUpdate(this.props.onContainerResolved))},n.componentWillUnmount=function(){this._container=null},n.setContainer=function(e){this._container=(0,c.default)(e,(0,i.default)().body)},n.render=function(){return this._container?this.props.children(this._container):null},t}(l.default.Component);f.propTypes=p;var m=f;t.default=m,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=s(n(2)),o=s(n(37)),a=s(n(0)),i=s(n(7)),l=s(n(52));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return e.apply(this,arguments)||this}return function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e),t.prototype.render=function(){var e=this;return this.props.children?a.default.createElement(l.default,{container:this.props.container,onContainerResolved:this.props.onRendered},function(t){return i.default.createPortal(e.props.children,t)}):null},t}(a.default.Component);c.displayName="Portal",c.propTypes={container:r.default.oneOfType([o.default,r.default.func]),onRendered:r.default.func};var u=c;t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(0)),o=n(127),a=i(n(36));function i(e){return e&&e.__esModule?e:{default:e}}t.default=(0,a.default)(function(e,t,n,a,i){var l=e[t];return r.default.isValidElement(l)?new Error("Invalid "+a+" `"+i+"` of type ReactElement supplied to `"+n+"`,expected an element type (a string , component class, or function component)."):(0,o.isValidElementType)(l)?null:new Error("Invalid "+a+" `"+i+"` of value `"+l+"` supplied to `"+n+"`, expected an element type (a string , component class, or function component).")}),e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(r.default.findDOMNode(e))};var r=a(n(7)),o=a(n(20));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(14)).default&&(o=document.addEventListener?function(e,t,n,r){return e.removeEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=function(){};r(n(14)).default&&(o=document.addEventListener?function(e,t,n,r){return e.addEventListener(t,n,r||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,function(t){(t=t||window.event).target=t.target||t.srcElement,t.currentTarget=e,n.call(e,t)})}:void 0);var a=o;t.default=a,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=c(n(26)),o=c(n(38)),a=c(n(2)),i=c(n(0)),l=c(n(7)),s=c(n(56));function c(e){return e&&e.__esModule?e:{default:e}}function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=27,p=function(){};var f=function(e){function t(t,n){var a;return(a=e.call(this,t,n)||this).addEventListeners=function(){var e=a.props.event,t=(0,s.default)(u(u(a)));a.removeMouseCaptureListener=(0,o.default)(t,e,a.handleMouseCapture,!0),a.removeMouseListener=(0,o.default)(t,e,a.handleMouse),a.removeKeyupListener=(0,o.default)(t,"keyup",a.handleKeyUp),"ontouchstart"in t.documentElement&&(a.mobileSafariHackListeners=[].slice.call(document.body.children).map(function(e){return(0,o.default)(e,"mousemove",p)}))},a.removeEventListeners=function(){a.removeMouseCaptureListener&&a.removeMouseCaptureListener(),a.removeMouseListener&&a.removeMouseListener(),a.removeKeyupListener&&a.removeKeyupListener(),a.mobileSafariHackListeners&&a.mobileSafariHackListeners.forEach(function(e){return e()})},a.handleMouseCapture=function(e){a.preventMouseRootClose=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||!function(e){return 0===e.button}(e)||(0,r.default)(l.default.findDOMNode(u(u(a))),e.target)},a.handleMouse=function(e){!a.preventMouseRootClose&&a.props.onRootClose&&a.props.onRootClose(e)},a.handleKeyUp=function(e){e.keyCode===d&&a.props.onRootClose&&a.props.onRootClose(e)},a.preventMouseRootClose=!1,a}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.disabled||this.addEventListeners()},n.componentDidUpdate=function(e){!this.props.disabled&&e.disabled?this.addEventListeners():this.props.disabled&&!e.disabled&&this.removeEventListeners()},n.componentWillUnmount=function(){this.props.disabled||this.removeEventListeners()},n.render=function(){return this.props.children},t}(i.default.Component);f.displayName="RootCloseWrapper",f.propTypes={onRootClose:a.default.func,children:a.default.element,disabled:a.default.bool,event:a.default.oneOf(["click","mousedown"])},f.defaultProps={event:"click"};var m=f;t.default=m,e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(a,"ms-"))};var o=r(n(46)),a=/^-ms-/;e.exports=t.default},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,l,s){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,o,a,i,l,s],d=0;(c=new Error(t.replace(/%s/g,function(){return u[d++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=p(n(2)),o=p(n(55)),a=p(n(0)),i=p(n(7)),l=p(n(53)),s=p(n(59)),c=n(35),u=p(n(27)),d=p(n(52));function p(e){return e&&e.__esModule?e:{default:e}}function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var g=function(e){function t(t,n){var r;return(r=e.call(this,t,n)||this).handleHidden=function(){var e;(r.setState({exited:!0}),r.props.onExited)&&(e=r.props).onExited.apply(e,arguments)},r.state={exited:!t.show},r.onHiddenListener=r.handleHidden.bind(h(h(r))),r._lastTarget=null,r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e),t.getDerivedStateFromProps=function(e){return e.show?{exited:!1}:e.transition?null:{exited:!0}};var n=t.prototype;return n.componentDidMount=function(){this.setState({target:this.getTarget()})},n.componentDidUpdate=function(e){if(this.props!==e){var t=this.getTarget();t!==this.state.target&&this.setState({target:t})}},n.getTarget=function(){var e=this.props.target;return(e="function"==typeof e?e():e)&&i.default.findDOMNode(e)||null},n.render=function(){var e=this,t=this.props,n=(t.target,t.container),r=t.containerPadding,o=t.placement,i=t.rootClose,u=t.children,d=t.flip,p=t.popperConfig,h=void 0===p?{}:p,g=t.transition,b=m(t,["target","container","containerPadding","placement","rootClose","children","flip","popperConfig","transition"]),v=this.state.target;if(!(b.show||g&&!this.state.exited))return null;var y=u,x=h.modifiers,w=void 0===x?{}:x,E=f({},h,{placement:o,referenceElement:v,enableEvents:b.show,modifiers:f({},w,{preventOverflow:f({padding:r||5},w.preventOverflow),flip:f({enabled:!!d},w.preventOverflow)})});return y=a.default.createElement(c.Popper,E,function(t){var n=t.arrowProps,r=t.style,i=t.ref,l=m(t,["arrowProps","style","ref"]);e.popper=l;var s=e.props.children(f({},l,{placement:l.placement||o,show:b.show,arrowProps:n,props:{ref:i,style:r}}));if(g){var c=b.onExit,u=b.onExiting,d=b.onEnter,p=b.onEntering,h=b.onEntered;s=a.default.createElement(g,{in:b.show,appear:!0,onExit:c,onExiting:u,onExited:e.onHiddenListener,onEnter:d,onEntering:p,onEntered:h},s)}return s}),i&&(y=a.default.createElement(s.default,{onRootClose:b.onHide,event:b.rootCloseEvent,disabled:b.rootCloseDisabled},y)),a.default.createElement(l.default,{container:n},y)},t}(a.default.Component);g.propTypes=f({},l.default.propTypes,{show:r.default.bool,placement:r.default.oneOf(c.placements),flip:r.default.bool,children:r.default.func.isRequired,popperConfig:r.default.object,rootClose:r.default.bool,rootCloseEvent:s.default.propTypes.event,rootCloseDisabled:s.default.propTypes.disabled,onHide:function(e){var t=r.default.func;e.rootClose&&(t=t.isRequired);for(var n=arguments.length,o=new Array(n>1?n-1:0),a=1;a<n;a++)o[a-1]=arguments[a];return t.apply(void 0,[e].concat(o))},transition:o.default,onEnter:r.default.func,onEntering:r.default.func,onEntered:r.default.func,onExit:r.default.func,onExiting:r.default.func,onExited:r.default.func});var b=(0,u.default)(function(e,t){return a.default.createElement(d.default,{container:e.container},function(n){return a.default.createElement(g,f({},e,{ref:t,container:n}))})},{displayName:"withContainer(Overlay)"});t.default=b,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=g(n(128)),o=g(n(26)),a=g(n(14)),i=g(n(38)),l=g(n(2)),s=g(n(37)),c=g(n(55)),u=g(n(0)),d=g(n(7)),p=g(n(43)),f=g(n(53)),m=g(n(51)),h=g(n(56));function g(e){return e&&e.__esModule?e:{default:e}}function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var y=new p.default;var x=function(e){function t(){for(var t,n=arguments.length,a=new Array(n),l=0;l<n;l++)a[l]=arguments[l];return(t=e.call.apply(e,[this].concat(a))||this).state={exited:!t.props.show},t.onPortalRendered=function(){t.props.onShow&&t.props.onShow(),t.autoFocus()},t.onShow=function(){var e=(0,h.default)(v(v(t))),n=(0,m.default)(t.props.container,e.body);t.props.manager.add(v(v(t)),n,t.props.containerClassName),t.removeKeydownListener=(0,i.default)(e,"keydown",t.handleDocumentKeyDown),t.removeFocusListener=(0,i.default)(e,"focus",function(){return setTimeout(t.enforceFocus)},!0)},t.onHide=function(){t.props.manager.remove(v(v(t))),t.removeKeydownListener(),t.removeFocusListener(),t.props.restoreFocus&&t.restoreLastFocus()},t.setDialogRef=function(e){t.dialog=e},t.setBackdropRef=function(e){t.backdrop=e&&d.default.findDOMNode(e)},t.handleHidden=function(){var e;(t.setState({exited:!0}),t.onHide(),t.props.onExited)&&(e=t.props).onExited.apply(e,arguments)},t.handleBackdropClick=function(e){e.target===e.currentTarget&&(t.props.onBackdropClick&&t.props.onBackdropClick(e),!0===t.props.backdrop&&t.props.onHide())},t.handleDocumentKeyDown=function(e){t.props.keyboard&&27===e.keyCode&&t.isTopModal()&&(t.props.onEscapeKeyDown&&t.props.onEscapeKeyDown(e),t.props.onHide())},t.enforceFocus=function(){if(t.props.enforceFocus&&t._isMounted&&t.isTopModal()){var e=(0,r.default)((0,h.default)(v(v(t))));t.dialog&&!(0,o.default)(t.dialog,e)&&t.dialog.focus()}},t.renderBackdrop=function(){var e=t.props,n=e.renderBackdrop,r=e.backdropTransition,o=n({ref:t.setBackdropRef,onClick:t.handleBackdropClick});return r&&(o=u.default.createElement(r,{appear:!0,in:t.props.show},o)),o},t}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e),t.getDerivedStateFromProps=function(e){return e.show?{exited:!1}:e.transition?null:{exited:!0}};var n=t.prototype;return n.getSnapshotBeforeUpdate=function(e){return a.default&&!e.show&&this.props.show&&(this.lastFocus=(0,r.default)()),null},n.componentDidMount=function(){this._isMounted=!0,this.props.show&&this.onShow()},n.componentDidUpdate=function(e){var t=this.props.transition;!e.show||this.props.show||t?!e.show&&this.props.show&&this.onShow():this.onHide()},n.componentWillUnmount=function(){var e=this.props,t=e.show,n=e.transition;this._isMounted=!1,(t||n&&!this.state.exited)&&this.onHide()},n.autoFocus=function(){if(this.props.autoFocus){var e=(0,r.default)((0,h.default)(this));this.dialog&&!(0,o.default)(this.dialog,e)&&(this.lastFocus=e,this.dialog.focus())}},n.restoreLastFocus=function(){this.lastFocus&&this.lastFocus.focus&&(this.lastFocus.focus(),this.lastFocus=null)},n.isTopModal=function(){return this.props.manager.isTopModal(this)},n.render=function(){var e=this.props,n=e.show,r=e.container,o=e.children,a=e.renderDialog,i=e.role,l=void 0===i?"dialog":i,s=e.transition,c=e.backdrop,d=e.className,p=e.style,m=e.onExit,h=e.onExiting,g=e.onEnter,v=e.onEntering,y=e.onEntered,x=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["show","container","children","renderDialog","role","transition","backdrop","className","style","onExit","onExiting","onEnter","onEntering","onEntered"]);if(!(n||s&&!this.state.exited))return null;var w=b({role:l,ref:this.setDialogRef,"aria-modal":"dialog"===l||void 0},function(e,t){var n={};return Object.keys(e).map(function(r){Object.prototype.hasOwnProperty.call(t,r)||(n[r]=e[r])}),n}(x,t.propTypes),{style:p,className:d,tabIndex:"-1"}),E=a?a(w):u.default.createElement("div",w,u.default.cloneElement(o,{role:"document"}));return s&&(E=u.default.createElement(s,{appear:!0,unmountOnExit:!0,in:n,onExit:m,onExiting:h,onExited:this.handleHidden,onEnter:g,onEntering:v,onEntered:y},E)),u.default.createElement(f.default,{container:r,onRendered:this.onPortalRendered},u.default.createElement(u.default.Fragment,null,c&&this.renderBackdrop(),E))},t}(u.default.Component);x.propTypes={show:l.default.bool,container:l.default.oneOfType([s.default,l.default.func]),onShow:l.default.func,onHide:l.default.func,backdrop:l.default.oneOfType([l.default.bool,l.default.oneOf(["static"])]),renderDialog:l.default.func,renderBackdrop:l.default.func,onEscapeKeyDown:l.default.func,onBackdropClick:l.default.func,containerClassName:l.default.string,keyboard:l.default.bool,transition:c.default,backdropTransition:c.default,autoFocus:l.default.bool,enforceFocus:l.default.bool,restoreFocus:l.default.bool,onEnter:l.default.func,onEntering:l.default.func,onEntered:l.default.func,onExit:l.default.func,onExiting:l.default.func,onExited:l.default.func,manager:l.default.object.isRequired},x.defaultProps={show:!1,role:"dialog",backdrop:!0,keyboard:!0,autoFocus:!0,enforceFocus:!0,restoreFocus:!0,onHide:function(){},manager:y,renderBackdrop:function(e){return u.default.createElement("div",e)}},x.Manager=p.default;var w=x;t.default=w,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return(0,o.default)(function(t){return r.default.createElement(e.Consumer,null,function(n){return r.default.createElement(e.Provider,{value:t.mapToValue(n)},t.children)})},{displayName:"ContextTransformer"})};var r=a(n(0)),o=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(0)),o=a(n(132));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.createContext||o.default,e.exports=t.default},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(28));t.end=o.default;var a=r(n(40));t.properties=a.default;var i={end:o.default,properties:a.default};t.default=i},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,s=Object.getOwnPropertyDescriptor,c=Object.getPrototypeOf,u=c&&c(Object);e.exports=function e(t,n,d){if("string"!=typeof n){if(u){var p=c(n);p&&p!==u&&e(t,p,d)}var f=i(n);l&&(f=f.concat(l(n)));for(var m=0;m<f.length;++m){var h=f[m];if(!(r[h]||o[h]||d&&d[h])){var g=s(n,h);try{a(t,h,g)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10),i=n(18);var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement(a.Container,{fluid:!0,className:"footer-view-container no-hor-padding"},o.default.createElement(a.Container,{className:"footer-wrapper"},o.default.createElement("div",{className:"row group mb-xs-40 mb-ms-80"},o.default.createElement("div",{className:"col-12 col-sm-12 col-md-6 mb-xs-40 footer-intro"},o.default.createElement("h4",{className:"mb-xs-20 mb-sm-40"},"Kate Sohng"),o.default.createElement("div",{className:"row"},o.default.createElement("div",{className:"col-5 pl-0"},o.default.createElement("ul",{className:"list-unstyled"},o.default.createElement("li",null,"Front-end developer"),o.default.createElement("li",null,"UX | UI designer"),o.default.createElement("li",null,"Available May 2019"))),o.default.createElement("div",{className:"col-7"},o.default.createElement("ul",{className:"list-unstyled"},o.default.createElement("li",null,o.default.createElement("a",{href:"mailto:kheeya7@hotmail.com"},"Get in touch >")),o.default.createElement("li",null,o.default.createElement("a",{href:"katesohng-resume-2019.pdf",title:"Download Resume",download:"Katesohng-resume-2019"},"Download resume >")))))),o.default.createElement("div",{className:"col-5 col-sm-5 col-md-3 col-md-2 mb-xs-40"},o.default.createElement("h4",{className:"mb-xs-20 mb-sm-40"},"Menu"),o.default.createElement("ul",{className:"list-unstyled"},o.default.createElement("li",{className:"list-item"},o.default.createElement(i.Link,{to:"/"},"Home")),o.default.createElement("li",{className:"list-item"},o.default.createElement(i.Link,{to:"/about"},"About")),o.default.createElement("li",{className:"list-item"},o.default.createElement(i.Link,{to:"/"},"Portfolio")),o.default.createElement("li",{className:"list-item"},o.default.createElement("a",{href:"http://katesohng.com/blog",target:"_blank"},"Blog")))),o.default.createElement("div",{className:"col-7 col-sm-7 col-md-3 col-md-2 mb-xs-40"},o.default.createElement("h4",{className:"mb-xs-20 mb-sm-40"},"Social"),o.default.createElement("ul",{className:"list-unstyled"},o.default.createElement("li",{className:"list-item"},o.default.createElement("a",{href:"https://github.com/kheeya7",className:"btn btn-social btn-github btn-simple",target:"_blank"},o.default.createElement("i",{className:"fa fa-github"})," GitHub")),o.default.createElement("li",{className:"list-item"},o.default.createElement("a",{href:"https://www.linkedin.com/in/kate-sohng/",className:"btn btn-social btn-linkedin btn-simple",target:"_blank"},o.default.createElement("i",{className:"fa fa-linkedin"})," LinkedIn")),o.default.createElement("li",{className:"list-item"},o.default.createElement("a",{href:"https://www.instagram.com/kate.mostly/",className:"btn btn-social btn-instagram btn-simple",target:"_blank"},o.default.createElement("i",{className:"fa fa-instagram"})," Instagram "))))),o.default.createElement("small",{className:"text-center copyright"},"Copyright © 2019 ",o.default.createElement("a",{href:"/"}," Kate Sohng"))))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10),i=n(18);var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"background"},o.default.createElement(a.Container,{className:"nav-view-container",role:"banner"},o.default.createElement("div",{className:"nav-wrapper"},o.default.createElement("nav",{className:"navbar bg-bright navbar-bright navbar-expand-md no-hor-padding"},o.default.createElement("a",{className:"navbar-brand d-sm-inline-block font-weight-bold",href:"/"},o.default.createElement("div",{className:"logo"},o.default.createElement("h1",null,"Kate Sohng"),o.default.createElement("h2",{className:"navbar-text"},"Front-End Developer | UX Designer"))),o.default.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#togglerNav","aria-controls":"togglerNav","aria-expanded":"false","aria-label":"Toggle navigation"},o.default.createElement("i",{className:"fa fa-bars","aria-hidden":"true"})),o.default.createElement("div",{className:"collapse navbar-collapse",id:"togglerNav"},o.default.createElement("div",{className:"navbar-nav ml-auto font-weight-bold"},o.default.createElement(i.Link,{to:"/",className:"nav-item nav-link"},"Home"),o.default.createElement(i.Link,{to:"/about",className:"nav-item nav-link"},"About"),o.default.createElement("a",{className:"nav-item nav-link",href:"http://katesohng.com/blog",target:"_blank"},"Blog"),o.default.createElement("a",{className:"nav-item nav-link",href:"mailto:kheeya7@hotmail.com"},"Contact")))))))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(0)),a=c(n(48)),i=n(24),l=n(10),s=n(23);function c(e){return e&&e.__esModule?e:{default:e}}var u=[{imagePath:"/images/icon-person.png",title:"Role",description:"UX Designer"},{imagePath:"/images/icon-mobile.png",title:"Type",description:"Interactive Installation"},{imagePath:"/images/icon-responsibility.png",title:"Responsibilities",description:"Designing Android Artwork"},{imagePath:"/images/icon-clock.png",title:"Duration",description:"10 weeks"}],d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("main",{className:"project-detail pb-5"},o.default.createElement("div",{className:"project-detail-header"},o.default.createElement(i.Title,{text:"Yuri"}),o.default.createElement("div",{className:"project-description-wrapper"},o.default.createElement(i.ProjectDescription,{text:"Is robot a slave or object of human?"}))),o.default.createElement("div",{className:"project-detail-body"},o.default.createElement(i.SectionTitle,{text:"Project Overview"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:7,md:7},o.default.createElement(i.Paragraph,{text:"Project Yuri is motivated by Nam June Paik’s “K-456” that attempted to recalibrate the race and lead people to think about the “human/machine binary and deconstructing binary logic (Rhee)”. Project Yuri throws the main questions of “Is robot a slave or object of human?” to think about the hierarchical relationship between robot and human."})),o.default.createElement(l.Col,{xs:5,md:5},o.default.createElement(s.ProjectSummary,{summaryData:u}))),o.default.createElement(i.SectionTitle,{text:"Finding Problems"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:12,md:12},o.default.createElement(i.Paragraph,{text:"In a history of our media, robots have been often portrayed as slaves, sex objects, dehumanized things, and things that can be destroyed by a necessity of human. As media designers, it is necessary to think about whether this is the right projection of robots to public or not. Does this tendency aggravate stereotypes of certain race and gender? In addition, do the typical relationships between robot and human in our media still illustrate the slavery in human history? Project Yuri is designed to answer those questions."}))),o.default.createElement(i.SectionTitle,{text:"Research"}),o.default.createElement(i.Paragraph,{text:"“Most importantly, understanding race and/as technology enables us to frame the discussion around ethics rather than ontology, on modes of recognition and relation, rather than being. (Chun)”"}),o.default.createElement(i.Paragraph,{text:"Nam June Paik focused on humanizing his robot “K-456” by letting his robot act like a human. The robot walks, talks, excretes, and interacts with other human and deliver the message that says “how race can be recalibrated through technology in order to disentangle the boundaries between human and machine. (Rhee)” Like K-456, Yuri is a humanized robot who can talk and interact with people. Her interaction is designed to answer certain types of questions and focused on expressing her emotions that increase the completeness of humanization on robots."}),o.default.createElement(i.SectionTitle,{text:"Robot Design"}),o.default.createElement(i.Paragraph,{text:"Design choice for her appearance has changed a lot from initial proposal design of this project. Since she has to carry different types of hardware in her body that include a portable computer, a Bluetooth speaker, circuits, and LCD, etc. I had to design her body to have a boxy shape so that she could contain everything, which I tried to avoid in the initial design. Thus, I decorated her head part with half cylinders to reduce the sense of boxy on her appearance. Also, she is decorated with flowers on her body and butterflies on her head. This is an attempt to reduce her artificial appearance by using the symbols of nature. As I anticipated, audiences thought the flower decoration was used to express Yuri as a girl. Yuri is a female since she is the otherness of Kate, but she does not want to be defined by certain stereotypes of gender. In addition, she answers “I am not a robot, but an otherness of Kate” when the audience asks if she is a robot. By expressing her identity clearly to people, Yuri attempted to eliminate the binary thinking in gender, race, and relationship between robot and human."}),o.default.createElement(l.Row,null,o.default.createElement(l.Image,{width:"100%",height:"100%",src:"/images/project-yuri-01.jpg"})),o.default.createElement(l.Row,null,o.default.createElement(l.Image,{width:"100%",height:"100%",src:"/images/project-yuri-02.jpg"})),o.default.createElement(i.SectionTitle,{text:"Digital Performance in Public"}),o.default.createElement(l.Row,null,o.default.createElement(a.default,{url:"https://www.youtube.com/embed/Wy66bedwccA",width:"850px",height:"490px",position:"relative"})),o.default.createElement(i.Paragraph,{text:"In the performance, three audiences successfully interacted with Yuri. To get a successful result of the performance, I had to search indoor public places since the voice recognition technology I implemented does not work properly when a place has continuous noise. Two of audiences among three audiences who effectively interacted with Yuri said it was very interesting experience talking with the robot who think she is not a robot. However, one participant gave me a feedback the limited reactions of Yuri made him consider Yuri as a robotic existence. In addition, since they were not provided with the entire context of the project, they gave me feedback regarding the technical experiences more than the meaning of social justice. Nonetheless, it was a great experience that leads me to think about the way/direction of our design and technology need to go."}),o.default.createElement(i.SectionTitle,{text:"Workcited"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:12,md:12},"Rhee, Margaret. “Racial Recalibration.” Asian Diasporic Visual Cultures and the Americas (n.d.): 285-309."),o.default.createElement(l.Col,{xs:12,md:12},"Chun, Wendy Hui Kyong. “Race and/as Technology or How to do Things With Race.” Nakamura, Lisa and Peter Chow. Race After the Internet. Taylor and Francis, 2013. 353."))))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(72)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(24),i=n(10),l=n(23);var s=[{imagePath:"/images/icon-person.png",title:"Role",description:"UX Designer | Front-end Developer"},{imagePath:"/images/icon-mobile.png",title:"Type",description:"Group project"},{imagePath:"/images/icon-responsibility.png",title:"Responsibilities",description:"Defining problems  Design Brief | Branding | Prototyping"},{imagePath:"/images/icon-clock.png",title:"Duration",description:"4 weeks"}],c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("main",{className:"project-detail pb-5"},o.default.createElement("div",{className:"project-detail-header"},o.default.createElement(a.Title,{text:"POCKET"}),o.default.createElement("div",{className:"project-description-wrapper"},o.default.createElement(a.ProjectDescription,{text:"The complete solution for your account problems."}))),o.default.createElement("div",{className:"project-detail-body"},o.default.createElement(a.SectionTitle,{text:"Project Overview"}),o.default.createElement(i.Row,{className:"mb-0"},o.default.createElement(i.Col,{xs:7,md:7},o.default.createElement(a.Paragraph,{text:"POCKET is an application that makes it possible to manage all of users accounts in one place. Through this team project, I found out how to define the design problem, target audience, potential solution, competitors, and documented them into a form of the design brief."})),o.default.createElement(i.Col,{xs:5,md:5},o.default.createElement(l.ProjectSummary,{summaryData:s}))),o.default.createElement(a.SectionTitle,{text:"Finding Problems"}),o.default.createElement(a.Paragraph,{text:"The majority of people who live these days own many different accounts and passwords. In addition, it is unavoidable to create different types of passwords because of security issues. We often forget passwords at important moments that distract our productivity."}),o.default.createElement(a.SectionTitle,{text:"Research"}),o.default.createElement(a.SectionSubtitle,{text:"Storyboard"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement(i.Image,{src:"/images/pocket-storyboard-01.jpg"})),o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement(i.Image,{src:"/images/pocket-storyboard-02.jpg"}))),o.default.createElement(a.SectionSubtitle,{text:"Survey"}),o.default.createElement(i.Row,null,o.default.createElement("embed",{width:"100%",height:"700px",src:"/assets/survey-result.pdf",type:"application/pdf"})),o.default.createElement(a.SectionSubtitle,{text:"Word Cloud: What POCKET would like to convey to users?"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,null,o.default.createElement(i.Image,{src:"/images/pocket-word-cloud.png"}))),o.default.createElement(a.SectionTitle,{text:"Solutions"}),o.default.createElement(a.Paragraph,{text:"Organize and manage your accounts into one dashboard, and increase work flow, while minimizing time switching between different platforms."}),o.default.createElement(i.Image,{src:"/images/pocket-userflowmap.png"}),o.default.createElement(a.SectionSubtitle,{text:"Link and manage all your accounts in one place"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:3},o.default.createElement(i.Image,{src:"/images/account-01.png"})),o.default.createElement(i.Col,{xs:12,md:9,className:"vertical-align pl-5"},o.default.createElement("span",null,"Select popular apps from the list, or use the search bar to find others. Next, sign in to each app through POCKET. You can now access all your linked accounts at once. No more forgetting passwords, mixing up user names, or having to log in at the start of each new session. POCKET will store all your current credentials and give you access to everything you need in one easy-to-use app."))),o.default.createElement(a.SectionSubtitle,{text:"A Place for Everything and Everything in Its Place"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:3},o.default.createElement(i.Image,{src:"/images/account-02.png"})),o.default.createElement(i.Col,{xs:12,md:9,className:"vertical-align pl-5"},o.default.createElement("span",null,"POCKET will organize your accounts into easily customizable folders. Use the default folders, or create your own to group accounts into categories like work or school. Easily view and interact with all the apps in a folder at once, and you can even keep the same account in multiple folders. Customize your folders view by deleting ones you don’t need, or tap and hold to drag and rearrange them however you like."))),o.default.createElement(a.SectionSubtitle,{text:"All your emails in one place"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:3},o.default.createElement(i.Image,{src:"/images/account-03.png"})),o.default.createElement(i.Col,{xs:12,md:9,className:"vertical-align pl-5"},o.default.createElement("span",null,"POCKET will organize your accounts into easily customizable folders. Use the default folders, or create your own to group accounts into categories like work or school. Easily view and interact with all the apps in a folder at once, and you can even keep the same account in multiple folders. Customize your folders view by deleting ones you don’t need, or tap and hold to drag and rearrange them however you like."))),o.default.createElement(a.SectionTitle,{text:"Artifacts"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement("small",null,"External Links to the POCKET presentation website")),o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement("a",{href:"http://www.katesohng.com/pocketapp/",target:"_blank"},"✻ POCKET Presentation Website ✻")))))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(74)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(24),i=n(10),l=n(23);var s=[{imagePath:"/images/icon-person.png",title:"Role",description:"Research Assistant  UI/Graphic Designer"},{imagePath:"/images/icon-mobile.png",title:"Type",description:"Internship"},{imagePath:"/images/icon-responsibility.png",title:"Responsibilities",description:"Defining problems | UI Design"},{imagePath:"/images/icon-clock.png",title:"Duration",description:"10 weeks"}],c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("main",{className:"project-detail pb-5"},o.default.createElement("div",{className:"project-detail-header"},o.default.createElement(a.Title,{text:"#Stronger"}),o.default.createElement("div",{className:"project-description-wrapper"},o.default.createElement(a.ProjectDescription,{text:"A decolonial vision of futures of health and fitness."}))),o.default.createElement("div",{className:"project-detail-body"},o.default.createElement(a.SectionTitle,{text:"Project Overview"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:7,md:7},o.default.createElement(a.Paragraph,{text:"#Stronger is a project that pursues a “decolonial vision of futures of health and fitness” (cárdenas) for the transgender and gender non-conforming people. The world of sports we encounter everyday still creates outdated and biased images of fitness and health that do not consider a lots of people such as LGBTQI people."})),o.default.createElement(i.Col,{xs:5,md:5},o.default.createElement(l.ProjectSummary,{summaryData:s}))),o.default.createElement(a.SectionTitle,{text:"Finding Problems"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement(a.Paragraph,{text:"As a part of the project #Stronger, this sub-project mainly focuses on how the gender discrimination and biased images on health and fitness are taking place in wearable health applications from global scale corporations. The goal of this project is to promote public awareness of how some of the interfaces deliver discriminative messages to LGBTQI people by showing existing user interfaces and by suggesting desired interfaces."}))),o.default.createElement(a.SectionTitle,{text:"Research"}),o.default.createElement(a.Paragraph,{text:"There are lots of wearable health applications and devices in the market. They exist to motivate users to move their bodies and have efficient workout sessions. These applications get users’ information such as their age, weight, height, and gender. These types of information are used to estimate more accurate physical data such as strides that are used to calculate moving distances and calorie burn rates."}),o.default.createElement(i.Image,{src:"/images/stronger-how-gender-info-used.jpg"}),o.default.createElement("div",{className:"mt-3"},o.default.createElement("small",null,"Information on how gender information is used")),o.default.createElement("div",{className:"mb-5"},o.default.createElement("small",null,"Screen captured from Fitbit website")),o.default.createElement(a.SectionSubtitle,{text:"Binary gender options in the profile setting"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(i.Image,{src:"/images/wrong-ui-01.jpg"})),o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(a.Paragraph,{text:"These are the profile setting pages from two major companies in the wearable health application market. Users provide their information including their genders. However, there are only binary options in gender selection, which do not consider the existence of different gender identities. These are outdated and indifferent designs that deliver gender discrimination and “LGBTIQ invisibility and oppression (cárdenas)”."})),o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(i.Image,{src:"/images/wrong-ui-02.jpg"}))),o.default.createElement(a.SectionTitle,{text:"Solutions"}),o.default.createElement(a.Paragraph,{text:"This subproject of #Stronger suggests user experience designs that respect all different genders and sexual identities."}),o.default.createElement(a.SectionSubtitle,{text:"Suggested gender options in a health application #01"}),"  ",o.default.createElement(i.Row,null,o.default.createElement(i.Image,{src:"/images/gender-option-1.jpg"})),o.default.createElement(a.SectionSubtitle,{text:"Suggested gender options in a health application #02"}),o.default.createElement(i.Row,null,o.default.createElement(i.Image,{src:"/images/gender-option-2.jpg"})),o.default.createElement(a.SectionTitle,{text:"Conclusion and Further Research"}),o.default.createElement(a.Paragraph,{text:"Therefore, existing applications need new algorithms that consider and respect all gender identities to pursue the design that eliminates the gender norm and discrimination. However, lack of statistical resources of LGBTIQ people makes it hard to develop new algorithms for LGBTIQ people. Therefore, the future research can pursue the way of gathering the right amount of statistical resources of LGBTIQ people to build proper algorithms for health applications."}),o.default.createElement(a.SectionTitle,{text:"Artifacts"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement("small",null,"External Links to Kate Sohng' blog")),o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement("a",{href:"http://katesohng.net/blog/index.php/2016/10/23/sub-project-stronger/",target:"_blank"},"✻ #Stronger poster for the UWB Undergraduate Research and Creative Practice event ✻")))))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(76)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){(e.exports=n(31)(!1)).push([e.i,".ecs-carousel {\n  max-width: 860px;\n  margin: 0 auto;\n}\n.ecs-carousel .carousel {\n  max-height: 720px;\n  min-height: 490px;\n}\n.ecs-carousel .carousel-inner {\n  border: solid 1px #b1b1b1;\n}\n.ecs-carousel .btn-primary:not(:disabled):not(.disabled).active.selectedToggleButtonStyle {\n  border: 0;\n  border-bottom: 2px solid #00CC99;\n  background-color: #fff;\n  border-radius: 0;\n  background-image: unset;\n  box-shadow: unset;\n  color: #00CC99;\n}\n.ecs-carousel .carousel-control-prev-icon,\n.ecs-carousel .carousel-control-next-icon {\n  background-color: black;\n}\n.ecs-carousel .carousel-indicators li {\n  background-color: #00CC99;\n}\n.ecs-carousel .carousel-item-container {\n  max-width: 100%;\n  padding: 15px;\n}\n.ecs-carousel .carousel-item-container .carousel-text {\n  text-align: left;\n}\n.ecs-carousel .carousel-item-container .carousel-image {\n  margin: 20px auto 20px auto;\n}\n",""])},function(e,t,n){var r=n(78);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(30)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10);n(79);var i=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.handleSelect=r.handleSelect.bind(r),r.handleChange=r.handleChange.bind(r),r.state={selectedIndex:0,direction:null},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"handleSelect",value:function(e,t){this.setState({selectedIndex:e,direction:t.direction})}},{key:"handleChange",value:function(e){this.setState({selectedIndex:e})}},{key:"render",value:function(){var e=this.state,t=e.selectedIndex,n=e.direction;return o.default.createElement("div",{className:"ecs-carousel"},o.default.createElement(a.Carousel,{activeIndex:t,direction:n,onSelect:this.handleSelect,interval:null},o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-01.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-02.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-03.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-04.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-05.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-06.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-07.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-08.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-09.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-10.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-11.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-12.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-13.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-14.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-15.jpg"})),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Image,{className:"carousel-image",src:"/images/ecs-proto-16.jpg"}))))}}]),t}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(0)),a=n(24),i=n(10),l=n(23),s=c(n(80));function c(e){return e&&e.__esModule?e:{default:e}}var u=[{imagePath:"/images/icon-person.png",title:"Role",description:"UX Researcher | UI Designer"},{imagePath:"/images/icon-mobile.png",title:"Type",description:"Empathic Design Approach | Group Project  "},{imagePath:"/images/icon-responsibility.png",title:"Responsibilities",description:"Defining users & problems | UI Design | Research through Design"},{imagePath:"/images/icon-clock.png",title:"Duration",description:"10 weeks"}],d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("main",{className:"project-detail pb-5"},o.default.createElement("div",{className:"project-detail-header"},o.default.createElement(a.Title,{text:"ECS"}),o.default.createElement("div",{className:"project-description-wrapper"},o.default.createElement(a.ProjectDescription,{text:"Electronic Catalog System for the UW IT Department"}))),o.default.createElement("div",{className:"project-detail-body"},o.default.createElement(a.SectionTitle,{text:"Project Overview"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:7,md:7},o.default.createElement(a.Paragraph,{text:"My team worked with a group of UW students who work in Information Technologies (IT) helpdesk. The IT Helpdesk is the single point of contact for all IT services for UW students. In this project, we discovered a need of staffs of the IT Helpdesk through different research methods of human-centered design."})),o.default.createElement(i.Col,{xs:5,md:5},o.default.createElement(l.ProjectSummary,{summaryData:u}))),o.default.createElement(a.SectionTitle,{text:"Finding Problems"}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:12},o.default.createElement(a.Paragraph,{text:"The problem within the UWB IT Department revolves around repetitive and tedious tasks that the workers have to do. Some of the specific issues we found were the blue cards and the inventory chart. The blue card, used for equipment checkout, is very cluttered and unorganized. The IT worker has to fill out the entire card every single time someone checks out equipment. They then have to enter the information into the IT database. The inventory chart is a physical chart on the wall that shows the circulating equipment demand. The IT workers must manually change that every day."}))),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:6,md:6},o.default.createElement(i.Image,{src:"/images/blue_card.jpg"})),o.default.createElement(i.Col,{xs:6,md:6},o.default.createElement(i.Image,{src:"/images/it_circulating_equipment_demand.jpg"}))),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:6,md:6},o.default.createElement(a.Paragraph,{text:"Patrons have to fill all their information in the blue card and then the staff has to enter the information into their database."})),o.default.createElement(i.Col,{xs:6,md:6},o.default.createElement(a.Paragraph,{text:"Also, staffs have to update this Circulating Equipment Demand list manually."}))),o.default.createElement(a.SectionTitle,{text:"Research"}),o.default.createElement(a.SectionSubtitle,{text:"Cultural Probe"}),o.default.createElement(a.Paragraph,{text:"My team used cultural probes to arouse design inspirations and collect responses from participants. We collected casual, informal, enthusiastic and personal data from participants. Through this research, I personally tried to get a real emotional understanding of our users."}),o.default.createElement(i.Row,null,o.default.createElement(i.Image,{src:"/images/cultural-props.jpg"})),o.default.createElement("div",{className:"ecs-ul"},o.default.createElement("ul",null,o.default.createElement("li",null,"They mostly love their job, they are passionate about it."),o.default.createElement("li",null,"They mostly love video games, only one person dislikes it."),o.default.createElement("li",null,"IT employees generally spend a lot of time on campus between eating and studying."),o.default.createElement("li",null,"They generally don’t recognize questions from patrons as “dumb”, maybe they enjoy helping people."),o.default.createElement("li",null,"Most seem to like their job but they are also stressed."))),o.default.createElement(a.SectionSubtitle,{text:"Interview"}),o.default.createElement(a.Paragraph,{text:"The goal was to learn more about the individuals on a personal level, learn more about the day to day schedule of an IT worker, and fill in the gaps from the cultural probe kits."}),o.default.createElement(i.Row,null,o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(i.Image,{src:"/images/positive.png"})),o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(i.Image,{src:"/images/negative.png"})),o.default.createElement(i.Col,{xs:12,md:4},o.default.createElement(a.Paragraph,{text:"Based on the positive attitudes, it seems that all the interviewees enjoy their job at the IT department, but they expressed mixed feelings toward some tasks. We collected all the terms they used to respond to questions relating to their tasks."}))),o.default.createElement(a.SectionSubtitle,{text:"Questionnaire"}),o.default.createElement(a.Paragraph,{text:"We learned more details about what they think their job can be stressful at times. Most of the complaints were about the IT checkout system, miscommunication between them and patrons, and repetitive tasks. The frustration of “blue cards” was mentioned multiple times from the participants."}),o.default.createElement(a.SectionTitle,{text:"Solutions"}),o.default.createElement(a.Paragraph,{text:"Our app idea combines the blue card system, the inventory chart, and the equipment catalog that is currently in a binder at the IT helpdesk to minimize repetitive tasks and increase efficiency. In addition, we also found out the student ID is essential to check out the equipment, and we detected that employers ask students to give student IDs to them and swipe IDs every time to proceed with the checkout process. Thus, we will design a software that will simplify and streamline all these tasks that are currently controlled manually or non-electrically into one place with a PC tablet with an attached card reader."}),o.default.createElement(a.SectionSubtitle,{text:"Paper Prototype"}),o.default.createElement(i.Row,null,o.default.createElement(i.Image,{src:"/images/paperproto-checkout-all-in-1.jpg"})),o.default.createElement(a.SectionSubtitle,{text:"Interactive Prototype"}),o.default.createElement(i.Row,null,o.default.createElement(s.default,null)),o.default.createElement(a.SectionTitle,{text:"Conclusion"}),o.default.createElement(a.Paragraph,{text:"Through this system, we pursue values not only for our user group but also for the patrons of the IT helpdesk. Our app helps the user group to have more enjoyable work experience by fulfilling their desires toward reducing repetitive tasks. Furthermore, the system will reduce the tedious handwriting task of the blue cards for patrons which needs to be done every time. Patrons will also be provided with better information about the performance of equipment and the circulating equipment demand in an intuitive way. Satisfied patrons will give positive feedback to the employees which will increase the satisfaction of the working experience for IT employees, especially the ones who seek the value of their work from helping others. To further streamline and improve the technology check-out process, our tablet app will be able to send reminder emails to students who have checked out equipment, which is a task not viable with the current paper system. This could help solve another problem that IT identified consistently throughout our research: communication."})))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(81)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){(e.exports=n(31)(!1)).push([e.i,".project-content-carousel {\n  max-width: 860px;\n  margin: 0 auto;\n}\n.project-content-carousel .carousel {\n  max-height: 720px;\n  min-height: 490px;\n}\n.project-content-carousel .toggleButtonStyle {\n  border: 0;\n  border-bottom: 0;\n  background-color: #fff;\n  border-radius: 0;\n  color: #333;\n  background-image: unset;\n  box-shadow: unset;\n}\n.project-content-carousel .btn-primary:not(:disabled):not(.disabled).active.selectedToggleButtonStyle {\n  border: 0;\n  border-bottom: 2px solid #00CC99;\n  background-color: #fff;\n  border-radius: 0;\n  background-image: unset;\n  box-shadow: unset;\n  color: #00CC99;\n}\n.project-content-carousel .carousel-indicators li {\n  background-color: #00CC99;\n}\n.project-content-carousel .carousel-item-container {\n  max-width: 100%;\n  padding: 15px;\n}\n.project-content-carousel .carousel-item-container .carousel-text {\n  text-align: left;\n}\n.project-content-carousel .carousel-item-container .carousel-image {\n  margin: 20px auto 20px auto;\n}\n",""])},function(e,t,n){var r=n(83);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(30)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10);n(84);var i=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e,n));return r.handleSelect=r.handleSelect.bind(r),r.handleChange=r.handleChange.bind(r),r.state={selectedIndex:0,direction:null},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"handleSelect",value:function(e,t){this.setState({selectedIndex:e,direction:t.direction})}},{key:"handleChange",value:function(e){this.setState({selectedIndex:e})}},{key:"render",value:function(){var e=this.state,t=e.selectedIndex,n=e.direction;return o.default.createElement("div",{className:"project-content-carousel"},o.default.createElement("div",null,o.default.createElement(a.ButtonToolbar,null,o.default.createElement(a.ToggleButtonGroup,{type:"radio",name:"options",value:this.state.selectedIndex,onChange:this.handleChange},o.default.createElement(a.ToggleButton,{className:0===this.state.selectedIndex?"selectedToggleButtonStyle":"toggleButtonStyle",value:0},"Personas"),o.default.createElement(a.ToggleButton,{className:1===this.state.selectedIndex?"selectedToggleButtonStyle":"toggleButtonStyle",value:1},"Data"),o.default.createElement(a.ToggleButton,{className:2===this.state.selectedIndex?"selectedToggleButtonStyle":"toggleButtonStyle",value:2},"Affordance")))),o.default.createElement(a.Carousel,{activeIndex:t,direction:n,onSelect:this.handleSelect,interval:null},o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Row,{className:"carousel-item-container"},o.default.createElement(a.Col,{className:"carousel-text",xs:12,md:12},"The archetype of this persona is an educator and she represents a group of people who care to educate people."),o.default.createElement(a.Col,{xs:12,md:12},o.default.createElement(a.Image,{className:"carousel-image",src:"/images/unify-persona.png"})))),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Row,{className:"carousel-item-container"},o.default.createElement(a.Col,{className:"carousel-text",xs:12,md:12},"To make a successful and innovative product, the designers need to determine the range of data to support the heuristic approach for design decisions. In addition, the designers should consider the affordance of the product to create a better and more natural user experience."),o.default.createElement(a.Col,{xs:12,md:12},o.default.createElement(a.Image,{className:"carousel-image",src:"/images/unify-data.jpg"})))),o.default.createElement(a.Carousel.Item,null,o.default.createElement(a.Row,{className:"carousel-item-container"},o.default.createElement(a.Col,{className:"carousel-text",xs:12,md:12},"Our team decided to use the card layout, which is the type of presenting information with intuitive images. With some self-explanatory images and short descriptions with the buttons, the users will get what they want more easily without having to think."),o.default.createElement(a.Col,{xs:12,md:12},o.default.createElement(a.Image,{className:"carousel-image",src:"/images/unify-wireframe-02.png"}))))))}}]),t}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UnifyHeaderImage=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10);t.UnifyHeaderImage=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e={maxWidth:"70%"},t={textAlign:"center",overflow:"hidden",maxHeight:"300px"};return o.default.createElement("div",{style:{backgroundColor:"rgb(250, 250, 250)",borderBottom:"1px solid #e8e8ea"}},o.default.createElement(a.Row,{style:{paddingTop:"3em",maxWidth:"1200px",margin:"0 auto"}},o.default.createElement(a.Col,{style:t,xs:4,md:4},o.default.createElement(a.Image,{style:e,src:"/images/unify-proto-01.png"})),o.default.createElement(a.Col,{style:t,xs:4,md:4},o.default.createElement(a.Image,{style:e,src:"/images/unify-proto-02.png"})),o.default.createElement(a.Col,{style:t,xs:4,md:4},o.default.createElement(a.Image,{style:e,src:"/images/unify-proto-03.png"}))))}}]),t}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(0)),a=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("p",{className:"section-subtitle"},this.props.text)}}]),t}();t.default=l,l.propTypes={text:a.default.string},l.defaultProps={text:""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(0)),a=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("h3",{className:"section-title"},this.props.text)}}]),t}();t.default=l,l.propTypes={text:a.default.string},l.defaultProps={text:""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectDescription=i;var r=a(n(0)),o=a(n(2));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return r.default.createElement("h4",{className:"project-description"},e.text)}i.propTypes={text:o.default.string},i.defaultProps={text:""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Paragraph=i;var r=a(n(0)),o=a(n(2));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return r.default.createElement("p",{className:"project-paragraph"},e.text)}i.propTypes={text:o.default.string},i.defaultProps={text:""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=i(n(0)),a=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("h2",{className:"title"},this.props.text)}}]),t}();t.default=l,l.propTypes={text:a.default.string},l.defaultProps={text:""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(0)),a=d(n(48)),i=n(24),l=n(10),s=n(86),c=n(23),u=d(n(85));function d(e){return e&&e.__esModule?e:{default:e}}var p=[{imagePath:"/images/icon-person.png",title:"Role",description:"UX Researcher | UI Designer"},{imagePath:"/images/icon-mobile.png",title:"Type",description:"iOS Mobile App | Group Project  "},{imagePath:"/images/icon-responsibility.png",title:"Responsibilities",description:"Defining users & problems UI Design"},{imagePath:"/images/icon-clock.png",title:"Duration",description:"10 weeks"}],f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("main",{className:"project-detail"},o.default.createElement("div",{className:"project-detail-header"},o.default.createElement(i.Title,{text:"Unify"}),o.default.createElement("div",{className:"project-description-wrapper"},o.default.createElement(i.ProjectDescription,{text:"Interests-sharing network for everyone"}),o.default.createElement(i.ProjectDescription,{text:"who wants to make feminist innovation and technology"})),o.default.createElement(s.UnifyHeaderImage,null)),o.default.createElement("div",{className:"project-detail-body"},o.default.createElement(i.SectionTitle,{text:"Project Overview"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:7,md:7},o.default.createElement(i.Paragraph,{text:"Unify team presents the high-fidelity prototype of the iOS application for FemTechNet members and people who want to share information about women in/and technology. This annotated portfolio shows the process of the application design through research from the ethnography interview, defining problems, research through design, and viable solutions with different types of prototypes."})),o.default.createElement(l.Col,{xs:5,md:5},o.default.createElement(c.ProjectSummary,{summaryData:p}))),o.default.createElement(i.SectionTitle,{text:"Finding Problems"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:7,md:7},o.default.createElement(i.Paragraph,{text:"The design research started with ethnographic interviews with stakeholders from FemTechNet. Based on the information from the interviews, our team narrowed down the main problems into two issues: having too many different communication platforms and difficulties of maintaining the long-term involvement of students in the network."})),o.default.createElement(l.Col,{xs:5,md:5},o.default.createElement(l.Image,{src:"/images/unify-cloud.jpg"}))),o.default.createElement(i.SectionTitle,{text:"Research"}),o.default.createElement(i.SectionSubtitle,{text:"Hunt Statement"}),o.default.createElement(i.Paragraph,{text:"We are going to figure out how all the communities of FemTechNet communicate with each other so that we can identify the key factors that enhance or hinder the interaction within communities."}),o.default.createElement(u.default,null),o.default.createElement(i.SectionTitle,{text:"Solutions"}),o.default.createElement(i.Paragraph,{text:"Unify team suggests two types of solutions as the team have developed both approaches to have more chances for the ideal solution."}),"            ",o.default.createElement(i.SectionSubtitle,{text:"Integrating Communication Services to Reduce the Complexity"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:6,md:6},o.default.createElement(l.Image,{src:"/images/unify-wireframe-01.png"})),o.default.createElement(l.Col,{xs:6,md:6},o.default.createElement(i.Paragraph,{text:"With this solution, the team has tried to solve one of the main problems that are related to organizational internal tasks. By integrating all the communication platforms, the stakeholder's using, the design tried to resolve the difficulties and complexity of communication."}))),o.default.createElement(i.SectionSubtitle,{text:"Creating Connections without Having the Central Hub (Decentralized Network)"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:12,md:7},o.default.createElement(i.Paragraph,{text:"This prototype has a priority on making stronger networks among members by matching users' similar interests and profiles. So that each member and group have their own networks to other members and groups without passing the center hub of the community."}),o.default.createElement(i.Paragraph,{text:"The key features of using these data are in the community section. After the user signs up for the application, they will see these suggestions that are sorted by their interests and profiles. Once they join in several communities, now they can see the list of their groups. Also, they can see the list of friends on the friend’s tab. Not only that, they can also see a list of people who have similar interests. They can initiate the chat group (or channel) and can invite these people who have similar interests and passions on the topic."})),o.default.createElement(l.Col,{xs:12,md:5},o.default.createElement(a.default,{url:"https://invis.io/BMENJHG5C",width:"438",height:"870",position:"relative",styles:{transform:"scale(0.65)",transformOrigin:"top center"}}))),o.default.createElement(i.SectionTitle,{text:"Artifacts"}),o.default.createElement(l.Row,null,o.default.createElement(l.Col,{xs:12,md:12},o.default.createElement("small",null,"External Links to Kate Sohng' blog")),o.default.createElement(l.Col,{xs:12,md:12},o.default.createElement("a",{href:"http://katesohng.com/blog/index.php/ios-development/",target:"_blank"},"✻ The Process of iOS Development ✻")),o.default.createElement(l.Col,{xs:12,md:12},o.default.createElement("a",{href:"http://katesohng.com/blog/index.php/2017/10/30/prfaq/",target:"_blank"},"✻ PRFAQ ✻")),o.default.createElement(l.Col,{xs:12,md:12},o.default.createElement("a",{href:"http://katesohng.com/blog/index.php/2017/11/21/data-and-affordances/",target:"_blank"},"✻ Data and Affordance ✻")))))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(92)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(50)),i=n(18);function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement(a.default,null,o.default.createElement(i.Link,{to:"/about"},"About Kate ",o.default.createElement("i",{className:"fa fa-angle-right"})))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10);var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("section",{className:"withme-view-container"},o.default.createElement("div",{className:"filter"},o.default.createElement(a.Container,{fluid:!0,className:"withme"},o.default.createElement("div",{className:"withme-wrapper"},o.default.createElement("h2",null,"Do you want to work with me?"),o.default.createElement("div",{className:"line-separator"},"✻"),o.default.createElement("p",null,"I am looking for a UX/UI designer and developer position."),o.default.createElement("p",null,"Please contact me if you are looking for a person "),o.default.createElement("p",null," who practiced human-centered design and front-end development skills."),o.default.createElement("a",{href:"mailto:kheeya7@hotmail.com",className:"btn btn-info text-center text-uppercase"},"Contact Kate")))))}}]),t}();t.default=i},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o=1,a={},i=!1,l=e.document,s=Object.getPrototypeOf&&Object.getPrototypeOf(e);s=s&&s.setTimeout?s:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){u(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&u(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),r=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){u(e.data)},r=function(t){e.port2.postMessage(t)}}():l&&"onreadystatechange"in l.createElement("script")?function(){var e=l.documentElement;r=function(t){var n=l.createElement("script");n.onreadystatechange=function(){u(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():r=function(e){setTimeout(u,0,e)},s.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return a[o]=i,r(o),o++},s.clearImmediate=c}function c(e){delete a[e]}function u(e){if(i)setTimeout(u,0,e);else{var t=a[e];if(t){i=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{c(e),i=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(25),n(49))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new a(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(96),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(25))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10),i=n(18);n(97);var l=[{id:0,title:"Development",description:"Front-End development is not only one of my skills but also my favorite hobby. Writing codes for my web design and UX design is so rewarding, so I have trained myself for years to keep my coding skill sharp. My interest in the field keeps me exploring and studying more for upcoming technologies.",image:"./images/card-unify-ios.png",relatedProjects:[{name:"Unify |",url:"/project-detail/unify"},{name:"Pocket",url:"/project-detail/pocket"}]},{id:1,title:"Graphic Design",description:"I started building my career in the field as a graphic designer and web designer. I am comfortable using Photoshop, Illustrator, and Sketch and take designs from mock-up to implementation.",image:"./images/card-stronger.png",relatedProjects:[{name:"#stronger",url:"/project-detail/stronger"}]},{id:2,title:"UX | UI Design",description:"I believe it is important to understand both design and development as a front-end developer to create a more successful user-centered design. I have studied how to conduct research-based UX design considering usability heuristics and empathy.",image:"./images/card-yuri.png",relatedProjects:[{name:"Pocket |",url:"/project-detail/pocket"},{name:"Project Yuri |",url:"/project-detail/yuri"},{name:"Unify |",url:"/project-detail/unify"},{name:"ECS",url:"/project-detail/ecs"}]},{id:3,title:"Project Management",description:"I have experienced project management during the course of study at the University of Washington. Most of my personal/team projects had applied lean UX approaches for agile environments.",image:"./images/card-ecs.png",relatedProjects:[{name:"Unify |",url:"/project-detail/unify"},{name:"ECS",url:"/project-detail/ecs"}]}],s=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={selectedIndex:0},e.onSkillClicked=e.onSkillClicked.bind(e),e.skillInterval=setInterval(function(){e.setState({selectedIndex:(e.state.selectedIndex+1)%4})},4e3),e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"onSkillClicked",value:function(e){window.clearInterval(this.skillInterval);var t=Number.parseInt(e.currentTarget.id,10);this.setState({selectedIndex:t})}},{key:"render",value:function(){var e=this;return o.default.createElement("section",{className:"pb-0"},o.default.createElement(a.Container,{className:"skills"},o.default.createElement(a.Row,null,o.default.createElement(a.Col,null,o.default.createElement("h2",null,"Skills"))),o.default.createElement(a.Row,null,o.default.createElement(a.Col,null,o.default.createElement("p",null,"I build websites, and I love creating digital production for the web. Here is my skillset I am good at and passionate about."))),o.default.createElement(a.Row,{className:"mb-xs-60 mb-md-80 skills-container"},o.default.createElement(a.Col,{xl:"2",sm:"12",md:"12",className:"skill-tabs-hor"},o.default.createElement("div",{"data-data-component":"skillsList"},l.map(function(t){return o.default.createElement(a.Button,{id:t.id,className:t.id===e.state.selectedIndex?"selected-Skill":"",onClick:e.onSkillClicked},o.default.createElement("h3",null,t.title))}))),o.default.createElement(a.Col,{xs:"12",sm:"12",md:"6",l:"",xl:"5",className:"mb-xs-80 mb-md-0 skill-left-panel"},o.default.createElement("div",null,o.default.createElement("div",null,o.default.createElement("h3",null,l[e.state.selectedIndex].title),o.default.createElement("div",{className:"skill-description"},l[e.state.selectedIndex].description),o.default.createElement("div",{className:"project-link-wrap"},l[e.state.selectedIndex].relatedProjects.map(function(e){return o.default.createElement(i.Link,{className:"project-link",to:e.url},e.name)})))),o.default.createElement("div",{className:"project-icons"})),o.default.createElement(a.Col,{xs:"12",sm:"12",md:"6",xl:"5",className:"skill-right-panel"},function(){switch(e.state.selectedIndex){case 0:return o.default.createElement("div",null,o.default.createElement("img",{src:l[0].image}));case 1:return o.default.createElement("div",null,o.default.createElement("img",{src:l[1].image}));case 2:return o.default.createElement("div",null,o.default.createElement("img",{src:l[2].image}));case 3:return o.default.createElement("div",null,o.default.createElement("img",{src:l[3].image}))}}()),o.default.createElement(a.Col,{xl:"2",sm:"12",md:"12",className:"skill-tabs-ver"},o.default.createElement("div",{"data-data-component":"skillsList"},l.map(function(t){return o.default.createElement(a.Button,{id:t.id,className:t.id===e.state.selectedIndex?"selected-Skill":"",onClick:e.onSkillClicked},o.default.createElement("h3",null,t.title))}))))))}}]),t}();t.default=s},function(e){e.exports=[{id:"pjid-unify",tags:["iOS Development","Prototyping","Social Justice","Graphic Design","UX Research","Emphathy"],title:"Unify iOS Application",role:"UX Researcher, iOS Developer",linkTo:"/project-detail/unify",backgroundClass:"bg-unify",imageUrl:"images/project-card-unify.png"},{id:"pjid-ecs",tags:["Prototyping","Graphic Design","UX Research","UI Design"],title:"Electronic Catalog System",role:"UX Researcher, UI Designer",linkTo:"/project-detail/ecs",backgroundClass:"bg-purple",imageUrl:"images/project-card-ecs.png"},{id:"pjid-stronger",tags:["Photoshop","Graphic Design","Illustrator","UX Research","Emphathy","Internship"],title:"#Stronger",role:"UX Researcher, UI Designer, Graphic Designer",linkTo:"/project-detail/stronger",backgroundClass:"bg-blue",imageUrl:"images/project-card-stronger.png"},{id:"pjid-pocket",tags:["Prototyping","Web Development","Graphic Design","UX Research","UI Design"],title:"POCKET App",role:"UX Researcher, Web Developer",linkTo:"/project-detail/pocket",backgroundClass:"bg-pink",imageUrl:"images/project-card-pocket.png"},{id:"pjid-yuri",tags:["Arduino","Interactive Media Installation","Android Artwork","Social Justice"],title:"Project Yuri",role:"Interactive Installation Designer",linkTo:"/project-detail/yuri",backgroundClass:"bg-yellow",imageUrl:"images/placeholder01-card-design.png"},{id:"pjid-2015",tags:["Photoshop","Graphic Design","Illustrator","HTML","CSS"],title:"Kate Sohng Portfolio 2015",role:"Web Designer / Developer",linkTo:null,externalLink:"http://katesohng.com/portfolio-2015/",backgroundClass:"bg-beige",imageUrl:"images/project-card-pocket.png"}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(0)),a=n(18),i=n(10),l=s(n(99));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("section",{className:"pt-0"},o.default.createElement(i.Container,{fluid:!0,className:"portfolio-view-container",id:"portfolio"},o.default.createElement("h2",{className:"col-sm-6 hidden"},"Projects"),o.default.createElement(i.Row,{className:"pb-0"},l.default.map(function(e){var t=function(){return o.default.createElement("div",null,o.default.createElement("figure",{className:e.backgroundClass+" h-300 h-400 mb-0"},o.default.createElement("div",{className:"card-container"},o.default.createElement("img",{src:e.imageUrl,alt:e.title,className:"project-card-img"}),o.default.createElement("div",{className:"overlay"},o.default.createElement("h4",null,e.title,o.default.createElement("br",null),"—"),e.role))),o.default.createElement("div",{className:"xs-display"},o.default.createElement("h4",null,e.title,o.default.createElement("br",null)),e.role))};return o.default.createElement(i.Col,{key:e.id,md:"6",lg:"4",className:"card-display"},e.linkTo&&o.default.createElement(a.Link,{to:e.linkTo},t()),e.externalLink&&o.default.createElement("a",{href:e.externalLink,target:"_blank"},t()))}))))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),a=n(10);var i=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("section",null,o.default.createElement(a.Container,{className:"experience-view-container"},o.default.createElement(a.Row,null,o.default.createElement("h2",{className:"experience-title mt-5"},"Experience")),o.default.createElement(a.Row,{className:"mt-5"},o.default.createElement(a.Col,{xs:12,sm:4,md:4,className:"experience-item"},o.default.createElement("img",{src:"./images/researcher.svg",className:"experience-icon",alt:"researcher icon"}),o.default.createElement("h3",{className:"experience-role mt-3"},"UX Researcher & Internship"),o.default.createElement("div",{className:"experience-description"},"Internship as a user experience researcher at the POC lab at the University of Washington.")),o.default.createElement(a.Col,{xs:12,sm:4,md:4,className:"experience-item"},o.default.createElement("img",{src:"./images/web-designer.svg",className:"experience-icon",alt:"web designer icon"}),o.default.createElement("h3",{className:"experience-role mt-3"},"Web Designer"),o.default.createElement("div",{className:"experience-description"},"Web designer at an online e-commerce company,",o.default.createElement("a",{href:"https://en.koreadepart.com/",target:"_blank"}," AllKorea Inc."))),o.default.createElement(a.Col,{xs:12,sm:4,md:4,className:"experience-item"},o.default.createElement("img",{src:"./images/graphic-designer.svg",className:"experience-icon",alt:"graphic designer icon"}),o.default.createElement("h3",{className:"experience-role mt-3"},"Graphic Desinger"),o.default.createElement("div",{className:"experience-description"},"Graphic designer at e-commerce companies")))))}}]),t}();t.default=i},function(e,t,n){(function(t){(function(){var n,r,o,a,i,l;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:void 0!==t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,a=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,n(49))},function(e,t,n){(function(t){for(var r=n(102),o="undefined"==typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],s=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],s=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!s){var u=0,d=0,p=[];l=function(e){if(0===p.length){var t=r(),n=Math.max(0,1e3/60-(t-u));u=n+t,setTimeout(function(){var e=p.slice(0);p.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(u)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return p.push({handle:++d,callback:e,cancelled:!1}),d},s=function(e){for(var t=0;t<p.length;t++)p[t].handle===e&&(p[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){s.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=s}}).call(this,n(25))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(103));var o=new Map,a=new Set,i=!1,l=0;function s(){return(new Date).getTime()}function c(e){var t=e.fn,n=e.args;t.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(n))}var u=function(e){return function(t,n){var r=t.nextTick,i=t.ms,l=t.mode;e-r>=0&&(a.add(t),0===l?o.delete(n):o.set(n,Object.assign({},t,{nextTick:r+i})))}};function d(){var e=s();o.forEach(u(e)),0!==a.size&&(a.forEach(c),a.clear()),0!==o.size?(0,r.default)(d):i=!1}function p(e){var t=e.fn,n=e.ms,a=void 0===n?0:n,c=e.args,u=e.mode;if(!t)return null;var p=l;return o.set(p,{fn:t,ms:a,nextTick:s()+a,args:c,mode:u}),i||(i=!0,(0,r.default)(d)),l+=1,p}function f(e){o.has(e)&&o.delete(e),0===o.size&&(i=!1)}t.default={setTimeout:function(e){for(var t=arguments.length,n=Array(t>2?t-2:0),r=2;r<t;r++)n[r-2]=arguments[r];return p({fn:e,ms:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,args:n,mode:0})},clearTimeout:f,setInterval:function(e){for(var t=arguments.length,n=Array(t>2?t-2:0),r=2;r<t;r++)n[r-2]=arguments[r];return p({fn:e,ms:arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,args:n,mode:1})},clearInterval:f}},function(e,t,n){"use strict";e.exports=n(104).default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.animateScroll=void 0,t.updateHistory=function(e){e="#"+e,history.pushState?history.pushState(null,null,e):location.hash=e};var r=n(105);t.animateScroll=function(){var e=void 0,t=void 0;return function(n,o,a){var i=document.getElementById(o);function l(){return i?i.scrollTop:document.documentElement.scrollTop||document.body.scrollTop}return new Promise(function(o,s){var c=n?document.getElementById(n):document.body;if(!c)return s(new Error("Cannot find element: #"+n));var u=a.offset,d=a.duration,p=a.easing,f=l(),m=function(){var e=i?i.getBoundingClientRect().top:0;return c.getBoundingClientRect().top-e+l()}()+u-f;e&&((0,r.clearTimeout)(e),t()),t=o,function t(){var a=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:0)+20;if(function(e){i?i.scrollTop=e:document.documentElement.scrollTop=document.body.scrollTop=e}(p(null,a,f,m,d)),!(a<d))return e=void 0,o(n);e=(0,r.setTimeout)(function(){t(a)},20)}()})}}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(0)),l=c(n(2)),s=n(106);function c(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._handleClick=function(e){n.state.beforeAnimate(e),e&&e.preventDefault(),(0,s.animateScroll)(n.state.to,n.state.target,n.state.animate).then(function(t){t&&(n.state.disableHistory||(0,s.updateHistory)(t),n.state.afterAnimate(e))})},n.state=t._stateHelper(e),n.simulateClick=n._handleClick,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.default.Component),a(t,[{key:"componentWillReceiveProps",value:function(e){this.setState(t._stateHelper(e))}},{key:"render",value:function(){var e=this.props,t=(e.to,e.target,e.animate,e.beforeAnimate,e.afterAnimate,e.disableHistory,function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","target","animate","beforeAnimate","afterAnimate","disableHistory"]));return this.props.children?i.default.createElement("a",o({},t,{href:"#"+this.state.to,onClick:this._handleClick})):null}}],[{key:"_normalizeId",value:function(e){return e&&e.replace(/^#/,"")||""}},{key:"_stateHelper",value:function(e){var n=e.animate||{},r=n.offset,o=void 0===r?0:r,a=n.duration,i=void 0===a?400:a,l=n.easing,s=void 0===l?d:l;return{to:t._normalizeId(e.to),target:t._normalizeId(e.target),animate:{offset:o,duration:i,easing:s},beforeAnimate:e.beforeAnimate||function(){},afterAnimate:e.afterAnimate||function(){},disableHistory:e.disableHistory}}},{key:"getDerivedStateFromProps",value:function(e){return t._stateHelper(e)}}]),t}();function d(e,t,n,r,o){return-r*(t/=o)*(t-2)+n}u.propTypes={to:l.default.string.isRequired,target:l.default.string,animate:l.default.shape({offset:l.default.number,duration:l.default.number,easing:l.default.func}),beforeAnimate:l.default.func,afterAnimate:l.default.func,disableHistory:l.default.bool,children:l.default.node},t.default=u;var p=r(/^v?((\d+)\.(\d+)\.(\d+))(?:-([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?(?:\+([\dA-Za-z\-]+(?:\.[\dA-Za-z\-]+)*))?$/.exec(i.default.version),4),f=p[2],m=p[3];f>=16&&m>=3&&delete u.prototype.componentWillReceiveProps},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=n(10),i=l(n(107));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement(a.Container,{fluid:!0,className:"header-view-container"},o.default.createElement(a.Row,{className:"intro"},o.default.createElement(a.Col,{className:"align-self-center text-center"},o.default.createElement("img",{src:"images/kate-logo-black-2019.svg",alt:"Kate sohng logo",className:"kate-logo"}),o.default.createElement("h1",null,"Front-End Developer",o.default.createElement("br",null),"UX Designer in Seattle"),o.default.createElement("p",null,"Producing responsive, accessibile rich websites for exceptional user experience"),o.default.createElement(i.default,{to:"#portfolio",className:"btn btn-info text-center text-uppercase"},"View Projects ˅"))))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(0)),a=d(n(108)),i=d(n(101)),l=d(n(100)),s=d(n(98)),c=d(n(95)),u=d(n(94));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(l.default,null),o.default.createElement(i.default,null),o.default.createElement(s.default,null),o.default.createElement(c.default,null),o.default.createElement(u.default,null))}}]),t}();t.default=p},function(e,t,n){e.exports=n.p+"26a5bafc18b5b9e5fa39155781743758.jpg"},function(e,t,n){e.exports=n.p+"168e3627cc24e007c92b0b9e89bb45e0.png"},function(e,t,n){e.exports=n.p+"c74757c7da5fdc536f7e0e26f5c32f56.png"},function(e,t,n){e.exports=n.p+"639a894238eec19bf330d69e8cb67175.jpg"},function(e,t,n){e.exports=n.p+"48d0d51be305c27159c1ddf2a976843b.jpg"},function(e,t,n){e.exports=n.p+"e1fb06a2579fab7d54138069c40dc31e.png"},function(e,t,n){e.exports=n.p+"7e714db977bf39093b4dd661dfdef735.png"},function(e,t,n){e.exports=n.p+"8bdbc85e699d7460c939d0a07dd98150.png"},function(e,t,n){e.exports=n.p+"4aee3376beb1fdd7b1331f22ecf22c98.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,r.default)(function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=null;return t.forEach(function(e){if(null==o){var t=e.apply(void 0,n);null!=t&&(o=t)}}),o})};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(36));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.ariaHidden=a,t.hideSiblings=function(e,t){var n=t.root,r=t.backdrop;o(e,[n,r],function(e){return a(!0,e)})},t.showSiblings=function(e,t){var n=t.root,r=t.backdrop;o(e,[n,r],function(e){return a(!1,e)})};var r=["template","script","style"],o=function(e,t,n){t=[].concat(t),[].forEach.call(e.children,function(e){-1===t.indexOf(e)&&function(e){var t=e.nodeType,n=e.tagName;return 1===t&&-1===r.indexOf(n.toLowerCase())}(e)&&n(e)})};function a(e,t){t&&(e?t.setAttribute("aria-hidden","true"):t.removeAttribute("aria-hidden"))}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return(0,r.default)(e)||function(e){return e&&"body"===e.tagName.toLowerCase()}(e)?function(e){var t=(0,o.default)(e),n=(0,r.default)(t);return t.body.clientWidth<n.innerWidth}(e):e.scrollHeight>e.clientHeight};var r=a(n(121)),o=a(n(20));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";function r(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}e.exports=function(e,t){e.classList?e.classList.remove(t):"string"==typeof e.className?e.className=r(e.className,t):e.setAttribute("class",r(e.className&&e.className.baseVal||"",t))}},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e,t){e.classList?e.classList.add(t):(0,o.default)(e,t)||("string"==typeof e.className?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))};var o=r(n(54));e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=void 0;var o=r(n(124));t.addClass=o.default;var a=r(n(123));t.removeClass=a.default;var i=r(n(54));t.hasClass=i.default;var l={addClass:o.default,removeClass:a.default,hasClass:i.default};t.default=l},function(e,t,n){"use strict";
/** @license React v16.8.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,d=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,f=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116;function b(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case d:case p:case i:case s:case l:case m:return e;default:switch(e=e&&e.$$typeof){case u:case f:case c:return e;default:return t}}case g:case h:case a:return t}}}function v(e){return b(e)===p}t.typeOf=b,t.AsyncMode=d,t.ConcurrentMode=p,t.ContextConsumer=u,t.ContextProvider=c,t.Element=o,t.ForwardRef=f,t.Fragment=i,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=s,t.StrictMode=l,t.Suspense=m,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===s||e===l||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===c||e.$$typeof===u||e.$$typeof===f)},t.isAsyncMode=function(e){return v(e)||b(e)===d},t.isConcurrentMode=v,t.isContextConsumer=function(e){return b(e)===u},t.isContextProvider=function(e){return b(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return b(e)===f},t.isFragment=function(e){return b(e)===i},t.isLazy=function(e){return b(e)===g},t.isMemo=function(e){return b(e)===h},t.isPortal=function(e){return b(e)===a},t.isProfiler=function(e){return b(e)===s},t.isStrictMode=function(e){return b(e)===l},t.isSuspense=function(e){return b(e)===m}},function(e,t,n){"use strict";e.exports=n(126)},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e){void 0===e&&(e=(0,o.default)());try{return e.activeElement}catch(e){}};var o=r(n(20));e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e,t){return function(n){var r=n.currentTarget,i=n.target,l=(0,a.default)(r,e);l.some(function(e){return(0,o.default)(e,i)})&&t.call(this,n)}};var o=r(n(26)),a=r(n(13));e.exports=t.default},function(e,t,n){"use strict";var r=n(41);e.exports=r},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(25))},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0),o=(i(r),i(n(2))),a=i(n(131));i(n(130));function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=1073741823;t.default=function(e,t){var n,i,d="__create-react-context-"+(0,a.default)()+"__",p=function(e){function n(){var t,r;l(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return t=r=s(this,e.call.apply(e,[this].concat(a))),r.emitter=function(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter(function(t){return t!==e})},get:function(){return e},set:function(n,r){e=n,t.forEach(function(t){return t(e,r)})}}}(r.props.value),s(r,t)}return c(n,e),n.prototype.getChildContext=function(){var e;return(e={})[d]=this.emitter,e},n.prototype.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n=this.props.value,r=e.value,o=void 0;!function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,r)?(o="function"==typeof t?t(n,r):u,0!=(o|=0)&&this.emitter.set(e.value,o)):o=0}},n.prototype.render=function(){return this.props.children},n}(r.Component);p.childContextTypes=((n={})[d]=o.default.object.isRequired,n);var f=function(t){function n(){var e,r;l(this,n);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return e=r=s(this,t.call.apply(t,[this].concat(a))),r.state={value:r.getValue()},r.onUpdate=function(e,t){0!=((0|r.observedBits)&t)&&r.setState({value:r.getValue()})},s(r,e)}return c(n,t),n.prototype.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=void 0===t||null===t?u:t},n.prototype.componentDidMount=function(){this.context[d]&&this.context[d].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=void 0===e||null===e?u:e},n.prototype.componentWillUnmount=function(){this.context[d]&&this.context[d].off(this.onUpdate)},n.prototype.getValue=function(){return this.context[d]?this.context[d].get():e},n.prototype.render=function(){return function(e){return Array.isArray(e)?e[0]:e}(this.props.children)(this.state.value)},n}(r.Component);return f.contextTypes=((i={})[d]=o.default.object,i),{Provider:p,Consumer:f}},e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e,t){if(!o&&a.default){var n=document.body,r=n.matches||n.matchesSelector||n.webkitMatchesSelector||n.mozMatchesSelector||n.msMatchesSelector;o=r?function(e,t){return r.call(e,t)}:l}return o?o(e,t):null};var o,a=r(n(14)),i=r(n(13));function l(e,t){for(var n=(0,i.default)(e.document||e.ownerDocument,t),r=0;n[r]&&n[r]!==e;)r++;return!!n[r]}e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var n=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&n&&n[t]&&(r=n[t]),i.test(r)&&!a.test(t)){var l=n.left,s=e.runtimeStyle,c=s&&s.left;c&&(s.left=e.currentStyle.left),n.left="fontSize"===t?"1em":r,r=n.pixelLeft+"px",n.left=l,c&&(s.left=c)}return r}}};var o=r(n(60)),a=/^(top|right|bottom|left)$/,i=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(8);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(a,"-ms-")};var o=r(n(137)),a=/^ms-/;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0;!function(e){e&&e.__esModule}(n(2));t.timeoutsShape=null;t.classNamesShape=null},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,l=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==l){var s=e.displayName||e.name,c="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+c+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var u=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;u.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return i}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";t.__esModule=!0,t.uncontrolledPropTypes=function(e,t){var n={};return Object.keys(e).forEach(function(e){n[o(e)]=r}),n},t.isProp=function(e,t){return void 0!==e[t]},t.defaultKey=o,t.canAcceptRef=function(e){return!!e&&("function"!=typeof e||e.prototype&&e.prototype.isReactComponent)};!function(e){e&&e.__esModule}(n(5));var r=function(){};function o(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=h(n(0)),a=n(10),i=h(n(118)),l=h(n(117)),s=h(n(116)),c=h(n(115)),u=h(n(114)),d=h(n(113)),p=h(n(112)),f=h(n(111)),m=h(n(110));function h(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:"about-view-container"},o.default.createElement(a.Container,{fluid:!0,className:"about-wrapper"},o.default.createElement(a.Row,{className:"about"},o.default.createElement(a.Col,{col:"12",className:"align-self-center text-center"},o.default.createElement("h1",null,"About Kate Sohng"),o.default.createElement("p",null,"Producing reponsive, accessible rich websites for exceptional user experience")))),o.default.createElement("main",{className:"about-main"},o.default.createElement(a.Container,{className:"profile"},o.default.createElement(a.Row,null,o.default.createElement("div",{className:"col-lg-2 offset-lg-2 col-12"},o.default.createElement("img",{width:150,alt:"a photo of Kate Sohng",src:m.default})),o.default.createElement("div",{className:"col-lg-6 col-12 text"},"I am a front-end developer, a graduate from Interactive Media Design of the University of Washington. I have 2 years commercial experience providing graphic design and front-end development in South Korea. Since then, I have been focusing on producing high-quality responsive websites and exceptional user experience.")),o.default.createElement(a.Row,null,o.default.createElement(a.Col,{lg:"8",className:"offset-lg-2 text"},o.default.createElement("p",null,"Please approach me when you need a developer who can provide:"),o.default.createElement("div",{className:"logo"},o.default.createElement("img",{width:53,alt:"HTML5 logo",src:i.default}),o.default.createElement("img",{width:53,alt:"CSS3 logo",src:l.default}),o.default.createElement("img",{width:53,alt:"JavaScript logo",src:s.default}),o.default.createElement("img",{width:53,alt:"Git logo",src:c.default})),o.default.createElement("ul",null,o.default.createElement("li",null,"Responsive HTML5/CSS3 (Bootstrap)"),o.default.createElement("li",null,"JavaScript (ES6, React, NPM)"),o.default.createElement("li",null,"Version Control(Git)")),o.default.createElement("p",null,"Also, I have experienced as a UX researcher and designer from the Interactive Media Design program from the University of Washington. Furthermore, I had the half-year of internship from the POC laboratory of the University of Washington."),o.default.createElement("ul",null,o.default.createElement("li",null,"UX Research and Design"),o.default.createElement("li",null,"Interaction and Interface Design"),o.default.createElement("li",null,"Wireframing and Prototyping")))),o.default.createElement(a.Row,null,o.default.createElement(a.Col,{lg:"8",className:"offset-lg-2 text"},o.default.createElement("p",null,"I believe it is important to understand both design and development as a front-end developer to create a more successful user-centered design. I have worked as a graphic designer at an e-commerce company in South Korea for a year, and I have taken designs from mockups to implement during the course of study at the Interactive Media Design."),o.default.createElement("div",{className:"logo"},o.default.createElement("img",{width:53,alt:"photoshop logo",src:p.default}),o.default.createElement("img",{width:53,alt:"illustrator logo",src:u.default}),o.default.createElement("img",{width:53,alt:"sketch logo",src:d.default}),o.default.createElement("img",{width:53,alt:"invision logo",src:f.default})),o.default.createElement("ul",null,o.default.createElement("li",null,"Photoshop"),o.default.createElement("li",null,"Illustrator"),o.default.createElement("li",null,"Sketch"),o.default.createElement("li",null,"Invision")),o.default.createElement("p",null,"If you would like to know more about my projects and the work process, please visit my ",o.default.createElement("a",{href:"http://katesohng.com/blog/",target:"_blank"},"blog"),", or send an email to ",o.default.createElement("a",{href:"mailto:kheeya7@hotmail.com"},"Kate Sohng"),"."))))))}}]),t}();t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(0)),a=l(n(142)),i=l(n(19));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.PureComponent),r(t,[{key:"render",value:function(){return o.default.createElement("div",null,o.default.createElement(a.default,null),o.default.createElement(i.default,null))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=h(n(0)),a=n(18),i=h(n(143)),l=h(n(109)),s=h(n(93)),c=h(n(82)),u=h(n(77)),d=h(n(75)),p=h(n(73)),f=h(n(71)),m=h(n(70));function h(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidUpdate",value:function(e){this.props.location.pathname!==e.location.pathname&&window.scrollTo(0,0)}},{key:"render",value:function(){return o.default.createElement("div",{className:"page bg-main"},o.default.createElement(f.default,null),o.default.createElement(a.Route,{path:"/",exact:!0,component:l.default}),o.default.createElement(a.Route,{path:"/about",exact:!0,component:i.default}),o.default.createElement(a.Route,{path:"/project-detail/unify",exact:!0,component:s.default}),o.default.createElement(a.Route,{path:"/project-detail/ecs",exact:!0,component:c.default}),o.default.createElement(a.Route,{path:"/project-detail/stronger",exact:!0,component:u.default}),o.default.createElement(a.Route,{path:"/project-detail/pocket",exact:!0,component:d.default}),o.default.createElement(a.Route,{path:"/project-detail/yuri",exact:!0,component:p.default}),o.default.createElement(m.default,null))}}]),t}();t.default=(0,a.withRouter)(g)},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(146);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(148);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(149);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(62),o=n(0),a=n(153),i=n(42),l=n(41),s=n(152),c=n(151),u=n(150),d=n(61);function p(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||p("227");var f={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,l,s){(function(e,t,n,r,o,a,i,l,s){this._hasCaughtError=!1,this._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(f,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,l,s){if(f.invokeGuardedCallback.apply(this,arguments),f.hasCaughtError()){var c=f.clearCaughtError();f._hasRethrowError||(f._hasRethrowError=!0,f._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(f._hasRethrowError){var e=f._rethrowError;throw f._rethrowError=null,f._hasRethrowError=!1,e}}.apply(f,arguments)},hasCaughtError:function(){return f._hasCaughtError},clearCaughtError:function(){if(f._hasCaughtError){var e=f._caughtError;return f._caughtError=null,f._hasCaughtError=!1,e}p("198")}};var m=null,h={};function g(){if(m)for(var e in h){var t=h[e],n=m.indexOf(e);if(-1<n||p("96",e),!v[n])for(var r in t.extractEvents||p("97",e),v[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,l=r;y.hasOwnProperty(l)&&p("99",l),y[l]=a;var s=a.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&b(s[o],i,l);o=!0}else a.registrationName?(b(a.registrationName,i,l),o=!0):o=!1;o||p("98",r,e)}}}function b(e,t,n){x[e]&&p("100",e),x[e]=t,w[e]=t.eventTypes[n].dependencies}var v=[],y={},x={},w={};function E(e){m&&p("101"),m=Array.prototype.slice.call(e),g()}function k(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&p("102",t),h[t]=r,n=!0)}n&&g()}var _={plugins:v,eventNameDispatchConfigs:y,registrationNameModules:x,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:k},C=null,T=null,S=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=S(r),f.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function N(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var j=null;function I(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return I(e,!0)}function A(e){return I(e,!1)}var R={injectEventPluginOrder:E,injectEventPluginsByName:k};function M(e,t){var n=e.stateNode;if(!n)return null;var r=C(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function L(e,t){null!==e&&(j=P(j,e)),e=j,j=null,e&&(N(e,t?D:A),j&&p("95"),f.rethrowCaughtError())}function U(e,t,n,r){for(var o=null,a=0;a<v.length;a++){var i=v[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=P(o,i))}L(o,!1)}var F={injection:R,getListener:M,runEventsInBatch:L,runExtractedEventsInBatch:U},H=Math.random().toString(36).slice(2),z="__reactInternalInstance$"+H,B="__reactEventHandlers$"+H;function W(e){if(e[z])return e[z];for(;!e[z];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[z]).tag||6===e.tag?e:null}function q(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function V(e){return e[B]||null}var K={precacheFiberNode:function(e,t){t[z]=e},getClosestInstanceFromNode:W,getInstanceFromNode:function(e){return!(e=e[z])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:q,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[B]=t}};function G(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=G(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function X(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Y(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,X,e)}function Q(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?G(t):null,X,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){N(e,Y)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,l=o;l;l=G(l))i++;l=0;for(var s=a;s;s=G(s))l++;for(;0<i-l;)o=G(o),i--;for(;0<l-i;)a=G(a),l--;for(;i--;){if(o===a||o===a.alternate)break e;o=G(o),a=G(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=G(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=G(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne={accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){N(e,Q)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){N(e,Z)}};function re(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var oe={animationend:re("Animation","AnimationEnd"),animationiteration:re("Animation","AnimationIteration"),animationstart:re("Animation","AnimationStart"),transitionend:re("Transition","TransitionEnd")},ae={},ie={};function le(e){if(ae[e])return ae[e];if(!oe[e])return e;var t,n=oe[e];for(t in n)if(n.hasOwnProperty(t)&&t in ie)return ae[e]=n[t];return e}a.canUseDOM&&(ie=document.createElement("div").style,"AnimationEvent"in window||(delete oe.animationend.animation,delete oe.animationiteration.animation,delete oe.animationstart.animation),"TransitionEvent"in window||delete oe.transitionend.transition);var se=le("animationend"),ce=le("animationiteration"),ue=le("animationstart"),de=le("transitionend"),pe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),fe=null;function me(){return!fe&&a.canUseDOM&&(fe="textContent"in document.documentElement?"textContent":"innerText"),fe}var he={_root:null,_startText:null,_fallbackText:null};function ge(){if(he._fallbackText)return he._fallbackText;var e,t,n=he._startText,r=n.length,o=be(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return he._fallbackText=o.slice(e,1<t?1-t:void 0),he._fallbackText}function be(){return"value"in he._root?he._root.value:he._root[me()]}var ve="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),ye={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function xe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function we(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ee(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function ke(e){e.eventPool=[],e.getPooled=we,e.release=Ee}i(xe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ve.length;t++)this[ve[t]]=null}}),xe.Interface=ye,xe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,ke(n),n},ke(xe);var _e=xe.extend({data:null}),Ce=xe.extend({data:null}),Te=[9,13,27,32],Se=a.canUseDOM&&"CompositionEvent"in window,Oe=null;a.canUseDOM&&"documentMode"in document&&(Oe=document.documentMode);var Pe=a.canUseDOM&&"TextEvent"in window&&!Oe,Ne=a.canUseDOM&&(!Se||Oe&&8<Oe&&11>=Oe),je=String.fromCharCode(32),Ie={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},De=!1;function Ae(e,t){switch(e){case"keyup":return-1!==Te.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Re(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Me=!1;var Le={eventTypes:Ie,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(Se)e:{switch(e){case"compositionstart":o=Ie.compositionStart;break e;case"compositionend":o=Ie.compositionEnd;break e;case"compositionupdate":o=Ie.compositionUpdate;break e}o=void 0}else Me?Ae(e,n)&&(o=Ie.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ie.compositionStart);return o?(Ne&&(Me||o!==Ie.compositionStart?o===Ie.compositionEnd&&Me&&(a=ge()):(he._root=r,he._startText=be(),Me=!0)),o=_e.getPooled(o,t,n,r),a?o.data=a:null!==(a=Re(n))&&(o.data=a),ee(o),a=o):a=null,(e=Pe?function(e,t){switch(e){case"compositionend":return Re(t);case"keypress":return 32!==t.which?null:(De=!0,je);case"textInput":return(e=t.data)===je&&De?null:e;default:return null}}(e,n):function(e,t){if(Me)return"compositionend"===e||!Se&&Ae(e,t)?(e=ge(),he._root=null,he._startText=null,he._fallbackText=null,Me=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ne?null:t.data;default:return null}}(e,n))?((t=Ce.getPooled(Ie.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===a?t:null===t?a:[a,t]}},Ue=null,Fe={injectFiberControlledHostComponent:function(e){Ue=e}},He=null,ze=null;function Be(e){if(e=T(e)){Ue&&"function"==typeof Ue.restoreControlledState||p("194");var t=C(e.stateNode);Ue.restoreControlledState(e.stateNode,e.type,t)}}function We(e){He?ze?ze.push(e):ze=[e]:He=e}function qe(){return null!==He||null!==ze}function Ve(){if(He){var e=He,t=ze;if(ze=He=null,Be(e),t)for(e=0;e<t.length;e++)Be(t[e])}}var Ke={injection:Fe,enqueueStateRestore:We,needsStateRestore:qe,restoreStateIfNeeded:Ve};function Ge(e,t){return e(t)}function $e(e,t,n){return e(t,n)}function Xe(){}var Ye=!1;function Qe(e,t){if(Ye)return e(t);Ye=!0;try{return Ge(e,t)}finally{Ye=!1,qe()&&(Xe(),Ve())}}var Je={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Je[e.type]:"textarea"===t}function et(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function tt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function nt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function rt(e){e._valueTracker||(e._valueTracker=function(e){var t=nt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ot(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=nt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,it="function"==typeof Symbol&&Symbol.for,lt=it?Symbol.for("react.element"):60103,st=it?Symbol.for("react.portal"):60106,ct=it?Symbol.for("react.fragment"):60107,ut=it?Symbol.for("react.strict_mode"):60108,dt=it?Symbol.for("react.profiler"):60114,pt=it?Symbol.for("react.provider"):60109,ft=it?Symbol.for("react.context"):60110,mt=it?Symbol.for("react.async_mode"):60111,ht=it?Symbol.for("react.forward_ref"):60112,gt=it?Symbol.for("react.timeout"):60113,bt="function"==typeof Symbol&&Symbol.iterator;function vt(e){return null===e||void 0===e?null:"function"==typeof(e=bt&&e[bt]||e["@@iterator"])?e:null}function yt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case mt:return"AsyncMode";case ft:return"Context.Consumer";case ct:return"ReactFragment";case st:return"ReactPortal";case dt:return"Profiler("+e.pendingProps.id+")";case pt:return"Context.Provider";case ut:return"StrictMode";case gt:return"Timeout"}if("object"==typeof t&&null!==t)switch(t.$$typeof){case ht:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function xt(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=yt(e),a=null;n&&(a=yt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var wt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Et={},kt={};function _t(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Ct={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Ct[e]=new _t(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Ct[t]=new _t(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Ct[e]=new _t(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Ct[e]=new _t(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Ct[e]=new _t(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Ct[e]=new _t(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Ct[e]=new _t(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Ct[e]=new _t(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Ct[e]=new _t(e,5,!1,e.toLowerCase(),null)});var Tt=/[\-:]([a-z])/g;function St(e){return e[1].toUpperCase()}function Ot(e,t,n,r){var o=Ct.hasOwnProperty(t)?Ct[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!kt.hasOwnProperty(e)||!Et.hasOwnProperty(e)&&(wt.test(e)?kt[e]=!0:(Et[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Pt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Nt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Rt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function jt(e,t){null!=(t=t.checked)&&Ot(e,"checked",t,!1)}function It(e,t){jt(e,t);var n=Rt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?At(e,t.type,n):t.hasOwnProperty("defaultValue")&&At(e,t.type,Rt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Dt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function At(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Rt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Tt,St);Ct[t]=new _t(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Tt,St);Ct[t]=new _t(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Tt,St);Ct[t]=new _t(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Ct.tabIndex=new _t("tabIndex",1,!1,"tabindex",null);var Mt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Lt(e,t,n){return(e=xe.getPooled(Mt.change,e,t,n)).type="change",We(n),ee(e),e}var Ut=null,Ft=null;function Ht(e){L(e,!1)}function zt(e){if(ot(q(e)))return e}function Bt(e,t){if("change"===e)return t}var Wt=!1;function qt(){Ut&&(Ut.detachEvent("onpropertychange",Vt),Ft=Ut=null)}function Vt(e){"value"===e.propertyName&&zt(Ft)&&Qe(Ht,e=Lt(Ft,e,et(e)))}function Kt(e,t,n){"focus"===e?(qt(),Ft=n,(Ut=t).attachEvent("onpropertychange",Vt)):"blur"===e&&qt()}function Gt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return zt(Ft)}function $t(e,t){if("click"===e)return zt(t)}function Xt(e,t){if("input"===e||"change"===e)return zt(t)}a.canUseDOM&&(Wt=tt("input")&&(!document.documentMode||9<document.documentMode));var Yt={eventTypes:Mt,_isInputEventSupported:Wt,extractEvents:function(e,t,n,r){var o=t?q(t):window,a=void 0,i=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?a=Bt:Ze(o)?Wt?a=Xt:(a=Gt,i=Kt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=$t),a&&(a=a(e,t)))return Lt(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&At(o,"number",o.value)}},Qt=xe.extend({view:null,detail:null}),Jt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Jt[e])&&!!t[e]}function en(){return Zt}var tn=Qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:en,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),rn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},on={eventTypes:rn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?W(t):null):a=null,a===t)return null;var i=void 0,l=void 0,s=void 0,c=void 0;return"mouseout"===e||"mouseover"===e?(i=tn,l=rn.mouseLeave,s=rn.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=nn,l=rn.pointerLeave,s=rn.pointerEnter,c="pointer"),e=null==a?o:q(a),o=null==t?o:q(t),(l=i.getPooled(l,a,n,r)).type=c+"leave",l.target=e,l.relatedTarget=o,(n=i.getPooled(s,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=e,te(l,n,a,t),[l,n]}};function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function ln(e){2!==an(e)&&p("188")}function sn(e){var t=e.alternate;if(!t)return 3===(t=an(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return ln(o),e;if(i===r)return ln(o),t;i=i.sibling}p("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}i||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}function cn(e){if(!(e=sn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var un=xe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),dn=xe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),pn=Qt.extend({relatedTarget:null});function fn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var mn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},gn=Qt.extend({key:function(e){if(e.key){var t=mn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=fn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:en,charCode:function(e){return"keypress"===e.type?fn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?fn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),bn=tn.extend({dataTransfer:null}),vn=Qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:en}),yn=xe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),xn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),wn=[["abort","abort"],[se,"animationEnd"],[ce,"animationIteration"],[ue,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[de,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],En={},kn={};function _n(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},En[e]=t,kn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){_n(e,!0)}),wn.forEach(function(e){_n(e,!1)});var Cn={eventTypes:En,isInteractiveTopLevelEventType:function(e){return void 0!==(e=kn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=kn[e];if(!o)return null;switch(e){case"keypress":if(0===fn(n))return null;case"keydown":case"keyup":e=gn;break;case"blur":case"focus":e=pn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=vn;break;case se:case ce:case ue:e=un;break;case de:e=yn;break;case"scroll":e=Qt;break;case"wheel":e=xn;break;case"copy":case"cut":case"paste":e=dn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=xe}return ee(t=e.getPooled(o,t,n,r)),t}},Tn=Cn.isInteractiveTopLevelEventType,Sn=[];function On(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=W(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],U(e.topLevelType,t,e.nativeEvent,et(e.nativeEvent))}var Pn=!0;function Nn(e){Pn=!!e}function jn(e,t){if(!t)return null;var n=(Tn(e)?Dn:An).bind(null,e);t.addEventListener(e,n,!1)}function In(e,t){if(!t)return null;var n=(Tn(e)?Dn:An).bind(null,e);t.addEventListener(e,n,!0)}function Dn(e,t){$e(An,e,t)}function An(e,t){if(Pn){var n=et(t);if(null===(n=W(n))||"number"!=typeof n.tag||2===an(n)||(n=null),Sn.length){var r=Sn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Qe(On,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Sn.length&&Sn.push(e)}}}var Rn={get _enabled(){return Pn},setEnabled:Nn,isEnabled:function(){return Pn},trapBubbledEvent:jn,trapCapturedEvent:In,dispatchEvent:An},Mn={},Ln=0,Un="_reactListenersID"+(""+Math.random()).slice(2);function Fn(e){return Object.prototype.hasOwnProperty.call(e,Un)||(e[Un]=Ln++,Mn[e[Un]]={}),Mn[e[Un]]}function Hn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zn(e,t){var n,r=Hn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Hn(r)}}function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Wn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vn=null,Kn=null,Gn=null,$n=!1;function Xn(e,t){if($n||null==Vn||Vn!==s())return null;var n=Vn;return"selectionStart"in n&&Bn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Gn&&c(Gn,n)?null:(Gn=n,(e=xe.getPooled(qn.select,Kn,e,t)).type="select",e.target=Vn,ee(e),e)}var Yn={eventTypes:qn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Fn(a),o=w.onSelect;for(var i=0;i<o.length;i++){var l=o[i];if(!a.hasOwnProperty(l)||!a[l]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?q(t):window,e){case"focus":(Ze(a)||"true"===a.contentEditable)&&(Vn=a,Kn=t,Gn=null);break;case"blur":Gn=Kn=Vn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":return $n=!1,Xn(n,r);case"selectionchange":if(Wn)break;case"keydown":case"keyup":return Xn(n,r)}return null}};R.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),C=K.getFiberCurrentPropsFromNode,T=K.getInstanceFromNode,S=K.getNodeFromInstance,R.injectEventPluginsByName({SimpleEventPlugin:Cn,EnterLeaveEventPlugin:on,ChangeEventPlugin:Yt,SelectEventPlugin:Yn,BeforeInputEventPlugin:Le});var Qn="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,Jn=Date,Zn=setTimeout,er=clearTimeout,tr=void 0;if("object"==typeof performance&&"function"==typeof performance.now){var nr=performance;tr=function(){return nr.now()}}else tr=function(){return Jn.now()};var rr=void 0,or=void 0;if(a.canUseDOM){var ar="function"==typeof Qn?Qn:function(){p("276")},ir=null,lr=null,sr=-1,cr=!1,ur=!1,dr=0,pr=33,fr=33,mr={didTimeout:!1,timeRemaining:function(){var e=dr-tr();return 0<e?e:0}},hr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{or(e),r||(cr=!0,window.postMessage(gr,"*"))}},gr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===gr&&(cr=!1,null!==ir)){if(null!==ir){var t=tr();if(!(-1===sr||sr>t)){e=-1;for(var n=[],r=ir;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(mr.didTimeout=!0,t=0,r=n.length;t<r;t++)hr(n[t],mr);sr=e}}for(e=tr();0<dr-e&&null!==ir;)e=ir,mr.didTimeout=!1,hr(e,mr),e=tr();null===ir||ur||(ur=!0,ar(br))}},!1);var br=function(e){ur=!1;var t=e-dr+fr;t<fr&&pr<fr?(8>t&&(t=8),fr=t<pr?pr:t):pr=t,dr=e+fr,cr||(cr=!0,window.postMessage(gr,"*"))};rr=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=tr()+t.timeout),(-1===sr||-1!==n&&n<sr)&&(sr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===ir?ir=e:null!==(t=e.prev=lr)&&(t.next=e),lr=e,ur||(ur=!0,ar(br)),e},or=function(e){if(null!==e.prev||ir===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,ir=t):null!==n?(n.next=null,lr=n):lr=ir=null}}}else{var vr=new Map;rr=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=Zn(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return vr.set(e,n),t},or=function(e){var t=vr.get(e.scheduledCallback);vr.delete(e),er(t)}}function yr(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function xr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function wr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Er(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function kr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function _r(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Cr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Tr={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Sr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Or(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Sr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Pr=void 0,Nr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Tr.svg||"innerHTML"in e)e.innerHTML=t;else{for((Pr=Pr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Pr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Dr=["Webkit","ms","Moz","O"];function Ar(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||Ir.hasOwnProperty(o)&&Ir[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ir).forEach(function(e){Dr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ir[t]=Ir[e]})});var Rr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Mr(e,t,n){t&&(Rr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function Lr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ur=l.thatReturns("");function Fr(e,t){var n=Fn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":In("scroll",e);break;case"focus":case"blur":In("focus",e),In("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":tt(o,!0)&&In(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===pe.indexOf(o)&&jn(o,e)}n[o]=!0}}}function Hr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Tr.html&&(r=Sr(e)),r===Tr.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function zr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Br(e,t,n,r){var o=Lr(t,n);switch(t){case"iframe":case"object":jn("load",e);var a=n;break;case"video":case"audio":for(a=0;a<pe.length;a++)jn(pe[a],e);a=n;break;case"source":jn("error",e),a=n;break;case"img":case"image":case"link":jn("error",e),jn("load",e),a=n;break;case"form":jn("reset",e),jn("submit",e),a=n;break;case"details":jn("toggle",e),a=n;break;case"input":Nt(e,n),a=Pt(e,n),jn("invalid",e),Fr(r,"onChange");break;case"option":a=yr(e,n);break;case"select":wr(e,n),a=i({},n,{value:void 0}),jn("invalid",e),Fr(r,"onChange");break;case"textarea":kr(e,n),a=Er(e,n),jn("invalid",e),Fr(r,"onChange");break;default:a=n}Mr(t,a,Ur);var s,c=a;for(s in c)if(c.hasOwnProperty(s)){var u=c[s];"style"===s?Ar(e,u):"dangerouslySetInnerHTML"===s?null!=(u=u?u.__html:void 0)&&Nr(e,u):"children"===s?"string"==typeof u?("textarea"!==t||""!==u)&&jr(e,u):"number"==typeof u&&jr(e,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(x.hasOwnProperty(s)?null!=u&&Fr(r,s):null!=u&&Ot(e,s,u,o))}switch(t){case"input":rt(e),Dt(e,n,!1);break;case"textarea":rt(e),Cr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?xr(e,!!n.multiple,t,!1):null!=n.defaultValue&&xr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=l)}}function Wr(e,t,n,r,o){var a=null;switch(t){case"input":n=Pt(e,n),r=Pt(e,r),a=[];break;case"option":n=yr(e,n),r=yr(e,r),a=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),a=[];break;case"textarea":n=Er(e,n),r=Er(e,r),a=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=l)}Mr(t,r,Ur),t=e=void 0;var s=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var c=n[e];for(t in c)c.hasOwnProperty(t)&&(s||(s={}),s[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?a||(a=[]):(a=a||[]).push(e,null));for(e in r){var u=r[e];if(c=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&u!==c&&(null!=u||null!=c))if("style"===e)if(c){for(t in c)!c.hasOwnProperty(t)||u&&u.hasOwnProperty(t)||(s||(s={}),s[t]="");for(t in u)u.hasOwnProperty(t)&&c[t]!==u[t]&&(s||(s={}),s[t]=u[t])}else s||(a||(a=[]),a.push(e,s)),s=u;else"dangerouslySetInnerHTML"===e?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(a=a||[]).push(e,""+u)):"children"===e?c===u||"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(e,""+u):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=u&&Fr(o,e),a||c===u||(a=[])):(a=a||[]).push(e,u))}return s&&(a=a||[]).push("style",s),a}function qr(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&jt(e,o),Lr(n,r),r=Lr(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],l=t[a+1];"style"===i?Ar(e,l):"dangerouslySetInnerHTML"===i?Nr(e,l):"children"===i?jr(e,l):Ot(e,i,l,r)}switch(n){case"input":It(e,o);break;case"textarea":_r(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?xr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?xr(e,!!o.multiple,o.defaultValue,!0):xr(e,!!o.multiple,o.multiple?[]:"",!1))}}function Vr(e,t,n,r,o){switch(t){case"iframe":case"object":jn("load",e);break;case"video":case"audio":for(r=0;r<pe.length;r++)jn(pe[r],e);break;case"source":jn("error",e);break;case"img":case"image":case"link":jn("error",e),jn("load",e);break;case"form":jn("reset",e),jn("submit",e);break;case"details":jn("toggle",e);break;case"input":Nt(e,n),jn("invalid",e),Fr(o,"onChange");break;case"select":wr(e,n),jn("invalid",e),Fr(o,"onChange");break;case"textarea":kr(e,n),jn("invalid",e),Fr(o,"onChange")}for(var a in Mr(t,n,Ur),r=null,n)if(n.hasOwnProperty(a)){var i=n[a];"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):x.hasOwnProperty(a)&&null!=i&&Fr(o,a)}switch(t){case"input":rt(e),Dt(e,n,!0);break;case"textarea":rt(e),Cr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return r}function Kr(e,t){return e.nodeValue!==t}var Gr={createElement:Hr,createTextNode:zr,setInitialProperties:Br,diffProperties:Wr,updateProperties:qr,diffHydratedProperties:Vr,diffHydratedText:Kr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(It(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||p("90"),ot(r),It(r,o)}}}break;case"textarea":_r(e,n);break;case"select":null!=(t=n.value)&&xr(e,!!n.multiple,t,!1)}}},$r=null,Xr=null;function Yr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Qr(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var Jr=tr,Zr=rr,eo=or;function to(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function no(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){ro[++oo]=e.current,e.current=t}var so=ao(d),co=ao(!1),uo=d;function po(e){return mo(e)?uo:so.current}function fo(e,t){var n=e.type.contextTypes;if(!n)return d;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function mo(e){return 2===e.tag&&null!=e.type.childContextTypes}function ho(e){mo(e)&&(io(co),io(so))}function go(e){io(co),io(so)}function bo(e,t,n){so.current!==d&&p("168"),lo(so,t),lo(co,n)}function vo(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",yt(e)||"Unknown",o);return i({},t,n)}function yo(e){if(!mo(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||d,uo=so.current,lo(so,t),lo(co,co.current),!0}function xo(e,t){var n=e.stateNode;if(n||p("169"),t){var r=vo(e,uo);n.__reactInternalMemoizedMergedChildContext=r,io(co),io(so),lo(so,r)}else io(co);lo(co,t)}function wo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Eo(e,t,n){var r=e.alternate;return null===r?((r=new wo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function ko(e,t,n){var r=e.type,o=e.key;if(e=e.props,"function"==typeof r)var a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case ct:return _o(e.children,t,n,o);case mt:a=11,t|=3;break;case ut:a=11,t|=2;break;case dt:return(r=new wo(15,e,o,4|t)).type=dt,r.expirationTime=n,r;case gt:a=16,t|=2;break;default:e:{switch("object"==typeof r&&null!==r?r.$$typeof:null){case pt:a=13;break e;case ft:a=12;break e;case ht:a=14;break e;default:p("130",null==r?r:typeof r,"")}a=void 0}}return(t=new wo(a,e,o,t)).type=r,t.expirationTime=n,t}function _o(e,t,n,r){return(e=new wo(10,e,r,t)).expirationTime=n,e}function Co(e,t,n){return(e=new wo(6,e,null,t)).expirationTime=n,e}function To(e,t,n){return(t=new wo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function So(e,t,n){return e={current:t=new wo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Oo=null,Po=null;function No(e){return function(t){try{return e(t)}catch(e){}}}function jo(e){"function"==typeof Oo&&Oo(e)}function Io(e){"function"==typeof Po&&Po(e)}var Do=!1;function Ao(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Ro(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Mo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Lo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function Uo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,a=null;null===o&&(o=e.updateQueue=Ao(e.memoizedState))}else o=e.updateQueue,a=r.updateQueue,null===o?null===a?(o=e.updateQueue=Ao(e.memoizedState),a=r.updateQueue=Ao(r.memoizedState)):o=e.updateQueue=Ro(a):null===a&&(a=r.updateQueue=Ro(o));null===a||o===a?Lo(o,t,n):null===o.lastUpdate||null===a.lastUpdate?(Lo(o,t,n),Lo(a,t,n)):(Lo(o,t,n),a.lastUpdate=t)}function Fo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Ao(e.memoizedState):Ho(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Ho(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Ro(t)),t}function zo(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(a,r,o):e)||void 0===o)break;return i({},r,o);case 2:Do=!0}return r}function Bo(e,t,n,r,o){if(Do=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var a=(t=Ho(e,t)).baseState,i=null,l=0,s=t.firstUpdate,c=a;null!==s;){var u=s.expirationTime;u>o?(null===i&&(i=s,a=c),(0===l||l>u)&&(l=u)):(c=zo(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(u=null,s=t.firstCapturedUpdate;null!==s;){var d=s.expirationTime;d>o?(null===u&&(u=s,null===i&&(a=c)),(0===l||l>d)&&(l=d)):(c=zo(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===i&&(t.lastUpdate=null),null===u?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===u&&(a=c),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=u,t.expirationTime=l,e.memoizedState=c}}function Wo(e,t){"function"!=typeof e&&p("191",e),e.call(t)}function qo(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Wo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Wo(t,n)),e=e.nextEffect}function Vo(e,t){return{value:e,source:t,stack:xt(t)}}var Ko=ao(null),Go=ao(null),$o=ao(0);function Xo(e){var t=e.type._context;lo($o,t._changedBits),lo(Go,t._currentValue),lo(Ko,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Yo(e){var t=$o.current,n=Go.current;io(Ko),io(Go),io($o),(e=e.type._context)._currentValue=n,e._changedBits=t}var Qo={},Jo=ao(Qo),Zo=ao(Qo),ea=ao(Qo);function ta(e){return e===Qo&&p("174"),e}function na(e,t){lo(ea,t),lo(Zo,e),lo(Jo,Qo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Or(null,"");break;default:t=Or(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}io(Jo),lo(Jo,t)}function ra(e){io(Jo),io(Zo),io(ea)}function oa(e){Zo.current===e&&(io(Jo),io(Zo))}function aa(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:i({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var ia={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=vi(),o=Mo(r=gi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Uo(e,o,r),bi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=vi(),o=Mo(r=gi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),Uo(e,o,r),bi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=vi(),r=Mo(n=gi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),Uo(e,r,n),bi(e,n)}};function la(e,t,n,r,o,a){var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function sa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ia.enqueueReplaceState(t,t.state,null)}function ca(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,a=po(e);r.props=o,r.state=e.memoizedState,r.refs=d,r.context=fo(e,a),null!==(a=e.updateQueue)&&(Bo(e,a,o,r,t),r.state=e.memoizedState),"function"==typeof(a=e.type.getDerivedStateFromProps)&&(aa(e,a,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&ia.enqueueReplaceState(r,r.state,null),null!==(a=e.updateQueue)&&(Bo(e,a,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var ua=Array.isArray;function da(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&p("110"),r=n.stateNode),r||p("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===d?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&p("148"),n._owner||p("254",e)}return e}function pa(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function fa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Eo(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Co(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function s(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=da(e,t,n),r.return=e,r):((r=ko(n,e.mode,r)).ref=da(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=To(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function u(e,t,n,r,a){return null===t||10!==t.tag?((t=_o(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Co(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case lt:return(n=ko(t,e.mode,n)).ref=da(e,null,t),n.return=e,n;case st:return(t=To(t,e.mode,n)).return=e,t}if(ua(t)||vt(t))return(t=_o(t,e.mode,n,null)).return=e,t;pa(e,t)}return null}function f(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case lt:return n.key===o?n.type===ct?u(e,t,n.props.children,r,o):s(e,t,n,r):null;case st:return n.key===o?c(e,t,n,r):null}if(ua(n)||vt(n))return null!==o?null:u(e,t,n,r,null);pa(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case lt:return e=e.get(null===r.key?n:r.key)||null,r.type===ct?u(t,e,r.props.children,o,r.key):s(t,e,r,o);case st:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ua(r)||vt(r))return u(t,e=e.get(n)||null,r,o,null);pa(t,r)}return null}function h(o,i,l,s){for(var c=null,u=null,p=i,h=i=0,g=null;null!==p&&h<l.length;h++){p.index>h?(g=p,p=null):g=p.sibling;var b=f(o,p,l[h],s);if(null===b){null===p&&(p=g);break}e&&p&&null===b.alternate&&t(o,p),i=a(b,i,h),null===u?c=b:u.sibling=b,u=b,p=g}if(h===l.length)return n(o,p),c;if(null===p){for(;h<l.length;h++)(p=d(o,l[h],s))&&(i=a(p,i,h),null===u?c=p:u.sibling=p,u=p);return c}for(p=r(o,p);h<l.length;h++)(g=m(p,o,h,l[h],s))&&(e&&null!==g.alternate&&p.delete(null===g.key?h:g.key),i=a(g,i,h),null===u?c=g:u.sibling=g,u=g);return e&&p.forEach(function(e){return t(o,e)}),c}function g(o,i,l,s){var c=vt(l);"function"!=typeof c&&p("150"),null==(l=c.call(l))&&p("151");for(var u=c=null,h=i,g=i=0,b=null,v=l.next();null!==h&&!v.done;g++,v=l.next()){h.index>g?(b=h,h=null):b=h.sibling;var y=f(o,h,v.value,s);if(null===y){h||(h=b);break}e&&h&&null===y.alternate&&t(o,h),i=a(y,i,g),null===u?c=y:u.sibling=y,u=y,h=b}if(v.done)return n(o,h),c;if(null===h){for(;!v.done;g++,v=l.next())null!==(v=d(o,v.value,s))&&(i=a(v,i,g),null===u?c=v:u.sibling=v,u=v);return c}for(h=r(o,h);!v.done;g++,v=l.next())null!==(v=m(h,o,g,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),i=a(v,i,g),null===u?c=v:u.sibling=v,u=v);return e&&h.forEach(function(e){return t(o,e)}),c}return function(e,r,a,l){var s="object"==typeof a&&null!==a&&a.type===ct&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case lt:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){if(10===s.tag?a.type===ct:s.type===a.type){n(e,s.sibling),(r=o(s,a.type===ct?a.props.children:a.props,l)).ref=da(e,s,a),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}a.type===ct?((r=_o(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=ko(a,e.mode,l)).ref=da(e,r,a),l.return=e,e=l)}return i(e);case st:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=To(a,e.mode,l)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a,l)).return=e,e=r):(n(e,r),(r=Co(a,e.mode,l)).return=e,e=r),i(e);if(ua(a))return h(e,r,a,l);if(vt(a))return g(e,r,a,l);if(c&&pa(e,a),void 0===a&&!s)switch(e.tag){case 2:case 1:p("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var ma=fa(!0),ha=fa(!1),ga=null,ba=null,va=!1;function ya(e,t){var n=new wo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function xa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function wa(e){if(va){var t=ba;if(t){var n=t;if(!xa(e,t)){if(!(t=to(n))||!xa(e,t))return e.effectTag|=2,va=!1,void(ga=e);ya(ga,n)}ga=e,ba=no(t)}else e.effectTag|=2,va=!1,ga=e}}function Ea(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;ga=e}function ka(e){if(e!==ga)return!1;if(!va)return Ea(e),va=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Qr(t,e.memoizedProps))for(t=ba;t;)ya(e,t),t=to(t);return Ea(e),ba=ga?to(e.stateNode):null,!0}function _a(){ba=ga=null,va=!1}function Ca(e,t,n){Ta(e,t,n,t.expirationTime)}function Ta(e,t,n,r){t.child=null===e?ha(t,null,n,r):ma(t,e.child,n,r)}function Sa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Oa(e,t,n,r,o){Sa(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return r&&xo(t,!1),ja(e,t);n=t.stateNode,at.current=t;var i=a?null:n.render();return t.effectTag|=1,a&&(Ta(e,t,null,o),t.child=null),Ta(e,t,i,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&xo(t,!0),t.child}function Pa(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),na(e,t.containerInfo)}function Na(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){o.return=a.return,a=o;break}a=a.return}o=a}}function ja(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Eo(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Eo(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ia(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Pa(t);break;case 2:yo(t);break;case 4:na(t,t.stateNode.containerInfo);break;case 13:Xo(t)}return null}switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,a=po(t);return r=r(o,a=fo(t,a)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&aa(t,a,o),o=yo(t),r.updater=ia,t.stateNode=r,r._reactInternalFiber=t,ca(t,n),e=Oa(e,t,!0,o,n)):(t.tag=1,Ca(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,co.current||t.memoizedProps!==n?(o=o(n,r=fo(t,r=po(t))),t.effectTag|=1,Ca(e,t,o),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 2:if(o=yo(t),null===e)if(null===t.stateNode){var i=t.pendingProps,l=t.type;r=po(t);var s=2===t.tag&&null!=t.type.contextTypes;i=new l(i,a=s?fo(t,r):d),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=ia,t.stateNode=i,i._reactInternalFiber=t,s&&((s=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,s.__reactInternalMemoizedMaskedChildContext=a),ca(t,n),r=!0}else{l=t.type,r=t.stateNode,s=t.memoizedProps,a=t.pendingProps,r.props=s;var c=r.context;i=fo(t,i=po(t));var u=l.getDerivedStateFromProps;(l="function"==typeof u||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(s!==a||c!==i)&&sa(t,r,a,i),Do=!1;var f=t.memoizedState;c=r.state=f;var m=t.updateQueue;null!==m&&(Bo(t,m,a,r,n),c=t.memoizedState),s!==a||f!==c||co.current||Do?("function"==typeof u&&(aa(t,u,a),c=t.memoizedState),(s=Do||la(t,s,a,f,c,i))?(l||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||("function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount()),"function"==typeof r.componentDidMount&&(t.effectTag|=4)):("function"==typeof r.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=c),r.props=a,r.state=c,r.context=i,r=s):("function"==typeof r.componentDidMount&&(t.effectTag|=4),r=!1)}else l=t.type,r=t.stateNode,a=t.memoizedProps,s=t.pendingProps,r.props=a,c=r.context,i=fo(t,i=po(t)),(l="function"==typeof(u=l.getDerivedStateFromProps)||"function"==typeof r.getSnapshotBeforeUpdate)||"function"!=typeof r.UNSAFE_componentWillReceiveProps&&"function"!=typeof r.componentWillReceiveProps||(a!==s||c!==i)&&sa(t,r,s,i),Do=!1,c=t.memoizedState,f=r.state=c,null!==(m=t.updateQueue)&&(Bo(t,m,s,r,n),f=t.memoizedState),a!==s||c!==f||co.current||Do?("function"==typeof u&&(aa(t,u,s),f=t.memoizedState),(u=Do||la(t,a,s,c,f,i))?(l||"function"!=typeof r.UNSAFE_componentWillUpdate&&"function"!=typeof r.componentWillUpdate||("function"==typeof r.componentWillUpdate&&r.componentWillUpdate(s,f,i),"function"==typeof r.UNSAFE_componentWillUpdate&&r.UNSAFE_componentWillUpdate(s,f,i)),"function"==typeof r.componentDidUpdate&&(t.effectTag|=4),"function"==typeof r.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=s,t.memoizedState=f),r.props=s,r.state=f,r.context=i,r=u):("function"!=typeof r.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof r.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Oa(e,t,r,o,n);case 3:return Pa(t),null!==(o=t.updateQueue)?(r=null!==(r=t.memoizedState)?r.element:null,Bo(t,o,t.pendingProps,null,n),(o=t.memoizedState.element)===r?(_a(),e=ja(e,t)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(ba=no(t.stateNode.containerInfo),ga=t,r=va=!0),r?(t.effectTag|=2,t.child=ha(t,null,o,n)):(_a(),Ca(e,t,o)),e=t.child)):(_a(),e=ja(e,t)),e;case 5:return ta(ea.current),(o=ta(Jo.current))!==(r=Or(o,t.type))&&(lo(Zo,t),lo(Jo,r)),null===e&&wa(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,a=null!==e?e.memoizedProps:null,co.current||s!==r||((s=1&t.mode&&!!r.hidden)&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,Qr(o,r)?s=null:a&&Qr(o,a)&&(t.effectTag|=16),Sa(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(Ca(e,t,s),t.memoizedProps=r,e=t.child)):e=ja(e,t),e;case 6:return null===e&&wa(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return na(t,t.stateNode.containerInfo),o=t.pendingProps,co.current||t.memoizedProps!==o?(null===e?t.child=ma(t,null,o,n):Ca(e,t,o),t.memoizedProps=o,e=t.child):e=ja(e,t),e;case 14:return o=t.type.render,n=t.pendingProps,r=t.ref,co.current||t.memoizedProps!==n||r!==(null!==e?e.ref:null)?(Ca(e,t,o=o(n,r)),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 10:return n=t.pendingProps,co.current||t.memoizedProps!==n?(Ca(e,t,n),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 11:return n=t.pendingProps.children,co.current||null!==n&&t.memoizedProps!==n?(Ca(e,t,n),t.memoizedProps=n,e=t.child):e=ja(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=ja(e,t):(Ca(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=!0;if(co.current)i=!1;else if(a===o)return t.stateNode=0,Xo(t),ja(e,t);var l=o.value;if(t.memoizedProps=o,null===a)l=1073741823;else if(a.value===o.value){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t);l=0}else{var s=a.value;if(s===l&&(0!==s||1/s==1/l)||s!=s&&l!=l){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t);l=0}else if(l="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,l):1073741823,0==(l|=0)){if(a.children===o.children&&i)return t.stateNode=0,Xo(t),ja(e,t)}else Na(t,r,l,n)}return t.stateNode=l,Xo(t),Ca(e,t,o.children),t.child}(e,t,n);case 12:e:if(r=t.type,a=t.pendingProps,s=t.memoizedProps,o=r._currentValue,i=r._changedBits,co.current||0!==i||s!==a){if(t.memoizedProps=a,void 0!==(l=a.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(i&l))Na(t,r,i,n);else if(s===a){e=ja(e,t);break e}n=(n=a.children)(o),t.effectTag|=1,Ca(e,t,n),e=t.child}else e=ja(e,t);return e;default:p("156")}}function Da(e){e.effectTag|=4}var Aa=void 0,Ra=void 0,Ma=void 0;function La(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return ho(t),null;case 3:ra(),go();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ka(t),t.effectTag&=-3),Aa(t),null;case 5:oa(t),r=ta(ea.current);var o=t.type;if(null!==e&&null!=t.stateNode){var a=e.memoizedProps,i=t.stateNode,l=ta(Jo.current);i=Wr(i,o,a,n,r),Ra(e,t,i,o,a,n,r,l),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&p("166"),null;if(e=ta(Jo.current),ka(t))n=t.stateNode,o=t.type,a=t.memoizedProps,n[z]=t,n[B]=a,r=Vr(n,o,a,e,r),t.updateQueue=r,null!==r&&Da(t);else{(e=Hr(o,n,r,e))[z]=t,e[B]=n;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}Br(e,o,n,r),Yr(o,n)&&Da(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ma(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&p("166"),null;r=ta(ea.current),ta(Jo.current),ka(t)?(r=t.stateNode,n=t.memoizedProps,r[z]=t,Kr(r,n)&&Da(t)):((r=zr(n,r))[z]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ra(),Aa(t),null;case 13:return Yo(t),null;case 12:return null;case 0:p("167");default:p("156")}}function Ua(e,t){var n=t.source;null===t.stack&&null!==n&&xt(n),null!==n&&yt(n),t=t.value,null!==e&&2===e.tag&&yt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function Fa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){mi(e,t)}else t.current=null}function Ha(e){switch(Io(e),e.tag){case 2:Fa(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){mi(e,t)}break;case 5:Fa(e);break;case 4:Wa(e)}}function za(e){return 5===e.tag||3===e.tag||4===e.tag}function Ba(e){e:{for(var t=e.return;null!==t;){if(za(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(jr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||za(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var a=t,i=o.stateNode,l=n;8===a.nodeType?a.parentNode.insertBefore(i,l):a.insertBefore(i,l)}else t.insertBefore(o.stateNode,n);else r?(a=t,i=o.stateNode,8===a.nodeType?a.parentNode.insertBefore(i,a):a.appendChild(i)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Wa(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var a=t,i=a;;)if(Ha(i),null!==i.child&&4!==i.tag)i.child.return=i,i=i.child;else{if(i===a)break;for(;null===i.sibling;){if(null===i.return||i.return===a)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}o?(a=r,i=t.stateNode,8===a.nodeType?a.parentNode.removeChild(i):a.removeChild(i)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Ha(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function qa(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&(n[B]=r,qr(n,a,o,e,r))}break;case 6:null===t.stateNode&&p("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:p("163")}}function Va(e,t,n){(n=Mo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Qi(r),Ua(e,t)},n}function Ka(e,t,n){(n=Mo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===ci?ci=new Set([this]):ci.add(this);var n=t.value,r=t.stack;Ua(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Ga(e,t,n,r,o,a){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Vo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void Fo(e,r=Va(e,r,a),a);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===ci||!ci.has(n)))return e.effectTag|=1024,void Fo(e,r=Ka(e,t,a),a)}e=e.return}while(null!==e)}function $a(e){switch(e.tag){case 2:ho(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ra(),go(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return oa(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ra(),null;case 13:return Yo(e),null;default:return null}}Aa=function(){},Ra=function(e,t,n){(t.updateQueue=n)&&Da(t)},Ma=function(e,t,n,r){n!==r&&Da(t)};var Xa=Jr(),Ya=2,Qa=Xa,Ja=0,Za=0,ei=!1,ti=null,ni=null,ri=0,oi=-1,ai=!1,ii=null,li=!1,si=!1,ci=null;function ui(){if(null!==ti)for(var e=ti.return;null!==e;){var t=e;switch(t.tag){case 2:ho(t);break;case 3:ra(),go();break;case 5:oa(t);break;case 4:ra();break;case 13:Yo(t)}e=e.return}ni=null,ri=0,oi=-1,ai=!1,ti=null,si=!1}function di(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=La(t,e);var o=e;if(1073741823===ri||1073741823!==o.expirationTime){var a=0;switch(o.tag){case 3:case 2:var i=o.updateQueue;null!==i&&(a=i.expirationTime)}for(i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){si=!0;break}e=n}else{if(null!==(e=$a(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function pi(e){var t=Ia(e.alternate,e,ri);return null===t&&(t=di(e)),at.current=null,t}function fi(e,t,n){ei&&p("243"),ei=!0,t===ri&&e===ni&&null!==ti||(ui(),ri=t,oi=-1,ti=Eo((ni=e).current,null,ri),e.pendingCommitExpirationTime=0);var r=!1;for(ai=!n||ri<=Ya;;){try{if(n)for(;null!==ti&&!Yi();)ti=pi(ti);else for(;null!==ti;)ti=pi(ti)}catch(t){if(null===ti)r=!0,Qi(t);else{null===ti&&p("271");var o=(n=ti).return;if(null===o){r=!0,Qi(t);break}Ga(e,o,n,t,0,ri),ti=di(n)}}break}if(ei=!1,r)return null;if(null===ti){if(si)return e.pendingCommitExpirationTime=t,e.current.alternate;ai&&p("262"),0<=oi&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&zi(e,t)},oi),function(e){null===Ti&&p("246"),Ti.remainingExpirationTime=e}(e.current.expirationTime)}return null}function mi(e,t){var n;e:{for(ei&&!li&&p("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===ci||!ci.has(r))){Uo(n,e=Ka(n,e=Vo(t,e),1),1),bi(n,1),n=void 0;break e}break;case 3:Uo(n,e=Va(n,e=Vo(t,e),1),1),bi(n,1),n=void 0;break e}n=n.return}3===e.tag&&(Uo(e,n=Va(e,n=Vo(t,e),1),1),bi(e,1)),n=void 0}return n}function hi(){var e=2+25*(1+((vi()-2+500)/25|0));return e<=Ja&&(e=Ja+1),Ja=e}function gi(e,t){return e=0!==Za?Za:ei?li?1:ri:1&t.mode?Ri?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ri&&(0===Oi||e>Oi)&&(Oi=e),e}function bi(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ei&&0!==ri&&t<ri&&ui();var r=n.current.expirationTime;ei&&!li&&ni===n||zi(n,r),Ui>Li&&p("185")}e=e.return}}function vi(){return Qa=Jr()-Xa,Ya=2+(Qa/10|0)}function yi(e){var t=Za;Za=2+25*(1+((vi()-2+500)/25|0));try{return e()}finally{Za=t}}function xi(e,t,n,r,o){var a=Za;Za=1;try{return e(t,n,r,o)}finally{Za=a}}var wi=null,Ei=null,ki=0,_i=void 0,Ci=!1,Ti=null,Si=0,Oi=0,Pi=!1,Ni=!1,ji=null,Ii=null,Di=!1,Ai=!1,Ri=!1,Mi=null,Li=1e3,Ui=0,Fi=1;function Hi(e){if(0!==ki){if(e>ki)return;null!==_i&&eo(_i)}var t=Jr()-Xa;ki=e,_i=Zr(Wi,{timeout:10*(e-2)-t})}function zi(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Ei?(wi=Ei=e,e.nextScheduledRoot=e):(Ei=Ei.nextScheduledRoot=e).nextScheduledRoot=wi;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Ci||(Di?Ai&&(Ti=e,Si=1,$i(e,1,!1)):1===t?qi():Hi(t))}function Bi(){var e=0,t=null;if(null!==Ei)for(var n=Ei,r=wi;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Ei)&&p("244"),r===r.nextScheduledRoot){wi=Ei=r.nextScheduledRoot=null;break}if(r===wi)wi=o=r.nextScheduledRoot,Ei.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Ei){(Ei=n).nextScheduledRoot=wi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Ei)break;n=r,r=r.nextScheduledRoot}}null!==(n=Ti)&&n===t&&1===e?Ui++:Ui=0,Ti=t,Si=e}function Wi(e){Vi(0,!0,e)}function qi(){Vi(1,!1,null)}function Vi(e,t,n){if(Ii=n,Bi(),t)for(;null!==Ti&&0!==Si&&(0===e||e>=Si)&&(!Pi||vi()>=Si);)vi(),$i(Ti,Si,!Pi),Bi();else for(;null!==Ti&&0!==Si&&(0===e||e>=Si);)$i(Ti,Si,!1),Bi();null!==Ii&&(ki=0,_i=null),0!==Si&&Hi(Si),Ii=null,Pi=!1,Gi()}function Ki(e,t){Ci&&p("253"),Ti=e,Si=t,$i(e,t,!1),qi(),Gi()}function Gi(){if(Ui=0,null!==Mi){var e=Mi;Mi=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ni||(Ni=!0,ji=e)}}}if(Ni)throw e=ji,ji=null,Ni=!1,e}function $i(e,t,n){Ci&&p("245"),Ci=!0,n?null!==(n=e.finishedWork)?Xi(e,n,t):null!==(n=fi(e,t,!0))&&(Yi()?e.finishedWork=n:Xi(e,n,t)):null!==(n=e.finishedWork)?Xi(e,n,t):null!==(n=fi(e,t,!1))&&Xi(e,n,t),Ci=!1}function Xi(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Mi?Mi=[r]:Mi.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,li=ei=!0,(n=t.stateNode).current===t&&p("177"),0===(r=n.pendingCommitExpirationTime)&&p("261"),n.pendingCommitExpirationTime=0,vi(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;$r=Pn;var a=s();if(Bn(a)){if("selectionStart"in a)var i={start:a.selectionStart,end:a.selectionEnd};else e:{var l=window.getSelection&&window.getSelection();if(l&&0!==l.rangeCount){i=l.anchorNode;var c=l.anchorOffset,d=l.focusNode;l=l.focusOffset;try{i.nodeType,d.nodeType}catch(e){i=null;break e}var f=0,m=-1,h=-1,g=0,b=0,v=a,y=null;t:for(;;){for(var x;v!==i||0!==c&&3!==v.nodeType||(m=f+c),v!==d||0!==l&&3!==v.nodeType||(h=f+l),3===v.nodeType&&(f+=v.nodeValue.length),null!==(x=v.firstChild);)y=v,v=x;for(;;){if(v===a)break t;if(y===i&&++g===c&&(m=f),y===d&&++b===l&&(h=f),null!==(x=v.nextSibling))break;y=(v=y).parentNode}v=x}i=-1===m||-1===h?null:{start:m,end:h}}else i=null}i=i||{start:0,end:0}}else i=null;for(Xr={focusedElem:a,selectionRange:i},Nn(!1),ii=o;null!==ii;){a=!1,i=void 0;try{for(;null!==ii;){if(256&ii.effectTag){var w=ii.alternate;switch((c=ii).tag){case 2:if(256&c.effectTag&&null!==w){var E=w.memoizedProps,k=w.memoizedState,_=c.stateNode;_.props=c.memoizedProps,_.state=c.memoizedState;var C=_.getSnapshotBeforeUpdate(E,k);_.__reactInternalSnapshotBeforeUpdate=C}break;case 3:case 5:case 6:case 4:break;default:p("163")}}ii=ii.nextEffect}}catch(e){a=!0,i=e}a&&(null===ii&&p("178"),mi(ii,i),null!==ii&&(ii=ii.nextEffect))}for(ii=o;null!==ii;){w=!1,E=void 0;try{for(;null!==ii;){var T=ii.effectTag;if(16&T&&jr(ii.stateNode,""),128&T){var S=ii.alternate;if(null!==S){var O=S.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&T){case 2:Ba(ii),ii.effectTag&=-3;break;case 6:Ba(ii),ii.effectTag&=-3,qa(ii.alternate,ii);break;case 4:qa(ii.alternate,ii);break;case 8:Wa(k=ii),k.return=null,k.child=null,k.alternate&&(k.alternate.child=null,k.alternate.return=null)}ii=ii.nextEffect}}catch(e){w=!0,E=e}w&&(null===ii&&p("178"),mi(ii,E),null!==ii&&(ii=ii.nextEffect))}if(O=Xr,S=s(),T=O.focusedElem,w=O.selectionRange,S!==T&&u(document.documentElement,T)){null!==w&&Bn(T)&&(S=w.start,void 0===(O=w.end)&&(O=S),"selectionStart"in T?(T.selectionStart=S,T.selectionEnd=Math.min(O,T.value.length)):window.getSelection&&(S=window.getSelection(),E=T[me()].length,O=Math.min(w.start,E),w=void 0===w.end?O:Math.min(w.end,E),!S.extend&&O>w&&(E=w,w=O,O=E),E=zn(T,O),k=zn(T,w),E&&k&&(1!==S.rangeCount||S.anchorNode!==E.node||S.anchorOffset!==E.offset||S.focusNode!==k.node||S.focusOffset!==k.offset)&&((_=document.createRange()).setStart(E.node,E.offset),S.removeAllRanges(),O>w?(S.addRange(_),S.extend(k.node,k.offset)):(_.setEnd(k.node,k.offset),S.addRange(_))))),S=[];for(O=T;O=O.parentNode;)1===O.nodeType&&S.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof T.focus&&T.focus(),T=0;T<S.length;T++)(O=S[T]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(Xr=null,Nn($r),$r=null,n.current=t,ii=o;null!==ii;){o=!1,T=void 0;try{for(S=r;null!==ii;){var P=ii.effectTag;if(36&P){var N=ii.alternate;switch(w=S,(O=ii).tag){case 2:var j=O.stateNode;if(4&O.effectTag)if(null===N)j.props=O.memoizedProps,j.state=O.memoizedState,j.componentDidMount();else{var I=N.memoizedProps,D=N.memoizedState;j.props=O.memoizedProps,j.state=O.memoizedState,j.componentDidUpdate(I,D,j.__reactInternalSnapshotBeforeUpdate)}var A=O.updateQueue;null!==A&&(j.props=O.memoizedProps,j.state=O.memoizedState,qo(O,A,j));break;case 3:var R=O.updateQueue;if(null!==R){if(E=null,null!==O.child)switch(O.child.tag){case 5:E=O.child.stateNode;break;case 2:E=O.child.stateNode}qo(O,R,E)}break;case 5:var M=O.stateNode;null===N&&4&O.effectTag&&Yr(O.type,O.memoizedProps)&&M.focus();break;case 6:case 4:case 15:case 16:break;default:p("163")}}if(128&P){O=void 0;var L=ii.ref;if(null!==L){var U=ii.stateNode;switch(ii.tag){case 5:O=U;break;default:O=U}"function"==typeof L?L(O):L.current=O}}var F=ii.nextEffect;ii.nextEffect=null,ii=F}}catch(e){o=!0,T=e}o&&(null===ii&&p("178"),mi(ii,T),null!==ii&&(ii=ii.nextEffect))}ei=li=!1,jo(t.stateNode),0===(t=n.current.expirationTime)&&(ci=null),e.remainingExpirationTime=t}function Yi(){return!(null===Ii||Ii.timeRemaining()>Fi)&&(Pi=!0)}function Qi(e){null===Ti&&p("246"),Ti.remainingExpirationTime=0,Ni||(Ni=!0,ji=e)}function Ji(e,t){var n=Di;Di=!0;try{return e(t)}finally{(Di=n)||Ci||qi()}}function Zi(e,t){if(Di&&!Ai){Ai=!0;try{return e(t)}finally{Ai=!1}}return e(t)}function el(e,t){Ci&&p("187");var n=Di;Di=!0;try{return xi(e,t)}finally{Di=n,qi()}}function tl(e,t,n){if(Ri)return e(t,n);Di||Ci||0===Oi||(Vi(Oi,!1,null),Oi=0);var r=Ri,o=Di;Di=Ri=!0;try{return e(t,n)}finally{Ri=r,(Di=o)||Ci||qi()}}function nl(e){var t=Di;Di=!0;try{xi(e)}finally{(Di=t)||Ci||Vi(1,!1,null)}}function rl(e,t,n,r,o){var a=t.current;if(n){var i;n=n._reactInternalFiber;e:{for(2===an(n)&&2===n.tag||p("170"),i=n;3!==i.tag;){if(mo(i)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}(i=i.return)||p("171")}i=i.stateNode.context}n=mo(n)?vo(n,i):i}else n=d;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Mo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Uo(a,o,r),bi(a,r),r}function ol(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?p("188"):p("268",Object.keys(e))),null===(e=cn(t))?null:e.stateNode}function al(e,t,n,r){var o=t.current;return rl(e,t,n,o=gi(vi(),o),r)}function il(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ll(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Oo=No(function(e){return t.onCommitFiberRoot(n,e)}),Po=No(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return null===(e=cn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var sl=Ji,cl=tl,ul=function(){Ci||0===Oi||(Vi(Oi,!1,null),Oi=0)};function dl(e){this._expirationTime=hi(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function pl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function fl(e,t,n){this._internalRoot=So(e,t,n)}function ml(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function hl(e,t,n,r,o){ml(n)||p("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=il(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new fl(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=il(a._internalRoot);l.call(e)}}Zi(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return il(a._internalRoot)}function gl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ml(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:st,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Fe.injectFiberControlledHostComponent(Gr),dl.prototype.render=function(e){this._defer||p("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new pl;return rl(e,t,null,n,r._onCommit),r},dl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},dl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||p("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&p("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ki(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},dl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},pl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},pl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&p("191",n),n()}}},fl.prototype.render=function(e,t){var n=this._internalRoot,r=new pl;return null!==(t=void 0===t?null:t)&&r.then(t),al(e,n,null,r._onCommit),r},fl.prototype.unmount=function(e){var t=this._internalRoot,n=new pl;return null!==(e=void 0===e?null:e)&&n.then(e),al(null,t,null,n._onCommit),n},fl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new pl;return null!==(n=void 0===n?null:n)&&o.then(n),al(t,r,e,o._onCommit),o},fl.prototype.createBatch=function(){var e=new dl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ge=sl,$e=cl,Xe=ul;var bl={createPortal:gl,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ol(e)},hydrate:function(e,t,n){return hl(null,e,t,!0,n)},render:function(e,t,n){return hl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),hl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ml(e)||p("40"),!!e._reactRootContainer&&(Zi(function(){hl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return gl.apply(void 0,arguments)},unstable_batchedUpdates:Ji,unstable_deferredUpdates:yi,unstable_interactiveUpdates:tl,flushSync:el,unstable_flushControlled:nl,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:_,EventPropagators:ne,ReactControlledComponent:Ke,ReactDOMComponentTree:K,ReactDOMEventListener:Rn},unstable_createRoot:function(e,t){return new fl(e,!0,null!=t&&!0===t.hydrate)}};ll({findFiberByHostInstance:W,bundleType:0,version:"16.4.1",rendererPackageName:"react-dom"});var vl={default:bl},yl=vl&&bl||vl;e.exports=yl.default?yl.default:yl},function(e,t,n){"use strict";
/** @license React v16.4.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(42),o=n(62),a=n(61),i=n(41),l="function"==typeof Symbol&&Symbol.for,s=l?Symbol.for("react.element"):60103,c=l?Symbol.for("react.portal"):60106,u=l?Symbol.for("react.fragment"):60107,d=l?Symbol.for("react.strict_mode"):60108,p=l?Symbol.for("react.profiler"):60114,f=l?Symbol.for("react.provider"):60109,m=l?Symbol.for("react.context"):60110,h=l?Symbol.for("react.async_mode"):60111,g=l?Symbol.for("react.forward_ref"):60112;l&&Symbol.for("react.timeout");var b="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function x(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||y}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||y}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var k=E.prototype=new w;k.constructor=E,r(k,x.prototype),k.isPureReactComponent=!0;var _={current:null},C=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:s,type:e,key:a,ref:i,props:o,_owner:_.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var P=/\/+/g,N=[];function j(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function D(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case s:case c:a=!0}}if(a)return n(r,e,""===t?"."+A(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var l=t+A(o=e[i],i);a+=D(o,l,n,r)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=b&&e[b]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),i=0;!(o=e.next()).done;)a+=D(o=o.value,l=t+A(o,i++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function R(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,i.thatReturnsArgument):null!=e&&(O(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(P,"$&/")+"/"),t=j(t,a,r,o),null==e||D(e,"",M,t),I(t)}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=j(null,null,t,n),null==e||D(e,"",R,t),I(t)},count:function(e){return null==e?0:D(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,i.thatReturnsArgument),t},only:function(e){return O(e)||v("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:m,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:g,render:e}},Fragment:u,StrictMode:d,unstable_AsyncMode:h,unstable_Profiler:p,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var o=void 0,a=r({},e.props),i=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=_.current),void 0!==t.key&&(i=""+t.key);var u=void 0;for(o in e.type&&e.type.defaultProps&&(u=e.type.defaultProps),t)C.call(t,o)&&!T.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==u?u[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){u=Array(o);for(var d=0;d<o;d++)u[d]=arguments[d+2];a.children=u}return{$$typeof:s,type:e.type,key:i,ref:l,props:a,_owner:c}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:O,version:"16.4.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},F={default:U},H=F&&U||F;e.exports=H.default?H.default:H},function(e,t,n){(e.exports=n(31)(!1)).push([e.i,"/* Background Colors for Tiles\n------------------------------------*/\n.bg-main {\n  background-color: #fff;\n}\n.bg-darkgrey {\n  background-color: #4d4d4d;\n}\n.bg-pink {\n  background-color: #edbfc3;\n}\n.bg-unify {\n  background-color: #a0e0e7;\n}\n.bg-purple {\n  background-color: #e8bee8;\n}\n.bg-blue {\n  background-color: #b5daeb;\n}\n.bg-beige {\n  background-color: #e0d2c0;\n}\n.bg-yellow {\n  background-color: #ebdda1;\n}\n/* HeaderView \n------------------------------------*/\n.header-view-container {\n  background-color: #F5E7D8;\n}\n.header-view-container h1 {\n  padding-bottom: 0.8em;\n}\n.header-view-container small {\n  color: #808080;\n}\n.header-view-container .intro {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  min-height: 700px;\n}\n.header-view-container .intro .kate-logo {\n  width: 4em;\n  height: 4em;\n  margin-bottom: 1.8em;\n}\n.header-view-container .intro p {\n  font-size: 1.2em;\n}\n.header-view-container .intro:hover .btn-text {\n  transition: 0.3s transform;\n  transition-property: transform;\n  transition-duration: 0.3s;\n  transition-timing-function: ease;\n  transition-delay: 0s;\n  transform: scale(0.9, 0.9);\n}\n@media (max-width: 576px) {\n  .header-view-container .intro .kate-logo {\n    max-width: 3em;\n  }\n  .header-view-container .intro p {\n    font-size: 1em;\n  }\n}\n/* Navigation\n------------------------------------*/\n.background {\n  background-color: #F5E7D8;\n}\n.nav-view-container .nav-wrapper {\n  padding-top: 25px;\n}\n.nav-view-container nav .logo {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: 1;\n}\n.nav-view-container nav .logo h1 {\n  font-size: 22px;\n  letter-spacing: 0.5px;\n  font-weight: 900;\n  margin: 0;\n}\n.nav-view-container nav .logo h2 {\n  display: none;\n}\n@media (min-width: 768px) {\n  .nav-view-container nav .logo h2 {\n    display: block;\n    font-size: 0.7em;\n    font-weight: 300;\n    color: #808080;\n    margin: 0;\n    padding: 0;\n  }\n}\n/* Media Queries\n------------------------------------*/\n.experience-view-container {\n  margin: 0 auto;\n  width: 100%;\n  text-align: center;\n}\n.experience-view-container .experience-title {\n  margin-top: 10px;\n}\n.experience-view-container .experience-item {\n  margin-bottom: 15px;\n  text-align: center;\n}\n.experience-view-container .experience-item .experience-icon {\n  size: 50%;\n  margin-bottom: 15px;\n}\n@media (min-width: 1200px) {\n  .experience-view-container .experience-item .experience-icon {\n    size: 100%;\n  }\n}\n.experience-view-container .experience-item .experience-role {\n  margin: 10px 0 15px 0;\n}\n.experience-view-container .experience-item .experience-description {\n  padding: 0;\n}\n/* Portfolio\n------------------------------------*/\n.portfolio-view-container {\n  padding: 0;\n}\n.portfolio-view-container .hidden {\n  display: none;\n}\n.portfolio-view-container .card-display {\n  padding: 0;\n}\n.portfolio-view-container .project-card-img {\n  position: absolute;\n  display: block;\n  max-width: 100%;\n  min-width: 12em;\n}\n.portfolio-view-container .card-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  word-break: break-word;\n}\n.portfolio-view-container .card-container:hover .overlay {\n  opacity: 1;\n}\n.portfolio-view-container .xs-display {\n  display: none;\n}\n@media (max-width: 767px) {\n  .portfolio-view-container .card-container:hover .overlay {\n    display: none;\n  }\n  .portfolio-view-container .xs-display {\n    display: block;\n    padding: 0.7em 1em;\n  }\n}\n.portfolio-view-container .overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  background: rgba(0, 0, 0, 0.7);\n  /* Black see-through */\n  color: #f1f1f1;\n  width: 100%;\n  height: 100%;\n  transition: opacity 200ms linear;\n  opacity: 0;\n  color: white;\n  font-size: 1.1em;\n  padding: 1em;\n  text-align: left;\n}\n.portfolio-view-container .overlay .project-skill {\n  bottom: 0;\n}\n/* Skills\n------------------------------------*/\n.skills {\n  margin-bottom: 0;\n}\n.skills .skills-container {\n  height: auto;\n  margin-bottom: 3em;\n}\n.skills .skills-container .skill-left-panel,\n.skills .skills-container .skill-right-panel {\n  padding: 1.2em;\n}\n.skills .skills-container .skill-left-panel {\n  position: relative;\n}\n@media (max-width: 1199px) {\n  .skills .skills-container .skill-left-panel {\n    height: 14em;\n  }\n}\n.skills .skills-container .skill-left-panel .project-link-wrap {\n  position: absolute;\n  margin-top: 10em;\n}\n@media (max-width: 576px) {\n  .skills .skills-container .skill-left-panel .project-link-wrap {\n    margin-top: -1em;\n  }\n}\n.skills .skills-container .skill-left-panel .project-link-wrap .project-link {\n  color: #666;\n  margin-right: 0.5em;\n  font-size: 0.9em;\n}\n.skills .skills-container .skill-left-panel .skill-description {\n  height: 180px;\n}\n.skills .skills-container .skill-tabs-hor {\n  padding: 0;\n}\n@media (min-width: 1199px) {\n  .skills .skills-container .skill-tabs-hor {\n    display: none;\n  }\n}\n.skills .skills-container .skill-tabs-ver {\n  padding: 0;\n}\n@media (max-width: 1199px) {\n  .skills .skills-container .skill-tabs-ver {\n    display: none;\n  }\n}\n.skills p {\n  margin-bottom: 1.5em;\n}\n.skills .selected-Skill {\n  background-color: #00CC99;\n  color: white!important;\n  font-size: 0.8em;\n}\n.skills button {\n  border-bottom-left-radius: 0px;\n  border-top-left-radius: 0px;\n  font-size: 0.7em;\n  color: #555 !important;\n  width: 200px;\n  text-align: left;\n  background-color: unset;\n  border: 0;\n  color: unset;\n  margin-left: 0;\n  padding-bottom: 0;\n}\n.skills button:hover,\n.skills button:focus {\n  background-color: #00CC99;\n  color: white!important;\n  border: 0;\n  color: unset;\n  box-shadow: 0 0 0 0;\n}\n.skills button:active {\n  background-color: unset!important;\n  box-shadow: 0 0 0 0!important;\n}\n@media (max-width: 1199px) {\n  .skills button {\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n    border-top-left-radius: 0.25rem;\n  }\n}\n@media (max-width: 992px) {\n  .skills button {\n    width: 170px;\n  }\n}\n.withme-view-container {\n  background-image: url(\"/images/work-with-me.jpeg\");\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-attachment: fixed;\n  padding-bottom: 0;\n}\n.withme-view-container .filter {\n  background: rgba(51, 51, 51, 0.6);\n  z-index: 3;\n  padding: 15em 0;\n}\n.withme-view-container div,\n.withme-view-container h2 {\n  color: #fff;\n}\n.withme-view-container .withme {\n  width: 100%;\n  height: auto;\n}\n.withme-view-container .withme .withme-wrapper {\n  text-align: center;\n}\n.withme-view-container .withme .withme-wrapper .line-separator {\n  padding-bottom: 1em;\n  max-width: 240px;\n  margin: 0 auto 20px;\n  text-align: center;\n  position: relative;\n}\n.withme-view-container .withme .withme-wrapper .line-separator:before,\n.withme-view-container .withme .withme-wrapper .line-separator:after {\n  width: 40%;\n  content: \" \";\n  margin-top: 10px;\n  border: 1px solid #fff;\n}\n.withme-view-container .withme .withme-wrapper .line-separator:before {\n  float: left;\n}\n.withme-view-container .withme .withme-wrapper .line-separator:after {\n  float: right;\n}\n.withme-view-container .withme .withme-wrapper h2 {\n  font-size: 2em;\n  padding-bottom: 0.5em;\n}\n.withme-view-container .withme .withme-wrapper p {\n  padding: 0;\n  margin: 0;\n}\n/* FooterView \n------------------------------------*/\n.footer-view-container {\n  background-color: #000;\n  color: #fff;\n}\n.footer-view-container ul li {\n  padding: 6px 12px 6px 0;\n}\n.footer-view-container ul a {\n  padding: 0;\n}\n.footer-view-container .footer-wrapper {\n  padding: 4em 0 3em 0;\n}\n.footer-view-container .group {\n  padding-bottom: 3em;\n}\n.footer-view-container a {\n  text-decoration: none;\n  font-size: 1em;\n  color: #fff;\n}\n.footer-view-container a:hover {\n  color: #00CC99;\n}\n.footer-view-container .footer-intro {\n  margin-bottom: 2em;\n}\n.footer-view-container .copyright {\n  display: block;\n  color: #cccccc;\n}\n/* AboutView \n------------------------------------*/\n.about-view-container h1 {\n  padding-bottom: 0.5em;\n  margin: 0;\n}\n.about-view-container p {\n  padding-bottom: 0.5em;\n  margin: 0;\n}\n.about-view-container .about-wrapper {\n  background-color: #F5E7D8;\n}\n.about-view-container .about-main {\n  width: 100%;\n  background-color: #fff;\n}\n.about-view-container .about {\n  position: relative;\n  box-sizing: border-box;\n  width: 100%;\n  min-height: 200px;\n}\n.about-view-container .profile {\n  width: 100%;\n  padding: 3.2em 0 3.2em;\n}\n.about-view-container .profile img {\n  text-align: center;\n}\n.about-view-container .profile .text {\n  padding-top: 1em;\n}\n.about-view-container .profile .logo {\n  padding-bottom: 1.2em;\n}\n.about-view-container .profile .logo img {\n  padding-right: 1em;\n}\n.about-view-container .profile a {\n  color: #00CC99;\n}\n.about-view-container .profile a:hover {\n  color: #009973;\n}\n.project-detail {\n  background-color: #fff;\n  text-align: center;\n}\n.project-detail-header {\n  background-color: #F5E7D8;\n  text-align: center;\n  color: #000;\n}\n.project-detail-body {\n  max-width: 992px;\n  height: 100%;\n  margin: 0 auto;\n}\n.project-detail-body .row {\n  max-width: 850px;\n  max-height: 100%;\n  margin: 0 auto 2em auto;\n  padding: 0;\n}\n.project-detail-body .row img {\n  max-width: 100%;\n  max-height: 100%;\n}\n.project-detail-body .col-1,\n.project-detail-body .col-2,\n.project-detail-body .col-3,\n.project-detail-body .col-4,\n.project-detail-body .col-5,\n.project-detail-body .col-6,\n.project-detail-body .col-7,\n.project-detail-body .col-8,\n.project-detail-body .col-9,\n.project-detail-body .col-10,\n.project-detail-body .col-11,\n.project-detail-body .col-12,\n.project-detail-body .col,\n.project-detail-body .col-auto,\n.project-detail-body .col-sm-1,\n.project-detail-body .col-sm-2,\n.project-detail-body .col-sm-3,\n.project-detail-body .col-sm-4,\n.project-detail-body .col-sm-5,\n.project-detail-body .col-sm-6,\n.project-detail-body .col-sm-7,\n.project-detail-body .col-sm-8,\n.project-detail-body .col-sm-9,\n.project-detail-body .col-sm-10,\n.project-detail-body .col-sm-11,\n.project-detail-body .col-sm-12,\n.project-detail-body .col-sm,\n.project-detail-body .col-sm-auto,\n.project-detail-body .col-md-1,\n.project-detail-body .col-md-2,\n.project-detail-body .col-md-3,\n.project-detail-body .col-md-4,\n.project-detail-body .col-md-5,\n.project-detail-body .col-md-6,\n.project-detail-body .col-md-7,\n.project-detail-body .col-md-8,\n.project-detail-body .col-md-9,\n.project-detail-body .col-md-10,\n.project-detail-body .col-md-11,\n.project-detail-body .col-md-12,\n.project-detail-body .col-md,\n.project-detail-body .col-md-auto,\n.project-detail-body .col-lg-1,\n.project-detail-body .col-lg-2,\n.project-detail-body .col-lg-3,\n.project-detail-body .col-lg-4,\n.project-detail-body .col-lg-5,\n.project-detail-body .col-lg-6,\n.project-detail-body .col-lg-7,\n.project-detail-body .col-lg-8,\n.project-detail-body .col-lg-9,\n.project-detail-body .col-lg-10,\n.project-detail-body .col-lg-11,\n.project-detail-body .col-lg-12,\n.project-detail-body .col-lg,\n.project-detail-body .col-lg-auto,\n.project-detail-body .col-xl-1,\n.project-detail-body .col-xl-2,\n.project-detail-body .col-xl-3,\n.project-detail-body .col-xl-4,\n.project-detail-body .col-xl-5,\n.project-detail-body .col-xl-6,\n.project-detail-body .col-xl-7,\n.project-detail-body .col-xl-8,\n.project-detail-body .col-xl-9,\n.project-detail-body .col-xl-10,\n.project-detail-body .col-xl-11,\n.project-detail-body .col-xl-12,\n.project-detail-body .col-xl,\n.project-detail-body .col-xl-auto {\n  padding: 0 10px 0 0;\n  max-height: 580px;\n}\n.title {\n  margin: 0;\n  padding: 0.8em 0 0 0;\n  font-size: 58px;\n  font-family: sarif;\n  color: #000;\n}\n.project-description-wrapper {\n  margin: 0;\n  padding: 1em 0;\n  font-size: 1.1em;\n}\n.section-title {\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.06em;\n  line-height: 1.6rem;\n  color: #8c8e96;\n  margin-top: 2.5em;\n  padding-bottom: 1em;\n  font-size: 1.7em;\n  text-align: center;\n}\n.section-subtitle {\n  max-width: 850px;\n  margin: 0 auto 1em auto;\n  font-size: 1.3em;\n  text-align: left;\n}\n.project-paragraph {\n  max-width: 850px;\n  margin: 0 auto 1em auto;\n  font-size: 1.1em;\n  line-height: 1.8em;\n  text-align: left;\n}\n.separator {\n  background-color: #F5E7D8;\n}\n.separator .text-center {\n  margin: 0;\n  padding: 7px 0;\n}\n.separator h2 {\n  color: #000;\n}\n.separator a {\n  text-decoration: none;\n}\n.project-summary-item {\n  padding: 13px;\n  width: 170px;\n  background-color: #f5dbdd;\n  line-height: 1.2em;\n}\n.project-summary-item img {\n  height: 35px;\n}\n.project-summary-item .project-summary-title {\n  font-weight: bold;\n  margin: 5px 0 10px 0;\n}\n.project-summary-item .project-summary-text {\n  font-size: 0.8em;\n}\n.ecs-ul {\n  margin: 0 auto 2em auto;\n  text-align: left;\n  max-width: 850px;\n}\n.ecs-ul ul {\n  list-style-type: square;\n}\n.project-detail .vertical-align {\n  max-height: 400px;\n  line-height: 400px;\n  text-align: left;\n}\n.project-detail span {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: normal;\n  font-size: 18px;\n}\n/* Variables \n------------------------------------*/\n/* Global styles \n------------------------------------*/\nhtml {\n  box-sizing: border-box;\n}\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\nbody {\n  min-width: 375px;\n  -webkit-font-smoothing: antialiased;\n  font-family: 'Poppins', sans-serif !important;\n  color: #333;\n}\n.page {\n  border-top: 2px solid #00CC99;\n}\nh1 {\n  font-size: 2.2em;\n}\nh2 {\n  font-size: 1.4em;\n  font-weight: 600;\n  font-family: 'Cambo', serif !important;\n  color: #A9ABB0;\n}\nh3 {\n  font-size: 1.2em;\n  font-weight: 600;\n}\nh4 {\n  font-size: 1.1em;\n  font-weight: 600;\n}\np {\n  font-size: 1.1em;\n}\na {\n  font-size: 18px;\n  text-decoration: none;\n  color: #000;\n}\na:hover {\n  color: #00CC99;\n}\n.row {\n  padding-left: 1em;\n  padding-right: 1em;\n}\nsection {\n  background-color: #fff;\n  padding-bottom: 4em;\n}\n.no-hor-padding {\n  padding-left: 0;\n  padding-right: 0;\n}\n.h-300 {\n  height: 300px;\n}\n.pad-5 {\n  padding: 5px;\n}\n/* Overwrite Bootstrap 4 \n------------------------------------*/\n.btn-info {\n  background-color: #00CC99;\n  margin-top: 3em;\n  padding: 1em 1.5em;\n  border: none;\n  border-radius: 3em;\n}\n.btn-info:hover {\n  background-color: #00a37a;\n}\n/* Media Queries\n------------------------------------*/\n@media (min-width: 1000px) {\n  .h-400 {\n    height: 400px;\n  }\n}\n@media (max-width: 576px) {\n  h1 {\n    font-size: 1.8em;\n  }\n  .btn-info {\n    margin-top: 2em;\n    padding: 0.8em 1.3em;\n  }\n}\n",""])},function(e,t,n){var r=n(156);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(30)(r,o);r.locals&&(e.exports=r.locals)},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(e.exports=n(31)(!1)).push([e.i,'/*!\n * Bootstrap v4.2.1 (https://getbootstrap.com/)\n * Copyright 2011-2018 The Bootstrap Authors\n * Copyright 2011-2018 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n:root {\n  --blue: #007bff;\n  --indigo: #6610f2;\n  --purple: #6f42c1;\n  --pink: #e83e8c;\n  --red: #dc3545;\n  --orange: #fd7e14;\n  --yellow: #ffc107;\n  --green: #28a745;\n  --teal: #20c997;\n  --cyan: #17a2b8;\n  --white: #fff;\n  --gray: #6c757d;\n  --gray-dark: #343a40;\n  --primary: #007bff;\n  --secondary: #6c757d;\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n  --breakpoint-xs: 0;\n  --breakpoint-sm: 576px;\n  --breakpoint-md: 768px;\n  --breakpoint-lg: 992px;\n  --breakpoint-xl: 1200px;\n  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box; }\n\nhtml {\n  font-family: sans-serif;\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }\n\narticle, aside, figcaption, figure, footer, header, hgroup, main, nav, section {\n  display: block; }\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: left;\n  background-color: #fff; }\n\n[tabindex="-1"]:focus {\n  outline: 0 !important; }\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible; }\n\nh1, h2, h3, h4, h5, h6 {\n  margin-top: 0;\n  margin-bottom: 0.5rem; }\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem; }\n\nabbr[title],\nabbr[data-original-title] {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n  cursor: help;\n  border-bottom: 0;\n  text-decoration-skip-ink: none; }\n\naddress {\n  margin-bottom: 1rem;\n  font-style: normal;\n  line-height: inherit; }\n\nol,\nul,\ndl {\n  margin-top: 0;\n  margin-bottom: 1rem; }\n\nol ol,\nul ul,\nol ul,\nul ol {\n  margin-bottom: 0; }\n\ndt {\n  font-weight: 700; }\n\ndd {\n  margin-bottom: .5rem;\n  margin-left: 0; }\n\nblockquote {\n  margin: 0 0 1rem; }\n\nb,\nstrong {\n  font-weight: bolder; }\n\nsmall {\n  font-size: 80%; }\n\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline; }\n\nsub {\n  bottom: -.25em; }\n\nsup {\n  top: -.5em; }\n\na {\n  color: #007bff;\n  text-decoration: none;\n  background-color: transparent; }\n  a:hover {\n    color: #0056b3;\n    text-decoration: underline; }\n\na:not([href]):not([tabindex]) {\n  color: inherit;\n  text-decoration: none; }\n  a:not([href]):not([tabindex]):hover, a:not([href]):not([tabindex]):focus {\n    color: inherit;\n    text-decoration: none; }\n  a:not([href]):not([tabindex]):focus {\n    outline: 0; }\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n  font-size: 1em; }\n\npre {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  overflow: auto; }\n\nfigure {\n  margin: 0 0 1rem; }\n\nimg {\n  vertical-align: middle;\n  border-style: none; }\n\nsvg {\n  overflow: hidden;\n  vertical-align: middle; }\n\ntable {\n  border-collapse: collapse; }\n\ncaption {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  color: #6c757d;\n  text-align: left;\n  caption-side: bottom; }\n\nth {\n  text-align: inherit; }\n\nlabel {\n  display: inline-block;\n  margin-bottom: 0.5rem; }\n\nbutton {\n  border-radius: 0; }\n\nbutton:focus {\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color; }\n\ninput,\nbutton,\nselect,\noptgroup,\ntextarea {\n  margin: 0;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit; }\n\nbutton,\ninput {\n  overflow: visible; }\n\nbutton,\nselect {\n  text-transform: none; }\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button; }\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  padding: 0;\n  border-style: none; }\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  box-sizing: border-box;\n  padding: 0; }\n\ninput[type="date"],\ninput[type="time"],\ninput[type="datetime-local"],\ninput[type="month"] {\n  -webkit-appearance: listbox; }\n\ntextarea {\n  overflow: auto;\n  resize: vertical; }\n\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0; }\n\nlegend {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin-bottom: .5rem;\n  font-size: 1.5rem;\n  line-height: inherit;\n  color: inherit;\n  white-space: normal; }\n\nprogress {\n  vertical-align: baseline; }\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto; }\n\n[type="search"] {\n  outline-offset: -2px;\n  -webkit-appearance: none; }\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none; }\n\n::-webkit-file-upload-button {\n  font: inherit;\n  -webkit-appearance: button; }\n\noutput {\n  display: inline-block; }\n\nsummary {\n  display: list-item;\n  cursor: pointer; }\n\ntemplate {\n  display: none; }\n\n[hidden] {\n  display: none !important; }\n\nh1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  margin-bottom: 0.5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n  color: inherit; }\n\nh1, .h1 {\n  font-size: 2.5rem; }\n\nh2, .h2 {\n  font-size: 2rem; }\n\nh3, .h3 {\n  font-size: 1.75rem; }\n\nh4, .h4 {\n  font-size: 1.5rem; }\n\nh5, .h5 {\n  font-size: 1.25rem; }\n\nh6, .h6 {\n  font-size: 1rem; }\n\n.lead {\n  font-size: 1.25rem;\n  font-weight: 300; }\n\n.display-1 {\n  font-size: 6rem;\n  font-weight: 300;\n  line-height: 1.2; }\n\n.display-2 {\n  font-size: 5.5rem;\n  font-weight: 300;\n  line-height: 1.2; }\n\n.display-3 {\n  font-size: 4.5rem;\n  font-weight: 300;\n  line-height: 1.2; }\n\n.display-4 {\n  font-size: 3.5rem;\n  font-weight: 300;\n  line-height: 1.2; }\n\nhr {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  border: 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.1); }\n\nsmall,\n.small {\n  font-size: 80%;\n  font-weight: 400; }\n\nmark,\n.mark {\n  padding: 0.2em;\n  background-color: #fcf8e3; }\n\n.list-unstyled {\n  padding-left: 0;\n  list-style: none; }\n\n.list-inline {\n  padding-left: 0;\n  list-style: none; }\n\n.list-inline-item {\n  display: inline-block; }\n  .list-inline-item:not(:last-child) {\n    margin-right: 0.5rem; }\n\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase; }\n\n.blockquote {\n  margin-bottom: 1rem;\n  font-size: 1.25rem; }\n\n.blockquote-footer {\n  display: block;\n  font-size: 80%;\n  color: #6c757d; }\n  .blockquote-footer::before {\n    content: "\\2014\\A0"; }\n\n.img-fluid {\n  max-width: 100%;\n  height: auto; }\n\n.img-thumbnail {\n  padding: 0.25rem;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  max-width: 100%;\n  height: auto; }\n\n.figure {\n  display: inline-block; }\n\n.figure-img {\n  margin-bottom: 0.5rem;\n  line-height: 1; }\n\n.figure-caption {\n  font-size: 90%;\n  color: #6c757d; }\n\ncode {\n  font-size: 87.5%;\n  color: #e83e8c;\n  word-break: break-word; }\n  a > code {\n    color: inherit; }\n\nkbd {\n  padding: 0.2rem 0.4rem;\n  font-size: 87.5%;\n  color: #fff;\n  background-color: #212529;\n  border-radius: 0.2rem; }\n  kbd kbd {\n    padding: 0;\n    font-size: 100%;\n    font-weight: 700; }\n\npre {\n  display: block;\n  font-size: 87.5%;\n  color: #212529; }\n  pre code {\n    font-size: inherit;\n    color: inherit;\n    word-break: normal; }\n\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll; }\n\n.container {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto; }\n  @media (min-width: 576px) {\n    .container {\n      max-width: 540px; } }\n  @media (min-width: 768px) {\n    .container {\n      max-width: 720px; } }\n  @media (min-width: 992px) {\n    .container {\n      max-width: 960px; } }\n  @media (min-width: 1200px) {\n    .container {\n      max-width: 1140px; } }\n\n.container-fluid {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto; }\n\n.row {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px; }\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0; }\n  .no-gutters > .col,\n  .no-gutters > [class*="col-"] {\n    padding-right: 0;\n    padding-left: 0; }\n\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\n.col-xl-auto {\n  position: relative;\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px; }\n\n.col {\n  flex-basis: 0;\n  flex-grow: 1;\n  max-width: 100%; }\n\n.col-auto {\n  flex: 0 0 auto;\n  width: auto;\n  max-width: 100%; }\n\n.col-1 {\n  flex: 0 0 8.33333%;\n  max-width: 8.33333%; }\n\n.col-2 {\n  flex: 0 0 16.66667%;\n  max-width: 16.66667%; }\n\n.col-3 {\n  flex: 0 0 25%;\n  max-width: 25%; }\n\n.col-4 {\n  flex: 0 0 33.33333%;\n  max-width: 33.33333%; }\n\n.col-5 {\n  flex: 0 0 41.66667%;\n  max-width: 41.66667%; }\n\n.col-6 {\n  flex: 0 0 50%;\n  max-width: 50%; }\n\n.col-7 {\n  flex: 0 0 58.33333%;\n  max-width: 58.33333%; }\n\n.col-8 {\n  flex: 0 0 66.66667%;\n  max-width: 66.66667%; }\n\n.col-9 {\n  flex: 0 0 75%;\n  max-width: 75%; }\n\n.col-10 {\n  flex: 0 0 83.33333%;\n  max-width: 83.33333%; }\n\n.col-11 {\n  flex: 0 0 91.66667%;\n  max-width: 91.66667%; }\n\n.col-12 {\n  flex: 0 0 100%;\n  max-width: 100%; }\n\n.order-first {\n  order: -1; }\n\n.order-last {\n  order: 13; }\n\n.order-0 {\n  order: 0; }\n\n.order-1 {\n  order: 1; }\n\n.order-2 {\n  order: 2; }\n\n.order-3 {\n  order: 3; }\n\n.order-4 {\n  order: 4; }\n\n.order-5 {\n  order: 5; }\n\n.order-6 {\n  order: 6; }\n\n.order-7 {\n  order: 7; }\n\n.order-8 {\n  order: 8; }\n\n.order-9 {\n  order: 9; }\n\n.order-10 {\n  order: 10; }\n\n.order-11 {\n  order: 11; }\n\n.order-12 {\n  order: 12; }\n\n.offset-1 {\n  margin-left: 8.33333%; }\n\n.offset-2 {\n  margin-left: 16.66667%; }\n\n.offset-3 {\n  margin-left: 25%; }\n\n.offset-4 {\n  margin-left: 33.33333%; }\n\n.offset-5 {\n  margin-left: 41.66667%; }\n\n.offset-6 {\n  margin-left: 50%; }\n\n.offset-7 {\n  margin-left: 58.33333%; }\n\n.offset-8 {\n  margin-left: 66.66667%; }\n\n.offset-9 {\n  margin-left: 75%; }\n\n.offset-10 {\n  margin-left: 83.33333%; }\n\n.offset-11 {\n  margin-left: 91.66667%; }\n\n@media (min-width: 576px) {\n  .col-sm {\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%; }\n  .col-sm-auto {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  .col-sm-1 {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  .col-sm-2 {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  .col-sm-3 {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  .col-sm-4 {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  .col-sm-5 {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  .col-sm-6 {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  .col-sm-7 {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  .col-sm-8 {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  .col-sm-9 {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  .col-sm-10 {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  .col-sm-11 {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  .col-sm-12 {\n    flex: 0 0 100%;\n    max-width: 100%; }\n  .order-sm-first {\n    order: -1; }\n  .order-sm-last {\n    order: 13; }\n  .order-sm-0 {\n    order: 0; }\n  .order-sm-1 {\n    order: 1; }\n  .order-sm-2 {\n    order: 2; }\n  .order-sm-3 {\n    order: 3; }\n  .order-sm-4 {\n    order: 4; }\n  .order-sm-5 {\n    order: 5; }\n  .order-sm-6 {\n    order: 6; }\n  .order-sm-7 {\n    order: 7; }\n  .order-sm-8 {\n    order: 8; }\n  .order-sm-9 {\n    order: 9; }\n  .order-sm-10 {\n    order: 10; }\n  .order-sm-11 {\n    order: 11; }\n  .order-sm-12 {\n    order: 12; }\n  .offset-sm-0 {\n    margin-left: 0; }\n  .offset-sm-1 {\n    margin-left: 8.33333%; }\n  .offset-sm-2 {\n    margin-left: 16.66667%; }\n  .offset-sm-3 {\n    margin-left: 25%; }\n  .offset-sm-4 {\n    margin-left: 33.33333%; }\n  .offset-sm-5 {\n    margin-left: 41.66667%; }\n  .offset-sm-6 {\n    margin-left: 50%; }\n  .offset-sm-7 {\n    margin-left: 58.33333%; }\n  .offset-sm-8 {\n    margin-left: 66.66667%; }\n  .offset-sm-9 {\n    margin-left: 75%; }\n  .offset-sm-10 {\n    margin-left: 83.33333%; }\n  .offset-sm-11 {\n    margin-left: 91.66667%; } }\n\n@media (min-width: 768px) {\n  .col-md {\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%; }\n  .col-md-auto {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  .col-md-1 {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  .col-md-2 {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  .col-md-3 {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  .col-md-4 {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  .col-md-5 {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  .col-md-6 {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  .col-md-7 {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  .col-md-8 {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  .col-md-9 {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  .col-md-10 {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  .col-md-11 {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  .col-md-12 {\n    flex: 0 0 100%;\n    max-width: 100%; }\n  .order-md-first {\n    order: -1; }\n  .order-md-last {\n    order: 13; }\n  .order-md-0 {\n    order: 0; }\n  .order-md-1 {\n    order: 1; }\n  .order-md-2 {\n    order: 2; }\n  .order-md-3 {\n    order: 3; }\n  .order-md-4 {\n    order: 4; }\n  .order-md-5 {\n    order: 5; }\n  .order-md-6 {\n    order: 6; }\n  .order-md-7 {\n    order: 7; }\n  .order-md-8 {\n    order: 8; }\n  .order-md-9 {\n    order: 9; }\n  .order-md-10 {\n    order: 10; }\n  .order-md-11 {\n    order: 11; }\n  .order-md-12 {\n    order: 12; }\n  .offset-md-0 {\n    margin-left: 0; }\n  .offset-md-1 {\n    margin-left: 8.33333%; }\n  .offset-md-2 {\n    margin-left: 16.66667%; }\n  .offset-md-3 {\n    margin-left: 25%; }\n  .offset-md-4 {\n    margin-left: 33.33333%; }\n  .offset-md-5 {\n    margin-left: 41.66667%; }\n  .offset-md-6 {\n    margin-left: 50%; }\n  .offset-md-7 {\n    margin-left: 58.33333%; }\n  .offset-md-8 {\n    margin-left: 66.66667%; }\n  .offset-md-9 {\n    margin-left: 75%; }\n  .offset-md-10 {\n    margin-left: 83.33333%; }\n  .offset-md-11 {\n    margin-left: 91.66667%; } }\n\n@media (min-width: 992px) {\n  .col-lg {\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%; }\n  .col-lg-auto {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  .col-lg-1 {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  .col-lg-2 {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  .col-lg-3 {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  .col-lg-4 {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  .col-lg-5 {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  .col-lg-6 {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  .col-lg-7 {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  .col-lg-8 {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  .col-lg-9 {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  .col-lg-10 {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  .col-lg-11 {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  .col-lg-12 {\n    flex: 0 0 100%;\n    max-width: 100%; }\n  .order-lg-first {\n    order: -1; }\n  .order-lg-last {\n    order: 13; }\n  .order-lg-0 {\n    order: 0; }\n  .order-lg-1 {\n    order: 1; }\n  .order-lg-2 {\n    order: 2; }\n  .order-lg-3 {\n    order: 3; }\n  .order-lg-4 {\n    order: 4; }\n  .order-lg-5 {\n    order: 5; }\n  .order-lg-6 {\n    order: 6; }\n  .order-lg-7 {\n    order: 7; }\n  .order-lg-8 {\n    order: 8; }\n  .order-lg-9 {\n    order: 9; }\n  .order-lg-10 {\n    order: 10; }\n  .order-lg-11 {\n    order: 11; }\n  .order-lg-12 {\n    order: 12; }\n  .offset-lg-0 {\n    margin-left: 0; }\n  .offset-lg-1 {\n    margin-left: 8.33333%; }\n  .offset-lg-2 {\n    margin-left: 16.66667%; }\n  .offset-lg-3 {\n    margin-left: 25%; }\n  .offset-lg-4 {\n    margin-left: 33.33333%; }\n  .offset-lg-5 {\n    margin-left: 41.66667%; }\n  .offset-lg-6 {\n    margin-left: 50%; }\n  .offset-lg-7 {\n    margin-left: 58.33333%; }\n  .offset-lg-8 {\n    margin-left: 66.66667%; }\n  .offset-lg-9 {\n    margin-left: 75%; }\n  .offset-lg-10 {\n    margin-left: 83.33333%; }\n  .offset-lg-11 {\n    margin-left: 91.66667%; } }\n\n@media (min-width: 1200px) {\n  .col-xl {\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%; }\n  .col-xl-auto {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%; }\n  .col-xl-1 {\n    flex: 0 0 8.33333%;\n    max-width: 8.33333%; }\n  .col-xl-2 {\n    flex: 0 0 16.66667%;\n    max-width: 16.66667%; }\n  .col-xl-3 {\n    flex: 0 0 25%;\n    max-width: 25%; }\n  .col-xl-4 {\n    flex: 0 0 33.33333%;\n    max-width: 33.33333%; }\n  .col-xl-5 {\n    flex: 0 0 41.66667%;\n    max-width: 41.66667%; }\n  .col-xl-6 {\n    flex: 0 0 50%;\n    max-width: 50%; }\n  .col-xl-7 {\n    flex: 0 0 58.33333%;\n    max-width: 58.33333%; }\n  .col-xl-8 {\n    flex: 0 0 66.66667%;\n    max-width: 66.66667%; }\n  .col-xl-9 {\n    flex: 0 0 75%;\n    max-width: 75%; }\n  .col-xl-10 {\n    flex: 0 0 83.33333%;\n    max-width: 83.33333%; }\n  .col-xl-11 {\n    flex: 0 0 91.66667%;\n    max-width: 91.66667%; }\n  .col-xl-12 {\n    flex: 0 0 100%;\n    max-width: 100%; }\n  .order-xl-first {\n    order: -1; }\n  .order-xl-last {\n    order: 13; }\n  .order-xl-0 {\n    order: 0; }\n  .order-xl-1 {\n    order: 1; }\n  .order-xl-2 {\n    order: 2; }\n  .order-xl-3 {\n    order: 3; }\n  .order-xl-4 {\n    order: 4; }\n  .order-xl-5 {\n    order: 5; }\n  .order-xl-6 {\n    order: 6; }\n  .order-xl-7 {\n    order: 7; }\n  .order-xl-8 {\n    order: 8; }\n  .order-xl-9 {\n    order: 9; }\n  .order-xl-10 {\n    order: 10; }\n  .order-xl-11 {\n    order: 11; }\n  .order-xl-12 {\n    order: 12; }\n  .offset-xl-0 {\n    margin-left: 0; }\n  .offset-xl-1 {\n    margin-left: 8.33333%; }\n  .offset-xl-2 {\n    margin-left: 16.66667%; }\n  .offset-xl-3 {\n    margin-left: 25%; }\n  .offset-xl-4 {\n    margin-left: 33.33333%; }\n  .offset-xl-5 {\n    margin-left: 41.66667%; }\n  .offset-xl-6 {\n    margin-left: 50%; }\n  .offset-xl-7 {\n    margin-left: 58.33333%; }\n  .offset-xl-8 {\n    margin-left: 66.66667%; }\n  .offset-xl-9 {\n    margin-left: 75%; }\n  .offset-xl-10 {\n    margin-left: 83.33333%; }\n  .offset-xl-11 {\n    margin-left: 91.66667%; } }\n\n.table {\n  width: 100%;\n  margin-bottom: 1rem;\n  background-color: transparent; }\n  .table th,\n  .table td {\n    padding: 0.75rem;\n    vertical-align: top;\n    border-top: 1px solid #dee2e6; }\n  .table thead th {\n    vertical-align: bottom;\n    border-bottom: 2px solid #dee2e6; }\n  .table tbody + tbody {\n    border-top: 2px solid #dee2e6; }\n  .table .table {\n    background-color: #fff; }\n\n.table-sm th,\n.table-sm td {\n  padding: 0.3rem; }\n\n.table-bordered {\n  border: 1px solid #dee2e6; }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #dee2e6; }\n  .table-bordered thead th,\n  .table-bordered thead td {\n    border-bottom-width: 2px; }\n\n.table-borderless th,\n.table-borderless td,\n.table-borderless thead th,\n.table-borderless tbody + tbody {\n  border: 0; }\n\n.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.table-hover tbody tr:hover {\n  background-color: rgba(0, 0, 0, 0.075); }\n\n.table-primary,\n.table-primary > th,\n.table-primary > td {\n  background-color: #b8daff; }\n\n.table-primary th,\n.table-primary td,\n.table-primary thead th,\n.table-primary tbody + tbody {\n  border-color: #7abaff; }\n\n.table-hover .table-primary:hover {\n  background-color: #9fcdff; }\n  .table-hover .table-primary:hover > td,\n  .table-hover .table-primary:hover > th {\n    background-color: #9fcdff; }\n\n.table-secondary,\n.table-secondary > th,\n.table-secondary > td {\n  background-color: #d6d8db; }\n\n.table-secondary th,\n.table-secondary td,\n.table-secondary thead th,\n.table-secondary tbody + tbody {\n  border-color: #b3b7bb; }\n\n.table-hover .table-secondary:hover {\n  background-color: #c8cbcf; }\n  .table-hover .table-secondary:hover > td,\n  .table-hover .table-secondary:hover > th {\n    background-color: #c8cbcf; }\n\n.table-success,\n.table-success > th,\n.table-success > td {\n  background-color: #c3e6cb; }\n\n.table-success th,\n.table-success td,\n.table-success thead th,\n.table-success tbody + tbody {\n  border-color: #8fd19e; }\n\n.table-hover .table-success:hover {\n  background-color: #b1dfbb; }\n  .table-hover .table-success:hover > td,\n  .table-hover .table-success:hover > th {\n    background-color: #b1dfbb; }\n\n.table-info,\n.table-info > th,\n.table-info > td {\n  background-color: #bee5eb; }\n\n.table-info th,\n.table-info td,\n.table-info thead th,\n.table-info tbody + tbody {\n  border-color: #86cfda; }\n\n.table-hover .table-info:hover {\n  background-color: #abdde5; }\n  .table-hover .table-info:hover > td,\n  .table-hover .table-info:hover > th {\n    background-color: #abdde5; }\n\n.table-warning,\n.table-warning > th,\n.table-warning > td {\n  background-color: #ffeeba; }\n\n.table-warning th,\n.table-warning td,\n.table-warning thead th,\n.table-warning tbody + tbody {\n  border-color: #ffdf7e; }\n\n.table-hover .table-warning:hover {\n  background-color: #ffe8a1; }\n  .table-hover .table-warning:hover > td,\n  .table-hover .table-warning:hover > th {\n    background-color: #ffe8a1; }\n\n.table-danger,\n.table-danger > th,\n.table-danger > td {\n  background-color: #f5c6cb; }\n\n.table-danger th,\n.table-danger td,\n.table-danger thead th,\n.table-danger tbody + tbody {\n  border-color: #ed969e; }\n\n.table-hover .table-danger:hover {\n  background-color: #f1b0b7; }\n  .table-hover .table-danger:hover > td,\n  .table-hover .table-danger:hover > th {\n    background-color: #f1b0b7; }\n\n.table-light,\n.table-light > th,\n.table-light > td {\n  background-color: #fdfdfe; }\n\n.table-light th,\n.table-light td,\n.table-light thead th,\n.table-light tbody + tbody {\n  border-color: #fbfcfc; }\n\n.table-hover .table-light:hover {\n  background-color: #ececf6; }\n  .table-hover .table-light:hover > td,\n  .table-hover .table-light:hover > th {\n    background-color: #ececf6; }\n\n.table-dark,\n.table-dark > th,\n.table-dark > td {\n  background-color: #c6c8ca; }\n\n.table-dark th,\n.table-dark td,\n.table-dark thead th,\n.table-dark tbody + tbody {\n  border-color: #95999c; }\n\n.table-hover .table-dark:hover {\n  background-color: #b9bbbe; }\n  .table-hover .table-dark:hover > td,\n  .table-hover .table-dark:hover > th {\n    background-color: #b9bbbe; }\n\n.table-active,\n.table-active > th,\n.table-active > td {\n  background-color: rgba(0, 0, 0, 0.075); }\n\n.table-hover .table-active:hover {\n  background-color: rgba(0, 0, 0, 0.075); }\n  .table-hover .table-active:hover > td,\n  .table-hover .table-active:hover > th {\n    background-color: rgba(0, 0, 0, 0.075); }\n\n.table .thead-dark th {\n  color: #fff;\n  background-color: #212529;\n  border-color: #32383e; }\n\n.table .thead-light th {\n  color: #495057;\n  background-color: #e9ecef;\n  border-color: #dee2e6; }\n\n.table-dark {\n  color: #fff;\n  background-color: #212529; }\n  .table-dark th,\n  .table-dark td,\n  .table-dark thead th {\n    border-color: #32383e; }\n  .table-dark.table-bordered {\n    border: 0; }\n  .table-dark.table-striped tbody tr:nth-of-type(odd) {\n    background-color: rgba(255, 255, 255, 0.05); }\n  .table-dark.table-hover tbody tr:hover {\n    background-color: rgba(255, 255, 255, 0.075); }\n\n@media (max-width: 575.98px) {\n  .table-responsive-sm {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar; }\n    .table-responsive-sm > .table-bordered {\n      border: 0; } }\n\n@media (max-width: 767.98px) {\n  .table-responsive-md {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar; }\n    .table-responsive-md > .table-bordered {\n      border: 0; } }\n\n@media (max-width: 991.98px) {\n  .table-responsive-lg {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar; }\n    .table-responsive-lg > .table-bordered {\n      border: 0; } }\n\n@media (max-width: 1199.98px) {\n  .table-responsive-xl {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar; }\n    .table-responsive-xl > .table-bordered {\n      border: 0; } }\n\n.table-responsive {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar; }\n  .table-responsive > .table-bordered {\n    border: 0; }\n\n.form-control {\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .form-control {\n      transition: none; } }\n  .form-control::-ms-expand {\n    background-color: transparent;\n    border: 0; }\n  .form-control:focus {\n    color: #495057;\n    background-color: #fff;\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .form-control::-webkit-input-placeholder {\n    color: #6c757d;\n    opacity: 1; }\n  .form-control:-ms-input-placeholder {\n    color: #6c757d;\n    opacity: 1; }\n  .form-control::-ms-input-placeholder {\n    color: #6c757d;\n    opacity: 1; }\n  .form-control::placeholder {\n    color: #6c757d;\n    opacity: 1; }\n  .form-control:disabled, .form-control[readonly] {\n    background-color: #e9ecef;\n    opacity: 1; }\n\nselect.form-control:focus::-ms-value {\n  color: #495057;\n  background-color: #fff; }\n\n.form-control-file,\n.form-control-range {\n  display: block;\n  width: 100%; }\n\n.col-form-label {\n  padding-top: calc(0.375rem + 1px);\n  padding-bottom: calc(0.375rem + 1px);\n  margin-bottom: 0;\n  font-size: inherit;\n  line-height: 1.5; }\n\n.col-form-label-lg {\n  padding-top: calc(0.5rem + 1px);\n  padding-bottom: calc(0.5rem + 1px);\n  font-size: 1.25rem;\n  line-height: 1.5; }\n\n.col-form-label-sm {\n  padding-top: calc(0.25rem + 1px);\n  padding-bottom: calc(0.25rem + 1px);\n  font-size: 0.875rem;\n  line-height: 1.5; }\n\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  margin-bottom: 0;\n  line-height: 1.5;\n  color: #212529;\n  background-color: transparent;\n  border: solid transparent;\n  border-width: 1px 0; }\n  .form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {\n    padding-right: 0;\n    padding-left: 0; }\n\n.form-control-sm {\n  height: calc(1.8125rem + 2px);\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem; }\n\n.form-control-lg {\n  height: calc(2.875rem + 2px);\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem; }\n\nselect.form-control[size], select.form-control[multiple] {\n  height: auto; }\n\ntextarea.form-control {\n  height: auto; }\n\n.form-group {\n  margin-bottom: 1rem; }\n\n.form-text {\n  display: block;\n  margin-top: 0.25rem; }\n\n.form-row {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -5px;\n  margin-left: -5px; }\n  .form-row > .col,\n  .form-row > [class*="col-"] {\n    padding-right: 5px;\n    padding-left: 5px; }\n\n.form-check {\n  position: relative;\n  display: block;\n  padding-left: 1.25rem; }\n\n.form-check-input {\n  position: absolute;\n  margin-top: 0.3rem;\n  margin-left: -1.25rem; }\n  .form-check-input:disabled ~ .form-check-label {\n    color: #6c757d; }\n\n.form-check-label {\n  margin-bottom: 0; }\n\n.form-check-inline {\n  display: inline-flex;\n  align-items: center;\n  padding-left: 0;\n  margin-right: 0.75rem; }\n  .form-check-inline .form-check-input {\n    position: static;\n    margin-top: 0;\n    margin-right: 0.3125rem;\n    margin-left: 0; }\n\n.valid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #28a745; }\n\n.valid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(40, 167, 69, 0.9);\n  border-radius: 0.25rem; }\n\n.was-validated .form-control:valid, .form-control.is-valid {\n  border-color: #28a745;\n  padding-right: 2.25rem;\n  background-repeat: no-repeat;\n  background-position: center right calc(2.25rem / 4);\n  background-size: calc(2.25rem / 2) calc(2.25rem / 2);\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3e%3cpath fill=\'%2328a745\' d=\'M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z\'/%3e%3c/svg%3e"); }\n  .was-validated .form-control:valid:focus, .form-control.is-valid:focus {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\n  .was-validated .form-control:valid ~ .valid-feedback,\n  .was-validated .form-control:valid ~ .valid-tooltip, .form-control.is-valid ~ .valid-feedback,\n  .form-control.is-valid ~ .valid-tooltip {\n    display: block; }\n\n.was-validated textarea.form-control:valid, textarea.form-control.is-valid {\n  padding-right: 2.25rem;\n  background-position: top calc(2.25rem / 4) right calc(2.25rem / 4); }\n\n.was-validated .custom-select:valid, .custom-select.is-valid {\n  border-color: #28a745;\n  padding-right: 3.4375rem;\n  background: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3e%3cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3e%3c/svg%3e") no-repeat right 0.75rem center/8px 10px, url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3e%3cpath fill=\'%2328a745\' d=\'M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z\'/%3e%3c/svg%3e") no-repeat center right 1.75rem/1.125rem 1.125rem; }\n  .was-validated .custom-select:valid:focus, .custom-select.is-valid:focus {\n    border-color: #28a745;\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\n  .was-validated .custom-select:valid ~ .valid-feedback,\n  .was-validated .custom-select:valid ~ .valid-tooltip, .custom-select.is-valid ~ .valid-feedback,\n  .custom-select.is-valid ~ .valid-tooltip {\n    display: block; }\n\n.was-validated .form-control-file:valid ~ .valid-feedback,\n.was-validated .form-control-file:valid ~ .valid-tooltip, .form-control-file.is-valid ~ .valid-feedback,\n.form-control-file.is-valid ~ .valid-tooltip {\n  display: block; }\n\n.was-validated .form-check-input:valid ~ .form-check-label, .form-check-input.is-valid ~ .form-check-label {\n  color: #28a745; }\n\n.was-validated .form-check-input:valid ~ .valid-feedback,\n.was-validated .form-check-input:valid ~ .valid-tooltip, .form-check-input.is-valid ~ .valid-feedback,\n.form-check-input.is-valid ~ .valid-tooltip {\n  display: block; }\n\n.was-validated .custom-control-input:valid ~ .custom-control-label, .custom-control-input.is-valid ~ .custom-control-label {\n  color: #28a745; }\n  .was-validated .custom-control-input:valid ~ .custom-control-label::before, .custom-control-input.is-valid ~ .custom-control-label::before {\n    border-color: #28a745; }\n\n.was-validated .custom-control-input:valid ~ .valid-feedback,\n.was-validated .custom-control-input:valid ~ .valid-tooltip, .custom-control-input.is-valid ~ .valid-feedback,\n.custom-control-input.is-valid ~ .valid-tooltip {\n  display: block; }\n\n.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before, .custom-control-input.is-valid:checked ~ .custom-control-label::before {\n  border-color: #34ce57;\n  background-color: #34ce57; }\n\n.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before, .custom-control-input.is-valid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\n\n.was-validated .custom-control-input:valid:focus:not(:checked) ~ .custom-control-label::before, .custom-control-input.is-valid:focus:not(:checked) ~ .custom-control-label::before {\n  border-color: #28a745; }\n\n.was-validated .custom-file-input:valid ~ .custom-file-label, .custom-file-input.is-valid ~ .custom-file-label {\n  border-color: #28a745; }\n\n.was-validated .custom-file-input:valid ~ .valid-feedback,\n.was-validated .custom-file-input:valid ~ .valid-tooltip, .custom-file-input.is-valid ~ .valid-feedback,\n.custom-file-input.is-valid ~ .valid-tooltip {\n  display: block; }\n\n.was-validated .custom-file-input:valid:focus ~ .custom-file-label, .custom-file-input.is-valid:focus ~ .custom-file-label {\n  border-color: #28a745;\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25); }\n\n.invalid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #dc3545; }\n\n.invalid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(220, 53, 69, 0.9);\n  border-radius: 0.25rem; }\n\n.was-validated .form-control:invalid, .form-control.is-invalid {\n  border-color: #dc3545;\n  padding-right: 2.25rem;\n  background-repeat: no-repeat;\n  background-position: center right calc(2.25rem / 4);\n  background-size: calc(2.25rem / 2) calc(2.25rem / 2);\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23dc3545\' viewBox=\'-2 -2 7 7\'%3e%3cpath stroke=\'%23d9534f\' d=\'M0 0l3 3m0-3L0 3\'/%3e%3ccircle r=\'.5\'/%3e%3ccircle cx=\'3\' r=\'.5\'/%3e%3ccircle cy=\'3\' r=\'.5\'/%3e%3ccircle cx=\'3\' cy=\'3\' r=\'.5\'/%3e%3c/svg%3E"); }\n  .was-validated .form-control:invalid:focus, .form-control.is-invalid:focus {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\n  .was-validated .form-control:invalid ~ .invalid-feedback,\n  .was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\n  .form-control.is-invalid ~ .invalid-tooltip {\n    display: block; }\n\n.was-validated textarea.form-control:invalid, textarea.form-control.is-invalid {\n  padding-right: 2.25rem;\n  background-position: top calc(2.25rem / 4) right calc(2.25rem / 4); }\n\n.was-validated .custom-select:invalid, .custom-select.is-invalid {\n  border-color: #dc3545;\n  padding-right: 3.4375rem;\n  background: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3e%3cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3e%3c/svg%3e") no-repeat right 0.75rem center/8px 10px, url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23dc3545\' viewBox=\'-2 -2 7 7\'%3e%3cpath stroke=\'%23d9534f\' d=\'M0 0l3 3m0-3L0 3\'/%3e%3ccircle r=\'.5\'/%3e%3ccircle cx=\'3\' r=\'.5\'/%3e%3ccircle cy=\'3\' r=\'.5\'/%3e%3ccircle cx=\'3\' cy=\'3\' r=\'.5\'/%3e%3c/svg%3E") no-repeat center right 1.75rem/1.125rem 1.125rem; }\n  .was-validated .custom-select:invalid:focus, .custom-select.is-invalid:focus {\n    border-color: #dc3545;\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\n  .was-validated .custom-select:invalid ~ .invalid-feedback,\n  .was-validated .custom-select:invalid ~ .invalid-tooltip, .custom-select.is-invalid ~ .invalid-feedback,\n  .custom-select.is-invalid ~ .invalid-tooltip {\n    display: block; }\n\n.was-validated .form-control-file:invalid ~ .invalid-feedback,\n.was-validated .form-control-file:invalid ~ .invalid-tooltip, .form-control-file.is-invalid ~ .invalid-feedback,\n.form-control-file.is-invalid ~ .invalid-tooltip {\n  display: block; }\n\n.was-validated .form-check-input:invalid ~ .form-check-label, .form-check-input.is-invalid ~ .form-check-label {\n  color: #dc3545; }\n\n.was-validated .form-check-input:invalid ~ .invalid-feedback,\n.was-validated .form-check-input:invalid ~ .invalid-tooltip, .form-check-input.is-invalid ~ .invalid-feedback,\n.form-check-input.is-invalid ~ .invalid-tooltip {\n  display: block; }\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label, .custom-control-input.is-invalid ~ .custom-control-label {\n  color: #dc3545; }\n  .was-validated .custom-control-input:invalid ~ .custom-control-label::before, .custom-control-input.is-invalid ~ .custom-control-label::before {\n    border-color: #dc3545; }\n\n.was-validated .custom-control-input:invalid ~ .invalid-feedback,\n.was-validated .custom-control-input:invalid ~ .invalid-tooltip, .custom-control-input.is-invalid ~ .invalid-feedback,\n.custom-control-input.is-invalid ~ .invalid-tooltip {\n  display: block; }\n\n.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before, .custom-control-input.is-invalid:checked ~ .custom-control-label::before {\n  border-color: #e4606d;\n  background-color: #e4606d; }\n\n.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before, .custom-control-input.is-invalid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\n\n.was-validated .custom-control-input:invalid:focus:not(:checked) ~ .custom-control-label::before, .custom-control-input.is-invalid:focus:not(:checked) ~ .custom-control-label::before {\n  border-color: #dc3545; }\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label, .custom-file-input.is-invalid ~ .custom-file-label {\n  border-color: #dc3545; }\n\n.was-validated .custom-file-input:invalid ~ .invalid-feedback,\n.was-validated .custom-file-input:invalid ~ .invalid-tooltip, .custom-file-input.is-invalid ~ .invalid-feedback,\n.custom-file-input.is-invalid ~ .invalid-tooltip {\n  display: block; }\n\n.was-validated .custom-file-input:invalid:focus ~ .custom-file-label, .custom-file-input.is-invalid:focus ~ .custom-file-label {\n  border-color: #dc3545;\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25); }\n\n.form-inline {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center; }\n  .form-inline .form-check {\n    width: 100%; }\n  @media (min-width: 576px) {\n    .form-inline label {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin-bottom: 0; }\n    .form-inline .form-group {\n      display: flex;\n      flex: 0 0 auto;\n      flex-flow: row wrap;\n      align-items: center;\n      margin-bottom: 0; }\n    .form-inline .form-control {\n      display: inline-block;\n      width: auto;\n      vertical-align: middle; }\n    .form-inline .form-control-plaintext {\n      display: inline-block; }\n    .form-inline .input-group,\n    .form-inline .custom-select {\n      width: auto; }\n    .form-inline .form-check {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: auto;\n      padding-left: 0; }\n    .form-inline .form-check-input {\n      position: relative;\n      margin-top: 0;\n      margin-right: 0.25rem;\n      margin-left: 0; }\n    .form-inline .custom-control {\n      align-items: center;\n      justify-content: center; }\n    .form-inline .custom-control-label {\n      margin-bottom: 0; } }\n\n.btn {\n  display: inline-block;\n  font-weight: 400;\n  color: #212529;\n  text-align: center;\n  vertical-align: middle;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  background-color: transparent;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .btn {\n      transition: none; } }\n  .btn:hover {\n    color: #212529;\n    text-decoration: none; }\n  .btn:focus, .btn.focus {\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .btn.disabled, .btn:disabled {\n    opacity: 0.65; }\n  .btn:not(:disabled):not(.disabled) {\n    cursor: pointer; }\n\na.btn.disabled,\nfieldset:disabled a.btn {\n  pointer-events: none; }\n\n.btn-primary {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff; }\n  .btn-primary:hover {\n    color: #fff;\n    background-color: #0069d9;\n    border-color: #0062cc; }\n  .btn-primary:focus, .btn-primary.focus {\n    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5); }\n  .btn-primary.disabled, .btn-primary:disabled {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff; }\n  .btn-primary:not(:disabled):not(.disabled):active, .btn-primary:not(:disabled):not(.disabled).active,\n  .show > .btn-primary.dropdown-toggle {\n    color: #fff;\n    background-color: #0062cc;\n    border-color: #005cbf; }\n    .btn-primary:not(:disabled):not(.disabled):active:focus, .btn-primary:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-primary.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5); }\n\n.btn-secondary {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d; }\n  .btn-secondary:hover {\n    color: #fff;\n    background-color: #5a6268;\n    border-color: #545b62; }\n  .btn-secondary:focus, .btn-secondary.focus {\n    box-shadow: 0 0 0 0.2rem rgba(130, 138, 145, 0.5); }\n  .btn-secondary.disabled, .btn-secondary:disabled {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d; }\n  .btn-secondary:not(:disabled):not(.disabled):active, .btn-secondary:not(:disabled):not(.disabled).active,\n  .show > .btn-secondary.dropdown-toggle {\n    color: #fff;\n    background-color: #545b62;\n    border-color: #4e555b; }\n    .btn-secondary:not(:disabled):not(.disabled):active:focus, .btn-secondary:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-secondary.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(130, 138, 145, 0.5); }\n\n.btn-success {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745; }\n  .btn-success:hover {\n    color: #fff;\n    background-color: #218838;\n    border-color: #1e7e34; }\n  .btn-success:focus, .btn-success.focus {\n    box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5); }\n  .btn-success.disabled, .btn-success:disabled {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745; }\n  .btn-success:not(:disabled):not(.disabled):active, .btn-success:not(:disabled):not(.disabled).active,\n  .show > .btn-success.dropdown-toggle {\n    color: #fff;\n    background-color: #1e7e34;\n    border-color: #1c7430; }\n    .btn-success:not(:disabled):not(.disabled):active:focus, .btn-success:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-success.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(72, 180, 97, 0.5); }\n\n.btn-info {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8; }\n  .btn-info:hover {\n    color: #fff;\n    background-color: #138496;\n    border-color: #117a8b; }\n  .btn-info:focus, .btn-info.focus {\n    box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5); }\n  .btn-info.disabled, .btn-info:disabled {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8; }\n  .btn-info:not(:disabled):not(.disabled):active, .btn-info:not(:disabled):not(.disabled).active,\n  .show > .btn-info.dropdown-toggle {\n    color: #fff;\n    background-color: #117a8b;\n    border-color: #10707f; }\n    .btn-info:not(:disabled):not(.disabled):active:focus, .btn-info:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-info.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(58, 176, 195, 0.5); }\n\n.btn-warning {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107; }\n  .btn-warning:hover {\n    color: #212529;\n    background-color: #e0a800;\n    border-color: #d39e00; }\n  .btn-warning:focus, .btn-warning.focus {\n    box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5); }\n  .btn-warning.disabled, .btn-warning:disabled {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107; }\n  .btn-warning:not(:disabled):not(.disabled):active, .btn-warning:not(:disabled):not(.disabled).active,\n  .show > .btn-warning.dropdown-toggle {\n    color: #212529;\n    background-color: #d39e00;\n    border-color: #c69500; }\n    .btn-warning:not(:disabled):not(.disabled):active:focus, .btn-warning:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-warning.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(222, 170, 12, 0.5); }\n\n.btn-danger {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545; }\n  .btn-danger:hover {\n    color: #fff;\n    background-color: #c82333;\n    border-color: #bd2130; }\n  .btn-danger:focus, .btn-danger.focus {\n    box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5); }\n  .btn-danger.disabled, .btn-danger:disabled {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545; }\n  .btn-danger:not(:disabled):not(.disabled):active, .btn-danger:not(:disabled):not(.disabled).active,\n  .show > .btn-danger.dropdown-toggle {\n    color: #fff;\n    background-color: #bd2130;\n    border-color: #b21f2d; }\n    .btn-danger:not(:disabled):not(.disabled):active:focus, .btn-danger:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-danger.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, 0.5); }\n\n.btn-light {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa; }\n  .btn-light:hover {\n    color: #212529;\n    background-color: #e2e6ea;\n    border-color: #dae0e5; }\n  .btn-light:focus, .btn-light.focus {\n    box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5); }\n  .btn-light.disabled, .btn-light:disabled {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa; }\n  .btn-light:not(:disabled):not(.disabled):active, .btn-light:not(:disabled):not(.disabled).active,\n  .show > .btn-light.dropdown-toggle {\n    color: #212529;\n    background-color: #dae0e5;\n    border-color: #d3d9df; }\n    .btn-light:not(:disabled):not(.disabled):active:focus, .btn-light:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-light.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(216, 217, 219, 0.5); }\n\n.btn-dark {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40; }\n  .btn-dark:hover {\n    color: #fff;\n    background-color: #23272b;\n    border-color: #1d2124; }\n  .btn-dark:focus, .btn-dark.focus {\n    box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5); }\n  .btn-dark.disabled, .btn-dark:disabled {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40; }\n  .btn-dark:not(:disabled):not(.disabled):active, .btn-dark:not(:disabled):not(.disabled).active,\n  .show > .btn-dark.dropdown-toggle {\n    color: #fff;\n    background-color: #1d2124;\n    border-color: #171a1d; }\n    .btn-dark:not(:disabled):not(.disabled):active:focus, .btn-dark:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-dark.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(82, 88, 93, 0.5); }\n\n.btn-outline-primary {\n  color: #007bff;\n  border-color: #007bff; }\n  .btn-outline-primary:hover {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff; }\n  .btn-outline-primary:focus, .btn-outline-primary.focus {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\n  .btn-outline-primary.disabled, .btn-outline-primary:disabled {\n    color: #007bff;\n    background-color: transparent; }\n  .btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-primary.dropdown-toggle {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff; }\n    .btn-outline-primary:not(:disabled):not(.disabled):active:focus, .btn-outline-primary:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-primary.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5); }\n\n.btn-outline-secondary {\n  color: #6c757d;\n  border-color: #6c757d; }\n  .btn-outline-secondary:hover {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d; }\n  .btn-outline-secondary:focus, .btn-outline-secondary.focus {\n    box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5); }\n  .btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\n    color: #6c757d;\n    background-color: transparent; }\n  .btn-outline-secondary:not(:disabled):not(.disabled):active, .btn-outline-secondary:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-secondary.dropdown-toggle {\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d; }\n    .btn-outline-secondary:not(:disabled):not(.disabled):active:focus, .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-secondary.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5); }\n\n.btn-outline-success {\n  color: #28a745;\n  border-color: #28a745; }\n  .btn-outline-success:hover {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745; }\n  .btn-outline-success:focus, .btn-outline-success.focus {\n    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\n  .btn-outline-success.disabled, .btn-outline-success:disabled {\n    color: #28a745;\n    background-color: transparent; }\n  .btn-outline-success:not(:disabled):not(.disabled):active, .btn-outline-success:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-success.dropdown-toggle {\n    color: #fff;\n    background-color: #28a745;\n    border-color: #28a745; }\n    .btn-outline-success:not(:disabled):not(.disabled):active:focus, .btn-outline-success:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-success.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5); }\n\n.btn-outline-info {\n  color: #17a2b8;\n  border-color: #17a2b8; }\n  .btn-outline-info:hover {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8; }\n  .btn-outline-info:focus, .btn-outline-info.focus {\n    box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\n  .btn-outline-info.disabled, .btn-outline-info:disabled {\n    color: #17a2b8;\n    background-color: transparent; }\n  .btn-outline-info:not(:disabled):not(.disabled):active, .btn-outline-info:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-info.dropdown-toggle {\n    color: #fff;\n    background-color: #17a2b8;\n    border-color: #17a2b8; }\n    .btn-outline-info:not(:disabled):not(.disabled):active:focus, .btn-outline-info:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-info.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5); }\n\n.btn-outline-warning {\n  color: #ffc107;\n  border-color: #ffc107; }\n  .btn-outline-warning:hover {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107; }\n  .btn-outline-warning:focus, .btn-outline-warning.focus {\n    box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\n  .btn-outline-warning.disabled, .btn-outline-warning:disabled {\n    color: #ffc107;\n    background-color: transparent; }\n  .btn-outline-warning:not(:disabled):not(.disabled):active, .btn-outline-warning:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-warning.dropdown-toggle {\n    color: #212529;\n    background-color: #ffc107;\n    border-color: #ffc107; }\n    .btn-outline-warning:not(:disabled):not(.disabled):active:focus, .btn-outline-warning:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-warning.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5); }\n\n.btn-outline-danger {\n  color: #dc3545;\n  border-color: #dc3545; }\n  .btn-outline-danger:hover {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545; }\n  .btn-outline-danger:focus, .btn-outline-danger.focus {\n    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\n  .btn-outline-danger.disabled, .btn-outline-danger:disabled {\n    color: #dc3545;\n    background-color: transparent; }\n  .btn-outline-danger:not(:disabled):not(.disabled):active, .btn-outline-danger:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-danger.dropdown-toggle {\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545; }\n    .btn-outline-danger:not(:disabled):not(.disabled):active:focus, .btn-outline-danger:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-danger.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5); }\n\n.btn-outline-light {\n  color: #f8f9fa;\n  border-color: #f8f9fa; }\n  .btn-outline-light:hover {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa; }\n  .btn-outline-light:focus, .btn-outline-light.focus {\n    box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\n  .btn-outline-light.disabled, .btn-outline-light:disabled {\n    color: #f8f9fa;\n    background-color: transparent; }\n  .btn-outline-light:not(:disabled):not(.disabled):active, .btn-outline-light:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-light.dropdown-toggle {\n    color: #212529;\n    background-color: #f8f9fa;\n    border-color: #f8f9fa; }\n    .btn-outline-light:not(:disabled):not(.disabled):active:focus, .btn-outline-light:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-light.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5); }\n\n.btn-outline-dark {\n  color: #343a40;\n  border-color: #343a40; }\n  .btn-outline-dark:hover {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40; }\n  .btn-outline-dark:focus, .btn-outline-dark.focus {\n    box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\n  .btn-outline-dark.disabled, .btn-outline-dark:disabled {\n    color: #343a40;\n    background-color: transparent; }\n  .btn-outline-dark:not(:disabled):not(.disabled):active, .btn-outline-dark:not(:disabled):not(.disabled).active,\n  .show > .btn-outline-dark.dropdown-toggle {\n    color: #fff;\n    background-color: #343a40;\n    border-color: #343a40; }\n    .btn-outline-dark:not(:disabled):not(.disabled):active:focus, .btn-outline-dark:not(:disabled):not(.disabled).active:focus,\n    .show > .btn-outline-dark.dropdown-toggle:focus {\n      box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5); }\n\n.btn-link {\n  font-weight: 400;\n  color: #007bff; }\n  .btn-link:hover {\n    color: #0056b3;\n    text-decoration: underline; }\n  .btn-link:focus, .btn-link.focus {\n    text-decoration: underline;\n    box-shadow: none; }\n  .btn-link:disabled, .btn-link.disabled {\n    color: #6c757d;\n    pointer-events: none; }\n\n.btn-lg, .btn-group-lg > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem; }\n\n.btn-sm, .btn-group-sm > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem; }\n\n.btn-block {\n  display: block;\n  width: 100%; }\n  .btn-block + .btn-block {\n    margin-top: 0.5rem; }\n\ninput[type="submit"].btn-block,\ninput[type="reset"].btn-block,\ninput[type="button"].btn-block {\n  width: 100%; }\n\n.fade {\n  transition: opacity 0.15s linear; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .fade {\n      transition: none; } }\n  .fade:not(.show) {\n    opacity: 0; }\n\n.collapse:not(.show) {\n  display: none; }\n\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  transition: height 0.35s ease; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .collapsing {\n      transition: none; } }\n\n.dropup,\n.dropright,\n.dropdown,\n.dropleft {\n  position: relative; }\n\n.dropdown-toggle::after {\n  display: inline-block;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0;\n  border-left: 0.3em solid transparent; }\n\n.dropdown-toggle:empty::after {\n  margin-left: 0; }\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 10rem;\n  padding: 0.5rem 0;\n  margin: 0.125rem 0 0;\n  font-size: 1rem;\n  color: #212529;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 0.25rem; }\n\n.dropdown-menu-right {\n  right: 0;\n  left: auto; }\n\n@media (min-width: 576px) {\n  .dropdown-menu-sm-right {\n    right: 0;\n    left: auto; } }\n\n@media (min-width: 768px) {\n  .dropdown-menu-md-right {\n    right: 0;\n    left: auto; } }\n\n@media (min-width: 992px) {\n  .dropdown-menu-lg-right {\n    right: 0;\n    left: auto; } }\n\n@media (min-width: 1200px) {\n  .dropdown-menu-xl-right {\n    right: 0;\n    left: auto; } }\n\n.dropdown-menu-left {\n  right: auto;\n  left: 0; }\n\n@media (min-width: 576px) {\n  .dropdown-menu-sm-left {\n    right: auto;\n    left: 0; } }\n\n@media (min-width: 768px) {\n  .dropdown-menu-md-left {\n    right: auto;\n    left: 0; } }\n\n@media (min-width: 992px) {\n  .dropdown-menu-lg-left {\n    right: auto;\n    left: 0; } }\n\n@media (min-width: 1200px) {\n  .dropdown-menu-xl-left {\n    right: auto;\n    left: 0; } }\n\n.dropup .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-top: 0;\n  margin-bottom: 0.125rem; }\n\n.dropup .dropdown-toggle::after {\n  display: inline-block;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0.3em solid;\n  border-left: 0.3em solid transparent; }\n\n.dropup .dropdown-toggle:empty::after {\n  margin-left: 0; }\n\n.dropright .dropdown-menu {\n  top: 0;\n  right: auto;\n  left: 100%;\n  margin-top: 0;\n  margin-left: 0.125rem; }\n\n.dropright .dropdown-toggle::after {\n  display: inline-block;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0;\n  border-bottom: 0.3em solid transparent;\n  border-left: 0.3em solid; }\n\n.dropright .dropdown-toggle:empty::after {\n  margin-left: 0; }\n\n.dropright .dropdown-toggle::after {\n  vertical-align: 0; }\n\n.dropleft .dropdown-menu {\n  top: 0;\n  right: 100%;\n  left: auto;\n  margin-top: 0;\n  margin-right: 0.125rem; }\n\n.dropleft .dropdown-toggle::after {\n  display: inline-block;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: ""; }\n\n.dropleft .dropdown-toggle::after {\n  display: none; }\n\n.dropleft .dropdown-toggle::before {\n  display: inline-block;\n  margin-right: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0.3em solid;\n  border-bottom: 0.3em solid transparent; }\n\n.dropleft .dropdown-toggle:empty::after {\n  margin-left: 0; }\n\n.dropleft .dropdown-toggle::before {\n  vertical-align: 0; }\n\n.dropdown-menu[x-placement^="top"], .dropdown-menu[x-placement^="right"], .dropdown-menu[x-placement^="bottom"], .dropdown-menu[x-placement^="left"] {\n  right: auto;\n  bottom: auto; }\n\n.dropdown-divider {\n  height: 0;\n  margin: 0.5rem 0;\n  overflow: hidden;\n  border-top: 1px solid #e9ecef; }\n\n.dropdown-item {\n  display: block;\n  width: 100%;\n  padding: 0.25rem 1.5rem;\n  clear: both;\n  font-weight: 400;\n  color: #212529;\n  text-align: inherit;\n  white-space: nowrap;\n  background-color: transparent;\n  border: 0; }\n  .dropdown-item:first-child {\n    border-top-left-radius: calc(0.25rem - 1px);\n    border-top-right-radius: calc(0.25rem - 1px); }\n  .dropdown-item:last-child {\n    border-bottom-right-radius: calc(0.25rem - 1px);\n    border-bottom-left-radius: calc(0.25rem - 1px); }\n  .dropdown-item:hover, .dropdown-item:focus {\n    color: #16181b;\n    text-decoration: none;\n    background-color: #f8f9fa; }\n  .dropdown-item.active, .dropdown-item:active {\n    color: #fff;\n    text-decoration: none;\n    background-color: #007bff; }\n  .dropdown-item.disabled, .dropdown-item:disabled {\n    color: #6c757d;\n    pointer-events: none;\n    background-color: transparent; }\n\n.dropdown-menu.show {\n  display: block; }\n\n.dropdown-header {\n  display: block;\n  padding: 0.5rem 1.5rem;\n  margin-bottom: 0;\n  font-size: 0.875rem;\n  color: #6c757d;\n  white-space: nowrap; }\n\n.dropdown-item-text {\n  display: block;\n  padding: 0.25rem 1.5rem;\n  color: #212529; }\n\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle; }\n  .btn-group > .btn,\n  .btn-group-vertical > .btn {\n    position: relative;\n    flex: 1 1 auto; }\n    .btn-group > .btn:hover,\n    .btn-group-vertical > .btn:hover {\n      z-index: 1; }\n    .btn-group > .btn:focus, .btn-group > .btn:active, .btn-group > .btn.active,\n    .btn-group-vertical > .btn:focus,\n    .btn-group-vertical > .btn:active,\n    .btn-group-vertical > .btn.active {\n      z-index: 1; }\n\n.btn-toolbar {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start; }\n  .btn-toolbar .input-group {\n    width: auto; }\n\n.btn-group > .btn:not(:first-child),\n.btn-group > .btn-group:not(:first-child) {\n  margin-left: -1px; }\n\n.btn-group > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0; }\n\n.btn-group > .btn:not(:first-child),\n.btn-group > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0; }\n\n.dropdown-toggle-split {\n  padding-right: 0.5625rem;\n  padding-left: 0.5625rem; }\n  .dropdown-toggle-split::after,\n  .dropup .dropdown-toggle-split::after,\n  .dropright .dropdown-toggle-split::after {\n    margin-left: 0; }\n  .dropleft .dropdown-toggle-split::before {\n    margin-right: 0; }\n\n.btn-sm + .dropdown-toggle-split, .btn-group-sm > .btn + .dropdown-toggle-split {\n  padding-right: 0.375rem;\n  padding-left: 0.375rem; }\n\n.btn-lg + .dropdown-toggle-split, .btn-group-lg > .btn + .dropdown-toggle-split {\n  padding-right: 0.75rem;\n  padding-left: 0.75rem; }\n\n.btn-group-vertical {\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center; }\n  .btn-group-vertical > .btn,\n  .btn-group-vertical > .btn-group {\n    width: 100%; }\n  .btn-group-vertical > .btn:not(:first-child),\n  .btn-group-vertical > .btn-group:not(:first-child) {\n    margin-top: -1px; }\n  .btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle),\n  .btn-group-vertical > .btn-group:not(:last-child) > .btn {\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0; }\n  .btn-group-vertical > .btn:not(:first-child),\n  .btn-group-vertical > .btn-group:not(:first-child) > .btn {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0; }\n\n.btn-group-toggle > .btn,\n.btn-group-toggle > .btn-group > .btn {\n  margin-bottom: 0; }\n  .btn-group-toggle > .btn input[type="radio"],\n  .btn-group-toggle > .btn input[type="checkbox"],\n  .btn-group-toggle > .btn-group > .btn input[type="radio"],\n  .btn-group-toggle > .btn-group > .btn input[type="checkbox"] {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n    pointer-events: none; }\n\n.input-group {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: stretch;\n  width: 100%; }\n  .input-group > .form-control,\n  .input-group > .form-control-plaintext,\n  .input-group > .custom-select,\n  .input-group > .custom-file {\n    position: relative;\n    flex: 1 1 auto;\n    width: 1%;\n    margin-bottom: 0; }\n    .input-group > .form-control + .form-control,\n    .input-group > .form-control + .custom-select,\n    .input-group > .form-control + .custom-file,\n    .input-group > .form-control-plaintext + .form-control,\n    .input-group > .form-control-plaintext + .custom-select,\n    .input-group > .form-control-plaintext + .custom-file,\n    .input-group > .custom-select + .form-control,\n    .input-group > .custom-select + .custom-select,\n    .input-group > .custom-select + .custom-file,\n    .input-group > .custom-file + .form-control,\n    .input-group > .custom-file + .custom-select,\n    .input-group > .custom-file + .custom-file {\n      margin-left: -1px; }\n  .input-group > .form-control:focus,\n  .input-group > .custom-select:focus,\n  .input-group > .custom-file .custom-file-input:focus ~ .custom-file-label {\n    z-index: 3; }\n  .input-group > .custom-file .custom-file-input:focus {\n    z-index: 4; }\n  .input-group > .form-control:not(:last-child),\n  .input-group > .custom-select:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0; }\n  .input-group > .form-control:not(:first-child),\n  .input-group > .custom-select:not(:first-child) {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0; }\n  .input-group > .custom-file {\n    display: flex;\n    align-items: center; }\n    .input-group > .custom-file:not(:last-child) .custom-file-label,\n    .input-group > .custom-file:not(:last-child) .custom-file-label::after {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0; }\n    .input-group > .custom-file:not(:first-child) .custom-file-label {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0; }\n\n.input-group-prepend,\n.input-group-append {\n  display: flex; }\n  .input-group-prepend .btn,\n  .input-group-append .btn {\n    position: relative;\n    z-index: 2; }\n    .input-group-prepend .btn:focus,\n    .input-group-append .btn:focus {\n      z-index: 3; }\n  .input-group-prepend .btn + .btn,\n  .input-group-prepend .btn + .input-group-text,\n  .input-group-prepend .input-group-text + .input-group-text,\n  .input-group-prepend .input-group-text + .btn,\n  .input-group-append .btn + .btn,\n  .input-group-append .btn + .input-group-text,\n  .input-group-append .input-group-text + .input-group-text,\n  .input-group-append .input-group-text + .btn {\n    margin-left: -1px; }\n\n.input-group-prepend {\n  margin-right: -1px; }\n\n.input-group-append {\n  margin-left: -1px; }\n\n.input-group-text {\n  display: flex;\n  align-items: center;\n  padding: 0.375rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #e9ecef;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem; }\n  .input-group-text input[type="radio"],\n  .input-group-text input[type="checkbox"] {\n    margin-top: 0; }\n\n.input-group-lg > .form-control:not(textarea),\n.input-group-lg > .custom-select {\n  height: calc(2.875rem + 2px); }\n\n.input-group-lg > .form-control,\n.input-group-lg > .custom-select,\n.input-group-lg > .input-group-prepend > .input-group-text,\n.input-group-lg > .input-group-append > .input-group-text,\n.input-group-lg > .input-group-prepend > .btn,\n.input-group-lg > .input-group-append > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem; }\n\n.input-group-sm > .form-control:not(textarea),\n.input-group-sm > .custom-select {\n  height: calc(1.8125rem + 2px); }\n\n.input-group-sm > .form-control,\n.input-group-sm > .custom-select,\n.input-group-sm > .input-group-prepend > .input-group-text,\n.input-group-sm > .input-group-append > .input-group-text,\n.input-group-sm > .input-group-prepend > .btn,\n.input-group-sm > .input-group-append > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem; }\n\n.input-group-lg > .custom-select,\n.input-group-sm > .custom-select {\n  padding-right: 1.75rem; }\n\n.input-group > .input-group-prepend > .btn,\n.input-group > .input-group-prepend > .input-group-text,\n.input-group > .input-group-append:not(:last-child) > .btn,\n.input-group > .input-group-append:not(:last-child) > .input-group-text,\n.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0; }\n\n.input-group > .input-group-append > .btn,\n.input-group > .input-group-append > .input-group-text,\n.input-group > .input-group-prepend:not(:first-child) > .btn,\n.input-group > .input-group-prepend:not(:first-child) > .input-group-text,\n.input-group > .input-group-prepend:first-child > .btn:not(:first-child),\n.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0; }\n\n.custom-control {\n  position: relative;\n  display: block;\n  min-height: 1.5rem;\n  padding-left: 1.5rem; }\n\n.custom-control-inline {\n  display: inline-flex;\n  margin-right: 1rem; }\n\n.custom-control-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0; }\n  .custom-control-input:checked ~ .custom-control-label::before {\n    color: #fff;\n    border-color: #007bff;\n    background-color: #007bff; }\n  .custom-control-input:focus ~ .custom-control-label::before {\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .custom-control-input:focus:not(:checked) ~ .custom-control-label::before {\n    border-color: #80bdff; }\n  .custom-control-input:not(:disabled):active ~ .custom-control-label::before {\n    color: #fff;\n    background-color: #b3d7ff;\n    border-color: #b3d7ff; }\n  .custom-control-input:disabled ~ .custom-control-label {\n    color: #6c757d; }\n    .custom-control-input:disabled ~ .custom-control-label::before {\n      background-color: #e9ecef; }\n\n.custom-control-label {\n  position: relative;\n  margin-bottom: 0;\n  vertical-align: top; }\n  .custom-control-label::before {\n    position: absolute;\n    top: 0.25rem;\n    left: -1.5rem;\n    display: block;\n    width: 1rem;\n    height: 1rem;\n    pointer-events: none;\n    content: "";\n    background-color: #fff;\n    border: #adb5bd solid 1px; }\n  .custom-control-label::after {\n    position: absolute;\n    top: 0.25rem;\n    left: -1.5rem;\n    display: block;\n    width: 1rem;\n    height: 1rem;\n    content: "";\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 50% 50%; }\n\n.custom-checkbox .custom-control-label::before {\n  border-radius: 0.25rem; }\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3e%3cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3e%3c/svg%3e"); }\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before {\n  border-color: #007bff;\n  background-color: #007bff; }\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3e%3cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3e%3c/svg%3e"); }\n\n.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5); }\n\n.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5); }\n\n.custom-radio .custom-control-label::before {\n  border-radius: 50%; }\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3e%3ccircle r=\'3\' fill=\'%23fff\'/%3e%3c/svg%3e"); }\n\n.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5); }\n\n.custom-switch {\n  padding-left: 2.25rem; }\n  .custom-switch .custom-control-label::before {\n    left: -2.25rem;\n    width: 1.75rem;\n    pointer-events: all;\n    border-radius: 0.5rem; }\n  .custom-switch .custom-control-label::after {\n    top: calc(0.25rem + 2px);\n    left: calc(-2.25rem + 2px);\n    width: calc(1rem - 4px);\n    height: calc(1rem - 4px);\n    background-color: #adb5bd;\n    border-radius: 0.5rem;\n    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out;\n    transition: transform 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    transition: transform 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out, -webkit-transform 0.15s ease-in-out; }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .custom-switch .custom-control-label::after {\n        transition: none; } }\n  .custom-switch .custom-control-input:checked ~ .custom-control-label::after {\n    background-color: #fff;\n    -webkit-transform: translateX(0.75rem);\n            transform: translateX(0.75rem); }\n  .custom-switch .custom-control-input:disabled:checked ~ .custom-control-label::before {\n    background-color: rgba(0, 123, 255, 0.5); }\n\n.custom-select {\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  vertical-align: middle;\n  background: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3e%3cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3e%3c/svg%3e") no-repeat right 0.75rem center/8px 10px;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none; }\n  .custom-select:focus {\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(128, 189, 255, 0.5); }\n    .custom-select:focus::-ms-value {\n      color: #495057;\n      background-color: #fff; }\n  .custom-select[multiple], .custom-select[size]:not([size="1"]) {\n    height: auto;\n    padding-right: 0.75rem;\n    background-image: none; }\n  .custom-select:disabled {\n    color: #6c757d;\n    background-color: #e9ecef; }\n  .custom-select::-ms-expand {\n    opacity: 0; }\n\n.custom-select-sm {\n  height: calc(1.8125rem + 2px);\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  padding-left: 0.5rem;\n  font-size: 0.875rem; }\n\n.custom-select-lg {\n  height: calc(2.875rem + 2px);\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 1rem;\n  font-size: 1.25rem; }\n\n.custom-file {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin-bottom: 0; }\n\n.custom-file-input {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin: 0;\n  opacity: 0; }\n  .custom-file-input:focus ~ .custom-file-label {\n    border-color: #80bdff;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .custom-file-input:disabled ~ .custom-file-label {\n    background-color: #e9ecef; }\n  .custom-file-input:lang(en) ~ .custom-file-label::after {\n    content: "Browse"; }\n  .custom-file-input ~ .custom-file-label[data-browse]::after {\n    content: attr(data-browse); }\n\n.custom-file-label {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem; }\n  .custom-file-label::after {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    z-index: 3;\n    display: block;\n    height: 2.25rem;\n    padding: 0.375rem 0.75rem;\n    line-height: 1.5;\n    color: #495057;\n    content: "Browse";\n    background-color: #e9ecef;\n    border-left: inherit;\n    border-radius: 0 0.25rem 0.25rem 0; }\n\n.custom-range {\n  width: 100%;\n  height: calc(1rem + 0.4rem);\n  padding: 0;\n  background-color: transparent;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none; }\n  .custom-range:focus {\n    outline: none; }\n    .custom-range:focus::-webkit-slider-thumb {\n      box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n    .custom-range:focus::-moz-range-thumb {\n      box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n    .custom-range:focus::-ms-thumb {\n      box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .custom-range::-moz-focus-outer {\n    border: 0; }\n  .custom-range::-webkit-slider-thumb {\n    width: 1rem;\n    height: 1rem;\n    margin-top: -0.25rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    -webkit-appearance: none;\n            appearance: none; }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .custom-range::-webkit-slider-thumb {\n        transition: none; } }\n    .custom-range::-webkit-slider-thumb:active {\n      background-color: #b3d7ff; }\n  .custom-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: #dee2e6;\n    border-color: transparent;\n    border-radius: 1rem; }\n  .custom-range::-moz-range-thumb {\n    width: 1rem;\n    height: 1rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    -moz-appearance: none;\n         appearance: none; }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .custom-range::-moz-range-thumb {\n        transition: none; } }\n    .custom-range::-moz-range-thumb:active {\n      background-color: #b3d7ff; }\n  .custom-range::-moz-range-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: #dee2e6;\n    border-color: transparent;\n    border-radius: 1rem; }\n  .custom-range::-ms-thumb {\n    width: 1rem;\n    height: 1rem;\n    margin-top: 0;\n    margin-right: 0.2rem;\n    margin-left: 0.2rem;\n    background-color: #007bff;\n    border: 0;\n    border-radius: 1rem;\n    transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    appearance: none; }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .custom-range::-ms-thumb {\n        transition: none; } }\n    .custom-range::-ms-thumb:active {\n      background-color: #b3d7ff; }\n  .custom-range::-ms-track {\n    width: 100%;\n    height: 0.5rem;\n    color: transparent;\n    cursor: pointer;\n    background-color: transparent;\n    border-color: transparent;\n    border-width: 0.5rem; }\n  .custom-range::-ms-fill-lower {\n    background-color: #dee2e6;\n    border-radius: 1rem; }\n  .custom-range::-ms-fill-upper {\n    margin-right: 15px;\n    background-color: #dee2e6;\n    border-radius: 1rem; }\n  .custom-range:disabled::-webkit-slider-thumb {\n    background-color: #adb5bd; }\n  .custom-range:disabled::-webkit-slider-runnable-track {\n    cursor: default; }\n  .custom-range:disabled::-moz-range-thumb {\n    background-color: #adb5bd; }\n  .custom-range:disabled::-moz-range-track {\n    cursor: default; }\n  .custom-range:disabled::-ms-thumb {\n    background-color: #adb5bd; }\n\n.custom-control-label::before,\n.custom-file-label,\n.custom-select {\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .custom-control-label::before,\n    .custom-file-label,\n    .custom-select {\n      transition: none; } }\n\n.nav {\n  display: flex;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none; }\n\n.nav-link {\n  display: block;\n  padding: 0.5rem 1rem; }\n  .nav-link:hover, .nav-link:focus {\n    text-decoration: none; }\n  .nav-link.disabled {\n    color: #6c757d;\n    pointer-events: none;\n    cursor: default; }\n\n.nav-tabs {\n  border-bottom: 1px solid #dee2e6; }\n  .nav-tabs .nav-item {\n    margin-bottom: -1px; }\n  .nav-tabs .nav-link {\n    border: 1px solid transparent;\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem; }\n    .nav-tabs .nav-link:hover, .nav-tabs .nav-link:focus {\n      border-color: #e9ecef #e9ecef #dee2e6; }\n    .nav-tabs .nav-link.disabled {\n      color: #6c757d;\n      background-color: transparent;\n      border-color: transparent; }\n  .nav-tabs .nav-link.active,\n  .nav-tabs .nav-item.show .nav-link {\n    color: #495057;\n    background-color: #fff;\n    border-color: #dee2e6 #dee2e6 #fff; }\n  .nav-tabs .dropdown-menu {\n    margin-top: -1px;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0; }\n\n.nav-pills .nav-link {\n  border-radius: 0.25rem; }\n\n.nav-pills .nav-link.active,\n.nav-pills .show > .nav-link {\n  color: #fff;\n  background-color: #007bff; }\n\n.nav-fill .nav-item {\n  flex: 1 1 auto;\n  text-align: center; }\n\n.nav-justified .nav-item {\n  flex-basis: 0;\n  flex-grow: 1;\n  text-align: center; }\n\n.tab-content > .tab-pane {\n  display: none; }\n\n.tab-content > .active {\n  display: block; }\n\n.navbar {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem 1rem; }\n  .navbar > .container,\n  .navbar > .container-fluid {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between; }\n\n.navbar-brand {\n  display: inline-block;\n  padding-top: 0.3125rem;\n  padding-bottom: 0.3125rem;\n  margin-right: 1rem;\n  font-size: 1.25rem;\n  line-height: inherit;\n  white-space: nowrap; }\n  .navbar-brand:hover, .navbar-brand:focus {\n    text-decoration: none; }\n\n.navbar-nav {\n  display: flex;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none; }\n  .navbar-nav .nav-link {\n    padding-right: 0;\n    padding-left: 0; }\n  .navbar-nav .dropdown-menu {\n    position: static;\n    float: none; }\n\n.navbar-text {\n  display: inline-block;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem; }\n\n.navbar-collapse {\n  flex-basis: 100%;\n  flex-grow: 1;\n  align-items: center; }\n\n.navbar-toggler {\n  padding: 0.25rem 0.75rem;\n  font-size: 1.25rem;\n  line-height: 1;\n  background-color: transparent;\n  border: 1px solid transparent;\n  border-radius: 0.25rem; }\n  .navbar-toggler:hover, .navbar-toggler:focus {\n    text-decoration: none; }\n  .navbar-toggler:not(:disabled):not(.disabled) {\n    cursor: pointer; }\n\n.navbar-toggler-icon {\n  display: inline-block;\n  width: 1.5em;\n  height: 1.5em;\n  vertical-align: middle;\n  content: "";\n  background: no-repeat center center;\n  background-size: 100% 100%; }\n\n@media (max-width: 575.98px) {\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    padding-right: 0;\n    padding-left: 0; } }\n\n@media (min-width: 576px) {\n  .navbar-expand-sm {\n    flex-flow: row nowrap;\n    justify-content: flex-start; }\n    .navbar-expand-sm .navbar-nav {\n      flex-direction: row; }\n      .navbar-expand-sm .navbar-nav .dropdown-menu {\n        position: absolute; }\n      .navbar-expand-sm .navbar-nav .nav-link {\n        padding-right: 0.5rem;\n        padding-left: 0.5rem; }\n    .navbar-expand-sm > .container,\n    .navbar-expand-sm > .container-fluid {\n      flex-wrap: nowrap; }\n    .navbar-expand-sm .navbar-collapse {\n      display: flex !important;\n      flex-basis: auto; }\n    .navbar-expand-sm .navbar-toggler {\n      display: none; } }\n\n@media (max-width: 767.98px) {\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    padding-right: 0;\n    padding-left: 0; } }\n\n@media (min-width: 768px) {\n  .navbar-expand-md {\n    flex-flow: row nowrap;\n    justify-content: flex-start; }\n    .navbar-expand-md .navbar-nav {\n      flex-direction: row; }\n      .navbar-expand-md .navbar-nav .dropdown-menu {\n        position: absolute; }\n      .navbar-expand-md .navbar-nav .nav-link {\n        padding-right: 0.5rem;\n        padding-left: 0.5rem; }\n    .navbar-expand-md > .container,\n    .navbar-expand-md > .container-fluid {\n      flex-wrap: nowrap; }\n    .navbar-expand-md .navbar-collapse {\n      display: flex !important;\n      flex-basis: auto; }\n    .navbar-expand-md .navbar-toggler {\n      display: none; } }\n\n@media (max-width: 991.98px) {\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    padding-right: 0;\n    padding-left: 0; } }\n\n@media (min-width: 992px) {\n  .navbar-expand-lg {\n    flex-flow: row nowrap;\n    justify-content: flex-start; }\n    .navbar-expand-lg .navbar-nav {\n      flex-direction: row; }\n      .navbar-expand-lg .navbar-nav .dropdown-menu {\n        position: absolute; }\n      .navbar-expand-lg .navbar-nav .nav-link {\n        padding-right: 0.5rem;\n        padding-left: 0.5rem; }\n    .navbar-expand-lg > .container,\n    .navbar-expand-lg > .container-fluid {\n      flex-wrap: nowrap; }\n    .navbar-expand-lg .navbar-collapse {\n      display: flex !important;\n      flex-basis: auto; }\n    .navbar-expand-lg .navbar-toggler {\n      display: none; } }\n\n@media (max-width: 1199.98px) {\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    padding-right: 0;\n    padding-left: 0; } }\n\n@media (min-width: 1200px) {\n  .navbar-expand-xl {\n    flex-flow: row nowrap;\n    justify-content: flex-start; }\n    .navbar-expand-xl .navbar-nav {\n      flex-direction: row; }\n      .navbar-expand-xl .navbar-nav .dropdown-menu {\n        position: absolute; }\n      .navbar-expand-xl .navbar-nav .nav-link {\n        padding-right: 0.5rem;\n        padding-left: 0.5rem; }\n    .navbar-expand-xl > .container,\n    .navbar-expand-xl > .container-fluid {\n      flex-wrap: nowrap; }\n    .navbar-expand-xl .navbar-collapse {\n      display: flex !important;\n      flex-basis: auto; }\n    .navbar-expand-xl .navbar-toggler {\n      display: none; } }\n\n.navbar-expand {\n  flex-flow: row nowrap;\n  justify-content: flex-start; }\n  .navbar-expand > .container,\n  .navbar-expand > .container-fluid {\n    padding-right: 0;\n    padding-left: 0; }\n  .navbar-expand .navbar-nav {\n    flex-direction: row; }\n    .navbar-expand .navbar-nav .dropdown-menu {\n      position: absolute; }\n    .navbar-expand .navbar-nav .nav-link {\n      padding-right: 0.5rem;\n      padding-left: 0.5rem; }\n  .navbar-expand > .container,\n  .navbar-expand > .container-fluid {\n    flex-wrap: nowrap; }\n  .navbar-expand .navbar-collapse {\n    display: flex !important;\n    flex-basis: auto; }\n  .navbar-expand .navbar-toggler {\n    display: none; }\n\n.navbar-light .navbar-brand {\n  color: rgba(0, 0, 0, 0.9); }\n  .navbar-light .navbar-brand:hover, .navbar-light .navbar-brand:focus {\n    color: rgba(0, 0, 0, 0.9); }\n\n.navbar-light .navbar-nav .nav-link {\n  color: rgba(0, 0, 0, 0.5); }\n  .navbar-light .navbar-nav .nav-link:hover, .navbar-light .navbar-nav .nav-link:focus {\n    color: rgba(0, 0, 0, 0.7); }\n  .navbar-light .navbar-nav .nav-link.disabled {\n    color: rgba(0, 0, 0, 0.3); }\n\n.navbar-light .navbar-nav .show > .nav-link,\n.navbar-light .navbar-nav .active > .nav-link,\n.navbar-light .navbar-nav .nav-link.show,\n.navbar-light .navbar-nav .nav-link.active {\n  color: rgba(0, 0, 0, 0.9); }\n\n.navbar-light .navbar-toggler {\n  color: rgba(0, 0, 0, 0.5);\n  border-color: rgba(0, 0, 0, 0.1); }\n\n.navbar-light .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml,%3csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3e%3cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3e%3c/svg%3e"); }\n\n.navbar-light .navbar-text {\n  color: rgba(0, 0, 0, 0.5); }\n  .navbar-light .navbar-text a {\n    color: rgba(0, 0, 0, 0.9); }\n    .navbar-light .navbar-text a:hover, .navbar-light .navbar-text a:focus {\n      color: rgba(0, 0, 0, 0.9); }\n\n.navbar-dark .navbar-brand {\n  color: #fff; }\n  .navbar-dark .navbar-brand:hover, .navbar-dark .navbar-brand:focus {\n    color: #fff; }\n\n.navbar-dark .navbar-nav .nav-link {\n  color: rgba(255, 255, 255, 0.5); }\n  .navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\n    color: rgba(255, 255, 255, 0.75); }\n  .navbar-dark .navbar-nav .nav-link.disabled {\n    color: rgba(255, 255, 255, 0.25); }\n\n.navbar-dark .navbar-nav .show > .nav-link,\n.navbar-dark .navbar-nav .active > .nav-link,\n.navbar-dark .navbar-nav .nav-link.show,\n.navbar-dark .navbar-nav .nav-link.active {\n  color: #fff; }\n\n.navbar-dark .navbar-toggler {\n  color: rgba(255, 255, 255, 0.5);\n  border-color: rgba(255, 255, 255, 0.1); }\n\n.navbar-dark .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml,%3csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3e%3cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3e%3c/svg%3e"); }\n\n.navbar-dark .navbar-text {\n  color: rgba(255, 255, 255, 0.5); }\n  .navbar-dark .navbar-text a {\n    color: #fff; }\n    .navbar-dark .navbar-text a:hover, .navbar-dark .navbar-text a:focus {\n      color: #fff; }\n\n.card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem; }\n  .card > hr {\n    margin-right: 0;\n    margin-left: 0; }\n  .card > .list-group:first-child .list-group-item:first-child {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem; }\n  .card > .list-group:last-child .list-group-item:last-child {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem; }\n\n.card-body {\n  flex: 1 1 auto;\n  padding: 1.25rem; }\n\n.card-title {\n  margin-bottom: 0.75rem; }\n\n.card-subtitle {\n  margin-top: -0.375rem;\n  margin-bottom: 0; }\n\n.card-text:last-child {\n  margin-bottom: 0; }\n\n.card-link:hover {\n  text-decoration: none; }\n\n.card-link + .card-link {\n  margin-left: 1.25rem; }\n\n.card-header {\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 0;\n  color: inherit;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125); }\n  .card-header:first-child {\n    border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0; }\n  .card-header + .list-group .list-group-item:first-child {\n    border-top: 0; }\n\n.card-footer {\n  padding: 0.75rem 1.25rem;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-top: 1px solid rgba(0, 0, 0, 0.125); }\n  .card-footer:last-child {\n    border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px); }\n\n.card-header-tabs {\n  margin-right: -0.625rem;\n  margin-bottom: -0.75rem;\n  margin-left: -0.625rem;\n  border-bottom: 0; }\n\n.card-header-pills {\n  margin-right: -0.625rem;\n  margin-left: -0.625rem; }\n\n.card-img-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1.25rem; }\n\n.card-img {\n  width: 100%;\n  border-radius: calc(0.25rem - 1px); }\n\n.card-img-top {\n  width: 100%;\n  border-top-left-radius: calc(0.25rem - 1px);\n  border-top-right-radius: calc(0.25rem - 1px); }\n\n.card-img-bottom {\n  width: 100%;\n  border-bottom-right-radius: calc(0.25rem - 1px);\n  border-bottom-left-radius: calc(0.25rem - 1px); }\n\n.card-deck {\n  display: flex;\n  flex-direction: column; }\n  .card-deck .card {\n    margin-bottom: 15px; }\n  @media (min-width: 576px) {\n    .card-deck {\n      flex-flow: row wrap;\n      margin-right: -15px;\n      margin-left: -15px; }\n      .card-deck .card {\n        display: flex;\n        flex: 1 0 0%;\n        flex-direction: column;\n        margin-right: 15px;\n        margin-bottom: 0;\n        margin-left: 15px; } }\n\n.card-group {\n  display: flex;\n  flex-direction: column; }\n  .card-group > .card {\n    margin-bottom: 15px; }\n  @media (min-width: 576px) {\n    .card-group {\n      flex-flow: row wrap; }\n      .card-group > .card {\n        flex: 1 0 0%;\n        margin-bottom: 0; }\n        .card-group > .card + .card {\n          margin-left: 0;\n          border-left: 0; }\n        .card-group > .card:first-child {\n          border-top-right-radius: 0;\n          border-bottom-right-radius: 0; }\n          .card-group > .card:first-child .card-img-top,\n          .card-group > .card:first-child .card-header {\n            border-top-right-radius: 0; }\n          .card-group > .card:first-child .card-img-bottom,\n          .card-group > .card:first-child .card-footer {\n            border-bottom-right-radius: 0; }\n        .card-group > .card:last-child {\n          border-top-left-radius: 0;\n          border-bottom-left-radius: 0; }\n          .card-group > .card:last-child .card-img-top,\n          .card-group > .card:last-child .card-header {\n            border-top-left-radius: 0; }\n          .card-group > .card:last-child .card-img-bottom,\n          .card-group > .card:last-child .card-footer {\n            border-bottom-left-radius: 0; }\n        .card-group > .card:only-child {\n          border-radius: 0.25rem; }\n          .card-group > .card:only-child .card-img-top,\n          .card-group > .card:only-child .card-header {\n            border-top-left-radius: 0.25rem;\n            border-top-right-radius: 0.25rem; }\n          .card-group > .card:only-child .card-img-bottom,\n          .card-group > .card:only-child .card-footer {\n            border-bottom-right-radius: 0.25rem;\n            border-bottom-left-radius: 0.25rem; }\n        .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {\n          border-radius: 0; }\n          .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,\n          .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,\n          .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-header,\n          .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-footer {\n            border-radius: 0; } }\n\n.card-columns .card {\n  margin-bottom: 0.75rem; }\n\n@media (min-width: 576px) {\n  .card-columns {\n    -webkit-column-count: 3;\n            column-count: 3;\n    -webkit-column-gap: 1.25rem;\n            column-gap: 1.25rem;\n    orphans: 1;\n    widows: 1; }\n    .card-columns .card {\n      display: inline-block;\n      width: 100%; } }\n\n.accordion .card {\n  overflow: hidden; }\n  .accordion .card:not(:first-of-type) .card-header:first-child {\n    border-radius: 0; }\n  .accordion .card:not(:first-of-type):not(:last-of-type) {\n    border-bottom: 0;\n    border-radius: 0; }\n  .accordion .card:first-of-type {\n    border-bottom: 0;\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0; }\n  .accordion .card:last-of-type {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0; }\n  .accordion .card .card-header {\n    margin-bottom: -1px; }\n\n.breadcrumb {\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0.75rem 1rem;\n  margin-bottom: 1rem;\n  list-style: none;\n  background-color: #e9ecef;\n  border-radius: 0.25rem; }\n\n.breadcrumb-item + .breadcrumb-item {\n  padding-left: 0.5rem; }\n  .breadcrumb-item + .breadcrumb-item::before {\n    display: inline-block;\n    padding-right: 0.5rem;\n    color: #6c757d;\n    content: "/"; }\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: underline; }\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: none; }\n\n.breadcrumb-item.active {\n  color: #6c757d; }\n\n.pagination {\n  display: flex;\n  padding-left: 0;\n  list-style: none;\n  border-radius: 0.25rem; }\n\n.page-link {\n  position: relative;\n  display: block;\n  padding: 0.5rem 0.75rem;\n  margin-left: -1px;\n  line-height: 1.25;\n  color: #007bff;\n  background-color: #fff;\n  border: 1px solid #dee2e6; }\n  .page-link:hover {\n    z-index: 2;\n    color: #0056b3;\n    text-decoration: none;\n    background-color: #e9ecef;\n    border-color: #dee2e6; }\n  .page-link:focus {\n    z-index: 2;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }\n  .page-link:not(:disabled):not(.disabled) {\n    cursor: pointer; }\n\n.page-item:first-child .page-link {\n  margin-left: 0;\n  border-top-left-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem; }\n\n.page-item:last-child .page-link {\n  border-top-right-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem; }\n\n.page-item.active .page-link {\n  z-index: 1;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff; }\n\n.page-item.disabled .page-link {\n  color: #6c757d;\n  pointer-events: none;\n  cursor: auto;\n  background-color: #fff;\n  border-color: #dee2e6; }\n\n.pagination-lg .page-link {\n  padding: 0.75rem 1.5rem;\n  font-size: 1.25rem;\n  line-height: 1.5; }\n\n.pagination-lg .page-item:first-child .page-link {\n  border-top-left-radius: 0.3rem;\n  border-bottom-left-radius: 0.3rem; }\n\n.pagination-lg .page-item:last-child .page-link {\n  border-top-right-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem; }\n\n.pagination-sm .page-link {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5; }\n\n.pagination-sm .page-item:first-child .page-link {\n  border-top-left-radius: 0.2rem;\n  border-bottom-left-radius: 0.2rem; }\n\n.pagination-sm .page-item:last-child .page-link {\n  border-top-right-radius: 0.2rem;\n  border-bottom-right-radius: 0.2rem; }\n\n.badge {\n  display: inline-block;\n  padding: 0.25em 0.4em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25rem; }\n  a.badge:hover, a.badge:focus {\n    text-decoration: none; }\n  .badge:empty {\n    display: none; }\n\n.btn .badge {\n  position: relative;\n  top: -1px; }\n\n.badge-pill {\n  padding-right: 0.6em;\n  padding-left: 0.6em;\n  border-radius: 10rem; }\n\n.badge-primary {\n  color: #fff;\n  background-color: #007bff; }\n  a.badge-primary:hover, a.badge-primary:focus {\n    color: #fff;\n    background-color: #0062cc; }\n\n.badge-secondary {\n  color: #fff;\n  background-color: #6c757d; }\n  a.badge-secondary:hover, a.badge-secondary:focus {\n    color: #fff;\n    background-color: #545b62; }\n\n.badge-success {\n  color: #fff;\n  background-color: #28a745; }\n  a.badge-success:hover, a.badge-success:focus {\n    color: #fff;\n    background-color: #1e7e34; }\n\n.badge-info {\n  color: #fff;\n  background-color: #17a2b8; }\n  a.badge-info:hover, a.badge-info:focus {\n    color: #fff;\n    background-color: #117a8b; }\n\n.badge-warning {\n  color: #212529;\n  background-color: #ffc107; }\n  a.badge-warning:hover, a.badge-warning:focus {\n    color: #212529;\n    background-color: #d39e00; }\n\n.badge-danger {\n  color: #fff;\n  background-color: #dc3545; }\n  a.badge-danger:hover, a.badge-danger:focus {\n    color: #fff;\n    background-color: #bd2130; }\n\n.badge-light {\n  color: #212529;\n  background-color: #f8f9fa; }\n  a.badge-light:hover, a.badge-light:focus {\n    color: #212529;\n    background-color: #dae0e5; }\n\n.badge-dark {\n  color: #fff;\n  background-color: #343a40; }\n  a.badge-dark:hover, a.badge-dark:focus {\n    color: #fff;\n    background-color: #1d2124; }\n\n.jumbotron {\n  padding: 2rem 1rem;\n  margin-bottom: 2rem;\n  background-color: #e9ecef;\n  border-radius: 0.3rem; }\n  @media (min-width: 576px) {\n    .jumbotron {\n      padding: 4rem 2rem; } }\n\n.jumbotron-fluid {\n  padding-right: 0;\n  padding-left: 0;\n  border-radius: 0; }\n\n.alert {\n  position: relative;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem; }\n\n.alert-heading {\n  color: inherit; }\n\n.alert-link {\n  font-weight: 700; }\n\n.alert-dismissible {\n  padding-right: 4rem; }\n  .alert-dismissible .close {\n    position: absolute;\n    top: 0;\n    right: 0;\n    padding: 0.75rem 1.25rem;\n    color: inherit; }\n\n.alert-primary {\n  color: #004085;\n  background-color: #cce5ff;\n  border-color: #b8daff; }\n  .alert-primary hr {\n    border-top-color: #9fcdff; }\n  .alert-primary .alert-link {\n    color: #002752; }\n\n.alert-secondary {\n  color: #383d41;\n  background-color: #e2e3e5;\n  border-color: #d6d8db; }\n  .alert-secondary hr {\n    border-top-color: #c8cbcf; }\n  .alert-secondary .alert-link {\n    color: #202326; }\n\n.alert-success {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb; }\n  .alert-success hr {\n    border-top-color: #b1dfbb; }\n  .alert-success .alert-link {\n    color: #0b2e13; }\n\n.alert-info {\n  color: #0c5460;\n  background-color: #d1ecf1;\n  border-color: #bee5eb; }\n  .alert-info hr {\n    border-top-color: #abdde5; }\n  .alert-info .alert-link {\n    color: #062c33; }\n\n.alert-warning {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba; }\n  .alert-warning hr {\n    border-top-color: #ffe8a1; }\n  .alert-warning .alert-link {\n    color: #533f03; }\n\n.alert-danger {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb; }\n  .alert-danger hr {\n    border-top-color: #f1b0b7; }\n  .alert-danger .alert-link {\n    color: #491217; }\n\n.alert-light {\n  color: #818182;\n  background-color: #fefefe;\n  border-color: #fdfdfe; }\n  .alert-light hr {\n    border-top-color: #ececf6; }\n  .alert-light .alert-link {\n    color: #686868; }\n\n.alert-dark {\n  color: #1b1e21;\n  background-color: #d6d8d9;\n  border-color: #c6c8ca; }\n  .alert-dark hr {\n    border-top-color: #b9bbbe; }\n  .alert-dark .alert-link {\n    color: #040505; }\n\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0; }\n  to {\n    background-position: 0 0; } }\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0; }\n  to {\n    background-position: 0 0; } }\n\n.progress {\n  display: flex;\n  height: 1rem;\n  overflow: hidden;\n  font-size: 0.75rem;\n  background-color: #e9ecef;\n  border-radius: 0.25rem; }\n\n.progress-bar {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #007bff;\n  transition: width 0.6s ease; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .progress-bar {\n      transition: none; } }\n\n.progress-bar-striped {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 1rem 1rem; }\n\n.progress-bar-animated {\n  -webkit-animation: progress-bar-stripes 1s linear infinite;\n          animation: progress-bar-stripes 1s linear infinite; }\n\n.media {\n  display: flex;\n  align-items: flex-start; }\n\n.media-body {\n  flex: 1; }\n\n.list-group {\n  display: flex;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0; }\n\n.list-group-item-action {\n  width: 100%;\n  color: #495057;\n  text-align: inherit; }\n  .list-group-item-action:hover, .list-group-item-action:focus {\n    color: #495057;\n    text-decoration: none;\n    background-color: #f8f9fa; }\n  .list-group-item-action:active {\n    color: #212529;\n    background-color: #e9ecef; }\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125); }\n  .list-group-item:first-child {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem; }\n  .list-group-item:last-child {\n    margin-bottom: 0;\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem; }\n  .list-group-item:hover, .list-group-item:focus {\n    z-index: 1;\n    text-decoration: none; }\n  .list-group-item.disabled, .list-group-item:disabled {\n    color: #6c757d;\n    pointer-events: none;\n    background-color: #fff; }\n  .list-group-item.active {\n    z-index: 2;\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff; }\n\n.list-group-flush .list-group-item {\n  border-right: 0;\n  border-left: 0;\n  border-radius: 0; }\n  .list-group-flush .list-group-item:last-child {\n    margin-bottom: -1px; }\n\n.list-group-flush:first-child .list-group-item:first-child {\n  border-top: 0; }\n\n.list-group-flush:last-child .list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom: 0; }\n\n.list-group-item-primary {\n  color: #004085;\n  background-color: #b8daff; }\n  .list-group-item-primary.list-group-item-action:hover, .list-group-item-primary.list-group-item-action:focus {\n    color: #004085;\n    background-color: #9fcdff; }\n  .list-group-item-primary.list-group-item-action.active {\n    color: #fff;\n    background-color: #004085;\n    border-color: #004085; }\n\n.list-group-item-secondary {\n  color: #383d41;\n  background-color: #d6d8db; }\n  .list-group-item-secondary.list-group-item-action:hover, .list-group-item-secondary.list-group-item-action:focus {\n    color: #383d41;\n    background-color: #c8cbcf; }\n  .list-group-item-secondary.list-group-item-action.active {\n    color: #fff;\n    background-color: #383d41;\n    border-color: #383d41; }\n\n.list-group-item-success {\n  color: #155724;\n  background-color: #c3e6cb; }\n  .list-group-item-success.list-group-item-action:hover, .list-group-item-success.list-group-item-action:focus {\n    color: #155724;\n    background-color: #b1dfbb; }\n  .list-group-item-success.list-group-item-action.active {\n    color: #fff;\n    background-color: #155724;\n    border-color: #155724; }\n\n.list-group-item-info {\n  color: #0c5460;\n  background-color: #bee5eb; }\n  .list-group-item-info.list-group-item-action:hover, .list-group-item-info.list-group-item-action:focus {\n    color: #0c5460;\n    background-color: #abdde5; }\n  .list-group-item-info.list-group-item-action.active {\n    color: #fff;\n    background-color: #0c5460;\n    border-color: #0c5460; }\n\n.list-group-item-warning {\n  color: #856404;\n  background-color: #ffeeba; }\n  .list-group-item-warning.list-group-item-action:hover, .list-group-item-warning.list-group-item-action:focus {\n    color: #856404;\n    background-color: #ffe8a1; }\n  .list-group-item-warning.list-group-item-action.active {\n    color: #fff;\n    background-color: #856404;\n    border-color: #856404; }\n\n.list-group-item-danger {\n  color: #721c24;\n  background-color: #f5c6cb; }\n  .list-group-item-danger.list-group-item-action:hover, .list-group-item-danger.list-group-item-action:focus {\n    color: #721c24;\n    background-color: #f1b0b7; }\n  .list-group-item-danger.list-group-item-action.active {\n    color: #fff;\n    background-color: #721c24;\n    border-color: #721c24; }\n\n.list-group-item-light {\n  color: #818182;\n  background-color: #fdfdfe; }\n  .list-group-item-light.list-group-item-action:hover, .list-group-item-light.list-group-item-action:focus {\n    color: #818182;\n    background-color: #ececf6; }\n  .list-group-item-light.list-group-item-action.active {\n    color: #fff;\n    background-color: #818182;\n    border-color: #818182; }\n\n.list-group-item-dark {\n  color: #1b1e21;\n  background-color: #c6c8ca; }\n  .list-group-item-dark.list-group-item-action:hover, .list-group-item-dark.list-group-item-action:focus {\n    color: #1b1e21;\n    background-color: #b9bbbe; }\n  .list-group-item-dark.list-group-item-action.active {\n    color: #fff;\n    background-color: #1b1e21;\n    border-color: #1b1e21; }\n\n.close {\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: .5; }\n  .close:hover {\n    color: #000;\n    text-decoration: none; }\n  .close:not(:disabled):not(.disabled) {\n    cursor: pointer; }\n    .close:not(:disabled):not(.disabled):hover, .close:not(:disabled):not(.disabled):focus {\n      opacity: .75; }\n\nbutton.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none; }\n\na.close.disabled {\n  pointer-events: none; }\n\n.toast {\n  max-width: 350px;\n  overflow: hidden;\n  font-size: 0.875rem;\n  background-color: rgba(255, 255, 255, 0.85);\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  border-radius: 0.25rem;\n  box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.1);\n  -webkit-backdrop-filter: blur(10px);\n          backdrop-filter: blur(10px);\n  opacity: 0; }\n  .toast:not(:last-child) {\n    margin-bottom: 0.75rem; }\n  .toast.showing {\n    opacity: 1; }\n  .toast.show {\n    display: block;\n    opacity: 1; }\n  .toast.hide {\n    display: none; }\n\n.toast-header {\n  display: flex;\n  align-items: center;\n  padding: 0.25rem 0.75rem;\n  color: #6c757d;\n  background-color: rgba(255, 255, 255, 0.85);\n  background-clip: padding-box;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05); }\n\n.toast-body {\n  padding: 0.75rem; }\n\n.modal-open {\n  overflow: hidden; }\n  .modal-open .modal {\n    overflow-x: hidden;\n    overflow-y: auto; }\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  outline: 0; }\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 0.5rem;\n  pointer-events: none; }\n  .modal.fade .modal-dialog {\n    transition: -webkit-transform 0.3s ease-out;\n    transition: transform 0.3s ease-out;\n    transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n    -webkit-transform: translate(0, -50px);\n            transform: translate(0, -50px); }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .modal.fade .modal-dialog {\n        transition: none; } }\n  .modal.show .modal-dialog {\n    -webkit-transform: none;\n            transform: none; }\n\n.modal-dialog-centered {\n  display: flex;\n  align-items: center;\n  min-height: calc(100% - (0.5rem * 2)); }\n  .modal-dialog-centered::before {\n    display: block;\n    height: calc(100vh - (0.5rem * 2));\n    content: ""; }\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0; }\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1040;\n  width: 100vw;\n  height: 100vh;\n  background-color: #000; }\n  .modal-backdrop.fade {\n    opacity: 0; }\n  .modal-backdrop.show {\n    opacity: 0.5; }\n\n.modal-header {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 1rem 1rem;\n  border-bottom: 1px solid #e9ecef;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem; }\n  .modal-header .close {\n    padding: 1rem 1rem;\n    margin: -1rem -1rem -1rem auto; }\n\n.modal-title {\n  margin-bottom: 0;\n  line-height: 1.5; }\n\n.modal-body {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1rem; }\n\n.modal-footer {\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 1rem;\n  border-top: 1px solid #e9ecef;\n  border-bottom-right-radius: 0.3rem;\n  border-bottom-left-radius: 0.3rem; }\n  .modal-footer > :not(:first-child) {\n    margin-left: .25rem; }\n  .modal-footer > :not(:last-child) {\n    margin-right: .25rem; }\n\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll; }\n\n@media (min-width: 576px) {\n  .modal-dialog {\n    max-width: 500px;\n    margin: 1.75rem auto; }\n  .modal-dialog-centered {\n    min-height: calc(100% - (1.75rem * 2)); }\n    .modal-dialog-centered::before {\n      height: calc(100vh - (1.75rem * 2)); }\n  .modal-sm {\n    max-width: 300px; } }\n\n@media (min-width: 992px) {\n  .modal-lg,\n  .modal-xl {\n    max-width: 800px; } }\n\n@media (min-width: 1200px) {\n  .modal-xl {\n    max-width: 1140px; } }\n\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  opacity: 0; }\n  .tooltip.show {\n    opacity: 0.9; }\n  .tooltip .arrow {\n    position: absolute;\n    display: block;\n    width: 0.8rem;\n    height: 0.4rem; }\n    .tooltip .arrow::before {\n      position: absolute;\n      content: "";\n      border-color: transparent;\n      border-style: solid; }\n\n.bs-tooltip-top, .bs-tooltip-auto[x-placement^="top"] {\n  padding: 0.4rem 0; }\n  .bs-tooltip-top .arrow, .bs-tooltip-auto[x-placement^="top"] .arrow {\n    bottom: 0; }\n    .bs-tooltip-top .arrow::before, .bs-tooltip-auto[x-placement^="top"] .arrow::before {\n      top: 0;\n      border-width: 0.4rem 0.4rem 0;\n      border-top-color: #000; }\n\n.bs-tooltip-right, .bs-tooltip-auto[x-placement^="right"] {\n  padding: 0 0.4rem; }\n  .bs-tooltip-right .arrow, .bs-tooltip-auto[x-placement^="right"] .arrow {\n    left: 0;\n    width: 0.4rem;\n    height: 0.8rem; }\n    .bs-tooltip-right .arrow::before, .bs-tooltip-auto[x-placement^="right"] .arrow::before {\n      right: 0;\n      border-width: 0.4rem 0.4rem 0.4rem 0;\n      border-right-color: #000; }\n\n.bs-tooltip-bottom, .bs-tooltip-auto[x-placement^="bottom"] {\n  padding: 0.4rem 0; }\n  .bs-tooltip-bottom .arrow, .bs-tooltip-auto[x-placement^="bottom"] .arrow {\n    top: 0; }\n    .bs-tooltip-bottom .arrow::before, .bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\n      bottom: 0;\n      border-width: 0 0.4rem 0.4rem;\n      border-bottom-color: #000; }\n\n.bs-tooltip-left, .bs-tooltip-auto[x-placement^="left"] {\n  padding: 0 0.4rem; }\n  .bs-tooltip-left .arrow, .bs-tooltip-auto[x-placement^="left"] .arrow {\n    right: 0;\n    width: 0.4rem;\n    height: 0.8rem; }\n    .bs-tooltip-left .arrow::before, .bs-tooltip-auto[x-placement^="left"] .arrow::before {\n      left: 0;\n      border-width: 0.4rem 0 0.4rem 0.4rem;\n      border-left-color: #000; }\n\n.tooltip-inner {\n  max-width: 200px;\n  padding: 0.25rem 0.5rem;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 0.25rem; }\n\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: block;\n  max-width: 276px;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem; }\n  .popover .arrow {\n    position: absolute;\n    display: block;\n    width: 1rem;\n    height: 0.5rem;\n    margin: 0 0.3rem; }\n    .popover .arrow::before, .popover .arrow::after {\n      position: absolute;\n      display: block;\n      content: "";\n      border-color: transparent;\n      border-style: solid; }\n\n.bs-popover-top, .bs-popover-auto[x-placement^="top"] {\n  margin-bottom: 0.5rem; }\n  .bs-popover-top .arrow, .bs-popover-auto[x-placement^="top"] .arrow {\n    bottom: calc((0.5rem + 1px) * -1); }\n  .bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before,\n  .bs-popover-top .arrow::after,\n  .bs-popover-auto[x-placement^="top"] .arrow::after {\n    border-width: 0.5rem 0.5rem 0; }\n  .bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before {\n    bottom: 0;\n    border-top-color: rgba(0, 0, 0, 0.25); }\n  \n  .bs-popover-top .arrow::after,\n  .bs-popover-auto[x-placement^="top"] .arrow::after {\n    bottom: 1px;\n    border-top-color: #fff; }\n\n.bs-popover-right, .bs-popover-auto[x-placement^="right"] {\n  margin-left: 0.5rem; }\n  .bs-popover-right .arrow, .bs-popover-auto[x-placement^="right"] .arrow {\n    left: calc((0.5rem + 1px) * -1);\n    width: 0.5rem;\n    height: 1rem;\n    margin: 0.3rem 0; }\n  .bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before,\n  .bs-popover-right .arrow::after,\n  .bs-popover-auto[x-placement^="right"] .arrow::after {\n    border-width: 0.5rem 0.5rem 0.5rem 0; }\n  .bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before {\n    left: 0;\n    border-right-color: rgba(0, 0, 0, 0.25); }\n  \n  .bs-popover-right .arrow::after,\n  .bs-popover-auto[x-placement^="right"] .arrow::after {\n    left: 1px;\n    border-right-color: #fff; }\n\n.bs-popover-bottom, .bs-popover-auto[x-placement^="bottom"] {\n  margin-top: 0.5rem; }\n  .bs-popover-bottom .arrow, .bs-popover-auto[x-placement^="bottom"] .arrow {\n    top: calc((0.5rem + 1px) * -1); }\n  .bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before,\n  .bs-popover-bottom .arrow::after,\n  .bs-popover-auto[x-placement^="bottom"] .arrow::after {\n    border-width: 0 0.5rem 0.5rem 0.5rem; }\n  .bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before {\n    top: 0;\n    border-bottom-color: rgba(0, 0, 0, 0.25); }\n  \n  .bs-popover-bottom .arrow::after,\n  .bs-popover-auto[x-placement^="bottom"] .arrow::after {\n    top: 1px;\n    border-bottom-color: #fff; }\n  .bs-popover-bottom .popover-header::before, .bs-popover-auto[x-placement^="bottom"] .popover-header::before {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    display: block;\n    width: 1rem;\n    margin-left: -0.5rem;\n    content: "";\n    border-bottom: 1px solid #f7f7f7; }\n\n.bs-popover-left, .bs-popover-auto[x-placement^="left"] {\n  margin-right: 0.5rem; }\n  .bs-popover-left .arrow, .bs-popover-auto[x-placement^="left"] .arrow {\n    right: calc((0.5rem + 1px) * -1);\n    width: 0.5rem;\n    height: 1rem;\n    margin: 0.3rem 0; }\n  .bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before,\n  .bs-popover-left .arrow::after,\n  .bs-popover-auto[x-placement^="left"] .arrow::after {\n    border-width: 0.5rem 0 0.5rem 0.5rem; }\n  .bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before {\n    right: 0;\n    border-left-color: rgba(0, 0, 0, 0.25); }\n  \n  .bs-popover-left .arrow::after,\n  .bs-popover-auto[x-placement^="left"] .arrow::after {\n    right: 1px;\n    border-left-color: #fff; }\n\n.popover-header {\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  color: inherit;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px); }\n  .popover-header:empty {\n    display: none; }\n\n.popover-body {\n  padding: 0.5rem 0.75rem;\n  color: #212529; }\n\n.carousel {\n  position: relative; }\n\n.carousel.pointer-event {\n  touch-action: pan-y; }\n\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden; }\n  .carousel-inner::after {\n    display: block;\n    clear: both;\n    content: ""; }\n\n.carousel-item {\n  position: relative;\n  display: none;\n  float: left;\n  width: 100%;\n  margin-right: -100%;\n  -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n  transition: -webkit-transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out;\n  transition: transform 0.6s ease-in-out, -webkit-transform 0.6s ease-in-out; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .carousel-item {\n      transition: none; } }\n\n.carousel-item.active,\n.carousel-item-next,\n.carousel-item-prev {\n  display: block; }\n\n.carousel-item-next:not(.carousel-item-left),\n.active.carousel-item-right {\n  -webkit-transform: translateX(100%);\n          transform: translateX(100%); }\n\n.carousel-item-prev:not(.carousel-item-right),\n.active.carousel-item-left {\n  -webkit-transform: translateX(-100%);\n          transform: translateX(-100%); }\n\n.carousel-fade .carousel-item {\n  opacity: 0;\n  transition-property: opacity;\n  -webkit-transform: none;\n          transform: none; }\n\n.carousel-fade .carousel-item.active,\n.carousel-fade .carousel-item-next.carousel-item-left,\n.carousel-fade .carousel-item-prev.carousel-item-right {\n  z-index: 1;\n  opacity: 1; }\n\n.carousel-fade .active.carousel-item-left,\n.carousel-fade .active.carousel-item-right {\n  z-index: 0;\n  opacity: 0;\n  transition: 0s 0.6s opacity; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .carousel-fade .active.carousel-item-left,\n    .carousel-fade .active.carousel-item-right {\n      transition: none; } }\n\n.carousel-control-prev,\n.carousel-control-next {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 15%;\n  color: #fff;\n  text-align: center;\n  opacity: 0.5;\n  transition: opacity 0.15s ease; }\n  @media screen and (prefers-reduced-motion: reduce) {\n    .carousel-control-prev,\n    .carousel-control-next {\n      transition: none; } }\n  .carousel-control-prev:hover, .carousel-control-prev:focus,\n  .carousel-control-next:hover,\n  .carousel-control-next:focus {\n    color: #fff;\n    text-decoration: none;\n    outline: 0;\n    opacity: 0.9; }\n\n.carousel-control-prev {\n  left: 0; }\n\n.carousel-control-next {\n  right: 0; }\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  background: transparent no-repeat center center;\n  background-size: 100% 100%; }\n\n.carousel-control-prev-icon {\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3e%3cpath d=\'M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\'/%3e%3c/svg%3e"); }\n\n.carousel-control-next-icon {\n  background-image: url("data:image/svg+xml,%3csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3e%3cpath d=\'M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\'/%3e%3c/svg%3e"); }\n\n.carousel-indicators {\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 15;\n  display: flex;\n  justify-content: center;\n  padding-left: 0;\n  margin-right: 15%;\n  margin-left: 15%;\n  list-style: none; }\n  .carousel-indicators li {\n    box-sizing: content-box;\n    flex: 0 1 auto;\n    width: 30px;\n    height: 3px;\n    margin-right: 3px;\n    margin-left: 3px;\n    text-indent: -999px;\n    cursor: pointer;\n    background-color: #fff;\n    background-clip: padding-box;\n    border-top: 10px solid transparent;\n    border-bottom: 10px solid transparent;\n    opacity: .5;\n    transition: opacity 0.6s ease; }\n    @media screen and (prefers-reduced-motion: reduce) {\n      .carousel-indicators li {\n        transition: none; } }\n  .carousel-indicators .active {\n    opacity: 1; }\n\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center; }\n\n@-webkit-keyframes spinner-border {\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes spinner-border {\n  to {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.spinner-border {\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  -webkit-animation: spinner-border .75s linear infinite;\n          animation: spinner-border .75s linear infinite; }\n\n.spinner-border-sm {\n  width: 1rem;\n  height: 1rem;\n  border-width: 0.2em; }\n\n@-webkit-keyframes spinner-grow {\n  0% {\n    -webkit-transform: scale(0);\n            transform: scale(0); }\n  50% {\n    opacity: 1; } }\n\n@keyframes spinner-grow {\n  0% {\n    -webkit-transform: scale(0);\n            transform: scale(0); }\n  50% {\n    opacity: 1; } }\n\n.spinner-grow {\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  background-color: currentColor;\n  border-radius: 50%;\n  opacity: 0;\n  -webkit-animation: spinner-grow .75s linear infinite;\n          animation: spinner-grow .75s linear infinite; }\n\n.spinner-grow-sm {\n  width: 1rem;\n  height: 1rem; }\n\n.align-baseline {\n  vertical-align: baseline !important; }\n\n.align-top {\n  vertical-align: top !important; }\n\n.align-middle {\n  vertical-align: middle !important; }\n\n.align-bottom {\n  vertical-align: bottom !important; }\n\n.align-text-bottom {\n  vertical-align: text-bottom !important; }\n\n.align-text-top {\n  vertical-align: text-top !important; }\n\n.bg-primary {\n  background-color: #007bff !important; }\n\na.bg-primary:hover, a.bg-primary:focus,\nbutton.bg-primary:hover,\nbutton.bg-primary:focus {\n  background-color: #0062cc !important; }\n\n.bg-secondary {\n  background-color: #6c757d !important; }\n\na.bg-secondary:hover, a.bg-secondary:focus,\nbutton.bg-secondary:hover,\nbutton.bg-secondary:focus {\n  background-color: #545b62 !important; }\n\n.bg-success {\n  background-color: #28a745 !important; }\n\na.bg-success:hover, a.bg-success:focus,\nbutton.bg-success:hover,\nbutton.bg-success:focus {\n  background-color: #1e7e34 !important; }\n\n.bg-info {\n  background-color: #17a2b8 !important; }\n\na.bg-info:hover, a.bg-info:focus,\nbutton.bg-info:hover,\nbutton.bg-info:focus {\n  background-color: #117a8b !important; }\n\n.bg-warning {\n  background-color: #ffc107 !important; }\n\na.bg-warning:hover, a.bg-warning:focus,\nbutton.bg-warning:hover,\nbutton.bg-warning:focus {\n  background-color: #d39e00 !important; }\n\n.bg-danger {\n  background-color: #dc3545 !important; }\n\na.bg-danger:hover, a.bg-danger:focus,\nbutton.bg-danger:hover,\nbutton.bg-danger:focus {\n  background-color: #bd2130 !important; }\n\n.bg-light {\n  background-color: #f8f9fa !important; }\n\na.bg-light:hover, a.bg-light:focus,\nbutton.bg-light:hover,\nbutton.bg-light:focus {\n  background-color: #dae0e5 !important; }\n\n.bg-dark {\n  background-color: #343a40 !important; }\n\na.bg-dark:hover, a.bg-dark:focus,\nbutton.bg-dark:hover,\nbutton.bg-dark:focus {\n  background-color: #1d2124 !important; }\n\n.bg-white {\n  background-color: #fff !important; }\n\n.bg-transparent {\n  background-color: transparent !important; }\n\n.border {\n  border: 1px solid #dee2e6 !important; }\n\n.border-top {\n  border-top: 1px solid #dee2e6 !important; }\n\n.border-right {\n  border-right: 1px solid #dee2e6 !important; }\n\n.border-bottom {\n  border-bottom: 1px solid #dee2e6 !important; }\n\n.border-left {\n  border-left: 1px solid #dee2e6 !important; }\n\n.border-0 {\n  border: 0 !important; }\n\n.border-top-0 {\n  border-top: 0 !important; }\n\n.border-right-0 {\n  border-right: 0 !important; }\n\n.border-bottom-0 {\n  border-bottom: 0 !important; }\n\n.border-left-0 {\n  border-left: 0 !important; }\n\n.border-primary {\n  border-color: #007bff !important; }\n\n.border-secondary {\n  border-color: #6c757d !important; }\n\n.border-success {\n  border-color: #28a745 !important; }\n\n.border-info {\n  border-color: #17a2b8 !important; }\n\n.border-warning {\n  border-color: #ffc107 !important; }\n\n.border-danger {\n  border-color: #dc3545 !important; }\n\n.border-light {\n  border-color: #f8f9fa !important; }\n\n.border-dark {\n  border-color: #343a40 !important; }\n\n.border-white {\n  border-color: #fff !important; }\n\n.rounded {\n  border-radius: 0.25rem !important; }\n\n.rounded-top {\n  border-top-left-radius: 0.25rem !important;\n  border-top-right-radius: 0.25rem !important; }\n\n.rounded-right {\n  border-top-right-radius: 0.25rem !important;\n  border-bottom-right-radius: 0.25rem !important; }\n\n.rounded-bottom {\n  border-bottom-right-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important; }\n\n.rounded-left {\n  border-top-left-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important; }\n\n.rounded-circle {\n  border-radius: 50% !important; }\n\n.rounded-pill {\n  border-radius: 50rem !important; }\n\n.rounded-0 {\n  border-radius: 0 !important; }\n\n.clearfix::after {\n  display: block;\n  clear: both;\n  content: ""; }\n\n.d-none {\n  display: none !important; }\n\n.d-inline {\n  display: inline !important; }\n\n.d-inline-block {\n  display: inline-block !important; }\n\n.d-block {\n  display: block !important; }\n\n.d-table {\n  display: table !important; }\n\n.d-table-row {\n  display: table-row !important; }\n\n.d-table-cell {\n  display: table-cell !important; }\n\n.d-flex {\n  display: flex !important; }\n\n.d-inline-flex {\n  display: inline-flex !important; }\n\n@media (min-width: 576px) {\n  .d-sm-none {\n    display: none !important; }\n  .d-sm-inline {\n    display: inline !important; }\n  .d-sm-inline-block {\n    display: inline-block !important; }\n  .d-sm-block {\n    display: block !important; }\n  .d-sm-table {\n    display: table !important; }\n  .d-sm-table-row {\n    display: table-row !important; }\n  .d-sm-table-cell {\n    display: table-cell !important; }\n  .d-sm-flex {\n    display: flex !important; }\n  .d-sm-inline-flex {\n    display: inline-flex !important; } }\n\n@media (min-width: 768px) {\n  .d-md-none {\n    display: none !important; }\n  .d-md-inline {\n    display: inline !important; }\n  .d-md-inline-block {\n    display: inline-block !important; }\n  .d-md-block {\n    display: block !important; }\n  .d-md-table {\n    display: table !important; }\n  .d-md-table-row {\n    display: table-row !important; }\n  .d-md-table-cell {\n    display: table-cell !important; }\n  .d-md-flex {\n    display: flex !important; }\n  .d-md-inline-flex {\n    display: inline-flex !important; } }\n\n@media (min-width: 992px) {\n  .d-lg-none {\n    display: none !important; }\n  .d-lg-inline {\n    display: inline !important; }\n  .d-lg-inline-block {\n    display: inline-block !important; }\n  .d-lg-block {\n    display: block !important; }\n  .d-lg-table {\n    display: table !important; }\n  .d-lg-table-row {\n    display: table-row !important; }\n  .d-lg-table-cell {\n    display: table-cell !important; }\n  .d-lg-flex {\n    display: flex !important; }\n  .d-lg-inline-flex {\n    display: inline-flex !important; } }\n\n@media (min-width: 1200px) {\n  .d-xl-none {\n    display: none !important; }\n  .d-xl-inline {\n    display: inline !important; }\n  .d-xl-inline-block {\n    display: inline-block !important; }\n  .d-xl-block {\n    display: block !important; }\n  .d-xl-table {\n    display: table !important; }\n  .d-xl-table-row {\n    display: table-row !important; }\n  .d-xl-table-cell {\n    display: table-cell !important; }\n  .d-xl-flex {\n    display: flex !important; }\n  .d-xl-inline-flex {\n    display: inline-flex !important; } }\n\n@media print {\n  .d-print-none {\n    display: none !important; }\n  .d-print-inline {\n    display: inline !important; }\n  .d-print-inline-block {\n    display: inline-block !important; }\n  .d-print-block {\n    display: block !important; }\n  .d-print-table {\n    display: table !important; }\n  .d-print-table-row {\n    display: table-row !important; }\n  .d-print-table-cell {\n    display: table-cell !important; }\n  .d-print-flex {\n    display: flex !important; }\n  .d-print-inline-flex {\n    display: inline-flex !important; } }\n\n.embed-responsive {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: 0;\n  overflow: hidden; }\n  .embed-responsive::before {\n    display: block;\n    content: ""; }\n  .embed-responsive .embed-responsive-item,\n  .embed-responsive iframe,\n  .embed-responsive embed,\n  .embed-responsive object,\n  .embed-responsive video {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 0; }\n\n.embed-responsive-21by9::before {\n  padding-top: 42.85714%; }\n\n.embed-responsive-16by9::before {\n  padding-top: 56.25%; }\n\n.embed-responsive-3by4::before {\n  padding-top: 133.33333%; }\n\n.embed-responsive-1by1::before {\n  padding-top: 100%; }\n\n.flex-row {\n  flex-direction: row !important; }\n\n.flex-column {\n  flex-direction: column !important; }\n\n.flex-row-reverse {\n  flex-direction: row-reverse !important; }\n\n.flex-column-reverse {\n  flex-direction: column-reverse !important; }\n\n.flex-wrap {\n  flex-wrap: wrap !important; }\n\n.flex-nowrap {\n  flex-wrap: nowrap !important; }\n\n.flex-wrap-reverse {\n  flex-wrap: wrap-reverse !important; }\n\n.flex-fill {\n  flex: 1 1 auto !important; }\n\n.flex-grow-0 {\n  flex-grow: 0 !important; }\n\n.flex-grow-1 {\n  flex-grow: 1 !important; }\n\n.flex-shrink-0 {\n  flex-shrink: 0 !important; }\n\n.flex-shrink-1 {\n  flex-shrink: 1 !important; }\n\n.justify-content-start {\n  justify-content: flex-start !important; }\n\n.justify-content-end {\n  justify-content: flex-end !important; }\n\n.justify-content-center {\n  justify-content: center !important; }\n\n.justify-content-between {\n  justify-content: space-between !important; }\n\n.justify-content-around {\n  justify-content: space-around !important; }\n\n.align-items-start {\n  align-items: flex-start !important; }\n\n.align-items-end {\n  align-items: flex-end !important; }\n\n.align-items-center {\n  align-items: center !important; }\n\n.align-items-baseline {\n  align-items: baseline !important; }\n\n.align-items-stretch {\n  align-items: stretch !important; }\n\n.align-content-start {\n  align-content: flex-start !important; }\n\n.align-content-end {\n  align-content: flex-end !important; }\n\n.align-content-center {\n  align-content: center !important; }\n\n.align-content-between {\n  align-content: space-between !important; }\n\n.align-content-around {\n  align-content: space-around !important; }\n\n.align-content-stretch {\n  align-content: stretch !important; }\n\n.align-self-auto {\n  align-self: auto !important; }\n\n.align-self-start {\n  align-self: flex-start !important; }\n\n.align-self-end {\n  align-self: flex-end !important; }\n\n.align-self-center {\n  align-self: center !important; }\n\n.align-self-baseline {\n  align-self: baseline !important; }\n\n.align-self-stretch {\n  align-self: stretch !important; }\n\n@media (min-width: 576px) {\n  .flex-sm-row {\n    flex-direction: row !important; }\n  .flex-sm-column {\n    flex-direction: column !important; }\n  .flex-sm-row-reverse {\n    flex-direction: row-reverse !important; }\n  .flex-sm-column-reverse {\n    flex-direction: column-reverse !important; }\n  .flex-sm-wrap {\n    flex-wrap: wrap !important; }\n  .flex-sm-nowrap {\n    flex-wrap: nowrap !important; }\n  .flex-sm-wrap-reverse {\n    flex-wrap: wrap-reverse !important; }\n  .flex-sm-fill {\n    flex: 1 1 auto !important; }\n  .flex-sm-grow-0 {\n    flex-grow: 0 !important; }\n  .flex-sm-grow-1 {\n    flex-grow: 1 !important; }\n  .flex-sm-shrink-0 {\n    flex-shrink: 0 !important; }\n  .flex-sm-shrink-1 {\n    flex-shrink: 1 !important; }\n  .justify-content-sm-start {\n    justify-content: flex-start !important; }\n  .justify-content-sm-end {\n    justify-content: flex-end !important; }\n  .justify-content-sm-center {\n    justify-content: center !important; }\n  .justify-content-sm-between {\n    justify-content: space-between !important; }\n  .justify-content-sm-around {\n    justify-content: space-around !important; }\n  .align-items-sm-start {\n    align-items: flex-start !important; }\n  .align-items-sm-end {\n    align-items: flex-end !important; }\n  .align-items-sm-center {\n    align-items: center !important; }\n  .align-items-sm-baseline {\n    align-items: baseline !important; }\n  .align-items-sm-stretch {\n    align-items: stretch !important; }\n  .align-content-sm-start {\n    align-content: flex-start !important; }\n  .align-content-sm-end {\n    align-content: flex-end !important; }\n  .align-content-sm-center {\n    align-content: center !important; }\n  .align-content-sm-between {\n    align-content: space-between !important; }\n  .align-content-sm-around {\n    align-content: space-around !important; }\n  .align-content-sm-stretch {\n    align-content: stretch !important; }\n  .align-self-sm-auto {\n    align-self: auto !important; }\n  .align-self-sm-start {\n    align-self: flex-start !important; }\n  .align-self-sm-end {\n    align-self: flex-end !important; }\n  .align-self-sm-center {\n    align-self: center !important; }\n  .align-self-sm-baseline {\n    align-self: baseline !important; }\n  .align-self-sm-stretch {\n    align-self: stretch !important; } }\n\n@media (min-width: 768px) {\n  .flex-md-row {\n    flex-direction: row !important; }\n  .flex-md-column {\n    flex-direction: column !important; }\n  .flex-md-row-reverse {\n    flex-direction: row-reverse !important; }\n  .flex-md-column-reverse {\n    flex-direction: column-reverse !important; }\n  .flex-md-wrap {\n    flex-wrap: wrap !important; }\n  .flex-md-nowrap {\n    flex-wrap: nowrap !important; }\n  .flex-md-wrap-reverse {\n    flex-wrap: wrap-reverse !important; }\n  .flex-md-fill {\n    flex: 1 1 auto !important; }\n  .flex-md-grow-0 {\n    flex-grow: 0 !important; }\n  .flex-md-grow-1 {\n    flex-grow: 1 !important; }\n  .flex-md-shrink-0 {\n    flex-shrink: 0 !important; }\n  .flex-md-shrink-1 {\n    flex-shrink: 1 !important; }\n  .justify-content-md-start {\n    justify-content: flex-start !important; }\n  .justify-content-md-end {\n    justify-content: flex-end !important; }\n  .justify-content-md-center {\n    justify-content: center !important; }\n  .justify-content-md-between {\n    justify-content: space-between !important; }\n  .justify-content-md-around {\n    justify-content: space-around !important; }\n  .align-items-md-start {\n    align-items: flex-start !important; }\n  .align-items-md-end {\n    align-items: flex-end !important; }\n  .align-items-md-center {\n    align-items: center !important; }\n  .align-items-md-baseline {\n    align-items: baseline !important; }\n  .align-items-md-stretch {\n    align-items: stretch !important; }\n  .align-content-md-start {\n    align-content: flex-start !important; }\n  .align-content-md-end {\n    align-content: flex-end !important; }\n  .align-content-md-center {\n    align-content: center !important; }\n  .align-content-md-between {\n    align-content: space-between !important; }\n  .align-content-md-around {\n    align-content: space-around !important; }\n  .align-content-md-stretch {\n    align-content: stretch !important; }\n  .align-self-md-auto {\n    align-self: auto !important; }\n  .align-self-md-start {\n    align-self: flex-start !important; }\n  .align-self-md-end {\n    align-self: flex-end !important; }\n  .align-self-md-center {\n    align-self: center !important; }\n  .align-self-md-baseline {\n    align-self: baseline !important; }\n  .align-self-md-stretch {\n    align-self: stretch !important; } }\n\n@media (min-width: 992px) {\n  .flex-lg-row {\n    flex-direction: row !important; }\n  .flex-lg-column {\n    flex-direction: column !important; }\n  .flex-lg-row-reverse {\n    flex-direction: row-reverse !important; }\n  .flex-lg-column-reverse {\n    flex-direction: column-reverse !important; }\n  .flex-lg-wrap {\n    flex-wrap: wrap !important; }\n  .flex-lg-nowrap {\n    flex-wrap: nowrap !important; }\n  .flex-lg-wrap-reverse {\n    flex-wrap: wrap-reverse !important; }\n  .flex-lg-fill {\n    flex: 1 1 auto !important; }\n  .flex-lg-grow-0 {\n    flex-grow: 0 !important; }\n  .flex-lg-grow-1 {\n    flex-grow: 1 !important; }\n  .flex-lg-shrink-0 {\n    flex-shrink: 0 !important; }\n  .flex-lg-shrink-1 {\n    flex-shrink: 1 !important; }\n  .justify-content-lg-start {\n    justify-content: flex-start !important; }\n  .justify-content-lg-end {\n    justify-content: flex-end !important; }\n  .justify-content-lg-center {\n    justify-content: center !important; }\n  .justify-content-lg-between {\n    justify-content: space-between !important; }\n  .justify-content-lg-around {\n    justify-content: space-around !important; }\n  .align-items-lg-start {\n    align-items: flex-start !important; }\n  .align-items-lg-end {\n    align-items: flex-end !important; }\n  .align-items-lg-center {\n    align-items: center !important; }\n  .align-items-lg-baseline {\n    align-items: baseline !important; }\n  .align-items-lg-stretch {\n    align-items: stretch !important; }\n  .align-content-lg-start {\n    align-content: flex-start !important; }\n  .align-content-lg-end {\n    align-content: flex-end !important; }\n  .align-content-lg-center {\n    align-content: center !important; }\n  .align-content-lg-between {\n    align-content: space-between !important; }\n  .align-content-lg-around {\n    align-content: space-around !important; }\n  .align-content-lg-stretch {\n    align-content: stretch !important; }\n  .align-self-lg-auto {\n    align-self: auto !important; }\n  .align-self-lg-start {\n    align-self: flex-start !important; }\n  .align-self-lg-end {\n    align-self: flex-end !important; }\n  .align-self-lg-center {\n    align-self: center !important; }\n  .align-self-lg-baseline {\n    align-self: baseline !important; }\n  .align-self-lg-stretch {\n    align-self: stretch !important; } }\n\n@media (min-width: 1200px) {\n  .flex-xl-row {\n    flex-direction: row !important; }\n  .flex-xl-column {\n    flex-direction: column !important; }\n  .flex-xl-row-reverse {\n    flex-direction: row-reverse !important; }\n  .flex-xl-column-reverse {\n    flex-direction: column-reverse !important; }\n  .flex-xl-wrap {\n    flex-wrap: wrap !important; }\n  .flex-xl-nowrap {\n    flex-wrap: nowrap !important; }\n  .flex-xl-wrap-reverse {\n    flex-wrap: wrap-reverse !important; }\n  .flex-xl-fill {\n    flex: 1 1 auto !important; }\n  .flex-xl-grow-0 {\n    flex-grow: 0 !important; }\n  .flex-xl-grow-1 {\n    flex-grow: 1 !important; }\n  .flex-xl-shrink-0 {\n    flex-shrink: 0 !important; }\n  .flex-xl-shrink-1 {\n    flex-shrink: 1 !important; }\n  .justify-content-xl-start {\n    justify-content: flex-start !important; }\n  .justify-content-xl-end {\n    justify-content: flex-end !important; }\n  .justify-content-xl-center {\n    justify-content: center !important; }\n  .justify-content-xl-between {\n    justify-content: space-between !important; }\n  .justify-content-xl-around {\n    justify-content: space-around !important; }\n  .align-items-xl-start {\n    align-items: flex-start !important; }\n  .align-items-xl-end {\n    align-items: flex-end !important; }\n  .align-items-xl-center {\n    align-items: center !important; }\n  .align-items-xl-baseline {\n    align-items: baseline !important; }\n  .align-items-xl-stretch {\n    align-items: stretch !important; }\n  .align-content-xl-start {\n    align-content: flex-start !important; }\n  .align-content-xl-end {\n    align-content: flex-end !important; }\n  .align-content-xl-center {\n    align-content: center !important; }\n  .align-content-xl-between {\n    align-content: space-between !important; }\n  .align-content-xl-around {\n    align-content: space-around !important; }\n  .align-content-xl-stretch {\n    align-content: stretch !important; }\n  .align-self-xl-auto {\n    align-self: auto !important; }\n  .align-self-xl-start {\n    align-self: flex-start !important; }\n  .align-self-xl-end {\n    align-self: flex-end !important; }\n  .align-self-xl-center {\n    align-self: center !important; }\n  .align-self-xl-baseline {\n    align-self: baseline !important; }\n  .align-self-xl-stretch {\n    align-self: stretch !important; } }\n\n.float-left {\n  float: left !important; }\n\n.float-right {\n  float: right !important; }\n\n.float-none {\n  float: none !important; }\n\n@media (min-width: 576px) {\n  .float-sm-left {\n    float: left !important; }\n  .float-sm-right {\n    float: right !important; }\n  .float-sm-none {\n    float: none !important; } }\n\n@media (min-width: 768px) {\n  .float-md-left {\n    float: left !important; }\n  .float-md-right {\n    float: right !important; }\n  .float-md-none {\n    float: none !important; } }\n\n@media (min-width: 992px) {\n  .float-lg-left {\n    float: left !important; }\n  .float-lg-right {\n    float: right !important; }\n  .float-lg-none {\n    float: none !important; } }\n\n@media (min-width: 1200px) {\n  .float-xl-left {\n    float: left !important; }\n  .float-xl-right {\n    float: right !important; }\n  .float-xl-none {\n    float: none !important; } }\n\n.overflow-auto {\n  overflow: auto !important; }\n\n.overflow-hidden {\n  overflow: hidden !important; }\n\n.position-static {\n  position: static !important; }\n\n.position-relative {\n  position: relative !important; }\n\n.position-absolute {\n  position: absolute !important; }\n\n.position-fixed {\n  position: fixed !important; }\n\n.position-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important; }\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1030; }\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1030; }\n\n@supports ((position: -webkit-sticky) or (position: sticky)) {\n  .sticky-top {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    z-index: 1020; } }\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n  white-space: normal; }\n\n.shadow-sm {\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important; }\n\n.shadow {\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important; }\n\n.shadow-lg {\n  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important; }\n\n.shadow-none {\n  box-shadow: none !important; }\n\n.w-25 {\n  width: 25% !important; }\n\n.w-50 {\n  width: 50% !important; }\n\n.w-75 {\n  width: 75% !important; }\n\n.w-100 {\n  width: 100% !important; }\n\n.w-auto {\n  width: auto !important; }\n\n.h-25 {\n  height: 25% !important; }\n\n.h-50 {\n  height: 50% !important; }\n\n.h-75 {\n  height: 75% !important; }\n\n.h-100 {\n  height: 100% !important; }\n\n.h-auto {\n  height: auto !important; }\n\n.mw-100 {\n  max-width: 100% !important; }\n\n.mh-100 {\n  max-height: 100% !important; }\n\n.min-vw-100 {\n  min-width: 100vw !important; }\n\n.min-vh-100 {\n  min-height: 100vh !important; }\n\n.vw-100 {\n  width: 100vw !important; }\n\n.vh-100 {\n  height: 100vh !important; }\n\n.m-0 {\n  margin: 0 !important; }\n\n.mt-0,\n.my-0 {\n  margin-top: 0 !important; }\n\n.mr-0,\n.mx-0 {\n  margin-right: 0 !important; }\n\n.mb-0,\n.my-0 {\n  margin-bottom: 0 !important; }\n\n.ml-0,\n.mx-0 {\n  margin-left: 0 !important; }\n\n.m-1 {\n  margin: 0.25rem !important; }\n\n.mt-1,\n.my-1 {\n  margin-top: 0.25rem !important; }\n\n.mr-1,\n.mx-1 {\n  margin-right: 0.25rem !important; }\n\n.mb-1,\n.my-1 {\n  margin-bottom: 0.25rem !important; }\n\n.ml-1,\n.mx-1 {\n  margin-left: 0.25rem !important; }\n\n.m-2 {\n  margin: 0.5rem !important; }\n\n.mt-2,\n.my-2 {\n  margin-top: 0.5rem !important; }\n\n.mr-2,\n.mx-2 {\n  margin-right: 0.5rem !important; }\n\n.mb-2,\n.my-2 {\n  margin-bottom: 0.5rem !important; }\n\n.ml-2,\n.mx-2 {\n  margin-left: 0.5rem !important; }\n\n.m-3 {\n  margin: 1rem !important; }\n\n.mt-3,\n.my-3 {\n  margin-top: 1rem !important; }\n\n.mr-3,\n.mx-3 {\n  margin-right: 1rem !important; }\n\n.mb-3,\n.my-3 {\n  margin-bottom: 1rem !important; }\n\n.ml-3,\n.mx-3 {\n  margin-left: 1rem !important; }\n\n.m-4 {\n  margin: 1.5rem !important; }\n\n.mt-4,\n.my-4 {\n  margin-top: 1.5rem !important; }\n\n.mr-4,\n.mx-4 {\n  margin-right: 1.5rem !important; }\n\n.mb-4,\n.my-4 {\n  margin-bottom: 1.5rem !important; }\n\n.ml-4,\n.mx-4 {\n  margin-left: 1.5rem !important; }\n\n.m-5 {\n  margin: 3rem !important; }\n\n.mt-5,\n.my-5 {\n  margin-top: 3rem !important; }\n\n.mr-5,\n.mx-5 {\n  margin-right: 3rem !important; }\n\n.mb-5,\n.my-5 {\n  margin-bottom: 3rem !important; }\n\n.ml-5,\n.mx-5 {\n  margin-left: 3rem !important; }\n\n.p-0 {\n  padding: 0 !important; }\n\n.pt-0,\n.py-0 {\n  padding-top: 0 !important; }\n\n.pr-0,\n.px-0 {\n  padding-right: 0 !important; }\n\n.pb-0,\n.py-0 {\n  padding-bottom: 0 !important; }\n\n.pl-0,\n.px-0 {\n  padding-left: 0 !important; }\n\n.p-1 {\n  padding: 0.25rem !important; }\n\n.pt-1,\n.py-1 {\n  padding-top: 0.25rem !important; }\n\n.pr-1,\n.px-1 {\n  padding-right: 0.25rem !important; }\n\n.pb-1,\n.py-1 {\n  padding-bottom: 0.25rem !important; }\n\n.pl-1,\n.px-1 {\n  padding-left: 0.25rem !important; }\n\n.p-2 {\n  padding: 0.5rem !important; }\n\n.pt-2,\n.py-2 {\n  padding-top: 0.5rem !important; }\n\n.pr-2,\n.px-2 {\n  padding-right: 0.5rem !important; }\n\n.pb-2,\n.py-2 {\n  padding-bottom: 0.5rem !important; }\n\n.pl-2,\n.px-2 {\n  padding-left: 0.5rem !important; }\n\n.p-3 {\n  padding: 1rem !important; }\n\n.pt-3,\n.py-3 {\n  padding-top: 1rem !important; }\n\n.pr-3,\n.px-3 {\n  padding-right: 1rem !important; }\n\n.pb-3,\n.py-3 {\n  padding-bottom: 1rem !important; }\n\n.pl-3,\n.px-3 {\n  padding-left: 1rem !important; }\n\n.p-4 {\n  padding: 1.5rem !important; }\n\n.pt-4,\n.py-4 {\n  padding-top: 1.5rem !important; }\n\n.pr-4,\n.px-4 {\n  padding-right: 1.5rem !important; }\n\n.pb-4,\n.py-4 {\n  padding-bottom: 1.5rem !important; }\n\n.pl-4,\n.px-4 {\n  padding-left: 1.5rem !important; }\n\n.p-5 {\n  padding: 3rem !important; }\n\n.pt-5,\n.py-5 {\n  padding-top: 3rem !important; }\n\n.pr-5,\n.px-5 {\n  padding-right: 3rem !important; }\n\n.pb-5,\n.py-5 {\n  padding-bottom: 3rem !important; }\n\n.pl-5,\n.px-5 {\n  padding-left: 3rem !important; }\n\n.m-n1 {\n  margin: -0.25rem !important; }\n\n.mt-n1,\n.my-n1 {\n  margin-top: -0.25rem !important; }\n\n.mr-n1,\n.mx-n1 {\n  margin-right: -0.25rem !important; }\n\n.mb-n1,\n.my-n1 {\n  margin-bottom: -0.25rem !important; }\n\n.ml-n1,\n.mx-n1 {\n  margin-left: -0.25rem !important; }\n\n.m-n2 {\n  margin: -0.5rem !important; }\n\n.mt-n2,\n.my-n2 {\n  margin-top: -0.5rem !important; }\n\n.mr-n2,\n.mx-n2 {\n  margin-right: -0.5rem !important; }\n\n.mb-n2,\n.my-n2 {\n  margin-bottom: -0.5rem !important; }\n\n.ml-n2,\n.mx-n2 {\n  margin-left: -0.5rem !important; }\n\n.m-n3 {\n  margin: -1rem !important; }\n\n.mt-n3,\n.my-n3 {\n  margin-top: -1rem !important; }\n\n.mr-n3,\n.mx-n3 {\n  margin-right: -1rem !important; }\n\n.mb-n3,\n.my-n3 {\n  margin-bottom: -1rem !important; }\n\n.ml-n3,\n.mx-n3 {\n  margin-left: -1rem !important; }\n\n.m-n4 {\n  margin: -1.5rem !important; }\n\n.mt-n4,\n.my-n4 {\n  margin-top: -1.5rem !important; }\n\n.mr-n4,\n.mx-n4 {\n  margin-right: -1.5rem !important; }\n\n.mb-n4,\n.my-n4 {\n  margin-bottom: -1.5rem !important; }\n\n.ml-n4,\n.mx-n4 {\n  margin-left: -1.5rem !important; }\n\n.m-n5 {\n  margin: -3rem !important; }\n\n.mt-n5,\n.my-n5 {\n  margin-top: -3rem !important; }\n\n.mr-n5,\n.mx-n5 {\n  margin-right: -3rem !important; }\n\n.mb-n5,\n.my-n5 {\n  margin-bottom: -3rem !important; }\n\n.ml-n5,\n.mx-n5 {\n  margin-left: -3rem !important; }\n\n.m-auto {\n  margin: auto !important; }\n\n.mt-auto,\n.my-auto {\n  margin-top: auto !important; }\n\n.mr-auto,\n.mx-auto {\n  margin-right: auto !important; }\n\n.mb-auto,\n.my-auto {\n  margin-bottom: auto !important; }\n\n.ml-auto,\n.mx-auto {\n  margin-left: auto !important; }\n\n@media (min-width: 576px) {\n  .m-sm-0 {\n    margin: 0 !important; }\n  .mt-sm-0,\n  .my-sm-0 {\n    margin-top: 0 !important; }\n  .mr-sm-0,\n  .mx-sm-0 {\n    margin-right: 0 !important; }\n  .mb-sm-0,\n  .my-sm-0 {\n    margin-bottom: 0 !important; }\n  .ml-sm-0,\n  .mx-sm-0 {\n    margin-left: 0 !important; }\n  .m-sm-1 {\n    margin: 0.25rem !important; }\n  .mt-sm-1,\n  .my-sm-1 {\n    margin-top: 0.25rem !important; }\n  .mr-sm-1,\n  .mx-sm-1 {\n    margin-right: 0.25rem !important; }\n  .mb-sm-1,\n  .my-sm-1 {\n    margin-bottom: 0.25rem !important; }\n  .ml-sm-1,\n  .mx-sm-1 {\n    margin-left: 0.25rem !important; }\n  .m-sm-2 {\n    margin: 0.5rem !important; }\n  .mt-sm-2,\n  .my-sm-2 {\n    margin-top: 0.5rem !important; }\n  .mr-sm-2,\n  .mx-sm-2 {\n    margin-right: 0.5rem !important; }\n  .mb-sm-2,\n  .my-sm-2 {\n    margin-bottom: 0.5rem !important; }\n  .ml-sm-2,\n  .mx-sm-2 {\n    margin-left: 0.5rem !important; }\n  .m-sm-3 {\n    margin: 1rem !important; }\n  .mt-sm-3,\n  .my-sm-3 {\n    margin-top: 1rem !important; }\n  .mr-sm-3,\n  .mx-sm-3 {\n    margin-right: 1rem !important; }\n  .mb-sm-3,\n  .my-sm-3 {\n    margin-bottom: 1rem !important; }\n  .ml-sm-3,\n  .mx-sm-3 {\n    margin-left: 1rem !important; }\n  .m-sm-4 {\n    margin: 1.5rem !important; }\n  .mt-sm-4,\n  .my-sm-4 {\n    margin-top: 1.5rem !important; }\n  .mr-sm-4,\n  .mx-sm-4 {\n    margin-right: 1.5rem !important; }\n  .mb-sm-4,\n  .my-sm-4 {\n    margin-bottom: 1.5rem !important; }\n  .ml-sm-4,\n  .mx-sm-4 {\n    margin-left: 1.5rem !important; }\n  .m-sm-5 {\n    margin: 3rem !important; }\n  .mt-sm-5,\n  .my-sm-5 {\n    margin-top: 3rem !important; }\n  .mr-sm-5,\n  .mx-sm-5 {\n    margin-right: 3rem !important; }\n  .mb-sm-5,\n  .my-sm-5 {\n    margin-bottom: 3rem !important; }\n  .ml-sm-5,\n  .mx-sm-5 {\n    margin-left: 3rem !important; }\n  .p-sm-0 {\n    padding: 0 !important; }\n  .pt-sm-0,\n  .py-sm-0 {\n    padding-top: 0 !important; }\n  .pr-sm-0,\n  .px-sm-0 {\n    padding-right: 0 !important; }\n  .pb-sm-0,\n  .py-sm-0 {\n    padding-bottom: 0 !important; }\n  .pl-sm-0,\n  .px-sm-0 {\n    padding-left: 0 !important; }\n  .p-sm-1 {\n    padding: 0.25rem !important; }\n  .pt-sm-1,\n  .py-sm-1 {\n    padding-top: 0.25rem !important; }\n  .pr-sm-1,\n  .px-sm-1 {\n    padding-right: 0.25rem !important; }\n  .pb-sm-1,\n  .py-sm-1 {\n    padding-bottom: 0.25rem !important; }\n  .pl-sm-1,\n  .px-sm-1 {\n    padding-left: 0.25rem !important; }\n  .p-sm-2 {\n    padding: 0.5rem !important; }\n  .pt-sm-2,\n  .py-sm-2 {\n    padding-top: 0.5rem !important; }\n  .pr-sm-2,\n  .px-sm-2 {\n    padding-right: 0.5rem !important; }\n  .pb-sm-2,\n  .py-sm-2 {\n    padding-bottom: 0.5rem !important; }\n  .pl-sm-2,\n  .px-sm-2 {\n    padding-left: 0.5rem !important; }\n  .p-sm-3 {\n    padding: 1rem !important; }\n  .pt-sm-3,\n  .py-sm-3 {\n    padding-top: 1rem !important; }\n  .pr-sm-3,\n  .px-sm-3 {\n    padding-right: 1rem !important; }\n  .pb-sm-3,\n  .py-sm-3 {\n    padding-bottom: 1rem !important; }\n  .pl-sm-3,\n  .px-sm-3 {\n    padding-left: 1rem !important; }\n  .p-sm-4 {\n    padding: 1.5rem !important; }\n  .pt-sm-4,\n  .py-sm-4 {\n    padding-top: 1.5rem !important; }\n  .pr-sm-4,\n  .px-sm-4 {\n    padding-right: 1.5rem !important; }\n  .pb-sm-4,\n  .py-sm-4 {\n    padding-bottom: 1.5rem !important; }\n  .pl-sm-4,\n  .px-sm-4 {\n    padding-left: 1.5rem !important; }\n  .p-sm-5 {\n    padding: 3rem !important; }\n  .pt-sm-5,\n  .py-sm-5 {\n    padding-top: 3rem !important; }\n  .pr-sm-5,\n  .px-sm-5 {\n    padding-right: 3rem !important; }\n  .pb-sm-5,\n  .py-sm-5 {\n    padding-bottom: 3rem !important; }\n  .pl-sm-5,\n  .px-sm-5 {\n    padding-left: 3rem !important; }\n  .m-sm-n1 {\n    margin: -0.25rem !important; }\n  .mt-sm-n1,\n  .my-sm-n1 {\n    margin-top: -0.25rem !important; }\n  .mr-sm-n1,\n  .mx-sm-n1 {\n    margin-right: -0.25rem !important; }\n  .mb-sm-n1,\n  .my-sm-n1 {\n    margin-bottom: -0.25rem !important; }\n  .ml-sm-n1,\n  .mx-sm-n1 {\n    margin-left: -0.25rem !important; }\n  .m-sm-n2 {\n    margin: -0.5rem !important; }\n  .mt-sm-n2,\n  .my-sm-n2 {\n    margin-top: -0.5rem !important; }\n  .mr-sm-n2,\n  .mx-sm-n2 {\n    margin-right: -0.5rem !important; }\n  .mb-sm-n2,\n  .my-sm-n2 {\n    margin-bottom: -0.5rem !important; }\n  .ml-sm-n2,\n  .mx-sm-n2 {\n    margin-left: -0.5rem !important; }\n  .m-sm-n3 {\n    margin: -1rem !important; }\n  .mt-sm-n3,\n  .my-sm-n3 {\n    margin-top: -1rem !important; }\n  .mr-sm-n3,\n  .mx-sm-n3 {\n    margin-right: -1rem !important; }\n  .mb-sm-n3,\n  .my-sm-n3 {\n    margin-bottom: -1rem !important; }\n  .ml-sm-n3,\n  .mx-sm-n3 {\n    margin-left: -1rem !important; }\n  .m-sm-n4 {\n    margin: -1.5rem !important; }\n  .mt-sm-n4,\n  .my-sm-n4 {\n    margin-top: -1.5rem !important; }\n  .mr-sm-n4,\n  .mx-sm-n4 {\n    margin-right: -1.5rem !important; }\n  .mb-sm-n4,\n  .my-sm-n4 {\n    margin-bottom: -1.5rem !important; }\n  .ml-sm-n4,\n  .mx-sm-n4 {\n    margin-left: -1.5rem !important; }\n  .m-sm-n5 {\n    margin: -3rem !important; }\n  .mt-sm-n5,\n  .my-sm-n5 {\n    margin-top: -3rem !important; }\n  .mr-sm-n5,\n  .mx-sm-n5 {\n    margin-right: -3rem !important; }\n  .mb-sm-n5,\n  .my-sm-n5 {\n    margin-bottom: -3rem !important; }\n  .ml-sm-n5,\n  .mx-sm-n5 {\n    margin-left: -3rem !important; }\n  .m-sm-auto {\n    margin: auto !important; }\n  .mt-sm-auto,\n  .my-sm-auto {\n    margin-top: auto !important; }\n  .mr-sm-auto,\n  .mx-sm-auto {\n    margin-right: auto !important; }\n  .mb-sm-auto,\n  .my-sm-auto {\n    margin-bottom: auto !important; }\n  .ml-sm-auto,\n  .mx-sm-auto {\n    margin-left: auto !important; } }\n\n@media (min-width: 768px) {\n  .m-md-0 {\n    margin: 0 !important; }\n  .mt-md-0,\n  .my-md-0 {\n    margin-top: 0 !important; }\n  .mr-md-0,\n  .mx-md-0 {\n    margin-right: 0 !important; }\n  .mb-md-0,\n  .my-md-0 {\n    margin-bottom: 0 !important; }\n  .ml-md-0,\n  .mx-md-0 {\n    margin-left: 0 !important; }\n  .m-md-1 {\n    margin: 0.25rem !important; }\n  .mt-md-1,\n  .my-md-1 {\n    margin-top: 0.25rem !important; }\n  .mr-md-1,\n  .mx-md-1 {\n    margin-right: 0.25rem !important; }\n  .mb-md-1,\n  .my-md-1 {\n    margin-bottom: 0.25rem !important; }\n  .ml-md-1,\n  .mx-md-1 {\n    margin-left: 0.25rem !important; }\n  .m-md-2 {\n    margin: 0.5rem !important; }\n  .mt-md-2,\n  .my-md-2 {\n    margin-top: 0.5rem !important; }\n  .mr-md-2,\n  .mx-md-2 {\n    margin-right: 0.5rem !important; }\n  .mb-md-2,\n  .my-md-2 {\n    margin-bottom: 0.5rem !important; }\n  .ml-md-2,\n  .mx-md-2 {\n    margin-left: 0.5rem !important; }\n  .m-md-3 {\n    margin: 1rem !important; }\n  .mt-md-3,\n  .my-md-3 {\n    margin-top: 1rem !important; }\n  .mr-md-3,\n  .mx-md-3 {\n    margin-right: 1rem !important; }\n  .mb-md-3,\n  .my-md-3 {\n    margin-bottom: 1rem !important; }\n  .ml-md-3,\n  .mx-md-3 {\n    margin-left: 1rem !important; }\n  .m-md-4 {\n    margin: 1.5rem !important; }\n  .mt-md-4,\n  .my-md-4 {\n    margin-top: 1.5rem !important; }\n  .mr-md-4,\n  .mx-md-4 {\n    margin-right: 1.5rem !important; }\n  .mb-md-4,\n  .my-md-4 {\n    margin-bottom: 1.5rem !important; }\n  .ml-md-4,\n  .mx-md-4 {\n    margin-left: 1.5rem !important; }\n  .m-md-5 {\n    margin: 3rem !important; }\n  .mt-md-5,\n  .my-md-5 {\n    margin-top: 3rem !important; }\n  .mr-md-5,\n  .mx-md-5 {\n    margin-right: 3rem !important; }\n  .mb-md-5,\n  .my-md-5 {\n    margin-bottom: 3rem !important; }\n  .ml-md-5,\n  .mx-md-5 {\n    margin-left: 3rem !important; }\n  .p-md-0 {\n    padding: 0 !important; }\n  .pt-md-0,\n  .py-md-0 {\n    padding-top: 0 !important; }\n  .pr-md-0,\n  .px-md-0 {\n    padding-right: 0 !important; }\n  .pb-md-0,\n  .py-md-0 {\n    padding-bottom: 0 !important; }\n  .pl-md-0,\n  .px-md-0 {\n    padding-left: 0 !important; }\n  .p-md-1 {\n    padding: 0.25rem !important; }\n  .pt-md-1,\n  .py-md-1 {\n    padding-top: 0.25rem !important; }\n  .pr-md-1,\n  .px-md-1 {\n    padding-right: 0.25rem !important; }\n  .pb-md-1,\n  .py-md-1 {\n    padding-bottom: 0.25rem !important; }\n  .pl-md-1,\n  .px-md-1 {\n    padding-left: 0.25rem !important; }\n  .p-md-2 {\n    padding: 0.5rem !important; }\n  .pt-md-2,\n  .py-md-2 {\n    padding-top: 0.5rem !important; }\n  .pr-md-2,\n  .px-md-2 {\n    padding-right: 0.5rem !important; }\n  .pb-md-2,\n  .py-md-2 {\n    padding-bottom: 0.5rem !important; }\n  .pl-md-2,\n  .px-md-2 {\n    padding-left: 0.5rem !important; }\n  .p-md-3 {\n    padding: 1rem !important; }\n  .pt-md-3,\n  .py-md-3 {\n    padding-top: 1rem !important; }\n  .pr-md-3,\n  .px-md-3 {\n    padding-right: 1rem !important; }\n  .pb-md-3,\n  .py-md-3 {\n    padding-bottom: 1rem !important; }\n  .pl-md-3,\n  .px-md-3 {\n    padding-left: 1rem !important; }\n  .p-md-4 {\n    padding: 1.5rem !important; }\n  .pt-md-4,\n  .py-md-4 {\n    padding-top: 1.5rem !important; }\n  .pr-md-4,\n  .px-md-4 {\n    padding-right: 1.5rem !important; }\n  .pb-md-4,\n  .py-md-4 {\n    padding-bottom: 1.5rem !important; }\n  .pl-md-4,\n  .px-md-4 {\n    padding-left: 1.5rem !important; }\n  .p-md-5 {\n    padding: 3rem !important; }\n  .pt-md-5,\n  .py-md-5 {\n    padding-top: 3rem !important; }\n  .pr-md-5,\n  .px-md-5 {\n    padding-right: 3rem !important; }\n  .pb-md-5,\n  .py-md-5 {\n    padding-bottom: 3rem !important; }\n  .pl-md-5,\n  .px-md-5 {\n    padding-left: 3rem !important; }\n  .m-md-n1 {\n    margin: -0.25rem !important; }\n  .mt-md-n1,\n  .my-md-n1 {\n    margin-top: -0.25rem !important; }\n  .mr-md-n1,\n  .mx-md-n1 {\n    margin-right: -0.25rem !important; }\n  .mb-md-n1,\n  .my-md-n1 {\n    margin-bottom: -0.25rem !important; }\n  .ml-md-n1,\n  .mx-md-n1 {\n    margin-left: -0.25rem !important; }\n  .m-md-n2 {\n    margin: -0.5rem !important; }\n  .mt-md-n2,\n  .my-md-n2 {\n    margin-top: -0.5rem !important; }\n  .mr-md-n2,\n  .mx-md-n2 {\n    margin-right: -0.5rem !important; }\n  .mb-md-n2,\n  .my-md-n2 {\n    margin-bottom: -0.5rem !important; }\n  .ml-md-n2,\n  .mx-md-n2 {\n    margin-left: -0.5rem !important; }\n  .m-md-n3 {\n    margin: -1rem !important; }\n  .mt-md-n3,\n  .my-md-n3 {\n    margin-top: -1rem !important; }\n  .mr-md-n3,\n  .mx-md-n3 {\n    margin-right: -1rem !important; }\n  .mb-md-n3,\n  .my-md-n3 {\n    margin-bottom: -1rem !important; }\n  .ml-md-n3,\n  .mx-md-n3 {\n    margin-left: -1rem !important; }\n  .m-md-n4 {\n    margin: -1.5rem !important; }\n  .mt-md-n4,\n  .my-md-n4 {\n    margin-top: -1.5rem !important; }\n  .mr-md-n4,\n  .mx-md-n4 {\n    margin-right: -1.5rem !important; }\n  .mb-md-n4,\n  .my-md-n4 {\n    margin-bottom: -1.5rem !important; }\n  .ml-md-n4,\n  .mx-md-n4 {\n    margin-left: -1.5rem !important; }\n  .m-md-n5 {\n    margin: -3rem !important; }\n  .mt-md-n5,\n  .my-md-n5 {\n    margin-top: -3rem !important; }\n  .mr-md-n5,\n  .mx-md-n5 {\n    margin-right: -3rem !important; }\n  .mb-md-n5,\n  .my-md-n5 {\n    margin-bottom: -3rem !important; }\n  .ml-md-n5,\n  .mx-md-n5 {\n    margin-left: -3rem !important; }\n  .m-md-auto {\n    margin: auto !important; }\n  .mt-md-auto,\n  .my-md-auto {\n    margin-top: auto !important; }\n  .mr-md-auto,\n  .mx-md-auto {\n    margin-right: auto !important; }\n  .mb-md-auto,\n  .my-md-auto {\n    margin-bottom: auto !important; }\n  .ml-md-auto,\n  .mx-md-auto {\n    margin-left: auto !important; } }\n\n@media (min-width: 992px) {\n  .m-lg-0 {\n    margin: 0 !important; }\n  .mt-lg-0,\n  .my-lg-0 {\n    margin-top: 0 !important; }\n  .mr-lg-0,\n  .mx-lg-0 {\n    margin-right: 0 !important; }\n  .mb-lg-0,\n  .my-lg-0 {\n    margin-bottom: 0 !important; }\n  .ml-lg-0,\n  .mx-lg-0 {\n    margin-left: 0 !important; }\n  .m-lg-1 {\n    margin: 0.25rem !important; }\n  .mt-lg-1,\n  .my-lg-1 {\n    margin-top: 0.25rem !important; }\n  .mr-lg-1,\n  .mx-lg-1 {\n    margin-right: 0.25rem !important; }\n  .mb-lg-1,\n  .my-lg-1 {\n    margin-bottom: 0.25rem !important; }\n  .ml-lg-1,\n  .mx-lg-1 {\n    margin-left: 0.25rem !important; }\n  .m-lg-2 {\n    margin: 0.5rem !important; }\n  .mt-lg-2,\n  .my-lg-2 {\n    margin-top: 0.5rem !important; }\n  .mr-lg-2,\n  .mx-lg-2 {\n    margin-right: 0.5rem !important; }\n  .mb-lg-2,\n  .my-lg-2 {\n    margin-bottom: 0.5rem !important; }\n  .ml-lg-2,\n  .mx-lg-2 {\n    margin-left: 0.5rem !important; }\n  .m-lg-3 {\n    margin: 1rem !important; }\n  .mt-lg-3,\n  .my-lg-3 {\n    margin-top: 1rem !important; }\n  .mr-lg-3,\n  .mx-lg-3 {\n    margin-right: 1rem !important; }\n  .mb-lg-3,\n  .my-lg-3 {\n    margin-bottom: 1rem !important; }\n  .ml-lg-3,\n  .mx-lg-3 {\n    margin-left: 1rem !important; }\n  .m-lg-4 {\n    margin: 1.5rem !important; }\n  .mt-lg-4,\n  .my-lg-4 {\n    margin-top: 1.5rem !important; }\n  .mr-lg-4,\n  .mx-lg-4 {\n    margin-right: 1.5rem !important; }\n  .mb-lg-4,\n  .my-lg-4 {\n    margin-bottom: 1.5rem !important; }\n  .ml-lg-4,\n  .mx-lg-4 {\n    margin-left: 1.5rem !important; }\n  .m-lg-5 {\n    margin: 3rem !important; }\n  .mt-lg-5,\n  .my-lg-5 {\n    margin-top: 3rem !important; }\n  .mr-lg-5,\n  .mx-lg-5 {\n    margin-right: 3rem !important; }\n  .mb-lg-5,\n  .my-lg-5 {\n    margin-bottom: 3rem !important; }\n  .ml-lg-5,\n  .mx-lg-5 {\n    margin-left: 3rem !important; }\n  .p-lg-0 {\n    padding: 0 !important; }\n  .pt-lg-0,\n  .py-lg-0 {\n    padding-top: 0 !important; }\n  .pr-lg-0,\n  .px-lg-0 {\n    padding-right: 0 !important; }\n  .pb-lg-0,\n  .py-lg-0 {\n    padding-bottom: 0 !important; }\n  .pl-lg-0,\n  .px-lg-0 {\n    padding-left: 0 !important; }\n  .p-lg-1 {\n    padding: 0.25rem !important; }\n  .pt-lg-1,\n  .py-lg-1 {\n    padding-top: 0.25rem !important; }\n  .pr-lg-1,\n  .px-lg-1 {\n    padding-right: 0.25rem !important; }\n  .pb-lg-1,\n  .py-lg-1 {\n    padding-bottom: 0.25rem !important; }\n  .pl-lg-1,\n  .px-lg-1 {\n    padding-left: 0.25rem !important; }\n  .p-lg-2 {\n    padding: 0.5rem !important; }\n  .pt-lg-2,\n  .py-lg-2 {\n    padding-top: 0.5rem !important; }\n  .pr-lg-2,\n  .px-lg-2 {\n    padding-right: 0.5rem !important; }\n  .pb-lg-2,\n  .py-lg-2 {\n    padding-bottom: 0.5rem !important; }\n  .pl-lg-2,\n  .px-lg-2 {\n    padding-left: 0.5rem !important; }\n  .p-lg-3 {\n    padding: 1rem !important; }\n  .pt-lg-3,\n  .py-lg-3 {\n    padding-top: 1rem !important; }\n  .pr-lg-3,\n  .px-lg-3 {\n    padding-right: 1rem !important; }\n  .pb-lg-3,\n  .py-lg-3 {\n    padding-bottom: 1rem !important; }\n  .pl-lg-3,\n  .px-lg-3 {\n    padding-left: 1rem !important; }\n  .p-lg-4 {\n    padding: 1.5rem !important; }\n  .pt-lg-4,\n  .py-lg-4 {\n    padding-top: 1.5rem !important; }\n  .pr-lg-4,\n  .px-lg-4 {\n    padding-right: 1.5rem !important; }\n  .pb-lg-4,\n  .py-lg-4 {\n    padding-bottom: 1.5rem !important; }\n  .pl-lg-4,\n  .px-lg-4 {\n    padding-left: 1.5rem !important; }\n  .p-lg-5 {\n    padding: 3rem !important; }\n  .pt-lg-5,\n  .py-lg-5 {\n    padding-top: 3rem !important; }\n  .pr-lg-5,\n  .px-lg-5 {\n    padding-right: 3rem !important; }\n  .pb-lg-5,\n  .py-lg-5 {\n    padding-bottom: 3rem !important; }\n  .pl-lg-5,\n  .px-lg-5 {\n    padding-left: 3rem !important; }\n  .m-lg-n1 {\n    margin: -0.25rem !important; }\n  .mt-lg-n1,\n  .my-lg-n1 {\n    margin-top: -0.25rem !important; }\n  .mr-lg-n1,\n  .mx-lg-n1 {\n    margin-right: -0.25rem !important; }\n  .mb-lg-n1,\n  .my-lg-n1 {\n    margin-bottom: -0.25rem !important; }\n  .ml-lg-n1,\n  .mx-lg-n1 {\n    margin-left: -0.25rem !important; }\n  .m-lg-n2 {\n    margin: -0.5rem !important; }\n  .mt-lg-n2,\n  .my-lg-n2 {\n    margin-top: -0.5rem !important; }\n  .mr-lg-n2,\n  .mx-lg-n2 {\n    margin-right: -0.5rem !important; }\n  .mb-lg-n2,\n  .my-lg-n2 {\n    margin-bottom: -0.5rem !important; }\n  .ml-lg-n2,\n  .mx-lg-n2 {\n    margin-left: -0.5rem !important; }\n  .m-lg-n3 {\n    margin: -1rem !important; }\n  .mt-lg-n3,\n  .my-lg-n3 {\n    margin-top: -1rem !important; }\n  .mr-lg-n3,\n  .mx-lg-n3 {\n    margin-right: -1rem !important; }\n  .mb-lg-n3,\n  .my-lg-n3 {\n    margin-bottom: -1rem !important; }\n  .ml-lg-n3,\n  .mx-lg-n3 {\n    margin-left: -1rem !important; }\n  .m-lg-n4 {\n    margin: -1.5rem !important; }\n  .mt-lg-n4,\n  .my-lg-n4 {\n    margin-top: -1.5rem !important; }\n  .mr-lg-n4,\n  .mx-lg-n4 {\n    margin-right: -1.5rem !important; }\n  .mb-lg-n4,\n  .my-lg-n4 {\n    margin-bottom: -1.5rem !important; }\n  .ml-lg-n4,\n  .mx-lg-n4 {\n    margin-left: -1.5rem !important; }\n  .m-lg-n5 {\n    margin: -3rem !important; }\n  .mt-lg-n5,\n  .my-lg-n5 {\n    margin-top: -3rem !important; }\n  .mr-lg-n5,\n  .mx-lg-n5 {\n    margin-right: -3rem !important; }\n  .mb-lg-n5,\n  .my-lg-n5 {\n    margin-bottom: -3rem !important; }\n  .ml-lg-n5,\n  .mx-lg-n5 {\n    margin-left: -3rem !important; }\n  .m-lg-auto {\n    margin: auto !important; }\n  .mt-lg-auto,\n  .my-lg-auto {\n    margin-top: auto !important; }\n  .mr-lg-auto,\n  .mx-lg-auto {\n    margin-right: auto !important; }\n  .mb-lg-auto,\n  .my-lg-auto {\n    margin-bottom: auto !important; }\n  .ml-lg-auto,\n  .mx-lg-auto {\n    margin-left: auto !important; } }\n\n@media (min-width: 1200px) {\n  .m-xl-0 {\n    margin: 0 !important; }\n  .mt-xl-0,\n  .my-xl-0 {\n    margin-top: 0 !important; }\n  .mr-xl-0,\n  .mx-xl-0 {\n    margin-right: 0 !important; }\n  .mb-xl-0,\n  .my-xl-0 {\n    margin-bottom: 0 !important; }\n  .ml-xl-0,\n  .mx-xl-0 {\n    margin-left: 0 !important; }\n  .m-xl-1 {\n    margin: 0.25rem !important; }\n  .mt-xl-1,\n  .my-xl-1 {\n    margin-top: 0.25rem !important; }\n  .mr-xl-1,\n  .mx-xl-1 {\n    margin-right: 0.25rem !important; }\n  .mb-xl-1,\n  .my-xl-1 {\n    margin-bottom: 0.25rem !important; }\n  .ml-xl-1,\n  .mx-xl-1 {\n    margin-left: 0.25rem !important; }\n  .m-xl-2 {\n    margin: 0.5rem !important; }\n  .mt-xl-2,\n  .my-xl-2 {\n    margin-top: 0.5rem !important; }\n  .mr-xl-2,\n  .mx-xl-2 {\n    margin-right: 0.5rem !important; }\n  .mb-xl-2,\n  .my-xl-2 {\n    margin-bottom: 0.5rem !important; }\n  .ml-xl-2,\n  .mx-xl-2 {\n    margin-left: 0.5rem !important; }\n  .m-xl-3 {\n    margin: 1rem !important; }\n  .mt-xl-3,\n  .my-xl-3 {\n    margin-top: 1rem !important; }\n  .mr-xl-3,\n  .mx-xl-3 {\n    margin-right: 1rem !important; }\n  .mb-xl-3,\n  .my-xl-3 {\n    margin-bottom: 1rem !important; }\n  .ml-xl-3,\n  .mx-xl-3 {\n    margin-left: 1rem !important; }\n  .m-xl-4 {\n    margin: 1.5rem !important; }\n  .mt-xl-4,\n  .my-xl-4 {\n    margin-top: 1.5rem !important; }\n  .mr-xl-4,\n  .mx-xl-4 {\n    margin-right: 1.5rem !important; }\n  .mb-xl-4,\n  .my-xl-4 {\n    margin-bottom: 1.5rem !important; }\n  .ml-xl-4,\n  .mx-xl-4 {\n    margin-left: 1.5rem !important; }\n  .m-xl-5 {\n    margin: 3rem !important; }\n  .mt-xl-5,\n  .my-xl-5 {\n    margin-top: 3rem !important; }\n  .mr-xl-5,\n  .mx-xl-5 {\n    margin-right: 3rem !important; }\n  .mb-xl-5,\n  .my-xl-5 {\n    margin-bottom: 3rem !important; }\n  .ml-xl-5,\n  .mx-xl-5 {\n    margin-left: 3rem !important; }\n  .p-xl-0 {\n    padding: 0 !important; }\n  .pt-xl-0,\n  .py-xl-0 {\n    padding-top: 0 !important; }\n  .pr-xl-0,\n  .px-xl-0 {\n    padding-right: 0 !important; }\n  .pb-xl-0,\n  .py-xl-0 {\n    padding-bottom: 0 !important; }\n  .pl-xl-0,\n  .px-xl-0 {\n    padding-left: 0 !important; }\n  .p-xl-1 {\n    padding: 0.25rem !important; }\n  .pt-xl-1,\n  .py-xl-1 {\n    padding-top: 0.25rem !important; }\n  .pr-xl-1,\n  .px-xl-1 {\n    padding-right: 0.25rem !important; }\n  .pb-xl-1,\n  .py-xl-1 {\n    padding-bottom: 0.25rem !important; }\n  .pl-xl-1,\n  .px-xl-1 {\n    padding-left: 0.25rem !important; }\n  .p-xl-2 {\n    padding: 0.5rem !important; }\n  .pt-xl-2,\n  .py-xl-2 {\n    padding-top: 0.5rem !important; }\n  .pr-xl-2,\n  .px-xl-2 {\n    padding-right: 0.5rem !important; }\n  .pb-xl-2,\n  .py-xl-2 {\n    padding-bottom: 0.5rem !important; }\n  .pl-xl-2,\n  .px-xl-2 {\n    padding-left: 0.5rem !important; }\n  .p-xl-3 {\n    padding: 1rem !important; }\n  .pt-xl-3,\n  .py-xl-3 {\n    padding-top: 1rem !important; }\n  .pr-xl-3,\n  .px-xl-3 {\n    padding-right: 1rem !important; }\n  .pb-xl-3,\n  .py-xl-3 {\n    padding-bottom: 1rem !important; }\n  .pl-xl-3,\n  .px-xl-3 {\n    padding-left: 1rem !important; }\n  .p-xl-4 {\n    padding: 1.5rem !important; }\n  .pt-xl-4,\n  .py-xl-4 {\n    padding-top: 1.5rem !important; }\n  .pr-xl-4,\n  .px-xl-4 {\n    padding-right: 1.5rem !important; }\n  .pb-xl-4,\n  .py-xl-4 {\n    padding-bottom: 1.5rem !important; }\n  .pl-xl-4,\n  .px-xl-4 {\n    padding-left: 1.5rem !important; }\n  .p-xl-5 {\n    padding: 3rem !important; }\n  .pt-xl-5,\n  .py-xl-5 {\n    padding-top: 3rem !important; }\n  .pr-xl-5,\n  .px-xl-5 {\n    padding-right: 3rem !important; }\n  .pb-xl-5,\n  .py-xl-5 {\n    padding-bottom: 3rem !important; }\n  .pl-xl-5,\n  .px-xl-5 {\n    padding-left: 3rem !important; }\n  .m-xl-n1 {\n    margin: -0.25rem !important; }\n  .mt-xl-n1,\n  .my-xl-n1 {\n    margin-top: -0.25rem !important; }\n  .mr-xl-n1,\n  .mx-xl-n1 {\n    margin-right: -0.25rem !important; }\n  .mb-xl-n1,\n  .my-xl-n1 {\n    margin-bottom: -0.25rem !important; }\n  .ml-xl-n1,\n  .mx-xl-n1 {\n    margin-left: -0.25rem !important; }\n  .m-xl-n2 {\n    margin: -0.5rem !important; }\n  .mt-xl-n2,\n  .my-xl-n2 {\n    margin-top: -0.5rem !important; }\n  .mr-xl-n2,\n  .mx-xl-n2 {\n    margin-right: -0.5rem !important; }\n  .mb-xl-n2,\n  .my-xl-n2 {\n    margin-bottom: -0.5rem !important; }\n  .ml-xl-n2,\n  .mx-xl-n2 {\n    margin-left: -0.5rem !important; }\n  .m-xl-n3 {\n    margin: -1rem !important; }\n  .mt-xl-n3,\n  .my-xl-n3 {\n    margin-top: -1rem !important; }\n  .mr-xl-n3,\n  .mx-xl-n3 {\n    margin-right: -1rem !important; }\n  .mb-xl-n3,\n  .my-xl-n3 {\n    margin-bottom: -1rem !important; }\n  .ml-xl-n3,\n  .mx-xl-n3 {\n    margin-left: -1rem !important; }\n  .m-xl-n4 {\n    margin: -1.5rem !important; }\n  .mt-xl-n4,\n  .my-xl-n4 {\n    margin-top: -1.5rem !important; }\n  .mr-xl-n4,\n  .mx-xl-n4 {\n    margin-right: -1.5rem !important; }\n  .mb-xl-n4,\n  .my-xl-n4 {\n    margin-bottom: -1.5rem !important; }\n  .ml-xl-n4,\n  .mx-xl-n4 {\n    margin-left: -1.5rem !important; }\n  .m-xl-n5 {\n    margin: -3rem !important; }\n  .mt-xl-n5,\n  .my-xl-n5 {\n    margin-top: -3rem !important; }\n  .mr-xl-n5,\n  .mx-xl-n5 {\n    margin-right: -3rem !important; }\n  .mb-xl-n5,\n  .my-xl-n5 {\n    margin-bottom: -3rem !important; }\n  .ml-xl-n5,\n  .mx-xl-n5 {\n    margin-left: -3rem !important; }\n  .m-xl-auto {\n    margin: auto !important; }\n  .mt-xl-auto,\n  .my-xl-auto {\n    margin-top: auto !important; }\n  .mr-xl-auto,\n  .mx-xl-auto {\n    margin-right: auto !important; }\n  .mb-xl-auto,\n  .my-xl-auto {\n    margin-bottom: auto !important; }\n  .ml-xl-auto,\n  .mx-xl-auto {\n    margin-left: auto !important; } }\n\n.text-monospace {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }\n\n.text-justify {\n  text-align: justify !important; }\n\n.text-wrap {\n  white-space: normal !important; }\n\n.text-nowrap {\n  white-space: nowrap !important; }\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap; }\n\n.text-left {\n  text-align: left !important; }\n\n.text-right {\n  text-align: right !important; }\n\n.text-center {\n  text-align: center !important; }\n\n@media (min-width: 576px) {\n  .text-sm-left {\n    text-align: left !important; }\n  .text-sm-right {\n    text-align: right !important; }\n  .text-sm-center {\n    text-align: center !important; } }\n\n@media (min-width: 768px) {\n  .text-md-left {\n    text-align: left !important; }\n  .text-md-right {\n    text-align: right !important; }\n  .text-md-center {\n    text-align: center !important; } }\n\n@media (min-width: 992px) {\n  .text-lg-left {\n    text-align: left !important; }\n  .text-lg-right {\n    text-align: right !important; }\n  .text-lg-center {\n    text-align: center !important; } }\n\n@media (min-width: 1200px) {\n  .text-xl-left {\n    text-align: left !important; }\n  .text-xl-right {\n    text-align: right !important; }\n  .text-xl-center {\n    text-align: center !important; } }\n\n.text-lowercase {\n  text-transform: lowercase !important; }\n\n.text-uppercase {\n  text-transform: uppercase !important; }\n\n.text-capitalize {\n  text-transform: capitalize !important; }\n\n.font-weight-light {\n  font-weight: 300 !important; }\n\n.font-weight-lighter {\n  font-weight: lighter !important; }\n\n.font-weight-normal {\n  font-weight: 400 !important; }\n\n.font-weight-bold {\n  font-weight: 700 !important; }\n\n.font-weight-bolder {\n  font-weight: bolder !important; }\n\n.font-italic {\n  font-style: italic !important; }\n\n.text-white {\n  color: #fff !important; }\n\n.text-primary {\n  color: #007bff !important; }\n\na.text-primary:hover, a.text-primary:focus {\n  color: #0056b3 !important; }\n\n.text-secondary {\n  color: #6c757d !important; }\n\na.text-secondary:hover, a.text-secondary:focus {\n  color: #494f54 !important; }\n\n.text-success {\n  color: #28a745 !important; }\n\na.text-success:hover, a.text-success:focus {\n  color: #19692c !important; }\n\n.text-info {\n  color: #17a2b8 !important; }\n\na.text-info:hover, a.text-info:focus {\n  color: #0f6674 !important; }\n\n.text-warning {\n  color: #ffc107 !important; }\n\na.text-warning:hover, a.text-warning:focus {\n  color: #ba8b00 !important; }\n\n.text-danger {\n  color: #dc3545 !important; }\n\na.text-danger:hover, a.text-danger:focus {\n  color: #a71d2a !important; }\n\n.text-light {\n  color: #f8f9fa !important; }\n\na.text-light:hover, a.text-light:focus {\n  color: #cbd3da !important; }\n\n.text-dark {\n  color: #343a40 !important; }\n\na.text-dark:hover, a.text-dark:focus {\n  color: #121416 !important; }\n\n.text-body {\n  color: #212529 !important; }\n\n.text-muted {\n  color: #6c757d !important; }\n\n.text-black-50 {\n  color: rgba(0, 0, 0, 0.5) !important; }\n\n.text-white-50 {\n  color: rgba(255, 255, 255, 0.5) !important; }\n\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0; }\n\n.text-decoration-none {\n  text-decoration: none !important; }\n\n.text-reset {\n  color: inherit !important; }\n\n.visible {\n  visibility: visible !important; }\n\n.invisible {\n  visibility: hidden !important; }\n\n@media print {\n  *,\n  *::before,\n  *::after {\n    text-shadow: none !important;\n    box-shadow: none !important; }\n  a:not(.btn) {\n    text-decoration: underline; }\n  abbr[title]::after {\n    content: " (" attr(title) ")"; }\n  pre {\n    white-space: pre-wrap !important; }\n  pre,\n  blockquote {\n    border: 1px solid #adb5bd;\n    page-break-inside: avoid; }\n  thead {\n    display: table-header-group; }\n  tr,\n  img {\n    page-break-inside: avoid; }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3; }\n  h2,\n  h3 {\n    page-break-after: avoid; }\n  @page {\n    size: a3; }\n  body {\n    min-width: 992px !important; }\n  .container {\n    min-width: 992px !important; }\n  .navbar {\n    display: none; }\n  .badge {\n    border: 1px solid #000; }\n  .table {\n    border-collapse: collapse !important; }\n    .table td,\n    .table th {\n      background-color: #fff !important; }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #dee2e6 !important; }\n  .table-dark {\n    color: inherit; }\n    .table-dark th,\n    .table-dark td,\n    .table-dark thead th,\n    .table-dark tbody + tbody {\n      border-color: #dee2e6; }\n  .table .thead-dark th {\n    color: inherit;\n    border-color: #dee2e6; } }\n',""])},function(e,t,n){var r=n(159);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(30)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var a=[],i=n.document,l=Object.getPrototypeOf,s=a.slice,c=a.concat,u=a.push,d=a.indexOf,p={},f=p.toString,m=p.hasOwnProperty,h=m.toString,g=h.call(Object),b={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function w(e,t,n){var r,o=(t=t||i).createElement("script");if(o.text=e,n)for(r in x)n[r]&&(o[r]=n[r]);t.head.appendChild(o).parentNode.removeChild(o)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[f.call(e)]||"object":typeof e}var k=function(e,t){return new k.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}k.fn=k.prototype={jquery:"3.3.1",constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(e){return this.pushStack(k.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:a.sort,splice:a.splice},k.extend=k.fn.extend=function(){var e,t,n,r,o,a,i=arguments[0]||{},l=1,s=arguments.length,c=!1;for("boolean"==typeof i&&(c=i,i=arguments[l]||{},l++),"object"==typeof i||v(i)||(i={}),l===s&&(i=this,l--);l<s;l++)if(null!=(e=arguments[l]))for(t in e)n=i[t],i!==(r=e[t])&&(c&&r&&(k.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,a=n&&Array.isArray(n)?n:[]):a=n&&k.isPlainObject(n)?n:{},i[t]=k.extend(c,a,r)):void 0!==r&&(i[t]=r));return i},k.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=l(e))||"function"==typeof(n=m.call(t,"constructor")&&t.constructor)&&h.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,a=e.length,i=!n;o<a;o++)!t(e[o],o)!==i&&r.push(e[o]);return r},map:function(e,t,n){var r,o,a=0,i=[];if(C(e))for(r=e.length;a<r;a++)null!=(o=t(e[a],a,n))&&i.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&i.push(o);return c.apply([],i)},guid:1,support:b}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=a[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var T=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,a,i,l,s,c,u,d,p,f,m,h,g,b,v,y,x="sizzle"+1*new Date,w=e.document,E=0,k=0,_=ie(),C=ie(),T=ie(),S=function(e,t){return e===t&&(d=!0),0},O={}.hasOwnProperty,P=[],N=P.pop,j=P.push,I=P.push,D=P.slice,A=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",U="\\["+M+"*("+L+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+M+"*\\]",F=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",H=new RegExp(M+"+","g"),z=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),W=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),q=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(F),K=new RegExp("^"+L+"$"),G={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},oe=ve(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(P=D.call(w.childNodes),w.childNodes),P[w.childNodes.length].nodeType}catch(e){I={apply:P.length?function(e,t){j.apply(e,D.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,o){var a,l,c,u,d,m,b,v=t&&t.ownerDocument,E=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==E&&9!==E&&11!==E)return r;if(!o&&((t?t.ownerDocument||t:w)!==f&&p(t),t=t||f,h)){if(11!==E&&(d=Q.exec(e)))if(a=d[1]){if(9===E){if(!(c=t.getElementById(a)))return r;if(c.id===a)return r.push(c),r}else if(v&&(c=v.getElementById(a))&&y(t,c)&&c.id===a)return r.push(c),r}else{if(d[2])return I.apply(r,t.getElementsByTagName(e)),r;if((a=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&!T[e+" "]&&(!g||!g.test(e))){if(1!==E)v=t,b=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),l=(m=i(e)).length;l--;)m[l]="#"+u+" "+be(m[l]);b=m.join(","),v=J.test(e)&&he(t.parentNode)||t}if(b)try{return I.apply(r,v.querySelectorAll(b)),r}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return s(e.replace(z,"$1"),t,r,o)}function ie(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function le(e){return e[x]=!0,e}function se(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ue(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function fe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return le(function(t){return t=+t,le(function(n,r){for(var o,a=e([],n.length,t),i=a.length;i--;)n[o=a[i]]&&(n[o]=!(r[o]=n[o]))})})}function he(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},a=ae.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=ae.setDocument=function(e){var t,o,i=e?e.ownerDocument||e:w;return i!==f&&9===i.nodeType&&i.documentElement?(m=(f=i).documentElement,h=!a(f),w!==f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(f.getElementsByClassName),n.getById=se(function(e){return m.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n,r,o,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(o=t.getElementsByName(e),r=0;a=o[r++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[o++];)1===n.nodeType&&r.push(n);return r}return a},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&h)return t.getElementsByClassName(e)},b=[],g=[],(n.qsa=Y.test(f.querySelectorAll))&&(se(function(e){m.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]")}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Y.test(v=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),b.push("!=",F)}),g=g.length&&new RegExp(g.join("|")),b=b.length&&new RegExp(b.join("|")),t=Y.test(m.compareDocumentPosition),y=t||Y.test(m.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},S=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===f||e.ownerDocument===w&&y(w,e)?-1:t===f||t.ownerDocument===w&&y(w,t)?1:u?A(u,e)-A(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,o=e.parentNode,a=t.parentNode,i=[e],l=[t];if(!o||!a)return e===f?-1:t===f?1:o?-1:a?1:u?A(u,e)-A(u,t):0;if(o===a)return ue(e,t);for(n=e;n=n.parentNode;)i.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;i[r]===l[r];)r++;return r?ue(i[r],l[r]):i[r]===w?-1:l[r]===w?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),t=t.replace(q,"='$1']"),n.matchesSelector&&h&&!T[t+" "]&&(!b||!b.test(t))&&(!g||!g.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),y(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==f&&p(e);var o=r.attrHandle[t.toLowerCase()],a=o&&O.call(r.attrHandle,t.toLowerCase())?o(e,t,!h):void 0;return void 0!==a?a:n.attributes||!h?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},ae.escape=function(e){return(e+"").replace(te,ne)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],o=0,a=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(S),d){for(;t=e[a++];)t===e[a]&&(o=r.push(a));for(;o--;)e.splice(r[o],1)}return u=null,e},o=ae.getText=function(e){var t,n="",r=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ae.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=i(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ae.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var a="nth"!==e.slice(0,3),i="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,s){var c,u,d,p,f,m,h=a!==i?"nextSibling":"previousSibling",g=t.parentNode,b=l&&t.nodeName.toLowerCase(),v=!s&&!l,y=!1;if(g){if(a){for(;h;){for(p=t;p=p[h];)if(l?p.nodeName.toLowerCase()===b:1===p.nodeType)return!1;m=h="only"===e&&!m&&"nextSibling"}return!0}if(m=[i?g.firstChild:g.lastChild],i&&v){for(y=(f=(c=(u=(d=(p=g)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],p=f&&g.childNodes[f];p=++f&&p&&p[h]||(y=f=0)||m.pop();)if(1===p.nodeType&&++y&&p===t){u[e]=[E,f,y];break}}else if(v&&(y=f=(c=(u=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===y)for(;(p=++f&&p&&p[h]||(y=f=0)||m.pop())&&((l?p.nodeName.toLowerCase()!==b:1!==p.nodeType)||!++y||(v&&((u=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[E,y]),p!==t)););return(y-=o)===r||y%r==0&&y/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,a=o(e,t),i=a.length;i--;)e[r=A(e,a[i])]=!(n[r]=a[i])}):function(e){return o(e,0,n)}):o}},pseudos:{not:le(function(e){var t=[],n=[],r=l(e.replace(z,"$1"));return r[x]?le(function(e,t,n,o){for(var a,i=r(e,null,o,[]),l=e.length;l--;)(a=i[l])&&(e[l]=!(t[l]=a))}):function(e,o,a){return t[0]=e,r(t,null,a,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return ae(e,t).length>0}}),contains:le(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:le(function(e){return K.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===m},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me(function(){return[0]}),last:me(function(e,t){return[t-1]}),eq:me(function(e,t,n){return[n<0?n+t:n]}),even:me(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:me(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:me(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:me(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,o=t.next,a=o||r,i=n&&"parentNode"===a,l=k++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o);return!1}:function(t,n,s){var c,u,d,p=[E,l];if(s){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||i)if(u=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[a])&&c[0]===E&&c[1]===l)return p[2]=c[2];if(u[a]=p,p[2]=e(t,n,s))return!0}return!1}}function ye(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var a,i=[],l=0,s=e.length,c=null!=t;l<s;l++)(a=e[l])&&(n&&!n(a,r,o)||(i.push(a),c&&t.push(l)));return i}function we(e,t,n,r,o,a){return r&&!r[x]&&(r=we(r)),o&&!o[x]&&(o=we(o,a)),le(function(a,i,l,s){var c,u,d,p=[],f=[],m=i.length,h=a||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ae(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!a&&t?h:xe(h,p,e,l,s),b=n?o||(a?e:m||r)?[]:i:g;if(n&&n(g,b,l,s),r)for(c=xe(b,f),r(c,[],l,s),u=c.length;u--;)(d=c[u])&&(b[f[u]]=!(g[f[u]]=d));if(a){if(o||e){if(o){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(g[u]=d);o(null,b=[],c,s)}for(u=b.length;u--;)(d=b[u])&&(c=o?A(a,d):p[u])>-1&&(a[c]=!(i[c]=d))}}else b=xe(b===i?b.splice(m,b.length):b),o?o(null,i,b,s):I.apply(i,b)})}function Ee(e){for(var t,n,o,a=e.length,i=r.relative[e[0].type],l=i||r.relative[" "],s=i?1:0,u=ve(function(e){return e===t},l,!0),d=ve(function(e){return A(t,e)>-1},l,!0),p=[function(e,n,r){var o=!i&&(r||n!==c)||((t=n).nodeType?u(e,n,r):d(e,n,r));return t=null,o}];s<a;s++)if(n=r.relative[e[s].type])p=[ve(ye(p),n)];else{if((n=r.filter[e[s].type].apply(null,e[s].matches))[x]){for(o=++s;o<a&&!r.relative[e[o].type];o++);return we(s>1&&ye(p),s>1&&be(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(z,"$1"),n,s<o&&Ee(e.slice(s,o)),o<a&&Ee(e=e.slice(o)),o<a&&be(e))}p.push(n)}return ye(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,i=ae.tokenize=function(e,t){var n,o,a,i,l,s,c,u=C[e+" "];if(u)return t?0:u.slice(0);for(l=e,s=[],c=r.preFilter;l;){for(i in n&&!(o=B.exec(l))||(o&&(l=l.slice(o[0].length)||l),s.push(a=[])),n=!1,(o=W.exec(l))&&(n=o.shift(),a.push({value:n,type:o[0].replace(z," ")}),l=l.slice(n.length)),r.filter)!(o=G[i].exec(l))||c[i]&&!(o=c[i](o))||(n=o.shift(),a.push({value:n,type:i,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?ae.error(e):C(e,s).slice(0)},l=ae.compile=function(e,t){var n,o=[],a=[],l=T[e+" "];if(!l){for(t||(t=i(e)),n=t.length;n--;)(l=Ee(t[n]))[x]?o.push(l):a.push(l);(l=T(e,function(e,t){var n=t.length>0,o=e.length>0,a=function(a,i,l,s,u){var d,m,g,b=0,v="0",y=a&&[],x=[],w=c,k=a||o&&r.find.TAG("*",u),_=E+=null==w?1:Math.random()||.1,C=k.length;for(u&&(c=i===f||i||u);v!==C&&null!=(d=k[v]);v++){if(o&&d){for(m=0,i||d.ownerDocument===f||(p(d),l=!h);g=e[m++];)if(g(d,i||f,l)){s.push(d);break}u&&(E=_)}n&&((d=!g&&d)&&b--,a&&y.push(d))}if(b+=v,n&&v!==b){for(m=0;g=t[m++];)g(y,x,i,l);if(a){if(b>0)for(;v--;)y[v]||x[v]||(x[v]=N.call(s));x=xe(x)}I.apply(s,x),u&&!a&&x.length>0&&b+t.length>1&&ae.uniqueSort(s)}return u&&(E=_,c=w),y};return n?le(a):a}(a,o))).selector=e}return l},s=ae.select=function(e,t,n,o){var a,s,c,u,d,p="function"==typeof e&&e,f=!o&&i(e=p.selector||e);if(n=n||[],1===f.length){if((s=f[0]=f[0].slice(0)).length>2&&"ID"===(c=s[0]).type&&9===t.nodeType&&h&&r.relative[s[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(a=G.needsContext.test(e)?0:s.length;a--&&(c=s[a],!r.relative[u=c.type]);)if((d=r.find[u])&&(o=d(c.matches[0].replace(Z,ee),J.test(s[0].type)&&he(t.parentNode)||t))){if(s.splice(a,1),!(e=o.length&&be(s)))return I.apply(n,o),n;break}}return(p||l(e,f))(o,t,!h,n,!t||J.test(e)&&he(t.parentNode)||t),n},n.sortStable=x.split("").sort(S).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||ce(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ae}(n);k.find=T,k.expr=T.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=T.uniqueSort,k.text=T.getText,k.isXMLDoc=T.isXML,k.contains=T.contains,k.escapeSelector=T.escape;var S=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&k(e).is(n))break;r.push(e)}return r},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=k.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(e,t,n){return v(t)?k.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?k.grep(e,function(e){return e===t!==n}):"string"!=typeof t?k.grep(e,function(e){return d.call(t,e)>-1!==n}):k.filter(t,e,n)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,o[t],n);return r>1?k.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&P.test(e)?k(e):e||[],!1).length}});var D,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:i,!0)),j.test(r[1])&&k.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=i.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,D=k(i);var R=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,a=[],i="string"!=typeof e&&k(e);if(!P.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(i?i.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?k.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?d.call(k(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(e,t){k.fn[e]=function(n,r){var o=k.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=k.filter(r,o)),this.length>1&&(M[e]||k.uniqueSort(o),R.test(e)&&o.reverse()),this.pushStack(o)}});var U=/[^\x20\t\r\n\f]+/g;function F(e){return e}function H(e){throw e}function z(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return k.each(e.match(U)||[],function(e,n){t[n]=!0}),t}(e):k.extend({},e);var t,n,r,o,a=[],i=[],l=-1,s=function(){for(o=o||e.once,r=t=!0;i.length;l=-1)for(n=i.shift();++l<a.length;)!1===a[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=a.length,n=!1);e.memory||(n=!1),t=!1,o&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(l=a.length-1,i.push(n)),function t(n){k.each(n,function(n,r){v(r)?e.unique&&c.has(r)||a.push(r):r&&r.length&&"string"!==E(r)&&t(r)})}(arguments),n&&!t&&s()),this},remove:function(){return k.each(arguments,function(e,t){for(var n;(n=k.inArray(t,a,n))>-1;)a.splice(n,1),n<=l&&l--}),this},has:function(e){return e?k.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return o=i=[],a=n="",this},disabled:function(){return!a},lock:function(){return o=i=[],n||t||(a=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],i.push(n),t||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},k.extend({Deferred:function(e){var t=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return k.Deferred(function(n){k.each(t,function(t,r){var o=v(e[r[4]])&&e[r[4]];a[r[1]](function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var a=0;function i(e,t,r,o){return function(){var l=this,s=arguments,c=function(){var n,c;if(!(e<a)){if((n=r.apply(l,s))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(c)?o?c.call(n,i(a,t,F,o),i(a,t,H,o)):(a++,c.call(n,i(a,t,F,o),i(a,t,H,o),i(a,t,F,t.notifyWith))):(r!==F&&(l=void 0,s=[n]),(o||t.resolveWith)(l,s))}},u=o?c:function(){try{c()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,u.stackTrace),e+1>=a&&(r!==H&&(l=void 0,s=[n]),t.rejectWith(l,s))}};e?u():(k.Deferred.getStackHook&&(u.stackTrace=k.Deferred.getStackHook()),n.setTimeout(u))}}return k.Deferred(function(n){t[0][3].add(i(0,n,v(o)?o:F,n.notifyWith)),t[1][3].add(i(0,n,v(e)?e:F)),t[2][3].add(i(0,n,v(r)?r:H))}).promise()},promise:function(e){return null!=e?k.extend(e,o):o}},a={};return k.each(t,function(e,n){var i=n[2],l=n[5];o[n[1]]=i.add,l&&i.add(function(){r=l},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),i.add(n[3].fire),a[n[0]]=function(){return a[n[0]+"With"](this===a?void 0:this,arguments),this},a[n[0]+"With"]=i.fireWith}),o.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),a=k.Deferred(),i=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?s.call(arguments):n,--t||a.resolveWith(r,o)}};if(t<=1&&(z(e,a.done(i(n)).resolve,a.reject,!t),"pending"===a.state()||v(o[n]&&o[n].then)))return a.then();for(;n--;)z(o[n],i(n),a.reject);return a.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&B.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){n.setTimeout(function(){throw e})};var W=k.Deferred();function q(){i.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),k.ready()}k.fn.ready=function(e){return W.then(e).catch(function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==e&&--k.readyWait>0||W.resolveWith(i,[k]))}}),k.ready.then=W.then,"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?n.setTimeout(k.ready):(i.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var V=function(e,t,n,r,o,a,i){var l=0,s=e.length,c=null==n;if("object"===E(n))for(l in o=!0,n)V(e,t,l,n[l],!0,a,i);else if(void 0!==r&&(o=!0,v(r)||(i=!0),c&&(i?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(k(e),n)})),t))for(;l<s;l++)t(e[l],n,i?r:r.call(e[l],l,t(e[l],n)));return o?e:c?t.call(e):s?t(e[0],n):a},K=/^-ms-/,G=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function X(e){return e.replace(K,"ms-").replace(G,$)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=k.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[X(t)]=n;else for(r in t)o[X(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in r?[t]:t.match(U)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),k.fn.extend({data:function(e,t){var n,r,o,a=this[0],i=a&&a.attributes;if(void 0===e){if(this.length&&(o=Z.get(a),1===a.nodeType&&!J.get(a,"hasDataAttrs"))){for(n=i.length;n--;)i[n]&&0===(r=i[n].name).indexOf("data-")&&(r=X(r.slice(5)),ne(a,r,o[r]));J.set(a,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):V(this,function(t){var n;if(a&&void 0===t)return void 0!==(n=Z.get(a,e))?n:void 0!==(n=ne(a,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,o=n.shift(),a=k._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete a.stop,o.call(e,function(){k.dequeue(e,t)},a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:k.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?k.queue(this[0],e):void 0===t?this:this.each(function(){var n=k.queue(this,e,t);k._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&k.dequeue(this,e)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=k.Deferred(),a=this,i=this.length,l=function(){--r||o.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";i--;)(n=J.get(a[i],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ae=["Top","Right","Bottom","Left"],ie=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&k.contains(e.ownerDocument,e)&&"none"===k.css(e,"display")},le=function(e,t,n,r){var o,a,i={};for(a in t)i[a]=e.style[a],e.style[a]=t[a];for(a in o=n.apply(e,r||[]),t)e.style[a]=i[a];return o};function se(e,t,n,r){var o,a,i=20,l=r?function(){return r.cur()}:function(){return k.css(e,t,"")},s=l(),c=n&&n[3]||(k.cssNumber[t]?"":"px"),u=(k.cssNumber[t]||"px"!==c&&+s)&&oe.exec(k.css(e,t));if(u&&u[3]!==c){for(s/=2,c=c||u[3],u=+s||1;i--;)k.style(e,t,u+c),(1-a)*(1-(a=l()/s||.5))<=0&&(i=0),u/=a;u*=2,k.style(e,t,u+c),n=n||[]}return n&&(u=+u||+s||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var ce={};function ue(e){var t,n=e.ownerDocument,r=e.nodeName,o=ce[r];return o||(t=n.body.appendChild(n.createElement(r)),o=k.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ce[r]=o,o)}function de(e,t){for(var n,r,o=[],a=0,i=e.length;a<i;a++)(r=e[a]).style&&(n=r.style.display,t?("none"===n&&(o[a]=J.get(r,"display")||null,o[a]||(r.style.display="")),""===r.style.display&&ie(r)&&(o[a]=ue(r))):"none"!==n&&(o[a]="none",J.set(r,"display",n)));for(a=0;a<i;a++)null!=o[a]&&(e[a].style.display=o[a]);return e}k.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ie(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,me=/^$|^module$|\/(?:java|ecma)script/i,he={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?k.merge([e],n):n}function be(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}he.optgroup=he.option,he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td;var ve=/<|&#?\w+;/;function ye(e,t,n,r,o){for(var a,i,l,s,c,u,d=t.createDocumentFragment(),p=[],f=0,m=e.length;f<m;f++)if((a=e[f])||0===a)if("object"===E(a))k.merge(p,a.nodeType?[a]:a);else if(ve.test(a)){for(i=i||d.appendChild(t.createElement("div")),l=(fe.exec(a)||["",""])[1].toLowerCase(),s=he[l]||he._default,i.innerHTML=s[1]+k.htmlPrefilter(a)+s[2],u=s[0];u--;)i=i.lastChild;k.merge(p,i.childNodes),(i=d.firstChild).textContent=""}else p.push(t.createTextNode(a));for(d.textContent="",f=0;a=p[f++];)if(r&&k.inArray(a,r)>-1)o&&o.push(a);else if(c=k.contains(a.ownerDocument,a),i=ge(d.appendChild(a),"script"),c&&be(i),n)for(u=0;a=i[u++];)me.test(a.type||"")&&n.push(a);return d}!function(){var e=i.createDocumentFragment().appendChild(i.createElement("div")),t=i.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),b.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",b.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var xe=i.documentElement,we=/^key/,Ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function _e(){return!0}function Ce(){return!1}function Te(){try{return i.activeElement}catch(e){}}function Se(e,t,n,r,o,a){var i,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Se(e,l,n,r,t[l],a);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Ce;else if(!o)return e;return 1===a&&(i=o,(o=function(e){return k().off(e),i.apply(this,arguments)}).guid=i.guid||(i.guid=k.guid++)),e.each(function(){k.event.add(this,t,o,r,n)})}k.event={global:{},add:function(e,t,n,r,o){var a,i,l,s,c,u,d,p,f,m,h,g=J.get(e);if(g)for(n.handler&&(n=(a=n).handler,o=a.selector),o&&k.find.matchesSelector(xe,o),n.guid||(n.guid=k.guid++),(s=g.events)||(s=g.events={}),(i=g.handle)||(i=g.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(U)||[""]).length;c--;)f=h=(l=ke.exec(t[c])||[])[1],m=(l[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},u=k.extend({type:f,origType:h,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:m.join(".")},a),(p=s[f])||((p=s[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,m,i)||e.addEventListener&&e.addEventListener(f,i)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),k.event.global[f]=!0)},remove:function(e,t,n,r,o){var a,i,l,s,c,u,d,p,f,m,h,g=J.hasData(e)&&J.get(e);if(g&&(s=g.events)){for(c=(t=(t||"").match(U)||[""]).length;c--;)if(f=h=(l=ke.exec(t[c])||[])[1],m=(l[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},p=s[f=(r?d.delegateType:d.bindType)||f]||[],l=l[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=a=p.length;a--;)u=p[a],!o&&h!==u.origType||n&&n.guid!==u.guid||l&&!l.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(p.splice(a,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));i&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,m,g.handle)||k.removeEvent(e,f,g.handle),delete s[f])}else for(f in s)k.event.remove(e,f+t[c],n,r,!0);k.isEmptyObject(s)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,a,i,l=k.event.fix(e),s=new Array(arguments.length),c=(J.get(this,"events")||{})[l.type]||[],u=k.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(i=k.event.handlers.call(this,l,c),t=0;(o=i[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(a=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(r=((k.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,a,i,l=[],s=t.delegateCount,c=e.target;if(s&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(a=[],i={},n=0;n<s;n++)void 0===i[o=(r=t[n]).selector+" "]&&(i[o]=r.needsContext?k(o,this).index(c)>-1:k.find(o,this,null,[c]).length),i[o]&&a.push(r);a.length&&l.push({elem:c,handlers:a})}return c=this,s<t.length&&l.push({elem:c,handlers:t.slice(s)}),l},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Te()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Te()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?_e:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=_e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=_e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=_e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ee.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){k.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||k.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),k.fn.extend({on:function(e,t,n,r){return Se(this,e,t,n,r)},one:function(e,t,n,r){return Se(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){k.event.remove(this,e,n,t)})}});var Oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Pe=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ie(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function De(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ae(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Re(e,t){var n,r,o,a,i,l,s,c;if(1===t.nodeType){if(J.hasData(e)&&(a=J.access(e),i=J.set(t,a),c=a.events))for(o in delete i.handle,i.events={},c)for(n=0,r=c[o].length;n<r;n++)k.event.add(t,o,c[o][n]);Z.hasData(e)&&(l=Z.access(e),s=k.extend({},l),Z.set(t,s))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Le(e,t,n,r){t=c.apply([],t);var o,a,i,l,s,u,d=0,p=e.length,f=p-1,m=t[0],h=v(m);if(h||p>1&&"string"==typeof m&&!b.checkClone&&Ne.test(m))return e.each(function(o){var a=e.eq(o);h&&(t[0]=m.call(this,o,a.html())),Le(a,t,n,r)});if(p&&(a=(o=ye(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=a),a||r)){for(l=(i=k.map(ge(o,"script"),De)).length;d<p;d++)s=o,d!==f&&(s=k.clone(s,!0,!0),l&&k.merge(i,ge(s,"script"))),n.call(e[d],s,d);if(l)for(u=i[i.length-1].ownerDocument,k.map(i,Ae),d=0;d<l;d++)s=i[d],me.test(s.type||"")&&!J.access(s,"globalEval")&&k.contains(u,s)&&(s.src&&"module"!==(s.type||"").toLowerCase()?k._evalUrl&&k._evalUrl(s.src):w(s.textContent.replace(je,""),u,s))}return e}function Ue(e,t,n){for(var r,o=t?k.filter(t,e):e,a=0;null!=(r=o[a]);a++)n||1!==r.nodeType||k.cleanData(ge(r)),r.parentNode&&(n&&k.contains(r.ownerDocument,r)&&be(ge(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(Oe,"<$1></$2>")},clone:function(e,t,n){var r,o,a,i,l=e.cloneNode(!0),s=k.contains(e.ownerDocument,e);if(!(b.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(i=ge(l),r=0,o=(a=ge(e)).length;r<o;r++)Me(a[r],i[r]);if(t)if(n)for(a=a||ge(e),i=i||ge(l),r=0,o=a.length;r<o;r++)Re(a[r],i[r]);else Re(e,l);return(i=ge(l,"script")).length>0&&be(i,!s&&ge(e,"script")),l},cleanData:function(e){for(var t,n,r,o=k.event.special,a=0;void 0!==(n=e[a]);a++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)o[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),k.fn.extend({detach:function(e){return Ue(this,e,!0)},remove:function(e){return Ue(this,e)},text:function(e){return V(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Le(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)})},prepend:function(){return Le(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Le(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Le(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return V(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!he[(fe.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Le(this,arguments,function(t){var n=this.parentNode;k.inArray(this,e)<0&&(k.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){k.fn[e]=function(e){for(var n,r=[],o=k(e),a=o.length-1,i=0;i<=a;i++)n=i===a?this:this.clone(!0),k(o[i])[t](n),u.apply(r,n.get());return this.pushStack(r)}});var Fe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},ze=new RegExp(ae.join("|"),"i");function Be(e,t,n){var r,o,a,i,l=e.style;return(n=n||He(e))&&(""!==(i=n.getPropertyValue(t)||n[t])||k.contains(e.ownerDocument,e)||(i=k.style(e,t)),!b.pixelBoxStyles()&&Fe.test(i)&&ze.test(t)&&(r=l.width,o=l.minWidth,a=l.maxWidth,l.minWidth=l.maxWidth=l.width=i,i=n.width,l.width=r,l.minWidth=o,l.maxWidth=a)),void 0!==i?i+"":i}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",xe.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);r="1%"!==e.top,s=12===t(e.marginLeft),u.style.right="60%",l=36===t(e.right),o=36===t(e.width),u.style.position="absolute",a=36===u.offsetWidth||"absolute",xe.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var r,o,a,l,s,c=i.createElement("div"),u=i.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",b.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(b,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),l},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),a}}))}();var qe=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},$e=["Webkit","Moz","ms"],Xe=i.createElement("div").style;function Ye(e){var t=k.cssProps[e];return t||(t=k.cssProps[e]=function(e){if(e in Xe)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=$e.length;n--;)if((e=$e[n]+t)in Xe)return e}(e)||e),t}function Qe(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Je(e,t,n,r,o,a){var i="width"===t?1:0,l=0,s=0;if(n===(r?"border":"content"))return 0;for(;i<4;i+=2)"margin"===n&&(s+=k.css(e,n+ae[i],!0,o)),r?("content"===n&&(s-=k.css(e,"padding"+ae[i],!0,o)),"margin"!==n&&(s-=k.css(e,"border"+ae[i]+"Width",!0,o))):(s+=k.css(e,"padding"+ae[i],!0,o),"padding"!==n?s+=k.css(e,"border"+ae[i]+"Width",!0,o):l+=k.css(e,"border"+ae[i]+"Width",!0,o));return!r&&a>=0&&(s+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-s-l-.5))),s}function Ze(e,t,n){var r=He(e),o=Be(e,t,r),a="border-box"===k.css(e,"boxSizing",!1,r),i=a;if(Fe.test(o)){if(!n)return o;o="auto"}return i=i&&(b.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===k.css(e,"display",!1,r))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],i=!0),(o=parseFloat(o)||0)+Je(e,t,n||(a?"border":"content"),i,r,o)+"px"}function et(e,t,n,r,o){return new et.prototype.init(e,t,n,r,o)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,a,i,l=X(t),s=Ve.test(t),c=e.style;if(s||(t=Ye(l)),i=k.cssHooks[t]||k.cssHooks[l],void 0===n)return i&&"get"in i&&void 0!==(o=i.get(e,!1,r))?o:c[t];"string"===(a=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=se(e,t,o),a="number"),null!=n&&n==n&&("number"===a&&(n+=o&&o[3]||(k.cssNumber[l]?"":"px")),b.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),i&&"set"in i&&void 0===(n=i.set(e,n,r))||(s?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,a,i,l=X(t);return Ve.test(t)||(t=Ye(l)),(i=k.cssHooks[t]||k.cssHooks[l])&&"get"in i&&(o=i.get(e,!0,n)),void 0===o&&(o=Be(e,t,r)),"normal"===o&&t in Ge&&(o=Ge[t]),""===n||n?(a=parseFloat(o),!0===n||isFinite(a)?a||0:o):o}}),k.each(["height","width"],function(e,t){k.cssHooks[t]={get:function(e,n,r){if(n)return!qe.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,t,r):le(e,Ke,function(){return Ze(e,t,r)})},set:function(e,n,r){var o,a=He(e),i="border-box"===k.css(e,"boxSizing",!1,a),l=r&&Je(e,t,r,i,a);return i&&b.scrollboxSize()===a.position&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-Je(e,t,"border",!1,a)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=k.css(e,t)),Qe(0,n,l)}}}),k.cssHooks.marginLeft=We(b.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(e,t){k.cssHooks[e+t]={expand:function(n){for(var r=0,o={},a="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ae[r]+t]=a[r]||a[r-2]||a[0];return o}},"margin"!==e&&(k.cssHooks[e+t].set=Qe)}),k.fn.extend({css:function(e,t){return V(this,function(e,t,n){var r,o,a={},i=0;if(Array.isArray(t)){for(r=He(e),o=t.length;i<o;i++)a[t[i]]=k.css(e,t[i],!1,r);return a}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,arguments.length>1)}}),k.Tween=et,et.prototype={constructor:et,init:function(e,t,n,r,o,a){this.elem=e,this.prop=n,this.easing=o||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(k.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}},et.prototype.init.prototype=et.prototype,et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[k.cssProps[e.prop]]&&!k.cssHooks[e.prop]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}},et.propHooks.scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=et.prototype.init,k.fx.step={};var tt,nt,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){nt&&(!1===i.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,k.fx.interval),k.fx.tick())}function it(){return n.setTimeout(function(){tt=void 0}),tt=Date.now()}function lt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ae[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function st(e,t,n){for(var r,o=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),a=0,i=o.length;a<i;a++)if(r=o[a].call(n,t,e))return r}function ct(e,t,n){var r,o,a=0,i=ct.prefilters.length,l=k.Deferred().always(function(){delete s.elem}),s=function(){if(o)return!1;for(var t=tt||it(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),a=0,i=c.tweens.length;a<i;a++)c.tweens[a].run(r);return l.notifyWith(e,[c,r,n]),r<1&&i?n:(i||l.notifyWith(e,[c,1,0]),l.resolveWith(e,[c]),!1)},c=l.promise({elem:e,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:t,originalOptions:n,startTime:tt||it(),duration:n.duration,tweens:[],createTween:function(t,n){var r=k.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(l.notifyWith(e,[c,1,0]),l.resolveWith(e,[c,t])):l.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,r,o,a,i;for(n in e)if(o=t[r=X(n)],a=e[n],Array.isArray(a)&&(o=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),(i=k.cssHooks[r])&&"expand"in i)for(n in a=i.expand(a),delete e[r],a)n in e||(e[n]=a[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);a<i;a++)if(r=ct.prefilters[a].call(c,e,u,c.opts))return v(r.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return k.map(u,st,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(s,{elem:e,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(U);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,a,i,l,s,c,u,d="width"in t||"height"in t,p=this,f={},m=e.style,h=e.nodeType&&ie(e),g=J.get(e,"fxshow");for(r in n.queue||(null==(i=k._queueHooks(e,"fx")).unqueued&&(i.unqueued=0,l=i.empty.fire,i.empty.fire=function(){i.unqueued||l()}),i.unqueued++,p.always(function(){p.always(function(){i.unqueued--,k.queue(e,"fx").length||i.empty.fire()})})),t)if(o=t[r],rt.test(o)){if(delete t[r],a=a||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;h=!0}f[r]=g&&g[r]||k.style(e,r)}if((s=!k.isEmptyObject(t))||!k.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[m.overflow,m.overflowX,m.overflowY],null==(c=g&&g.display)&&(c=J.get(e,"display")),"none"===(u=k.css(e,"display"))&&(c?u=c:(de([e],!0),c=e.style.display||c,u=k.css(e,"display"),de([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===k.css(e,"float")&&(s||(p.done(function(){m.display=c}),null==c&&(u=m.display,c="none"===u?"":u)),m.display="inline-block")),n.overflow&&(m.overflow="hidden",p.always(function(){m.overflow=n.overflow[0],m.overflowX=n.overflow[1],m.overflowY=n.overflow[2]})),s=!1,f)s||(g?"hidden"in g&&(h=g.hidden):g=J.access(e,"fxshow",{display:c}),a&&(g.hidden=!h),h&&de([e],!0),p.done(function(){for(r in h||de([e]),J.remove(e,"fxshow"),f)k.style(e,r,f[r])})),s=st(h?g[r]:0,r,p),r in g||(g[r]=s.start,h&&(s.end=s.start,s.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ie).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=k.isEmptyObject(e),a=k.speed(t,n,r),i=function(){var t=ct(this,k.extend({},e),a);(o||J.get(this,"finish"))&&t.stop(!0)};return i.finish=i,o||!1===a.queue?this.each(i):this.queue(a.queue,i)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",a=k.timers,i=J.get(this);if(o)i[o]&&i[o].stop&&r(i[o]);else for(o in i)i[o]&&i[o].stop&&ot.test(o)&&r(i[o]);for(o=a.length;o--;)a[o].elem!==this||null!=e&&a[o].queue!==e||(a[o].anim.stop(n),t=!1,a.splice(o,1));!t&&n||k.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],a=k.timers,i=r?r.length:0;for(n.finish=!0,k.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<i;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),k.each(["toggle","show","hide"],function(e,t){var n=k.fn[t];k.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,r,o)}}),k.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){k.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),tt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){nt||(nt=!0,at())},k.fx.stop=function(){nt=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(e,t){return e=k.fx&&k.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=i.createElement("input"),t=i.createElement("select").appendChild(i.createElement("option"));e.type="checkbox",b.checkOn=""!==e.value,b.optSelected=t.selected,(e=i.createElement("input")).value="t",e.type="radio",b.radioValue="t"===e.value}();var ut,dt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return V(this,k.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,o,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?k.prop(e,t,n):(1===a&&k.isXMLDoc(e)||(o=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ut:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!b.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(U);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ut={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||k.find.attr;dt[t]=function(e,t,r){var o,a,i=t.toLowerCase();return r||(a=dt[i],dt[i]=o,o=null!=n(e,t,r)?i:null,dt[i]=a),o}});var pt=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function mt(e){return(e.match(U)||[]).join(" ")}function ht(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(U)||[]}k.fn.extend({prop:function(e,t){return V(this,k.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,o,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&k.isXMLDoc(e)||(t=k.propFix[t]||t,o=k.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),b.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(e){var t,n,r,o,a,i,l,s=0;if(v(e))return this.each(function(t){k(this).addClass(e.call(this,t,ht(this)))});if((t=gt(e)).length)for(;n=this[s++];)if(o=ht(n),r=1===n.nodeType&&" "+mt(o)+" "){for(i=0;a=t[i++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");o!==(l=mt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,a,i,l,s=0;if(v(e))return this.each(function(t){k(this).removeClass(e.call(this,t,ht(this)))});if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;n=this[s++];)if(o=ht(n),r=1===n.nodeType&&" "+mt(o)+" "){for(i=0;a=t[i++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");o!==(l=mt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each(function(n){k(this).toggleClass(e.call(this,n,ht(this),t),t)}):this.each(function(){var t,o,a,i;if(r)for(o=0,a=k(this),i=gt(e);t=i[o++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=ht(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+mt(ht(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;k.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,k(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=k.map(o,function(e){return null==e?"":e+""})),(t=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=k.valHooks[o.type]||k.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(bt,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,o=e.options,a=e.selectedIndex,i="select-one"===e.type,l=i?null:[],s=i?a+1:o.length;for(r=a<0?s:i?a:0;r<s;r++)if(((n=o[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=k(n).val(),i)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,a=k.makeArray(t),i=o.length;i--;)((r=o[i]).selected=k.inArray(k.valHooks.option.get(r),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=k.inArray(k(e).val(),t)>-1}},b.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),b.focusin="onfocusin"in n;var vt=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,r,o){var a,l,s,c,u,d,p,f,h=[r||i],g=m.call(e,"type")?e.type:e,b=m.call(e,"namespace")?e.namespace.split("."):[];if(l=f=s=r=r||i,3!==r.nodeType&&8!==r.nodeType&&!vt.test(g+k.event.triggered)&&(g.indexOf(".")>-1&&(g=(b=g.split(".")).shift(),b.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[k.expando]?e:new k.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=b.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:k.makeArray(t,[e]),p=k.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!y(r)){for(c=p.delegateType||g,vt.test(c+g)||(l=l.parentNode);l;l=l.parentNode)h.push(l),s=l;s===(r.ownerDocument||i)&&h.push(s.defaultView||s.parentWindow||n)}for(a=0;(l=h[a++])&&!e.isPropagationStopped();)f=l,e.type=a>1?c:p.bindType||g,(d=(J.get(l,"events")||{})[e.type]&&J.get(l,"handle"))&&d.apply(l,t),(d=u&&l[u])&&d.apply&&Y(l)&&(e.result=d.apply(l,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),t)||!Y(r)||u&&v(r[g])&&!y(r)&&((s=r[u])&&(r[u]=null),k.event.triggered=g,e.isPropagationStopped()&&f.addEventListener(g,yt),r[g](),e.isPropagationStopped()&&f.removeEventListener(g,yt),k.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),b.focusin||k.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){k.event.simulate(t,e.target,k.event.fix(e))};k.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=J.access(r,t);o||r.addEventListener(e,n,!0),J.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=J.access(r,t)-1;o?J.access(r,t,o):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var xt=n.location,wt=Date.now(),Et=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var kt=/\[\]$/,_t=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function St(e,t,n,r){var o;if(Array.isArray(t))k.each(t,function(t,o){n||kt.test(e)?r(e,o):St(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==E(t))r(e,t);else for(o in t)St(e+"["+o+"]",t[o],n,r)}k.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){o(this.name,this.value)});else for(n in e)St(n,e[n],t,o);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&Tt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var Ot=/%20/g,Pt=/#.*$/,Nt=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Dt=/^\/\//,At={},Rt={},Mt="*/".concat("*"),Lt=i.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,a=t.toLowerCase().match(U)||[];if(v(n))for(;r=a[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var o={},a=e===Rt;function i(l){var s;return o[l]=!0,k.each(e[l]||[],function(e,l){var c=l(t,n,r);return"string"!=typeof c||a||o[c]?a?!(s=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),s}return i(t.dataTypes[0])||!o["*"]&&i("*")}function Ht(e,t){var n,r,o=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Lt.href=xt.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ht(Ht(e,k.ajaxSettings),t):Ht(k.ajaxSettings,e)},ajaxPrefilter:Ut(At),ajaxTransport:Ut(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,a,l,s,c,u,d,p,f,m=k.ajaxSetup({},t),h=m.context||m,g=m.context&&(h.nodeType||h.jquery)?k(h):k.event,b=k.Deferred(),v=k.Callbacks("once memory"),y=m.statusCode||{},x={},w={},E="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(u){if(!l)for(l={};t=jt.exec(a);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)_.always(e[_.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||E;return r&&r.abort(t),C(0,t),this}};if(b.promise(_),m.url=((e||m.url||xt.href)+"").replace(Dt,xt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(U)||[""],null==m.crossDomain){c=i.createElement("a");try{c.href=m.url,c.href=c.href,m.crossDomain=Lt.protocol+"//"+Lt.host!=c.protocol+"//"+c.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=k.param(m.data,m.traditional)),Ft(At,m,t,_),u)return _;for(p in(d=k.event&&m.global)&&0==k.active++&&k.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!It.test(m.type),o=m.url.replace(Pt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Ot,"+")):(f=m.url.slice(o.length),m.data&&(m.processData||"string"==typeof m.data)&&(o+=(Et.test(o)?"&":"?")+m.data,delete m.data),!1===m.cache&&(o=o.replace(Nt,"$1"),f=(Et.test(o)?"&":"?")+"_="+wt+++f),m.url=o+f),m.ifModified&&(k.lastModified[o]&&_.setRequestHeader("If-Modified-Since",k.lastModified[o]),k.etag[o]&&_.setRequestHeader("If-None-Match",k.etag[o])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&_.setRequestHeader("Content-Type",m.contentType),_.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Mt+"; q=0.01":""):m.accepts["*"]),m.headers)_.setRequestHeader(p,m.headers[p]);if(m.beforeSend&&(!1===m.beforeSend.call(h,_,m)||u))return _.abort();if(E="abort",v.add(m.complete),_.done(m.success),_.fail(m.error),r=Ft(Rt,m,t,_)){if(_.readyState=1,d&&g.trigger("ajaxSend",[_,m]),u)return _;m.async&&m.timeout>0&&(s=n.setTimeout(function(){_.abort("timeout")},m.timeout));try{u=!1,r.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,i,l){var c,p,f,x,w,E=t;u||(u=!0,s&&n.clearTimeout(s),r=void 0,a=l||"",_.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(x=function(e,t,n){for(var r,o,a,i,l=e.contents,s=e.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){s.unshift(o);break}if(s[0]in n)a=s[0];else{for(o in n){if(!s[0]||e.converters[o+" "+s[0]]){a=o;break}i||(i=o)}a=a||i}if(a)return a!==s[0]&&s.unshift(a),n[a]}(m,_,i)),x=function(e,t,n,r){var o,a,i,l,s,c={},u=e.dataTypes.slice();if(u[1])for(i in e.converters)c[i.toLowerCase()]=e.converters[i];for(a=u.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!s&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),s=a,a=u.shift())if("*"===a)a=s;else if("*"!==s&&s!==a){if(!(i=c[s+" "+a]||c["* "+a]))for(o in c)if((l=o.split(" "))[1]===a&&(i=c[s+" "+l[0]]||c["* "+l[0]])){!0===i?i=c[o]:!0!==c[o]&&(a=l[0],u.unshift(l[1]));break}if(!0!==i)if(i&&e.throws)t=i(t);else try{t=i(t)}catch(e){return{state:"parsererror",error:i?e:"No conversion from "+s+" to "+a}}}return{state:"success",data:t}}(m,x,_,c),c?(m.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(k.lastModified[o]=w),(w=_.getResponseHeader("etag"))&&(k.etag[o]=w)),204===e||"HEAD"===m.type?E="nocontent":304===e?E="notmodified":(E=x.state,p=x.data,c=!(f=x.error))):(f=E,!e&&E||(E="error",e<0&&(e=0))),_.status=e,_.statusText=(t||E)+"",c?b.resolveWith(h,[p,E,_]):b.rejectWith(h,[_,E,f]),_.statusCode(y),y=void 0,d&&g.trigger(c?"ajaxSuccess":"ajaxError",[_,m,c?p:f]),v.fireWith(h,[_,E]),d&&(g.trigger("ajaxComplete",[_,m]),--k.active||k.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,t){k[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),k.ajax(k.extend({url:e,type:t,dataType:o,data:n,success:r},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return v(e)?this.each(function(t){k(this).wrapInner(e.call(this,t))}):this.each(function(){var t=k(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=v(e);return this.each(function(n){k(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},Bt=k.ajaxSettings.xhr();b.cors=!!Bt&&"withCredentials"in Bt,b.ajax=Bt=!!Bt,k.ajaxTransport(function(e){var t,r;if(b.cors||Bt&&!e.crossDomain)return{send:function(o,a){var i,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)l[i]=e.xhrFields[i];for(i in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(i,o[i]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?a(0,"error"):a(l.status,l.statusText):a(zt[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=k("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),i.head.appendChild(t[0])},abort:function(){n&&n()}}});var Wt=[],qt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||k.expando+"_"+wt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,r){var o,a,i,l=!1!==e.jsonp&&(qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&qt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(qt,"$1"+o):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return i||k.error(o+" was not called"),i[0]},e.dataTypes[0]="json",a=n[o],n[o]=function(){i=arguments},r.always(function(){void 0===a?k(n).removeProp(o):n[o]=a,e[o]&&(e.jsonpCallback=t.jsonpCallback,Wt.push(o)),i&&v(a)&&a(i[0]),i=a=void 0}),"script"}),b.createHTMLDocument=function(){var e=i.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(b.createHTMLDocument?((r=(t=i.implementation.createHTMLDocument("")).createElement("base")).href=i.location.href,t.head.appendChild(r)):t=i),o=j.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=ye([e],t,a),a&&a.length&&k(a).remove(),k.merge([],o.childNodes)));var r,o,a},k.fn.load=function(e,t,n){var r,o,a,i=this,l=e.indexOf(" ");return l>-1&&(r=mt(e.slice(l)),e=e.slice(0,l)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),i.length>0&&k.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){a=arguments,i.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){i.each(function(){n.apply(this,a||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(e){return k.grep(k.timers,function(t){return e===t.elem}).length},k.offset={setOffset:function(e,t,n){var r,o,a,i,l,s,c=k.css(e,"position"),u=k(e),d={};"static"===c&&(e.style.position="relative"),l=u.offset(),a=k.css(e,"top"),s=k.css(e,"left"),("absolute"===c||"fixed"===c)&&(a+s).indexOf("auto")>-1?(i=(r=u.position()).top,o=r.left):(i=parseFloat(a)||0,o=parseFloat(s)||0),v(t)&&(t=t.call(e,n,k.extend({},l))),null!=t.top&&(d.top=t.top-l.top+i),null!=t.left&&(d.left=t.left-l.left+o),"using"in t?t.using.call(e,d):u.css(d)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){k.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),o.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-k.css(r,"marginTop",!0),left:t.left-o.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===k.css(e,"position");)e=e.offsetParent;return e||xe})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;k.fn[e]=function(r){return V(this,function(e,r,o){var a;if(y(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===o)return a?a[t]:e[r];a?a.scrollTo(n?a.pageXOffset:o,n?o:a.pageYOffset):e[r]=o},e,r,arguments.length)}}),k.each(["top","left"],function(e,t){k.cssHooks[t]=We(b.pixelPosition,function(e,n){if(n)return n=Be(e,t),Fe.test(n)?k(e).position()[t]+"px":n})}),k.each({Height:"height",Width:"width"},function(e,t){k.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){k.fn[r]=function(o,a){var i=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===a?"margin":"border");return V(this,function(t,n,o){var a;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===o?k.css(t,n,l):k.style(t,n,o,l)},t,i?o:void 0,i)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){k.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,o},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=N,k.isFunction=v,k.isWindow=y,k.camelCase=X,k.type=E,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return k}.apply(t,[]))||(e.exports=r);var Vt=n.jQuery,Kt=n.$;return k.noConflict=function(e){return n.$===k&&(n.$=Kt),e&&n.jQuery===k&&(n.jQuery=Vt),k},o||(n.jQuery=n.$=k),k})},function(e,t,n){
/*!
  * Bootstrap v4.2.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){a(e,t,n[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t;var l="transitionend";function s(e){return{}.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase()}function c(e){var t=this,r=!1;return n(this).one(u.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||u.triggerTransitionEnd(t)},e),this}var u={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}return t&&document.querySelector(t)?t:null},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=n(e).css("transition-duration"),r=n(e).css("transition-delay"),o=parseFloat(t),a=parseFloat(r);return o||a?(t=t.split(",")[0],r=r.split(",")[0],1e3*(parseFloat(t)+parseFloat(r))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){n(e).trigger(l)},supportsTransitionEnd:function(){return Boolean(l)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r],a=t[r],i=a&&u.isElement(a)?"element":s(a);if(!new RegExp(o).test(i))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+i+'" but expected type "'+o+'".')}},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?u.findShadowRoot(e.parentNode):null}};(n=n&&n.hasOwnProperty("default")?n.default:n).fn.emulateTransitionEnd=c,n.event.special[u.TRANSITION_END]={bindType:l,delegateType:l,handle:function(e){if(n(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var d=n.fn.alert,p={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},f={ALERT:"alert",FADE:"fade",SHOW:"show"},m=function(){function e(e){this._element=e}var t=e.prototype;return t.close=function(e){var t=this._element;e&&(t=this._getRootElement(e));var n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},t.dispose=function(){n.removeData(this._element,"bs.alert"),this._element=null},t._getRootElement=function(e){var t=u.getSelectorFromElement(e),r=!1;return t&&(r=document.querySelector(t)),r||(r=n(e).closest("."+f.ALERT)[0]),r},t._triggerCloseEvent=function(e){var t=n.Event(p.CLOSE);return n(e).trigger(t),t},t._removeElement=function(e){var t=this;if(n(e).removeClass(f.SHOW),n(e).hasClass(f.FADE)){var r=u.getTransitionDurationFromElement(e);n(e).one(u.TRANSITION_END,function(n){return t._destroyElement(e,n)}).emulateTransitionEnd(r)}else this._destroyElement(e)},t._destroyElement=function(e){n(e).detach().trigger(p.CLOSED).remove()},e._jQueryInterface=function(t){return this.each(function(){var r=n(this),o=r.data("bs.alert");o||(o=new e(this),r.data("bs.alert",o)),"close"===t&&o[t](this)})},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),e}();n(document).on(p.CLICK_DATA_API,'[data-dismiss="alert"]',m._handleDismiss(new m)),n.fn.alert=m._jQueryInterface,n.fn.alert.Constructor=m,n.fn.alert.noConflict=function(){return n.fn.alert=d,m._jQueryInterface};var h=n.fn.button,g={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},b={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:'input:not([type="hidden"])',ACTIVE:".active",BUTTON:".btn"},v={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},y=function(){function e(e){this._element=e}var t=e.prototype;return t.toggle=function(){var e=!0,t=!0,r=n(this._element).closest(b.DATA_TOGGLE)[0];if(r){var o=this._element.querySelector(b.INPUT);if(o){if("radio"===o.type)if(o.checked&&this._element.classList.contains(g.ACTIVE))e=!1;else{var a=r.querySelector(b.ACTIVE);a&&n(a).removeClass(g.ACTIVE)}if(e){if(o.hasAttribute("disabled")||r.hasAttribute("disabled")||o.classList.contains("disabled")||r.classList.contains("disabled"))return;o.checked=!this._element.classList.contains(g.ACTIVE),n(o).trigger("change")}o.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(g.ACTIVE)),e&&n(this._element).toggleClass(g.ACTIVE)},t.dispose=function(){n.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(t){return this.each(function(){var r=n(this).data("bs.button");r||(r=new e(this),n(this).data("bs.button",r)),"toggle"===t&&r[t]()})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),e}();n(document).on(v.CLICK_DATA_API,b.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var t=e.target;n(t).hasClass(g.BUTTON)||(t=n(t).closest(b.BUTTON)),y._jQueryInterface.call(n(t),"toggle")}).on(v.FOCUS_BLUR_DATA_API,b.DATA_TOGGLE_CARROT,function(e){var t=n(e.target).closest(b.BUTTON)[0];n(t).toggleClass(g.FOCUS,/^focus(in)?$/.test(e.type))}),n.fn.button=y._jQueryInterface,n.fn.button.Constructor=y,n.fn.button.noConflict=function(){return n.fn.button=h,y._jQueryInterface};var x="carousel",w=".bs.carousel",E=n.fn[x],k={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},_={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},C={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},T={SLIDE:"slide.bs.carousel",SLID:"slid.bs.carousel",KEYDOWN:"keydown.bs.carousel",MOUSEENTER:"mouseenter.bs.carousel",MOUSELEAVE:"mouseleave.bs.carousel",TOUCHSTART:"touchstart.bs.carousel",TOUCHMOVE:"touchmove.bs.carousel",TOUCHEND:"touchend.bs.carousel",POINTERDOWN:"pointerdown.bs.carousel",POINTERUP:"pointerup.bs.carousel",DRAG_START:"dragstart.bs.carousel",LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},S={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item",POINTER_EVENT:"pointer-event"},O={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",ITEM_IMG:".carousel-item img",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},P={TOUCH:"touch",PEN:"pen"},N=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(O.INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var t=e.prototype;return t.next=function(){this._isSliding||this._slide(C.NEXT)},t.nextWhenVisible=function(){!document.hidden&&n(this._element).is(":visible")&&"hidden"!==n(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(C.PREV)},t.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(O.NEXT_PREV)&&(u.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(e){var t=this;this._activeElement=this._element.querySelector(O.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)n(this._element).one(T.SLID,function(){return t.to(e)});else{if(r===e)return this.pause(),void this.cycle();var o=e>r?C.NEXT:C.PREV;this._slide(o,this._items[e])}},t.dispose=function(){n(this._element).off(w),n.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(e){return e=i({},k,e),u.typeCheckConfig(x,e,_),e},t._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;t>0&&this.prev(),t<0&&this.next()}},t._addEventListeners=function(){var e=this;this._config.keyboard&&n(this._element).on(T.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&n(this._element).on(T.MOUSEENTER,function(t){return e.pause(t)}).on(T.MOUSELEAVE,function(t){return e.cycle(t)}),this._addTouchEventListeners()},t._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var t=function(t){e._pointerEvent&&P[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},r=function(t){e._pointerEvent&&P[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval))};n(this._element.querySelectorAll(O.ITEM_IMG)).on(T.DRAG_START,function(e){return e.preventDefault()}),this._pointerEvent?(n(this._element).on(T.POINTERDOWN,function(e){return t(e)}),n(this._element).on(T.POINTERUP,function(e){return r(e)}),this._element.classList.add(S.POINTER_EVENT)):(n(this._element).on(T.TOUCHSTART,function(e){return t(e)}),n(this._element).on(T.TOUCHMOVE,function(t){return function(t){t.originalEvent.touches&&t.originalEvent.touches.length>1?e.touchDeltaX=0:e.touchDeltaX=t.originalEvent.touches[0].clientX-e.touchStartX}(t)}),n(this._element).on(T.TOUCHEND,function(e){return r(e)}))}},t._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},t._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(O.ITEM)):[],this._items.indexOf(e)},t._getItemByDirection=function(e,t){var n=e===C.NEXT,r=e===C.PREV,o=this._getItemIndex(t),a=this._items.length-1,i=r&&0===o||n&&o===a;if(i&&!this._config.wrap)return t;var l=e===C.PREV?-1:1,s=(o+l)%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(e,t){var r=this._getItemIndex(e),o=this._getItemIndex(this._element.querySelector(O.ACTIVE_ITEM)),a=n.Event(T.SLIDE,{relatedTarget:e,direction:t,from:o,to:r});return n(this._element).trigger(a),a},t._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(O.ACTIVE));n(t).removeClass(S.ACTIVE);var r=this._indicatorsElement.children[this._getItemIndex(e)];r&&n(r).addClass(S.ACTIVE)}},t._slide=function(e,t){var r,o,a,i=this,l=this._element.querySelector(O.ACTIVE_ITEM),s=this._getItemIndex(l),c=t||l&&this._getItemByDirection(e,l),d=this._getItemIndex(c),p=Boolean(this._interval);if(e===C.NEXT?(r=S.LEFT,o=S.NEXT,a=C.LEFT):(r=S.RIGHT,o=S.PREV,a=C.RIGHT),c&&n(c).hasClass(S.ACTIVE))this._isSliding=!1;else{var f=this._triggerSlideEvent(c,a);if(!f.isDefaultPrevented()&&l&&c){this._isSliding=!0,p&&this.pause(),this._setActiveIndicatorElement(c);var m=n.Event(T.SLID,{relatedTarget:c,direction:a,from:s,to:d});if(n(this._element).hasClass(S.SLIDE)){n(c).addClass(o),u.reflow(c),n(l).addClass(r),n(c).addClass(r);var h=parseInt(c.getAttribute("data-interval"),10);h?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=h):this._config.interval=this._config.defaultInterval||this._config.interval;var g=u.getTransitionDurationFromElement(l);n(l).one(u.TRANSITION_END,function(){n(c).removeClass(r+" "+o).addClass(S.ACTIVE),n(l).removeClass(S.ACTIVE+" "+o+" "+r),i._isSliding=!1,setTimeout(function(){return n(i._element).trigger(m)},0)}).emulateTransitionEnd(g)}else n(l).removeClass(S.ACTIVE),n(c).addClass(S.ACTIVE),this._isSliding=!1,n(this._element).trigger(m);p&&this.cycle()}}},e._jQueryInterface=function(t){return this.each(function(){var r=n(this).data("bs.carousel"),o=i({},k,n(this).data());"object"==typeof t&&(o=i({},o,t));var a="string"==typeof t?t:o.slide;if(r||(r=new e(this,o),n(this).data("bs.carousel",r)),"number"==typeof t)r.to(t);else if("string"==typeof a){if(void 0===r[a])throw new TypeError('No method named "'+a+'"');r[a]()}else o.interval&&(r.pause(),r.cycle())})},e._dataApiClickHandler=function(t){var r=u.getSelectorFromElement(this);if(r){var o=n(r)[0];if(o&&n(o).hasClass(S.CAROUSEL)){var a=i({},n(o).data(),n(this).data()),l=this.getAttribute("data-slide-to");l&&(a.interval=!1),e._jQueryInterface.call(n(o),a),l&&n(o).data("bs.carousel").to(l),t.preventDefault()}}},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return k}}]),e}();n(document).on(T.CLICK_DATA_API,O.DATA_SLIDE,N._dataApiClickHandler),n(window).on(T.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(O.DATA_RIDE)),t=0,r=e.length;t<r;t++){var o=n(e[t]);N._jQueryInterface.call(o,o.data())}}),n.fn[x]=N._jQueryInterface,n.fn[x].Constructor=N,n.fn[x].noConflict=function(){return n.fn[x]=E,N._jQueryInterface};var j="collapse",I=n.fn[j],D={toggle:!0,parent:""},A={toggle:"boolean",parent:"(string|element)"},R={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},M={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},L={WIDTH:"width",HEIGHT:"height"},U={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},F=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(U.DATA_TOGGLE)),r=0,o=n.length;r<o;r++){var a=n[r],i=u.getSelectorFromElement(a),l=[].slice.call(document.querySelectorAll(i)).filter(function(t){return t===e});null!==i&&l.length>0&&(this._selector=i,this._triggerArray.push(a))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=e.prototype;return t.toggle=function(){n(this._element).hasClass(M.SHOW)?this.hide():this.show()},t.show=function(){var t,r,o=this;if(!(this._isTransitioning||n(this._element).hasClass(M.SHOW)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(U.ACTIVES)).filter(function(e){return"string"==typeof o._config.parent?e.getAttribute("data-parent")===o._config.parent:e.classList.contains(M.COLLAPSE)})).length&&(t=null),t&&(r=n(t).not(this._selector).data("bs.collapse"))&&r._isTransitioning))){var a=n.Event(R.SHOW);if(n(this._element).trigger(a),!a.isDefaultPrevented()){t&&(e._jQueryInterface.call(n(t).not(this._selector),"hide"),r||n(t).data("bs.collapse",null));var i=this._getDimension();n(this._element).removeClass(M.COLLAPSE).addClass(M.COLLAPSING),this._element.style[i]=0,this._triggerArray.length&&n(this._triggerArray).removeClass(M.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var l=i[0].toUpperCase()+i.slice(1),s="scroll"+l,c=u.getTransitionDurationFromElement(this._element);n(this._element).one(u.TRANSITION_END,function(){n(o._element).removeClass(M.COLLAPSING).addClass(M.COLLAPSE).addClass(M.SHOW),o._element.style[i]="",o.setTransitioning(!1),n(o._element).trigger(R.SHOWN)}).emulateTransitionEnd(c),this._element.style[i]=this._element[s]+"px"}}},t.hide=function(){var e=this;if(!this._isTransitioning&&n(this._element).hasClass(M.SHOW)){var t=n.Event(R.HIDE);if(n(this._element).trigger(t),!t.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",u.reflow(this._element),n(this._element).addClass(M.COLLAPSING).removeClass(M.COLLAPSE).removeClass(M.SHOW);var o=this._triggerArray.length;if(o>0)for(var a=0;a<o;a++){var i=this._triggerArray[a],l=u.getSelectorFromElement(i);if(null!==l){var s=n([].slice.call(document.querySelectorAll(l)));s.hasClass(M.SHOW)||n(i).addClass(M.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[r]="";var c=u.getTransitionDurationFromElement(this._element);n(this._element).one(u.TRANSITION_END,function(){e.setTransitioning(!1),n(e._element).removeClass(M.COLLAPSING).addClass(M.COLLAPSE).trigger(R.HIDDEN)}).emulateTransitionEnd(c)}}},t.setTransitioning=function(e){this._isTransitioning=e},t.dispose=function(){n.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(e){return(e=i({},D,e)).toggle=Boolean(e.toggle),u.typeCheckConfig(j,e,A),e},t._getDimension=function(){var e=n(this._element).hasClass(L.WIDTH);return e?L.WIDTH:L.HEIGHT},t._getParent=function(){var t,r=this;u.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',a=[].slice.call(t.querySelectorAll(o));return n(a).each(function(t,n){r._addAriaAndCollapsedClass(e._getTargetFromElement(n),[n])}),t},t._addAriaAndCollapsedClass=function(e,t){var r=n(e).hasClass(M.SHOW);t.length&&n(t).toggleClass(M.COLLAPSED,!r).attr("aria-expanded",r)},e._getTargetFromElement=function(e){var t=u.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(t){return this.each(function(){var r=n(this),o=r.data("bs.collapse"),a=i({},D,r.data(),"object"==typeof t&&t?t:{});if(!o&&a.toggle&&/show|hide/.test(t)&&(a.toggle=!1),o||(o=new e(this,a),r.data("bs.collapse",o)),"string"==typeof t){if(void 0===o[t])throw new TypeError('No method named "'+t+'"');o[t]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return D}}]),e}();n(document).on(R.CLICK_DATA_API,U.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var t=n(this),r=u.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(r));n(o).each(function(){var e=n(this),r=e.data("bs.collapse"),o=r?"toggle":t.data();F._jQueryInterface.call(e,o)})}),n.fn[j]=F._jQueryInterface,n.fn[j].Constructor=F,n.fn[j].noConflict=function(){return n.fn[j]=I,F._jQueryInterface};var H="dropdown",z=n.fn[H],B=new RegExp("38|40|27"),W={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},q={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},V={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},K={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},G={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},$={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},X=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var r=e.prototype;return r.toggle=function(){if(!this._element.disabled&&!n(this._element).hasClass(q.DISABLED)){var r=e._getParentFromElement(this._element),o=n(this._menu).hasClass(q.SHOW);if(e._clearMenus(),!o){var a={relatedTarget:this._element},i=n.Event(W.SHOW,a);if(n(r).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var l=this._element;"parent"===this._config.reference?l=r:u.isElement(this._config.reference)&&(l=this._config.reference,void 0!==this._config.reference.jquery&&(l=this._config.reference[0])),"scrollParent"!==this._config.boundary&&n(r).addClass(q.POSITION_STATIC),this._popper=new t(l,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===n(r).closest(V.NAVBAR_NAV).length&&n(document.body).children().on("mouseover",null,n.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),n(this._menu).toggleClass(q.SHOW),n(r).toggleClass(q.SHOW).trigger(n.Event(W.SHOWN,a))}}}},r.show=function(){if(!(this._element.disabled||n(this._element).hasClass(q.DISABLED)||n(this._menu).hasClass(q.SHOW))){var t={relatedTarget:this._element},r=n.Event(W.SHOW,t),o=e._getParentFromElement(this._element);n(o).trigger(r),r.isDefaultPrevented()||(n(this._menu).toggleClass(q.SHOW),n(o).toggleClass(q.SHOW).trigger(n.Event(W.SHOWN,t)))}},r.hide=function(){if(!this._element.disabled&&!n(this._element).hasClass(q.DISABLED)&&n(this._menu).hasClass(q.SHOW)){var t={relatedTarget:this._element},r=n.Event(W.HIDE,t),o=e._getParentFromElement(this._element);n(o).trigger(r),r.isDefaultPrevented()||(n(this._menu).toggleClass(q.SHOW),n(o).toggleClass(q.SHOW).trigger(n.Event(W.HIDDEN,t)))}},r.dispose=function(){n.removeData(this._element,"bs.dropdown"),n(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},r.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},r._addEventListeners=function(){var e=this;n(this._element).on(W.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},r._getConfig=function(e){return e=i({},this.constructor.Default,n(this._element).data(),e),u.typeCheckConfig(H,e,this.constructor.DefaultType),e},r._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(V.MENU))}return this._menu},r._getPlacement=function(){var e=n(this._element.parentNode),t=K.BOTTOM;return e.hasClass(q.DROPUP)?(t=K.TOP,n(this._menu).hasClass(q.MENURIGHT)&&(t=K.TOPEND)):e.hasClass(q.DROPRIGHT)?t=K.RIGHT:e.hasClass(q.DROPLEFT)?t=K.LEFT:n(this._menu).hasClass(q.MENURIGHT)&&(t=K.BOTTOMEND),t},r._detectNavbar=function(){return n(this._element).closest(".navbar").length>0},r._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=i({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},e._jQueryInterface=function(t){return this.each(function(){var r=n(this).data("bs.dropdown"),o="object"==typeof t?t:null;if(r||(r=new e(this,o),n(this).data("bs.dropdown",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var r=[].slice.call(document.querySelectorAll(V.DATA_TOGGLE)),o=0,a=r.length;o<a;o++){var i=e._getParentFromElement(r[o]),l=n(r[o]).data("bs.dropdown"),s={relatedTarget:r[o]};if(t&&"click"===t.type&&(s.clickEvent=t),l){var c=l._menu;if(n(i).hasClass(q.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&n.contains(i,t.target))){var u=n.Event(W.HIDE,s);n(i).trigger(u),u.isDefaultPrevented()||("ontouchstart"in document.documentElement&&n(document.body).children().off("mouseover",null,n.noop),r[o].setAttribute("aria-expanded","false"),n(c).removeClass(q.SHOW),n(i).removeClass(q.SHOW).trigger(n.Event(W.HIDDEN,s)))}}}},e._getParentFromElement=function(e){var t,n=u.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},e._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||n(t.target).closest(V.MENU).length)):B.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!n(this).hasClass(q.DISABLED))){var r=e._getParentFromElement(this),o=n(r).hasClass(q.SHOW);if(o&&(!o||27!==t.which&&32!==t.which)){var a=[].slice.call(r.querySelectorAll(V.VISIBLE_ITEMS));if(0!==a.length){var i=a.indexOf(t.target);38===t.which&&i>0&&i--,40===t.which&&i<a.length-1&&i++,i<0&&(i=0),a[i].focus()}}else{if(27===t.which){var l=r.querySelector(V.DATA_TOGGLE);n(l).trigger("focus")}n(this).trigger("click")}}},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return G}},{key:"DefaultType",get:function(){return $}}]),e}();n(document).on(W.KEYDOWN_DATA_API,V.DATA_TOGGLE,X._dataApiKeydownHandler).on(W.KEYDOWN_DATA_API,V.MENU,X._dataApiKeydownHandler).on(W.CLICK_DATA_API+" "+W.KEYUP_DATA_API,X._clearMenus).on(W.CLICK_DATA_API,V.DATA_TOGGLE,function(e){e.preventDefault(),e.stopPropagation(),X._jQueryInterface.call(n(this),"toggle")}).on(W.CLICK_DATA_API,V.FORM_CHILD,function(e){e.stopPropagation()}),n.fn[H]=X._jQueryInterface,n.fn[H].Constructor=X,n.fn[H].noConflict=function(){return n.fn[H]=z,X._jQueryInterface};var Y=n.fn.modal,Q={backdrop:!0,keyboard:!0,focus:!0,show:!0},J={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Z={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},ee={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},te={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},ne=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(te.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var t=e.prototype;return t.toggle=function(e){return this._isShown?this.hide():this.show(e)},t.show=function(e){var t=this;if(!this._isShown&&!this._isTransitioning){n(this._element).hasClass(ee.FADE)&&(this._isTransitioning=!0);var r=n.Event(Z.SHOW,{relatedTarget:e});n(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),n(this._element).on(Z.CLICK_DISMISS,te.DATA_DISMISS,function(e){return t.hide(e)}),n(this._dialog).on(Z.MOUSEDOWN_DISMISS,function(){n(t._element).one(Z.MOUSEUP_DISMISS,function(e){n(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},t.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var r=n.Event(Z.HIDE);if(n(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var o=n(this._element).hasClass(ee.FADE);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),n(document).off(Z.FOCUSIN),n(this._element).removeClass(ee.SHOW),n(this._element).off(Z.CLICK_DISMISS),n(this._dialog).off(Z.MOUSEDOWN_DISMISS),o){var a=u.getTransitionDurationFromElement(this._element);n(this._element).one(u.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(a)}else this._hideModal()}}},t.dispose=function(){[window,this._element,this._dialog].forEach(function(e){return n(e).off(".bs.modal")}),n(document).off(Z.FOCUSIN),n.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(e){return e=i({},Q,e),u.typeCheckConfig("modal",e,J),e},t._showElement=function(e){var t=this,r=n(this._element).hasClass(ee.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.scrollTop=0,r&&u.reflow(this._element),n(this._element).addClass(ee.SHOW),this._config.focus&&this._enforceFocus();var o=n.Event(Z.SHOWN,{relatedTarget:e}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,n(t._element).trigger(o)};if(r){var i=u.getTransitionDurationFromElement(this._dialog);n(this._dialog).one(u.TRANSITION_END,a).emulateTransitionEnd(i)}else a()},t._enforceFocus=function(){var e=this;n(document).off(Z.FOCUSIN).on(Z.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===n(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?n(this._element).on(Z.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||n(this._element).off(Z.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?n(window).on(Z.RESIZE,function(t){return e.handleUpdate(t)}):n(window).off(Z.RESIZE)},t._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){n(document.body).removeClass(ee.OPEN),e._resetAdjustments(),e._resetScrollbar(),n(e._element).trigger(Z.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(n(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(e){var t=this,r=n(this._element).hasClass(ee.FADE)?ee.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=ee.BACKDROP,r&&this._backdrop.classList.add(r),n(this._backdrop).appendTo(document.body),n(this._element).on(Z.CLICK_DISMISS,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),r&&u.reflow(this._backdrop),n(this._backdrop).addClass(ee.SHOW),!e)return;if(!r)return void e();var o=u.getTransitionDurationFromElement(this._backdrop);n(this._backdrop).one(u.TRANSITION_END,e).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){n(this._backdrop).removeClass(ee.SHOW);var a=function(){t._removeBackdrop(),e&&e()};if(n(this._element).hasClass(ee.FADE)){var i=u.getTransitionDurationFromElement(this._backdrop);n(this._backdrop).one(u.TRANSITION_END,a).emulateTransitionEnd(i)}else a()}else e&&e()},t._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(te.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(te.STICKY_CONTENT));n(t).each(function(t,r){var o=r.style.paddingRight,a=n(r).css("padding-right");n(r).data("padding-right",o).css("padding-right",parseFloat(a)+e._scrollbarWidth+"px")}),n(r).each(function(t,r){var o=r.style.marginRight,a=n(r).css("margin-right");n(r).data("margin-right",o).css("margin-right",parseFloat(a)-e._scrollbarWidth+"px")});var o=document.body.style.paddingRight,a=n(document.body).css("padding-right");n(document.body).data("padding-right",o).css("padding-right",parseFloat(a)+this._scrollbarWidth+"px")}n(document.body).addClass(ee.OPEN)},t._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(te.FIXED_CONTENT));n(e).each(function(e,t){var r=n(t).data("padding-right");n(t).removeData("padding-right"),t.style.paddingRight=r||""});var t=[].slice.call(document.querySelectorAll(""+te.STICKY_CONTENT));n(t).each(function(e,t){var r=n(t).data("margin-right");void 0!==r&&n(t).css("margin-right",r).removeData("margin-right")});var r=n(document.body).data("padding-right");n(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},t._getScrollbarWidth=function(){var e=document.createElement("div");e.className=ee.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(t,r){return this.each(function(){var o=n(this).data("bs.modal"),a=i({},Q,n(this).data(),"object"==typeof t&&t?t:{});if(o||(o=new e(this,a),n(this).data("bs.modal",o)),"string"==typeof t){if(void 0===o[t])throw new TypeError('No method named "'+t+'"');o[t](r)}else a.show&&o.show(r)})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return Q}}]),e}();n(document).on(Z.CLICK_DATA_API,te.DATA_TOGGLE,function(e){var t,r=this,o=u.getSelectorFromElement(this);o&&(t=document.querySelector(o));var a=n(t).data("bs.modal")?"toggle":i({},n(t).data(),n(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var l=n(t).one(Z.SHOW,function(e){e.isDefaultPrevented()||l.one(Z.HIDDEN,function(){n(r).is(":visible")&&r.focus()})});ne._jQueryInterface.call(n(t),a,this)}),n.fn.modal=ne._jQueryInterface,n.fn.modal.Constructor=ne,n.fn.modal.noConflict=function(){return n.fn.modal=Y,ne._jQueryInterface};var re="tooltip",oe=n.fn.tooltip,ae=new RegExp("(^|\\s)bs-tooltip\\S+","g"),ie={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},le={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},se={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},ce={SHOW:"show",OUT:"out"},ue={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},de={FADE:"fade",SHOW:"show"},pe={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},fe={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},me=function(){function e(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(n),this.tip=null,this._setListeners()}var r=e.prototype;return r.enable=function(){this._isEnabled=!0},r.disable=function(){this._isEnabled=!1},r.toggleEnabled=function(){this._isEnabled=!this._isEnabled},r.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,r=n(e.currentTarget).data(t);r||(r=new this.constructor(e.currentTarget,this._getDelegateConfig()),n(e.currentTarget).data(t,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(n(this.getTipElement()).hasClass(de.SHOW))return void this._leave(null,this);this._enter(null,this)}},r.dispose=function(){clearTimeout(this._timeout),n.removeData(this.element,this.constructor.DATA_KEY),n(this.element).off(this.constructor.EVENT_KEY),n(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&n(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},r.show=function(){var e=this;if("none"===n(this.element).css("display"))throw new Error("Please use show on visible elements");var r=n.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){n(this.element).trigger(r);var o=u.findShadowRoot(this.element),a=n.contains(null!==o?o:this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!a)return;var i=this.getTipElement(),l=u.getUID(this.constructor.NAME);i.setAttribute("id",l),this.element.setAttribute("aria-describedby",l),this.setContent(),this.config.animation&&n(i).addClass(de.FADE);var s="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,c=this._getAttachment(s);this.addAttachmentClass(c);var d=this._getContainer();n(i).data(this.constructor.DATA_KEY,this),n.contains(this.element.ownerDocument.documentElement,this.tip)||n(i).appendTo(d),n(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new t(this.element,i,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:pe.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}}),n(i).addClass(de.SHOW),"ontouchstart"in document.documentElement&&n(document.body).children().on("mouseover",null,n.noop);var p=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,n(e.element).trigger(e.constructor.Event.SHOWN),t===ce.OUT&&e._leave(null,e)};if(n(this.tip).hasClass(de.FADE)){var f=u.getTransitionDurationFromElement(this.tip);n(this.tip).one(u.TRANSITION_END,p).emulateTransitionEnd(f)}else p()}},r.hide=function(e){var t=this,r=this.getTipElement(),o=n.Event(this.constructor.Event.HIDE),a=function(){t._hoverState!==ce.SHOW&&r.parentNode&&r.parentNode.removeChild(r),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),n(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if(n(this.element).trigger(o),!o.isDefaultPrevented()){if(n(r).removeClass(de.SHOW),"ontouchstart"in document.documentElement&&n(document.body).children().off("mouseover",null,n.noop),this._activeTrigger[fe.CLICK]=!1,this._activeTrigger[fe.FOCUS]=!1,this._activeTrigger[fe.HOVER]=!1,n(this.tip).hasClass(de.FADE)){var i=u.getTransitionDurationFromElement(r);n(r).one(u.TRANSITION_END,a).emulateTransitionEnd(i)}else a();this._hoverState=""}},r.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},r.isWithContent=function(){return Boolean(this.getTitle())},r.addAttachmentClass=function(e){n(this.getTipElement()).addClass("bs-tooltip-"+e)},r.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0],this.tip},r.setContent=function(){var e=this.getTipElement();this.setElementContent(n(e.querySelectorAll(pe.TOOLTIP_INNER)),this.getTitle()),n(e).removeClass(de.FADE+" "+de.SHOW)},r.setElementContent=function(e,t){var r=this.config.html;"object"==typeof t&&(t.nodeType||t.jquery)?r?n(t).parent().is(e)||e.empty().append(t):e.text(n(t).text()):e[r?"html":"text"](t)},r.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},r._getContainer=function(){return!1===this.config.container?document.body:u.isElement(this.config.container)?n(this.config.container):n(document).find(this.config.container)},r._getAttachment=function(e){return le[e.toUpperCase()]},r._setListeners=function(){var e=this,t=this.config.trigger.split(" ");t.forEach(function(t){if("click"===t)n(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(t!==fe.MANUAL){var r=t===fe.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=t===fe.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;n(e.element).on(r,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}}),n(this.element).closest(".modal").on("hide.bs.modal",function(){e.element&&e.hide()}),this.config.selector?this.config=i({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},r._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},r._enter=function(e,t){var r=this.constructor.DATA_KEY;(t=t||n(e.currentTarget).data(r))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),n(e.currentTarget).data(r,t)),e&&(t._activeTrigger["focusin"===e.type?fe.FOCUS:fe.HOVER]=!0),n(t.getTipElement()).hasClass(de.SHOW)||t._hoverState===ce.SHOW?t._hoverState=ce.SHOW:(clearTimeout(t._timeout),t._hoverState=ce.SHOW,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===ce.SHOW&&t.show()},t.config.delay.show):t.show())},r._leave=function(e,t){var r=this.constructor.DATA_KEY;(t=t||n(e.currentTarget).data(r))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),n(e.currentTarget).data(r,t)),e&&(t._activeTrigger["focusout"===e.type?fe.FOCUS:fe.HOVER]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=ce.OUT,t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){t._hoverState===ce.OUT&&t.hide()},t.config.delay.hide):t.hide())},r._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},r._getConfig=function(e){return"number"==typeof(e=i({},this.constructor.Default,n(this.element).data(),"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),u.typeCheckConfig(re,e,this.constructor.DefaultType),e},r._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},r._cleanTipClass=function(){var e=n(this.getTipElement()),t=e.attr("class").match(ae);null!==t&&t.length&&e.removeClass(t.join(""))},r._handlePopperPlacementChange=function(e){var t=e.instance;this.tip=t.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},r._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(n(e).removeClass(de.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(t){return this.each(function(){var r=n(this).data("bs.tooltip"),o="object"==typeof t&&t;if((r||!/dispose|hide/.test(t))&&(r||(r=new e(this,o),n(this).data("bs.tooltip",r)),"string"==typeof t)){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return se}},{key:"NAME",get:function(){return re}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return ue}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return ie}}]),e}();n.fn.tooltip=me._jQueryInterface,n.fn.tooltip.Constructor=me,n.fn.tooltip.noConflict=function(){return n.fn.tooltip=oe,me._jQueryInterface};var he="popover",ge=n.fn.popover,be=new RegExp("(^|\\s)bs-popover\\S+","g"),ve=i({},me.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ye=i({},me.DefaultType,{content:"(string|element|function)"}),xe={FADE:"fade",SHOW:"show"},we={TITLE:".popover-header",CONTENT:".popover-body"},Ee={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},ke=function(e){function t(){return e.apply(this,arguments)||this}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var r=t.prototype;return r.isWithContent=function(){return this.getTitle()||this._getContent()},r.addAttachmentClass=function(e){n(this.getTipElement()).addClass("bs-popover-"+e)},r.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0],this.tip},r.setContent=function(){var e=n(this.getTipElement());this.setElementContent(e.find(we.TITLE),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(we.CONTENT),t),e.removeClass(xe.FADE+" "+xe.SHOW)},r._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},r._cleanTipClass=function(){var e=n(this.getTipElement()),t=e.attr("class").match(be);null!==t&&t.length>0&&e.removeClass(t.join(""))},t._jQueryInterface=function(e){return this.each(function(){var r=n(this).data("bs.popover"),o="object"==typeof e?e:null;if((r||!/dispose|hide/.test(e))&&(r||(r=new t(this,o),n(this).data("bs.popover",r)),"string"==typeof e)){if(void 0===r[e])throw new TypeError('No method named "'+e+'"');r[e]()}})},o(t,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return ve}},{key:"NAME",get:function(){return he}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Ee}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return ye}}]),t}(me);n.fn.popover=ke._jQueryInterface,n.fn.popover.Constructor=ke,n.fn.popover.noConflict=function(){return n.fn.popover=ge,ke._jQueryInterface};var _e="scrollspy",Ce=n.fn[_e],Te={offset:10,method:"auto",target:""},Se={offset:"number",method:"string",target:"(string|element)"},Oe={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},Pe={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},Ne={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},je={OFFSET:"offset",POSITION:"position"},Ie=function(){function e(e,t){var r=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+Ne.NAV_LINKS+","+this._config.target+" "+Ne.LIST_ITEMS+","+this._config.target+" "+Ne.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,n(this._scrollElement).on(Oe.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var t=e.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?je.OFFSET:je.POSITION,r="auto"===this._config.method?t:this._config.method,o=r===je.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var a=[].slice.call(document.querySelectorAll(this._selector));a.map(function(e){var t,a=u.getSelectorFromElement(e);if(a&&(t=document.querySelector(a)),t){var i=t.getBoundingClientRect();if(i.width||i.height)return[n(t)[r]().top+o,a]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){n.removeData(this._element,"bs.scrollspy"),n(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(e){if("string"!=typeof(e=i({},Te,"object"==typeof e&&e?e:{})).target){var t=n(e.target).attr("id");t||(t=u.getUID(_e),n(e.target).attr("id",t)),e.target="#"+t}return u.typeCheckConfig(_e,e,Se),e},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length,a=o;a--;){var i=this._activeTarget!==this._targets[a]&&e>=this._offsets[a]&&(void 0===this._offsets[a+1]||e<this._offsets[a+1]);i&&this._activate(this._targets[a])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'}),r=n([].slice.call(document.querySelectorAll(t.join(","))));r.hasClass(Pe.DROPDOWN_ITEM)?(r.closest(Ne.DROPDOWN).find(Ne.DROPDOWN_TOGGLE).addClass(Pe.ACTIVE),r.addClass(Pe.ACTIVE)):(r.addClass(Pe.ACTIVE),r.parents(Ne.NAV_LIST_GROUP).prev(Ne.NAV_LINKS+", "+Ne.LIST_ITEMS).addClass(Pe.ACTIVE),r.parents(Ne.NAV_LIST_GROUP).prev(Ne.NAV_ITEMS).children(Ne.NAV_LINKS).addClass(Pe.ACTIVE)),n(this._scrollElement).trigger(Oe.ACTIVATE,{relatedTarget:e})},t._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter(function(e){return e.classList.contains(Pe.ACTIVE)}).forEach(function(e){return e.classList.remove(Pe.ACTIVE)})},e._jQueryInterface=function(t){return this.each(function(){var r=n(this).data("bs.scrollspy"),o="object"==typeof t&&t;if(r||(r=new e(this,o),n(this).data("bs.scrollspy",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"Default",get:function(){return Te}}]),e}();n(window).on(Oe.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(Ne.DATA_SPY)),t=e.length,r=t;r--;){var o=n(e[r]);Ie._jQueryInterface.call(o,o.data())}}),n.fn[_e]=Ie._jQueryInterface,n.fn[_e].Constructor=Ie,n.fn[_e].noConflict=function(){return n.fn[_e]=Ce,Ie._jQueryInterface};var De=n.fn.tab,Ae={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},Re={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},Me={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},Le=function(){function e(e){this._element=e}var t=e.prototype;return t.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&n(this._element).hasClass(Re.ACTIVE)||n(this._element).hasClass(Re.DISABLED))){var t,r,o=n(this._element).closest(Me.NAV_LIST_GROUP)[0],a=u.getSelectorFromElement(this._element);if(o){var i="UL"===o.nodeName||"OL"===o.nodeName?Me.ACTIVE_UL:Me.ACTIVE;r=(r=n.makeArray(n(o).find(i)))[r.length-1]}var l=n.Event(Ae.HIDE,{relatedTarget:this._element}),s=n.Event(Ae.SHOW,{relatedTarget:r});if(r&&n(r).trigger(l),n(this._element).trigger(s),!s.isDefaultPrevented()&&!l.isDefaultPrevented()){a&&(t=document.querySelector(a)),this._activate(this._element,o);var c=function(){var t=n.Event(Ae.HIDDEN,{relatedTarget:e._element}),o=n.Event(Ae.SHOWN,{relatedTarget:r});n(r).trigger(t),n(e._element).trigger(o)};t?this._activate(t,t.parentNode,c):c()}}},t.dispose=function(){n.removeData(this._element,"bs.tab"),this._element=null},t._activate=function(e,t,r){var o=this,a=!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?n(t).children(Me.ACTIVE):n(t).find(Me.ACTIVE_UL),i=a[0],l=r&&i&&n(i).hasClass(Re.FADE),s=function(){return o._transitionComplete(e,i,r)};if(i&&l){var c=u.getTransitionDurationFromElement(i);n(i).removeClass(Re.SHOW).one(u.TRANSITION_END,s).emulateTransitionEnd(c)}else s()},t._transitionComplete=function(e,t,r){if(t){n(t).removeClass(Re.ACTIVE);var o=n(t.parentNode).find(Me.DROPDOWN_ACTIVE_CHILD)[0];o&&n(o).removeClass(Re.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(n(e).addClass(Re.ACTIVE),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),u.reflow(e),n(e).addClass(Re.SHOW),e.parentNode&&n(e.parentNode).hasClass(Re.DROPDOWN_MENU)){var a=n(e).closest(Me.DROPDOWN)[0];if(a){var i=[].slice.call(a.querySelectorAll(Me.DROPDOWN_TOGGLE));n(i).addClass(Re.ACTIVE)}e.setAttribute("aria-expanded",!0)}r&&r()},e._jQueryInterface=function(t){return this.each(function(){var r=n(this),o=r.data("bs.tab");if(o||(o=new e(this),r.data("bs.tab",o)),"string"==typeof t){if(void 0===o[t])throw new TypeError('No method named "'+t+'"');o[t]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}}]),e}();n(document).on(Ae.CLICK_DATA_API,Me.DATA_TOGGLE,function(e){e.preventDefault(),Le._jQueryInterface.call(n(this),"show")}),n.fn.tab=Le._jQueryInterface,n.fn.tab.Constructor=Le,n.fn.tab.noConflict=function(){return n.fn.tab=De,Le._jQueryInterface};var Ue=n.fn.toast,Fe={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},He={FADE:"fade",HIDE:"hide",SHOW:"show",SHOWING:"showing"},ze={animation:"boolean",autohide:"boolean",delay:"number"},Be={animation:!0,autohide:!0,delay:500},We={DATA_DISMISS:'[data-dismiss="toast"]'},qe=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var t=e.prototype;return t.show=function(){var e=this;n(this._element).trigger(Fe.SHOW),this._config.animation&&this._element.classList.add(He.FADE);var t=function(){e._element.classList.remove(He.SHOWING),e._element.classList.add(He.SHOW),n(e._element).trigger(Fe.SHOWN),e._config.autohide&&e.hide()};if(this._element.classList.remove(He.HIDE),this._element.classList.add(He.SHOWING),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);n(this._element).one(u.TRANSITION_END,t).emulateTransitionEnd(r)}else t()},t.hide=function(e){var t=this;this._element.classList.contains(He.SHOW)&&(n(this._element).trigger(Fe.HIDE),e?this._close():this._timeout=setTimeout(function(){t._close()},this._config.delay))},t.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(He.SHOW)&&this._element.classList.remove(He.SHOW),n(this._element).off(Fe.CLICK_DISMISS),n.removeData(this._element,"bs.toast"),this._element=null,this._config=null},t._getConfig=function(e){return e=i({},Be,n(this._element).data(),"object"==typeof e&&e?e:{}),u.typeCheckConfig("toast",e,this.constructor.DefaultType),e},t._setListeners=function(){var e=this;n(this._element).on(Fe.CLICK_DISMISS,We.DATA_DISMISS,function(){return e.hide(!0)})},t._close=function(){var e=this,t=function(){e._element.classList.add(He.HIDE),n(e._element).trigger(Fe.HIDDEN)};if(this._element.classList.remove(He.SHOW),this._config.animation){var r=u.getTransitionDurationFromElement(this._element);n(this._element).one(u.TRANSITION_END,t).emulateTransitionEnd(r)}else t()},e._jQueryInterface=function(t){return this.each(function(){var r=n(this),o=r.data("bs.toast"),a="object"==typeof t&&t;if(o||(o=new e(this,a),r.data("bs.toast",o)),"string"==typeof t){if(void 0===o[t])throw new TypeError('No method named "'+t+'"');o[t](this)}})},o(e,null,[{key:"VERSION",get:function(){return"4.2.1"}},{key:"DefaultType",get:function(){return ze}}]),e}();n.fn.toast=qe._jQueryInterface,n.fn.toast.Constructor=qe,n.fn.toast.noConflict=function(){return n.fn.toast=Ue,qe._jQueryInterface},function(){if(void 0===n)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=n.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(),e.Util=u,e.Alert=m,e.Button=y,e.Carousel=N,e.Collapse=F,e.Dropdown=X,e.Modal=ne,e.Popover=ke,e.Scrollspy=Ie,e.Tab=Le,e.Toast=qe,e.Tooltip=me,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(33),n(161))},function(e,t,n){"use strict";n(162),n(160),n(157);var r=l(n(0)),o=l(n(7)),a=n(18),i=l(n(144));function l(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.BrowserRouter,null,r.default.createElement(i.default,null)),document.getElementById("app-react-root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvZGl2V2l0aENsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GYWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvdHJpZ2dlckJyb3dzZXJSZWZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DbG9zZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU2FmZUFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0FsZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQmFkZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CcmVhZGNydW1iSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0JyZWFkY3J1bWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9CdXR0b25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0J1dHRvblRvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NhcmRJbWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ2FyZENvbHVtbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9DYXJkRGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NhcmRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsQ2FwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsSXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL3V0aWxzL0VsZW1lbnRDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Nhcm91c2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvQ29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd25NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRHJvcGRvd25Ub2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9TZWxlY3RhYmxlQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93bkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Ecm9wZG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Ryb3Bkb3duQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GZWVkYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybUNoZWNrSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Gb3JtQ2hlY2tMYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1DaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Zvcm1UZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0ltYWdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRmlndXJlSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9GaWd1cmVDYXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvRmlndXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvSW5wdXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0p1bWJvdHJvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9BYnN0cmFjdE5hdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0Fic3RyYWN0TmF2SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL0xpc3RHcm91cEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9MaXN0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9NZWRpYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsRGlhbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTW9kYWxGb290ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbEhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL01vZGFsVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy91dGlscy9Cb290c3RyYXBNb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9Nb2RhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvTmF2YmFyQnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9OYXZiYXJDb2xsYXBzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdmJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL05hdkRyb3Bkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL092ZXJsYXlUcmlnZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUGFnZUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9QYWdpbmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1Byb2dyZXNzQmFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUmVzcG9uc2l2ZUVtYmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvUm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvU3BsaXRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lcy9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFiUGFuZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzL1RvZ2dsZUJ1dHRvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXMvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbnRleHQtdG9vbGJveC9tYXBDb250ZXh0VG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvcXVlcnkvcXVlcnlTZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9pbkRPTS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvc2VwYXJhdG9yLWNvbnRhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQtY29tcG9uZW50cy9wcm9qZWN0LXN1bW1hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC1jb21wb25lbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1jb250ZXh0LXRvb2xib3gvZm9yd2FyZFJlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9saWIvZXNtL1BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9wcGVyL2xpYi9lc20vUmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbGliL2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy1leHRyYS9saWIvdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3Rlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL3Byb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL01vZGFsTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25Ub2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL0Ryb3Bkb3duTWVudS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9jYW1lbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvRHJvcGRvd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlmcmFtZS9pbmRleC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvc2VwYXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy91dGlscy9nZXRDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL1dhaXRGb3JDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvb2ZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL1Jvb3RDbG9zZVdyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3ZlcmxheXMvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbnRleHQtdG9vbGJveC90cmFuc2Zvcm1Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1wb3BwZXIvbm9kZV9tb2R1bGVzL2NyZWF0ZS1yZWFjdC1jb250ZXh0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9vdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9uYXZpZ2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9wcm9qZWN0LWRldGFpbC95dXJpL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIveXVyaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvamVjdC1kZXRhaWwvcG9ja2V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvcG9ja2V0LmpzIiwid2VicGFjazovLy8uL3NyYy9wcm9qZWN0LWRldGFpbC9zdHJvbmdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcm91dGVyL3N0cm9uZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9wcm9qZWN0LWRldGFpbC9lY3MvZWNzLWNhcm91c2VsLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb2plY3QtZGV0YWlsL2Vjcy9lY3MtY2Fyb3VzZWwubGVzcz84MGM2Iiwid2VicGFjazovLy8uL3NyYy9wcm9qZWN0LWRldGFpbC9lY3MvZWNzLWNhcm91c2VsLmpzIiwid2VicGFjazovLy8uL3NyYy9wcm9qZWN0LWRldGFpbC9lY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlci9lY3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC1jb21wb25lbnRzL2NvbnRlbnQtY2Fyb3VzZWwubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvY29udGVudC1jYXJvdXNlbC5sZXNzPzQyNDIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC1jb21wb25lbnRzL2NvbnRlbnQtY2Fyb3VzZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb2plY3QtZGV0YWlsL3VuaWZ5L2hlYWRlci1pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvc2VjdGlvbi1zdWJ0aXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvc2VjdGlvbi10aXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvcHJvamVjdC1kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQtY29tcG9uZW50cy90aXRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvamVjdC1kZXRhaWwvdW5pZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlci91bmlmeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkLWNvbXBvbmVudHMvc2VwYXJhdG9yLWFib3V0LmpzIiwid2VicGFjazovLy8uL3NyYy93aXRobWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NraWxscy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcG9ydGZvbGlvL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9leHBlcmllbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtdGltZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLXRpbWVyL2Rpc3QvY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zY3JvbGxjaG9yL2xpYi9oZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zY3JvbGxjaG9yL2xpYi9zY3JvbGxjaG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWFkZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlci9ob21lLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9rYXRlLXNvaG5nLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvYWJvdXQvaW52aXNpb24ucG5nIiwid2VicGFjazovLy8uL3NyYy9hYm91dC9waG90b3Nob3AucG5nIiwid2VicGFjazovLy8uL3NyYy9hYm91dC9za2V0Y2guanBnIiwid2VicGFjazovLy8uL3NyYy9hYm91dC9pbGx1c3RyYXRvci5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fib3V0L2dpdC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fib3V0L2phdmFzY3JpcHQucG5nIiwid2VicGFjazovLy8uL3NyYy9hYm91dC9jc3MzLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvYWJvdXQvaHRtbDUucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzLWV4dHJhL2xpYi9hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW92ZXJsYXlzL3V0aWxzL21hbmFnZUFyaWFIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3F1ZXJ5L2lzV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1vdmVybGF5cy91dGlscy9pc092ZXJmbG93aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9hY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9ldmVudHMvZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcHBlci9ub2RlX21vZHVsZXMvY3JlYXRlLXJlYWN0LWNvbnRleHQvbGliL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9tYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9yZW1vdmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdXRpbC9oeXBoZW5hdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5jb250cm9sbGFibGUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fib3V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIvYWJvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5sZXNzPzZhZDQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9hcHAuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2Nzcy9hcHAuc2Nzcz80ZjBkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImhhc093biIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJnIiwiYXJnVHlwZSIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJpbm5lciIsImFwcGx5Iiwiam9pbiIsImRlZmF1bHQiLCJ1bmRlZmluZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJ3YXJuaW5nIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiYSIsImIiLCJlIiwiZiIsImVycm9yIiwiRXJyb3IiLCJhcmdzIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0Iiwic291cmNlIiwidGhpcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiZGl2V2l0aENsYXNzTmFtZSIsImNsYXNzTmFtZSIsInJlYWN0X2RlZmF1bHQiLCJmb3J3YXJkUmVmIiwicmVmIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzbmFtZXNfZGVmYXVsdCIsIl9SZWFjdCRjcmVhdGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsIk1hcCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJjcmVhdGVCb290c3RyYXBDb21wb25lbnQiLCJDb21wb25lbnQiLCJvcHRzIiwicHJlZml4IiwiaXNDbGFzc3kiLCJpc1JlYWN0Q29tcG9uZW50IiwiX29wdHMiLCJfb3B0cyRmb3J3YXJkUmVmQXMiLCJmb3J3YXJkUmVmQXMiLCJmb3J3YXJkUmVmX2RlZmF1bHQiLCJfcmVmIiwicHJvcHMiLCJwcmVmaXhlcyIsImJzUHJlZml4IiwiZGlzcGxheU5hbWUiLCJlc19UaGVtZVByb3ZpZGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlRoZW1lUHJvdmlkZXIiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwiY29uY2F0IiwiZm9yRWFjaCIsInNldCIsInJlbmRlciIsImNoaWxkcmVuIiwiY3JlYXRlV2l0aEJzUHJlZml4X3Bhc2NhbENhc2UiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsaXplX2RlZmF1bHQiLCJzbGljZSIsImNyZWF0ZVdpdGhCc1ByZWZpeCIsIl90ZW1wIiwiX2NsYXNzIiwiX3RlbXAyIiwiX3JlZiRkaXNwbGF5TmFtZSIsIl9yZWYkQ29tcG9uZW50IiwiZGVmYXVsdFByb3BzIiwiX3RoaXMkcHJvcHMiLCJfdGhpcyRwcm9wcyRhcyIsImFzIiwiVGFnIiwiX2ZhZGVTdHlsZXMiLCJ0cmlnZ2VyQnJvd3NlclJlZmxvdyIsIm5vZGUiLCJvZmZzZXRIZWlnaHQiLCJmYWRlU3R5bGVzIiwicmVhY3RfdHJhbnNpdGlvbl9ncm91cF9UcmFuc2l0aW9uIiwiRmFkZV9GYWRlIiwiRmFkZSIsImhhbmRsZUVudGVyIiwib25FbnRlciIsIlRyYW5zaXRpb25fZGVmYXVsdCIsImFkZEVuZExpc3RlbmVyIiwiZW5kX2RlZmF1bHQiLCJzdGF0dXMiLCJpbm5lclByb3BzIiwiY2xvbmVFbGVtZW50IiwiaW4iLCJ0aW1lb3V0IiwibW91bnRPbkVudGVyIiwidW5tb3VudE9uRXhpdCIsImFwcGVhciIsImVzX0ZhZGUiLCJDbG9zZUJ1dHRvbl9DbG9zZUJ1dHRvbiIsIkNsb3NlQnV0dG9uIiwibGFiZWwiLCJvbkNsaWNrIiwidHlwZSIsImFyaWEtaGlkZGVuIiwiZXNfQ2xvc2VCdXR0b24iLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwidXRpbHNfY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJhY2MiLCJfbGVuMiIsIl9rZXkyIiwiaXNUcml2aWFsSHJlZiIsImhyZWYiLCJ0cmltIiwiU2FmZUFuY2hvcl9TYWZlQW5jaG9yIiwiU2FmZUFuY2hvciIsImNvbnRleHQiLCJoYW5kbGVDbGljayIsImhhbmRsZUtleURvd24iLCJfcHJvdG8iLCJldmVudCIsImRpc2FibGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJfdGhpcyRwcm9wczIiLCJvbktleURvd24iLCJpbm5lclJlZiIsInJvbGUiLCJ0YWJJbmRleCIsImVzX1NhZmVBbmNob3IiLCJBbGVydF9BbGVydCIsIkFsZXJ0IiwiaGFuZGxlQ2xvc2UiLCJvbkNsb3NlIiwic2hvdyIsImNsb3NlTGFiZWwiLCJ2YXJpYW50IiwiZGlzbWlzc2libGUiLCJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImFsZXJ0IiwiRGVjb3JhdGVkQWxlcnQiLCJ1bmNvbnRyb2xsYWJsZV9kZWZhdWx0IiwiRGl2U3R5bGVkQXNINCIsIkxpbmsiLCJIZWFkaW5nIiwiZXNfQWxlcnQiLCJCYWRnZV9CYWRnZSIsIkJhZGdlIiwicGlsbCIsImVzX0JhZGdlIiwiQnJlYWRjcnVtYkl0ZW1fQnJlYWRjcnVtYkl0ZW0iLCJCcmVhZGNydW1iSXRlbSIsImFjdGl2ZSIsInRpdGxlIiwiZWxlbWVudFByb3BzIiwibGlua1Byb3BzIiwiYXJpYS1jdXJyZW50IiwiZXNfQnJlYWRjcnVtYkl0ZW0iLCJCcmVhZGNydW1iX0JyZWFkY3J1bWIiLCJCcmVhZGNydW1iIiwibGlzdFByb3BzIiwiYXJpYS1sYWJlbCIsIkRlY29yYXRlZEJyZWFkY3J1bWIiLCJJdGVtIiwiZXNfQnJlYWRjcnVtYiIsIkJ1dHRvbl9CdXR0b24iLCJCdXR0b24iLCJzaXplIiwiYmxvY2siLCJlc19CdXR0b24iLCJCdXR0b25Hcm91cF9CdXR0b25Hcm91cCIsIkJ1dHRvbkdyb3VwIiwidG9nZ2xlIiwidmVydGljYWwiLCJiYXNlQ2xhc3MiLCJlc19CdXR0b25Hcm91cCIsIkJ1dHRvblRvb2xiYXJfQnV0dG9uVG9vbGJhciIsIkJ1dHRvblRvb2xiYXIiLCJlc19CdXR0b25Ub29sYmFyIiwiQ2FyZENvbnRleHQiLCJDYXJkSW1nX0NhcmRJbWciLCJDYXJkSW1nIiwiZXNfQ2FyZEltZyIsIkNhcmRCb2R5IiwiQ2FyZF9DYXJkIiwiQ2FyZCIsInN0YXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY2FyZENvbnRleHQiLCJjYXJkSGVhZGVyQnNQcmVmaXgiLCJiZyIsInRleHQiLCJib3JkZXIiLCJib2R5IiwiRGl2U3R5bGVkQXNINSIsIkRpdlN0eWxlZEFzSDYiLCJEZWNvcmF0ZWRDYXJkIiwiSW1nIiwiVGl0bGUiLCJTdWJ0aXRsZSIsIkJvZHkiLCJUZXh0IiwiSGVhZGVyIiwiRm9vdGVyIiwiSW1nT3ZlcmxheSIsImVzX0NhcmQiLCJDYXJkQ29sdW1ucyIsIkNhcmREZWNrIiwiQ2FyZEdyb3VwIiwiQ2Fyb3VzZWxDYXB0aW9uX0Nhcm91c2VsQ2FwdGlvbiIsIkNhcm91c2VsQ2FwdGlvbiIsImVzX0Nhcm91c2VsQ2FwdGlvbiIsImVzX0Nhcm91c2VsSXRlbSIsIkNhcm91c2VsSXRlbSIsIm1hcCIsImZ1bmMiLCJpbmRleCIsIkNoaWxkcmVuIiwiY2hpbGQiLCJpc1ZhbGlkRWxlbWVudCIsIkNhcm91c2VsX2NvdW50Q2hpbGRyZW4iLCJ0b0FycmF5IiwiQ2Fyb3VzZWxfZGVmYXVsdFByb3BzIiwic2xpZGUiLCJmYWRlIiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInBhdXNlT25Ib3ZlciIsIndyYXAiLCJpbmRpY2F0b3JzIiwiY29udHJvbHMiLCJhY3RpdmVJbmRleCIsInByZXZJY29uIiwicHJldkxhYmVsIiwibmV4dEljb24iLCJuZXh0TGFiZWwiLCJDYXJvdXNlbF9DYXJvdXNlbCIsIkNhcm91c2VsIiwiaGFuZGxlU2xpZGVFbmQiLCJwZW5kaW5nSW5kZXgiLCJfcGVuZGluZ0luZGV4IiwiX2lzU2xpZGluZyIsInRvIiwiY3ljbGUiLCJoYW5kbGVNb3VzZU91dCIsImhhbmRsZU1vdXNlT3ZlciIsInBhdXNlIiwidGVzdCIsInRhZ05hbWUiLCJoYW5kbGVQcmV2IiwiaGFuZGxlTmV4dCIsImhhbmRsZU5leHRXaGVuVmlzaWJsZSIsImlzVW5tb3VudGVkIiwiZG9jdW1lbnQiLCJoaWRkZW4iLCJzdHlsZV9kZWZhdWx0IiwiY2Fyb3VzZWwiLCJjdXJyZW50Iiwic2VsZWN0IiwicHJldkNsYXNzZXMiLCJjdXJyZW50Q2xhc3NlcyIsImNyZWF0ZVJlZiIsImNvbXBvbmVudERpZE1vdW50IiwibmV4dFByb3BzIiwicHJldmlvdXNBY3RpdmVJbmRleCIsImxhc3RQb3NzaWJsZUluZGV4IiwibmV4dEluZGV4IiwiTWF0aCIsIm1heCIsIm1pbiIsImRpcmVjdGlvbiIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl8iLCJwcmV2U3RhdGUiLCJfdGhpczIiLCJfdGhpcyRwcm9wczMiLCJvcmRlckNsYXNzTmFtZSIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwiX3RoaXMkc3RhdGUiLCJzYWZlU2V0U3RhdGUiLCJuZXh0RWxlbWVudCIsInRyYW5zaXRpb25fZGVmYXVsdCIsImVuZCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJUaW1lb3V0IiwiY2IiLCJfdGhpczMiLCJzZXRTdGF0ZSIsIl9pc1BhdXNlZCIsImNsZWFySW50ZXJ2YWwiLCJfaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsIl90aGlzNCIsInNlbGVjdFRocm90dGxlIiwicGVyc2lzdCIsInNldFRpbWVvdXQiLCJfdGhpczQkcHJvcHMiLCJvblNlbGVjdCIsInJlbmRlckNvbnRyb2xzIiwicHJvcGVydGllcyIsImNvdW50IiwicmVuZGVySW5kaWNhdG9ycyIsIl90aGlzNSIsIl90aGlzJHByb3BzNCIsIm9uU2xpZGVFbmQiLCJfdGhpcyRzdGF0ZTIiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VPdXQiLCJwcmV2aW91cyIsInJlYWN0IiwiRGVjb3JhdGVkQ2Fyb3VzZWwiLCJDYXB0aW9uIiwiZXNfQ2Fyb3VzZWwiLCJERVZJQ0VfU0laRVMiLCJDb2xfQ29sIiwiQ29sIiwic3BhbnMiLCJicmtQb2ludCIsInNwYW4iLCJvZmZzZXQiLCJvcmRlciIsInByb3BWYWx1ZSIsIl9wcm9wVmFsdWUkc3BhbiIsImluZml4IiwiX2NvbGxhcHNlU3R5bGVzIiwiZXNfQ29sIiwiTUFSR0lOUyIsImhlaWdodCIsIndpZHRoIiwiY29sbGFwc2VTdHlsZXMiLCJDb2xsYXBzZV9kZWZhdWx0UHJvcHMiLCJkaW1lbnNpb24iLCJnZXREaW1lbnNpb25WYWx1ZSIsImVsZW0iLCJtYXJnaW5zIiwicGFyc2VJbnQiLCJDb2xsYXBzZV9Db2xsYXBzZSIsIkNvbGxhcHNlIiwic3R5bGUiLCJnZXREaW1lbnNpb24iLCJoYW5kbGVFbnRlcmluZyIsIl9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZSIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0IiwiaGFuZGxlRXhpdGluZyIsIm9uRW50ZXJpbmciLCJvbkVudGVyZWQiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJhcmlhLWV4cGFuZGVkIiwiZXNfQ29sbGFwc2UiLCJOYXZiYXJDb250ZXh0IiwiRHJvcGRvd25NZW51X0Ryb3Bkb3duTWVudSIsIkRyb3Bkb3duTWVudSIsImFsaWduUmlnaHQiLCJyb290Q2xvc2VFdmVudCIsImZsaXAiLCJwb3BwZXJDb25maWciLCJzaG93UHJvcHMiLCJpc05hdmJhciIsIkRyb3Bkb3duTWVudV9kZWZhdWx0IiwiYWxpZ25FbmQiLCJ1c2VQb3BwZXIiLCJwbGFjZW1lbnQiLCJjbG9zZSIsIm1lbnVQcm9wcyIsIl9fd3JhcHBlZCIsInJlYWN0X2RvbSIsIkRyb3Bkb3duTWVudV93cmFwUmVmIiwiZXNfRHJvcGRvd25NZW51IiwiRHJvcGRvd25Ub2dnbGVfRHJvcGRvd25Ub2dnbGUiLCJEcm9wZG93blRvZ2dsZSIsInNwbGl0IiwiY2hpbGRCc1ByZWZpeCIsIkRyb3Bkb3duVG9nZ2xlX2RlZmF1bHQiLCJ0b2dnbGVQcm9wcyIsIkRyb3Bkb3duVG9nZ2xlX3dyYXBSZWYiLCJlc19Ecm9wZG93blRvZ2dsZSIsIm1ha2VFdmVudEtleSIsImV2ZW50S2V5IiwiU3RyaW5nIiwiZXNfU2VsZWN0YWJsZUNvbnRleHQiLCJlc19OYXZDb250ZXh0IiwiRHJvcGRvd25JdGVtX0Ryb3Bkb3duSXRlbSIsIkRyb3Bkb3duSXRlbSIsImNvbnRleHRTZWxlY3QiLCJlc19Ecm9wZG93bkl0ZW0iLCJtYXBDb250ZXh0VG9Qcm9wc19kZWZhdWx0IiwibmF2Q29udGV4dCIsImFjdGl2ZUtleSIsIkRyb3Bkb3duX0Ryb3Bkb3duIiwiRHJvcGRvd24iLCJoYW5kbGVTZWxlY3QiLCJoYW5kbGVUb2dnbGUiLCJjdXJyZW50VGFyZ2V0Iiwib25Ub2dnbGUiLCJkcm9wIiwibmF2YmFyIiwiRHJvcGRvd25fZGVmYXVsdCIsIkNvbnRyb2xsZWRDb21wb25lbnQiLCJpdGVtU2VsZWN0b3IiLCJkcm9wZG93blByb3BzIiwiVW5jb250cm9sbGVkRHJvcGRvd24iLCJkZWZlckNvbnRyb2xUbyIsIkRlY29yYXRlZERyb3Bkb3duIiwiVG9nZ2xlIiwiTWVudSIsIkRpdmlkZXIiLCJlc19Ecm9wZG93biIsImVzX0Ryb3Bkb3duQnV0dG9uIiwiRHJvcGRvd25CdXR0b24iLCJtZW51Um9sZSIsImlkIiwiRm9ybUNvbnRleHQiLCJjb250cm9sSWQiLCJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1Db250ZXh0X2RlZmF1bHQiLCJlc19Gb3JtQ29udGV4dCIsIkZvcm1Hcm91cCIsImVzX0Zvcm1Hcm91cCIsIkZlZWRiYWNrX0ZlZWRiYWNrIiwiRmVlZGJhY2siLCJlc19GZWVkYmFjayIsIkZvcm1Db250cm9sX0Zvcm1Db250cm9sIiwiRm9ybUNvbnRyb2wiLCJfY2xhc3NlcyIsImlucHV0UmVmIiwiaXNWYWxpZCIsImlzSW52YWxpZCIsInBsYWludGV4dCIsInJlYWRPbmx5IiwiX2NsYXNzZXMyIiwiX2NsYXNzZXMzIiwiRGVjb3JhdGVkRm9ybUNvbnRyb2wiLCJfcmVmMiIsImVzX0Zvcm1Db250cm9sIiwiRm9ybUNoZWNrSW5wdXQiLCJpc1N0YXRpYyIsImN1c3RvbSIsImVzX0Zvcm1DaGVja0lucHV0IiwiRm9ybUNoZWNrTGFiZWwiLCJodG1sRm9yIiwiZXNfRm9ybUNoZWNrTGFiZWwiLCJGb3JtQ2hlY2tfRm9ybUNoZWNrIiwiRm9ybUNoZWNrIiwiaW5saW5lIiwiZmVlZGJhY2siLCJoYXNMYWJlbCIsImlucHV0IiwibWFwVG9WYWx1ZSIsIkZyYWdtZW50IiwiRGVjb3JhdGVkRm9ybUNoZWNrIiwiSW5wdXQiLCJMYWJlbCIsImVzX0Zvcm1DaGVjayIsIkZvcm1MYWJlbCIsImNvbHVtbiIsInNyT25seSIsImVzX0Zvcm1MYWJlbCIsIl9yZWYzIiwiRm9ybVRleHQiLCJlc19Gb3JtVGV4dCIsIkZvcm0iLCJ2YWxpZGF0ZWQiLCJEZWNvcmF0ZWRGb3JtIiwiUm93IiwiR3JvdXAiLCJDb250cm9sIiwiQ2hlY2siLCJlc19Gb3JtIiwiQ29udGFpbmVyX0NvbnRhaW5lciIsIkNvbnRhaW5lciIsImZsdWlkIiwiZXNfQ29udGFpbmVyIiwiSW1hZ2VfSW1hZ2UiLCJJbWFnZSIsInJvdW5kZWQiLCJyb3VuZGVkQ2lyY2xlIiwidGh1bWJuYWlsIiwiZXNfSW1hZ2UiLCJGaWd1cmVJbWFnZV9GaWd1cmVJbWFnZSIsIkZpZ3VyZUltYWdlIiwiZXNfRmlndXJlSW1hZ2UiLCJGaWd1cmVDYXB0aW9uX0ZpZ3VyZUNhcHRpb24iLCJGaWd1cmVDYXB0aW9uIiwiZXNfRmlndXJlQ2FwdGlvbiIsIkZpZ3VyZV9GaWd1cmUiLCJGaWd1cmUiLCJEZWNvcmF0ZWRGaWd1cmUiLCJlc19GaWd1cmUiLCJJbnB1dEdyb3VwX0lucHV0R3JvdXAiLCJJbnB1dEdyb3VwIiwiSW5wdXRHcm91cEFwcGVuZCIsIklucHV0R3JvdXBQcmVwZW5kIiwiSW5wdXRHcm91cFRleHQiLCJEZWNvcmF0ZWRJbnB1dEdyb3VwIiwiUmFkaW8iLCJDaGVja2JveCIsIkFwcGVuZCIsIlByZXBlbmQiLCJlc19JbnB1dEdyb3VwIiwiSnVtYm90cm9uX0p1bWJvdHJvbiIsIkp1bWJvdHJvbiIsImVzX0p1bWJvdHJvbiIsImVzX1RhYkNvbnRleHQiLCJub29wIiwiQWJzdHJhY3ROYXZfQWJzdHJhY3ROYXYiLCJBYnN0cmFjdE5hdiIsInBhcmVudE9uU2VsZWN0IiwibmV4dEFjdGl2ZUNoaWxkIiwiZ2V0TmV4dEFjdGl2ZUNoaWxkIiwiZGF0YXNldCIsInJiRXZlbnRLZXkiLCJfbmVlZHNSZWZvY3VzIiwiYXR0YWNoUmVmIiwibGlzdE5vZGUiLCJnZXRDb250cm9sbGVkSWQiLCJnZXRDb250cm9sbGVySWQiLCJhY3RpdmVDaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJmb2N1cyIsIml0ZW1zIiwicXVlcnlTZWxlY3RvckFsbF9kZWZhdWx0IiwiZXNfQWJzdHJhY3ROYXYiLCJ0YWJDb250ZXh0IiwiQWJzdHJhY3ROYXZJdGVtX0Fic3RyYWN0TmF2SXRlbSIsIkFic3RyYWN0TmF2SXRlbSIsIm5hdktleSIsImlzQWN0aXZlIiwiZXNfQWJzdHJhY3ROYXZJdGVtIiwiTGlzdEdyb3VwSXRlbV9MaXN0R3JvdXBJdGVtIiwiTGlzdEdyb3VwSXRlbSIsImFjdGlvbiIsImVzX0xpc3RHcm91cEl0ZW0iLCJMaXN0R3JvdXBfTGlzdEdyb3VwIiwiTGlzdEdyb3VwIiwiRGVjb3JhdGVkTGlzdEdyb3VwIiwiZXNfTGlzdEdyb3VwIiwiTWVkaWFfTWVkaWEiLCJNZWRpYSIsIkRlY29yYXRlZE1lZGlhIiwiZXNfTWVkaWEiLCJNb2RhbEJvZHlfTW9kYWxCb2R5IiwiTW9kYWxCb2R5IiwiZXNfTW9kYWxCb2R5IiwiZXNfTW9kYWxEaWFsb2ciLCJNb2RhbERpYWxvZyIsImNlbnRlcmVkIiwiYnNDbGFzcyIsIk1vZGFsRm9vdGVyX01vZGFsRm9vdGVyIiwiTW9kYWxGb290ZXIiLCJlc19Nb2RhbEZvb3RlciIsImVzX01vZGFsQ29udGV4dCIsIm9uSGlkZSIsIk1vZGFsSGVhZGVyX01vZGFsSGVhZGVyIiwiTW9kYWxIZWFkZXIiLCJjbG9zZUJ1dHRvbiIsImVzX01vZGFsSGVhZGVyIiwiTW9kYWxUaXRsZV9EaXZTdHlsZWRBc0g0IiwiTW9kYWxUaXRsZV9Nb2RhbFRpdGxlIiwiTW9kYWxUaXRsZSIsImVzX01vZGFsVGl0bGUiLCJTZWxlY3RvciIsIkJvb3RzdHJhcE1vZGFsTWFuYWdlcl9Cb290c3RyYXBNb2RhbE1hbmFnZXIiLCJfTW9kYWxNYW5hZ2VyIiwiQm9vdHN0cmFwTW9kYWxNYW5hZ2VyIiwiYWRqdXN0QW5kU3RvcmUiLCJwcm9wIiwiZWxlbWVudCIsImFkanVzdCIsImFjdHVhbCIsInBhcnNlRmxvYXQiLCJyZXN0b3JlIiwic2V0Q29udGFpbmVyU3R5bGUiLCJjb250YWluZXJTdGF0ZSIsImNvbnRhaW5lciIsIm92ZXJmbG93aW5nIiwic2Nyb2xsYmFyU2l6ZV9kZWZhdWx0IiwiZWwiLCJyZW1vdmVDb250YWluZXJTdHlsZSIsIk1vZGFsX2RlZmF1bHRQcm9wcyIsImJhY2tkcm9wIiwiYXV0b0ZvY3VzIiwiZW5mb3JjZUZvY3VzIiwicmVzdG9yZUZvY3VzIiwiYW5pbWF0aW9uIiwiZGlhbG9nQXMiLCJtYW5hZ2VyIiwiRGlhbG9nVHJhbnNpdGlvbiIsIkJhY2tkcm9wVHJhbnNpdGlvbiIsIk1vZGFsX01vZGFsIiwiTW9kYWwiLCJfcHJvcHMiLCJzZXRNb2RhbFJlZiIsIl9tb2RhbCIsImhhbmRsZURpYWxvZ01vdXNlRG93biIsIl93YWl0aW5nRm9yTW91c2VVcCIsImhhbmRsZU1vdXNlVXAiLCJkaWFsb2ciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsImRpc3BsYXkiLCJ1cGRhdGVEaWFsb2dTdHlsZSIsImV2ZW50c19kZWZhdWx0Iiwib24iLCJ3aW5kb3ciLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJoYW5kbGVFeGl0ZWQiLCJfbGVuMyIsIl9rZXkzIiwib25FeGl0ZWQiLCJvZmYiLCJyZW5kZXJCYWNrZHJvcCIsImJhY2tkcm9wQ2xhc3NOYW1lIiwibW9kYWxDb250ZXh0IiwiaW5ET01fZGVmYXVsdCIsImNvbnRhaW5lcklzT3ZlcmZsb3dpbmciLCJpc0NvbnRhaW5lck92ZXJmbG93aW5nIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0Iiwib3duZXJEb2N1bWVudF9kZWZhdWx0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0xlZnQiLCJfdGhpcyRwcm9wczUiLCJkaWFsb2dDbGFzc05hbWUiLCJEaWFsb2ciLCJvbkVzY2FwZUtleURvd24iLCJvblNob3ciLCJiYWNrZHJvcFN0eWxlIiwiY2xpY2tIYW5kbGVyIiwiTW9kYWxfZGVmYXVsdCIsImNvbnRhaW5lckNsYXNzTmFtZSIsImJhY2tkcm9wVHJhbnNpdGlvbiIsIm9uTW91c2VVcCIsIm9uTW91c2VEb3duIiwiRGVjb3JhdGVkTW9kYWwiLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiIsImVzX01vZGFsIiwiTmF2SXRlbV9OYXZJdGVtIiwiTmF2SXRlbSIsImVzX05hdkl0ZW0iLCJOYXZMaW5rX2RlZmF1bHRQcm9wcyIsIk5hdkxpbmsiLCJlc19OYXZMaW5rIiwiTmF2X05hdiIsIk5hdiIsIl9jbGFzc05hbWVzIiwibmF2YmFyQnNQcmVmaXgiLCJmaWxsIiwianVzdGlmeSIsIlVuY29udHJvbGxlZE5hdiIsIkRlY29yYXRlZE5hdiIsIm5hdmJhckNvbnRleHQiLCJfTmF2IiwiZXNfTmF2IiwiZXNfTmF2YmFyQnJhbmQiLCJOYXZiYXJCcmFuZCIsImVzX05hdmJhckNvbGxhcHNlIiwiTmF2YmFyQ29sbGFwc2UiLCJleHBhbmRlZCIsIk5hdmJhclRvZ2dsZV9OYXZiYXJUb2dnbGUiLCJOYXZiYXJUb2dnbGUiLCJlc19OYXZiYXJUb2dnbGUiLCJOYXZiYXJfTmF2YmFyIiwiTmF2YmFyIiwiX2FyZ3MiLCJoYW5kbGVDb2xsYXBzZSIsImNvbGxhcHNlT25TZWxlY3QiLCJleHBhbmQiLCJmaXhlZCIsInN0aWNreSIsImV4cGFuZENsYXNzIiwiRGVjb3JhdGVkTmF2YmFyIiwiQnJhbmQiLCJlc19OYXZiYXIiLCJOYXZEcm9wZG93bl9OYXZEcm9wZG93biIsIk5hdkRyb3Bkb3duIiwiZXNfTmF2RHJvcGRvd24iLCJPdmVybGF5X2RlZmF1bHRQcm9wcyIsInJvb3RDbG9zZSIsIk92ZXJsYXlfT3ZlcmxheSIsIm92ZXJsYXkiLCJvdXRlclByb3BzIiwiT3ZlcmxheV9kZWZhdWx0Iiwib3ZlcmxheVByb3BzIiwiYXJyb3dQcm9wcyIsImFSZWYiLCJ3cmFwUmVmcyIsImVzX092ZXJsYXkiLCJPdmVybGF5VHJpZ2dlcl9SZWZIb2xkZXIiLCJSZWZIb2xkZXIiLCJub3JtYWxpemVEZWxheSIsImRlbGF5IiwiaGlkZSIsIk92ZXJsYXlUcmlnZ2VyX092ZXJsYXlUcmlnZ2VyIiwiX1JlYWN0JENvbXBvbmVudDIiLCJPdmVybGF5VHJpZ2dlciIsImdldFRhcmdldCIsInJlYWN0X2RvbV9kZWZhdWx0IiwiZmluZERPTU5vZGUiLCJ0cmlnZ2VyIiwiaGFuZGxlU2hvdyIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJoYW5kbGVIaWRlIiwiaGFuZGxlRm9jdXMiLCJvbkZvY3VzIiwiZ2V0Q2hpbGRQcm9wcyIsImhhbmRsZUJsdXIiLCJvbkJsdXIiLCJoYW5kbGVNb3VzZU92ZXJPdXQiLCJkZWZhdWx0U2hvdyIsImFyaWFNb2RpZmllciIsImVuYWJsZWQiLCJmbiIsImRhdGEiLCJwb3BwZXIiLCJpbnN0YW5jZSIsImdldEF0dHJpYnV0ZSIsInRvTG93ZXJDYXNlIiwic2V0QXR0cmlidXRlIiwiX3Byb3RvMiIsIm9ubHkiLCJoYW5kbGVyIiwicmVsYXRlZE5hdGl2ZSIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwibmF0aXZlRXZlbnQiLCJjb250YWluc19kZWZhdWx0IiwiX3RoaXMkcHJvcHMkcG9wcGVyQ29uIiwidHJpZ2dlclByb3BzIiwidHJpZ2dlcnMiLCJtb2RpZmllcnMiLCJkZWZhdWx0T3ZlcmxheVNob3duIiwiZXNfT3ZlcmxheVRyaWdnZXIiLCJQYWdlSXRlbSIsImFjdGl2ZUxhYmVsIiwiY3JlYXRlQnV0dG9uIiwiZGVmYXVsdFZhbHVlIiwiRmlyc3QiLCJQcmV2IiwiRWxsaXBzaXMiLCJOZXh0IiwiTGFzdCIsIkRlY29yYXRlZFBhZ2luYXRpb24iLCJQYWdpbmF0aW9uIiwiZXNfUGFnaW5hdGlvbiIsIlBvcG92ZXIiLCJzY2hlZHVsZVVwZGF0ZSIsIm91dE9mQm91bmRhcmllcyIsIngtcGxhY2VtZW50IiwiZXNfUG9wb3ZlciIsIlJPVU5EX1BSRUNJU0lPTiIsIlByb2dyZXNzQmFyX1Byb2dyZXNzQmFyIiwiUHJvZ3Jlc3NCYXIiLCJyZW5kZXJQcm9ncmVzc0JhciIsIm5vdyIsInN0cmlwZWQiLCJhbmltYXRlZCIsInBlcmNlbnRhZ2UiLCJyb3VuZCIsImdldFBlcmNlbnRhZ2UiLCJhcmlhLXZhbHVlbm93IiwiYXJpYS12YWx1ZW1pbiIsImFyaWEtdmFsdWVtYXgiLCJpc0NoaWxkIiwid3JhcHBlclByb3BzIiwiRGVjb3JhdGVkUHJvZ3Jlc3NCYXIiLCJlc19Qcm9ncmVzc0JhciIsIlJlc3BvbnNpdmVFbWJlZF9SZXNwb25zaXZlRW1iZWQiLCJSZXNwb25zaXZlRW1iZWQiLCJhc3BlY3RSYXRpbyIsImVzX1Jlc3BvbnNpdmVFbWJlZCIsIlJvd19Sb3ciLCJub0d1dHRlcnMiLCJlc19Sb3ciLCJTcGxpdEJ1dHRvbl9TcGxpdEJ1dHRvbiIsIlNwbGl0QnV0dG9uIiwidG9nZ2xlTGFiZWwiLCJlc19TcGxpdEJ1dHRvbiIsIlRhYkNvbnRhaW5lcl9UYWJDb250YWluZXIiLCJUYWJDb250YWluZXIiLCJnZXRLZXkiLCJnZW5lcmF0ZUNoaWxkSWQiLCJlc19UYWJDb250YWluZXIiLCJUYWJDb250ZW50X1RhYkNvbnRlbnQiLCJUYWJDb250ZW50IiwiZXNfVGFiQ29udGVudCIsIlRhYlBhbmVfVGFiUGFuZSIsIlRhYlBhbmUiLCJwYW5lIiwiZXNfVGFiUGFuZSIsInJlc3QiLCJzaG91bGRUcmFuc2l0aW9uIiwiYXJpYS1sYWJlbGxlZGJ5IiwiVGFiX1RhYiIsIlRhYiIsIkNvbnRlbnQiLCJQYW5lIiwiZXNfVGFiIiwiZXNfVGFibGUiLCJUYWJsZSIsImJvcmRlcmVkIiwiaG92ZXIiLCJyZXNwb25zaXZlIiwidGFibGUiLCJyZXNwb25zaXZlQ2xhc3MiLCJUYWJzX1RhYkNvbnRhaW5lciIsIlRhYnNfVGFicyIsIlRhYnMiLCJyZW5kZXJUYWIiLCJfY2hpbGQkcHJvcHMiLCJ0YWJDbGFzc05hbWUiLCJfdGhpcyRwcm9wcyRhY3RpdmVLZXkiLCJkZWZhdWx0QWN0aXZlS2V5IiwiZ2V0RGVmYXVsdEFjdGl2ZUtleSIsImNoaWxkUHJvcHMiLCJlc19UYWJzIiwiVG9nZ2xlQnV0dG9uX25vb3AiLCJUb2dnbGVCdXR0b25fVG9nZ2xlQnV0dG9uIiwiVG9nZ2xlQnV0dG9uIiwiZm9jdXNlZCIsImNoZWNrZWQiLCJvbkNoYW5nZSIsImF1dG9Db21wbGV0ZSIsImVzX1RvZ2dsZUJ1dHRvbiIsIlRvZ2dsZUJ1dHRvbkdyb3VwX1RvZ2dsZUJ1dHRvbkdyb3VwIiwiVG9nZ2xlQnV0dG9uR3JvdXAiLCJnZXRWYWx1ZXMiLCJ2YWx1ZXMiLCJicm93c2VyX2RlZmF1bHQiLCJVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cCIsImVzX1RvZ2dsZUJ1dHRvbkdyb3VwIiwiVG9vbHRpcCIsImVzX1Rvb2x0aXAiLCJ1bmNvbnRyb2xsYWJsZSIsImNvbnRyb2xsZWRWYWx1ZXMiLCJtZXRob2RzIiwiY2FuQWNjZXB0UmVmIiwiVXRpbHMiLCJjb250cm9sbGVkUHJvcHMiLCJQUk9QU19UT19PTUlUIiwiZGVmYXVsdEtleSIsImludmFyaWFudCIsIlVuY29udHJvbGxlZENvbXBvbmVudCIsImhhbmRsZXJzIiwicHJvcE5hbWUiLCJoYW5kbGVyTmFtZSIsIl9ub3RpZnlpbmciLCJfdmFsdWVzIiwidW5tb3VudGVkIiwiZm9yY2VVcGRhdGUiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiaXNQcm9wIiwibmV3UHJvcHMiLCJfcmVhY3QiLCJwcm9wVHlwZXMiLCJ1bmNvbnRyb2xsZWRQcm9wVHlwZXMiLCJtZXRob2QiLCJfdGhpcyRpbm5lciIsIldyYXBwZWRDb21wb25lbnQiLCJuZXdDb21wb25lbnQiLCJhZGRpdGlvbnMiLCJuZXh0TWV0aG9kcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJuZXdPYmoiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJtYXliZU9wdHMiLCJtYXBUb1Byb3BzIiwiJG1hcENvbnRleHRUb1Byb3BzIiwiY29uc3VtZXJzIiwiX2ZvcndhcmRSZWYiLCJnZXREaXNwbGF5TmFtZSIsImVuc3VyZUNvbnN1bWVyIiwibWF5YmVBcnJheU9mQ29uc3VtZXJzIiwiX3JlZiRmb3J3YXJkUmVmQXMiLCJTaW5nbGVDb25zdW1lciIsImNvbnRleHRUcmFuc2Zvcm0iLCJfZXh0ZW5kczIiLCJwcm9wc1dpdGhSZWYiLCJfZXh0ZW5kczMiLCJyZWR1Y2VSaWdodCIsIkNvbnRleHQiLCJjb250ZXh0cyIsInNlbGVjdG9yIiwiZm91bmQiLCJtYXliZUlEIiwibWF5YmVDbGFzcyIsIm5hbWVPbmx5Iiwic2ltcGxlU2VsZWN0b3JSRSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsIkZ1bmN0aW9uIiwiX2RlZmF1bHQiLCJjc3MiLCJ0cmFuc2Zvcm1zIiwiX2NhbWVsaXplU3R5bGUiLCJfZ2V0Q29tcHV0ZWRTdHlsZTIiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiX2h5cGhlbmF0ZVN0eWxlIiwiX2lzVHJhbnNmb3JtIiwiX3JlbW92ZVN0eWxlIiwiX3Byb3BlcnRpZXMiLCJ0cmFuc2Zvcm0iLCJjc3NUZXh0IiwiRVhJVElORyIsIkVOVEVSRUQiLCJFTlRFUklORyIsIkVYSVRFRCIsIlVOTU9VTlRFRCIsIlByb3BUeXBlcyIsIl9yZWFjdERvbSIsIl9yZWFjdExpZmVjeWNsZXNDb21wYXQiLCJpbml0aWFsU3RhdHVzIiwicGFyZW50R3JvdXAiLCJ0cmFuc2l0aW9uR3JvdXAiLCJpc01vdW50aW5nIiwiZW50ZXIiLCJhcHBlYXJTdGF0dXMiLCJuZXh0Q2FsbGJhY2siLCJnZXRDaGlsZENvbnRleHQiLCJ1cGRhdGVTdGF0dXMiLCJwcmV2UHJvcHMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJleGl0IiwibW91bnRpbmciLCJwZXJmb3JtRW50ZXIiLCJwZXJmb3JtRXhpdCIsImFwcGVhcmluZyIsInRpbWVvdXRzIiwib25UcmFuc2l0aW9uRW5kIiwiY2FuY2VsIiwibmV4dFN0YXRlIiwiY2FsbGJhY2siLCJzZXROZXh0Q2FsbGJhY2siLCJjb250ZXh0VHlwZXMiLCJjaGlsZENvbnRleHRUeXBlcyIsInBvbHlmaWxsIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwiY2hhckF0Iiwic3BsaWNlT25lIiwibGlzdCIsImsiLCJwb3AiLCJyZXNvbHZlX3BhdGhuYW1lIiwiZnJvbSIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInJlc3VsdCIsInN1YnN0ciIsIl90eXBlb2YiLCJpdGVyYXRvciIsInZhbHVlX2VxdWFsIiwidmFsdWVFcXVhbCIsImV2ZXJ5IiwiaXRlbSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsIlJlZ0V4cCIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJzZWFyY2giLCJoYXNoIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwiZXNfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwibWVzc2FnZSIsImNvbmZpcm0iLCJjcmVhdGVCcm93c2VySGlzdG9yeV90eXBlb2YiLCJjcmVhdGVCcm93c2VySGlzdG9yeV9leHRlbmRzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImVzX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c0hpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsImNyZWF0ZUhhc2hIaXN0b3J5X2V4dGVuZHMiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInN1YnN0cmluZyIsInJlcGxhY2VIYXNoUGF0aCIsImVzX2NyZWF0ZUhhc2hIaXN0b3J5IiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV90eXBlb2YiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X2V4dGVuZHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiZXNfY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJSb3V0ZXJfZXh0ZW5kcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVyX1JvdXRlciIsIlJvdXRlciIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NsYXNzQ2FsbENoZWNrIiwibWF0Y2giLCJjb21wdXRlTWF0Y2giLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsInJvdXRlciIsInJvdXRlIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsIndhcm5pbmdfZGVmYXVsdCIsInByb3BfdHlwZXNfZGVmYXVsdCIsImlzUmVxdWlyZWQiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsInN0cmluZyIsImJvb2wiLCJudW1iZXIiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJIYXNoUm91dGVyX2luaGVyaXRzIiwib25lT2YiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaXNNb2RpZmllZEV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiTGlua19pbmhlcml0cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImFycmF5IiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwib3B0aW9ucyIsInBhcmVudCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsInBhdHRlcm4iLCJjYWNoZUtleSIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicmUiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiZXhlYyIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImVzY2FwZWRQYXRoIiwiUHJvbXB0X1Byb21wdCIsIlByb21wdCIsIlByb21wdF9jbGFzc0NhbGxDaGVjayIsIlByb21wdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUHJvbXB0X2luaGVyaXRzIiwiZW5hYmxlIiwiZGlzYWJsZSIsIndoZW4iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1Byb21wdCIsImdlbmVyYXRlUGF0aF9wYXR0ZXJuQ2FjaGUiLCJnZW5lcmF0ZVBhdGhfY2FjaGVDb3VudCIsImVzX2dlbmVyYXRlUGF0aCIsImNvbXBpbGVkR2VuZXJhdG9yIiwiY29tcGlsZSIsImdlbmVyYXRlUGF0aF9jb21waWxlR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwicHJldHR5IiwiUmVkaXJlY3RfZXh0ZW5kcyIsIlJlZGlyZWN0X1JlZGlyZWN0IiwiUmVkaXJlY3QiLCJSZWRpcmVjdF9jbGFzc0NhbGxDaGVjayIsIlJlZGlyZWN0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWRpcmVjdF9pbmhlcml0cyIsInBlcmZvcm0iLCJwcmV2VG8iLCJuZXh0VG8iLCJjb21wdXRlVG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRMZWFkaW5nU2xhc2giLCJhZGRCYXNlbmFtZSIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3RhdGljUm91dGVyIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3dpdGNoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19nZW5lcmF0ZVBhdGgiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX21hdGNoUGF0aCIsIndpdGhSb3V0ZXJfZXh0ZW5kcyIsInJlYWN0X3JvdXRlcl9kb21fZXNfd2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX2Nqc19kZWZhdWx0IiwiU2VwYXJhdG9yQ29udGFjdCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIl9yZWFjdDIiLCJfc2VwYXJhdG9yMiIsIm93bmVyRG9jdW1lbnQiLCJyZWNhbGMiLCJfaW5ET00iLCJzY3JvbGxEaXYiLCJwb3NpdGlvbiIsInRvcCIsIm92ZXJmbG93IiwiYXBwZW5kQ2hpbGQiLCJvZmZzZXRXaWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJQcm9qZWN0U3VtbWFyeSIsIl9yZWFjdEJvb3RzdHJhcCIsIlByb2plY3RTdW1tYXJ5SXRlbSIsInNyYyIsImltYWdlUGF0aCIsImRlc2NyaXB0aW9uIiwic3VtbWFyeURhdGEiLCJzdW1tYXJ5SXRlbURhdGEiLCJfcGFyYWdyYXBoIiwiX3Byb2plY3REZXNjcmlwdGlvbiIsIlBhcmFncmFwaCIsIlNlY3Rpb25UaXRsZSIsIlNlY3Rpb25TdWJ0aXRsZSIsIlByb2plY3REZXNjcmlwdGlvbiIsImciLCJldmFsIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImZhbGxiYWNrIiwicGFyZW50Tm9kZSIsInJlbmRlckZuIiwiX3JlZiRhbGxvd0ZhbGxiYWNrIiwiYWxsb3dGYWxsYmFjayIsIl9zdHlsZSIsIm9uRW5kIiwiZHVyYXRpb24iLCJiYWNrdXAiLCJmYWtlRXZlbnQiLCJkb25lIiwicGFyc2VEdXJhdGlvbiIsIl9wYXJzZUR1cmF0aW9uIiwibXVsdCIsInZhbGlkYXRvciIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJjb21wb25lbnROYW1lU2FmZSIsInByb3BGdWxsTmFtZVNhZmUiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJtZW1vaXplIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsInVwZGF0ZSIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImJ0b2EiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImJsb2IiLCJvbGRTcmMiLCJzdHlsZVNoZWV0IiwiY3JlYXRlVGV4dE5vZGUiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm5leHQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwiZW5jb2RlIiwidG9rZW4iLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsImZsYWdzIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImdsb2JhbCIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsImRlYm91bmNlIiwiUHJvbWlzZSIsImNhbGxlZCIsInJlc29sdmUiLCJ0aGVuIiwic2NoZWR1bGVkIiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsIm5vZGVUeXBlIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwiaG9zdCIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJzdGFydCIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJpc09mZnNldENvbnRhaW5lciIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInVwcGVyU2lkZSIsImh0bWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0Iiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsInZlcnRTY3JvbGxiYXIiLCJnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInN1YnRyYWN0IiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiYXJlYSIsImdldEFyZWEiLCJzb3J0IiwiZmlsdGVyZWRBcmVhcyIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJ4IiwibWFyZ2luQm90dG9tIiwieSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsImFyciIsImNoZWNrIiwicnVuTW9kaWZpZXJzIiwiZW5kcyIsImZpbmRJbmRleCIsImN1ciIsIndhcm4iLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJ1cHBlclByb3AiLCJ0b0NoZWNrIiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsInVwZGF0ZUJvdW5kIiwicGFzc2l2ZSIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJpc051bWVyaWMiLCJpc05hTiIsImlzRmluaXRlIiwic2V0U3R5bGVzIiwidW5pdCIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwicmV2ZXJzZSIsIkJFSEFWSU9SUyIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsImRpdmlkZXIiLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInBvc2l0aW9uRml4ZWQiLCJyZW1vdmVPbkRlc3Ryb3kiLCJvbkNyZWF0ZSIsIm9uVXBkYXRlIiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInByZXZlbnRPdmVyZmxvdyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwiZmxpcHBlZCIsIm9yaWdpbmFsUGxhY2VtZW50IiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsInN0ZXAiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb24iLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiYXR0cmlidXRlcyIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsImlzVmFyaWF0aW9uIiwic2FtZVdpZHRoT2RkbmVzcyIsImJvdGhPZGRXaWR0aCIsIm5vUm91bmQiLCJ2IiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsIndpbGxDaGFuZ2UiLCJpbnZlcnRUb3AiLCJpbnZlcnRMZWZ0IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlcyIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwianF1ZXJ5IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJQb3BwZXJVdGlscyIsIl9fd2VicGFja19leHBvcnRzX18iLCJfb24iLCJfb2ZmIiwiX2ZpbHRlciIsIl9saXN0ZW4iLCJNYW5hZ2VyQ29udGV4dCIsImxpYl9kZWZhdWx0Iiwic2V0UmVmZXJlbmNlTm9kZSIsInJlZmVyZW5jZU5vZGUiLCJNYW5hZ2VyX01hbmFnZXIiLCJNYW5hZ2VyIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsImFzc2VydFRoaXNJbml0aWFsaXplZF9kZWZhdWx0IiwiZXh0ZW5kc19kZWZhdWx0IiwiaW5oZXJpdHNMb29zZV9kZWZhdWx0IiwidW53cmFwQXJyYXkiLCJzYWZlSW52b2tlIiwiaW5pdGlhbFN0eWxlIiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJpbml0aWFsQXJyb3dTdHlsZSIsIlBvcHBlcl9Jbm5lclBvcHBlciIsIklubmVyUG9wcGVyIiwicG9wcGVyTm9kZSIsInVwZGF0ZVBvcHBlckluc3RhbmNlIiwiYXJyb3dOb2RlIiwidXBkYXRlU3RhdGVNb2RpZmllciIsInBvcHBlckluc3RhbmNlIiwiZGVzdHJveSIsImRlc3Ryb3lQb3BwZXJJbnN0YW5jZSIsInJlZmVyZW5jZUVsZW1lbnQiLCJnZXRPcHRpb25zIiwic2V0UG9wcGVyTm9kZSIsImdldFBvcHBlclN0eWxlIiwiZ2V0UG9wcGVyUGxhY2VtZW50IiwiZ2V0T3V0T2ZCb3VuZGFyaWVzU3RhdGUiLCJzZXRBcnJvd05vZGUiLCJnZXRBcnJvd1N0eWxlIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZV9kZWZhdWx0IiwiUmVmZXJlbmNlX0lubmVyUmVmZXJlbmNlIiwiSW5uZXJSZWZlcmVuY2UiLCJyZWZIYW5kbGVyIiwiUmVmZXJlbmNlIiwidmFsaWRhdGUiLCJjaGVja1R5cGUiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiIsInByb3BUeXBlIiwiZXZlbnROYW1lIiwibWVudVJlZiIsInRvZ2dsZVJlZiIsInRvZ2dsZU5vZGUiLCJhbmltYXRpb25FbmQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvblRpbWluZyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uTmFtZSIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uVGltaW5nIiwidHJhbnNpdGlvblByb3BlcnR5IiwiX2dldFRyYW5zaXRpb25Qcm9wZXJ0IiwidmVuZG9yTWFwIiwiTyIsIk1veiIsIldlYmtpdCIsIm1zIiwidmVuZG9ycyIsInZlbmRvciIsImdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidGltaW5nIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwidmFsIiwidG9PYmplY3QiLCJfc2Nyb2xsYmFyU2l6ZSIsIl9pc092ZXJmbG93aW5nIiwiX21hbmFnZUFyaWFIaWRkZW4iLCJNb2RhbE1hbmFnZXIiLCJfcmVmJGhpZGVTaWJsaW5nTm9kZXMiLCJoaWRlU2libGluZ05vZGVzIiwiX3JlZiRoYW5kbGVDb250YWluZXJPIiwiaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3ciLCJtb2RhbHMiLCJjb250YWluZXJzIiwic2Nyb2xsYmFyU2l6ZSIsIm1vZGFsIiwiY29udGFpbmVySW5kZXhGcm9tTW9kYWwiLCJmaW5kSW5kZXhPZiIsImFkZCIsIm1vZGFsSWR4IiwiY29udGFpbmVySWR4IiwiaGlkZVNpYmxpbmdzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInNob3dTaWJsaW5ncyIsIl9kYXRhJG1vZGFscyIsImFyaWFIaWRkZW4iLCJpc1RvcE1vZGFsIiwiX3Byb3BUeXBlcyIsIl9Ecm9wZG93bkNvbnRleHQiLCJhcmlhLWhhc3BvcHVwIiwiX3JlYWN0UG9wcGVyIiwiX1Jvb3RDbG9zZVdyYXBwZXIiLCJfbWFwQ29udGV4dFRvUHJvcHMiLCJ0b2dnbGVJZCIsInBvcHBlcklzSW5pdGlhbGl6ZWQiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNob3VsZFVwZGF0ZVBvcHBlciIsIl9fIiwibWVudSIsImNoaWxkQXJncyIsIm9uUm9vdENsb3NlIiwiYW55Iiwickh5cGhlbiIsImNociIsIl9tYXRjaGVzIiwiX3F1ZXJ5U2VsZWN0b3JBbGwiLCJfdW5jb250cm9sbGFibGUiLCJfRHJvcGRvd25NZW51IiwiX0Ryb3Bkb3duVG9nZ2xlIiwidG9nZ2xlT3BlbiIsImdldE5leHRGb2N1c2VkQ2hpbGQiLCJfbmV4dCIsIl9mb2N1c0luRHJvcGRvd24iLCJsYXN0U2hvdyIsInByZXZPcGVuIiwibWF5YmVGb2N1c0ZpcnN0IiwiaGFzTWVudVJvbGUiLCJmaXJzdCIsImFjdGl2ZUVsZW1lbnQiLCJfY3JlYXRlQ2xhc3MiLCJvYmplY3RBc3NpZ24iLCJJZnJhbWUiLCJfUHVyZUNvbXBvbmVudCIsImdldFByb3RvdHlwZU9mIiwiZnJhbWVCb3JkZXIiLCJhbGxvd0Z1bGxTY3JlZW4iLCJzYW5kYm94IiwiYWxsb3ciLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIm5leHRUaWNrIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsIlNlcGFyYXRvciIsImRlZmF1bHRDb250YWluZXIiLCJfY29tcG9uZW50T3JFbGVtZW50IiwiX293bmVyRG9jdW1lbnQiLCJfZ2V0Q29udGFpbmVyIiwib25Db250YWluZXJSZXNvbHZlZCIsIldhaXRGb3JDb250YWluZXIiLCJzZXRDb250YWluZXIiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIl9jb250YWluZXIiLCJfV2FpdEZvckNvbnRhaW5lciIsIlBvcnRhbCIsIm9uUmVuZGVyZWQiLCJjcmVhdGVQb3J0YWwiLCJjbGFzc0xpc3QiLCJiYXNlVmFsIiwiX3JlYWN0SXMiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJjb21wb25lbnRPckVsZW1lbnQiLCJzcmNFbGVtZW50IiwiX2NvbnRhaW5zIiwiZXNjYXBlS2V5Q29kZSIsIlJvb3RDbG9zZVdyYXBwZXIiLCJhZGRFdmVudExpc3RlbmVycyIsImRvYyIsInJlbW92ZU1vdXNlQ2FwdHVyZUxpc3RlbmVyIiwiaGFuZGxlTW91c2VDYXB0dXJlIiwicmVtb3ZlTW91c2VMaXN0ZW5lciIsImhhbmRsZU1vdXNlIiwicmVtb3ZlS2V5dXBMaXN0ZW5lciIsImhhbmRsZUtleVVwIiwibW9iaWxlU2FmYXJpSGFja0xpc3RlbmVycyIsInByZXZlbnRNb3VzZVJvb3RDbG9zZSIsImlzTGVmdENsaWNrRXZlbnQiLCJrZXlDb2RlIiwiX2NhbWVsaXplIiwibXNQYXR0ZXJuIiwidmFsaWRhdGVGb3JtYXQiLCJfZWxlbWVudFR5cGUiLCJfUG9ydGFsIiwiT3ZlcmxheSIsImhhbmRsZUhpZGRlbiIsImV4aXRlZCIsIm9uSGlkZGVuTGlzdGVuZXIiLCJfbGFzdFRhcmdldCIsImNvbnRhaW5lclBhZGRpbmciLCJfdGhpcyRwcm9wczIkcG9wcGVyQ28iLCJfcG9wcGVyQ29uZmlnJG1vZGlmaWUiLCJwb3BwZXJQcm9wcyIsImVuYWJsZUV2ZW50cyIsImlubmVyQ2hpbGQiLCJyb290Q2xvc2VEaXNhYmxlZCIsIl9hY3RpdmVFbGVtZW50IiwibW9kYWxNYW5hZ2VyIiwib25Qb3J0YWxSZW5kZXJlZCIsInJlbW92ZUtleWRvd25MaXN0ZW5lciIsImhhbmRsZURvY3VtZW50S2V5RG93biIsInJlbW92ZUZvY3VzTGlzdGVuZXIiLCJyZXN0b3JlTGFzdEZvY3VzIiwic2V0RGlhbG9nUmVmIiwic2V0QmFja2Ryb3BSZWYiLCJoYW5kbGVCYWNrZHJvcENsaWNrIiwib25CYWNrZHJvcENsaWNrIiwiX2lzTW91bnRlZCIsImN1cnJlbnRBY3RpdmVFbGVtZW50IiwibGFzdEZvY3VzIiwicmVuZGVyRGlhbG9nIiwiX3RoaXMkcHJvcHM0JHJvbGUiLCJkaWFsb2dQcm9wcyIsImFyaWEtbW9kYWwiLCJvbWl0UHJvcHMiLCJfaW1wbGVtZW50YXRpb24yIiwiX2VuZCIsIlJFQUNUX1NUQVRJQ1MiLCJnZXREZWZhdWx0UHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsIl9yZWFjdFJvdXRlckRvbSIsIkZvb3RlclZpZXciLCJkb3dubG9hZCIsIk5hdlZpZXciLCJkYXRhLXRvZ2dsZSIsImRhdGEtdGFyZ2V0IiwiYXJpYS1jb250cm9scyIsIl9zaGFyZWRDb21wb25lbnRzIiwiX3Byb2plY3RTdW1tYXJ5IiwiWXVyaVZpZXciLCJ4cyIsIm1kIiwiX3JlYWN0SWZyYW1lMiIsIll1cmlQYWdlVmlldyIsIl95dXJpMiIsIl9zZXBhcmF0b3JDb250YWN0MiIsIlBvY2tldFZpZXciLCJQb2NrZXRQYWdlVmlldyIsIl9wb2NrZXQyIiwiU3Ryb25nZXJWaWV3IiwiU3Ryb25nZXJQYWdlVmlldyIsIl9zdHJvbmdlcjIiLCJobXIiLCJsb2NhbHMiLCJFY3NDYXJvdXNlbCIsImhhbmRsZUNoYW5nZSIsInNlbGVjdGVkSW5kZXgiLCJfc3RhdGUiLCJFY3NWaWV3IiwiX2Vjc0Nhcm91c2VsMiIsIkVjc1BhZ2VWaWV3IiwiX2VjczIiLCJDb250cm9sbGVkQ2Fyb3VzZWwiLCJVbmlmeUhlYWRlckltYWdlIiwiVW5pZnlIZWFkZXJJbWFnZVN0eWxlIiwibWF4V2lkdGgiLCJVbmlmeUhlYWRlckNvbFN0eWxlIiwidGV4dEFsaWduIiwibWF4SGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQm90dG9tIiwicGFkZGluZ1RvcCIsIm1hcmdpbiIsIl9oZWFkZXJJbWFnZSIsIlVuaWZ5VmlldyIsIl9jb250ZW50Q2Fyb3VzZWwyIiwidHJhbnNmb3JtT3JpZ2luIiwiVW5pZnlQYWdlVmlldyIsIl91bmlmeTIiLCJTZXBhcmF0b3JBYm91dCIsIldpdGhtZVZpZXciLCJzZXRJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiYXR0YWNoVG8iLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwiaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24iLCJNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24iLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uIiwidGFzayIsImNsZWFySW1tZWRpYXRlIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwidW5yZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0Iiwic2tpbGxzIiwiaW1hZ2UiLCJyZWxhdGVkUHJvamVjdHMiLCJTa2lsbHNWaWV3Iiwib25Ta2lsbENsaWNrZWQiLCJza2lsbEludGVydmFsIiwibmV3U2VsZWN0ZWRJRCIsIk51bWJlciIsInhsIiwic20iLCJkYXRhLWRhdGEtY29tcG9uZW50Iiwic2tpbGwiLCJyZWxhdGVkUHJvamVjdCIsInNob3dTZWxlY3RlZFNraWxsSW1hZ2UiLCJQb3J0Zm9saW9WaWV3IiwicHJvamVjdERhdGEiLCJpbnNpZGVMaW5rIiwiYmFja2dyb3VuZENsYXNzIiwiaW1hZ2VVcmwiLCJhbHQiLCJsZyIsImxpbmtUbyIsImV4dGVybmFsTGluayIsIkV4cGVyaWVuY2VWaWV3IiwiZ2V0TmFub1NlY29uZHMiLCJocnRpbWUiLCJsb2FkVGltZSIsIm1vZHVsZUxvYWRUaW1lIiwibm9kZUxvYWRUaW1lIiwidXBUaW1lIiwicGVyZm9ybWFuY2UiLCJociIsInVwdGltZSIsIkRhdGUiLCJnZXRUaW1lIiwicm9vdCIsInN1ZmZpeCIsInJhZiIsImNhZiIsIl9ub3ciLCJjcCIsImNhbmNlbGxlZCIsIl9yYWYyIiwiZm5TdGFja3MiLCJydW5BcnJheSIsIlNldCIsInJhZlN0YXJ0ZWQiLCJzdGFydElkIiwiZ2V0VGltZVN0YW1wIiwiZXhlY3V0ZUZuIiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsImNoZWNrVGljayIsImN1cnJlbnRUaW1lVGljayIsImRlbGV0ZSIsImxvb3AiLCJjbGVhciIsImFkZElkIiwiX3JlZiRtcyIsImN1cnJlbnRJZCIsInJlbW92ZUlkIiwiaGFzIiwiYW5pbWF0ZVNjcm9sbCIsInVwZGF0ZUhpc3RvcnkiLCJfcmVxdWVzdGFuaW1hdGlvbmZyYW1lVGltZXIiLCJ0aW1lb3V0SWQiLCJyZXNvbHZlUHJldmlvdXMiLCJ0YXJnZXRJZCIsImFuaW1hdGUiLCJ0YXJnZXRFbGVtZW50IiwiZ2V0U2Nyb2xsVG9wIiwicmVqZWN0IiwiZWFzaW5nIiwiY2hhbmdlIiwicGFyZW50T2Zmc2V0VG9wIiwiZ2V0T2Zmc2V0VG9wIiwiYW5pbWF0ZUZuIiwiZWxhcHNlZCIsInNldFNjcm9sbFRvcCIsIl9zbGljZWRUb0FycmF5IiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJzbGljZUl0ZXJhdG9yIiwiX3Byb3BUeXBlczIiLCJfaGVscGVycyIsIlNjcm9sbGNob3IiLCJfaGFuZGxlQ2xpY2siLCJiZWZvcmVBbmltYXRlIiwiZGlzYWJsZUhpc3RvcnkiLCJhZnRlckFuaW1hdGUiLCJfc3RhdGVIZWxwZXIiLCJzaW11bGF0ZUNsaWNrIiwiX3JlZiRvZmZzZXQiLCJfcmVmJGR1cmF0aW9uIiwiX3JlZiRlYXNpbmciLCJlYXNlT3V0UXVhZCIsIl9ub3JtYWxpemVJZCIsIl9yZVNlbXZlciRleGVjMiIsIm1ham9yIiwibWlub3IiLCJIZWFkZXJWaWV3IiwiX3JlYWN0U2Nyb2xsY2hvcjIiLCJIb21lUGFnZVZpZXciLCJfaGVhZGVyMiIsIl9wb3J0Zm9saW8yIiwiX2V4cGVyaWVuY2UyIiwiX3NraWxsczIiLCJfd2l0aG1lMiIsIl9zZXBhcmF0b3JBYm91dDIiLCJ2YWxpZGF0b3JzIiwic2libGluZ3MiLCJCTEFDS0xJU1QiLCJleGNsdWRlIiwiaXNIaWRhYmxlIiwicGFyZW50V2luZG93IiwiX2lzV2luZG93Iiwid2luIiwiYm9keUlzT3ZlcmZsb3dpbmciLCJyZXBsYWNlQ2xhc3NOYW1lIiwib3JpZ0NsYXNzIiwiY2xhc3NUb1JlbW92ZSIsIl9oYXNDbGFzcyIsIl9hZGRDbGFzcyIsIl9yZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiZm9yIiwiaCIsInEiLCJ1IiwiJCR0eXBlb2YiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGb3J3YXJkUmVmIiwiTGF6eSIsIk1lbW8iLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNNZW1vIiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsIl9ndWQyIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNyZWF0ZUV2ZW50RW1pdHRlciIsIm9sZFZhbHVlIiwib2JqZWN0SXMiLCJfQ29tcG9uZW50MiIsImdldFZhbHVlIiwib2JzZXJ2ZWRCaXRzIiwib25seUNoaWxkIiwibWF0Y2hlc0NhY2hlIiwibmF0aXZlTWF0Y2giLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImllOE1hdGNoZXNTZWxlY3RvciIsInN1cHBvcnRlZFRyYW5zZm9ybXMiLCJyZW1vdmVQcm9wZXJ0eSIsIm9wZW5lciIsImN1cnJlbnRTdHlsZSIsInJudW1ub25weCIsInJwb3NpdGlvbiIsInJ1blN0eWxlIiwicnVudGltZVN0eWxlIiwicnNMZWZ0IiwicGl4ZWxMZWZ0IiwiclVwcGVyIiwiX2h5cGhlbmF0ZSIsImNsYXNzTmFtZXNTaGFwZSIsInRpbWVvdXRzU2hhcGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIiwiX19yZWFjdEludGVybmFsU25hcHNob3QiLCJmb3VuZFdpbGxNb3VudE5hbWUiLCJmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIiwiZm91bmRXaWxsVXBkYXRlTmFtZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsIm5ld0FwaU5hbWUiLCJtYXliZVNuYXBzaG90Iiwic25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiQWJvdXRWaWV3IiwiY29sIiwicHJvZmlsZVBob3RvIiwiaHRtbDVMb2dvIiwiY3NzM0xvZ28iLCJqc0xvZ28iLCJnaXRMb2dvIiwicGhvdG9zaG9wTG9nbyIsImlsbHVzdHJhdG9yTG9nbyIsInNrZXRjaExvZ28iLCJpbnZpc2lvbkxvZ28iLCJBYm91dFBhZ2VWaWV3IiwiX2Fib3V0MiIsIkFwcCIsInNjcm9sbFRvIiwiX25hdmlnYXRpb24yIiwiX2Zvb3RlcjIiLCJ3aXRoUm91dGVyIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiY2hlY2tQcm9wVHlwZXMiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiaXMiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImFhIiwiYmEiLCJkYSIsImVhIiwiZmEiLCJoYSIsIkEiLCJCIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInZhIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwic3RhdGVOb2RlIiwiSWEiLCJKYSIsIkthIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIkxhIiwiTWEiLCJOYSIsInRhZyIsIk9hIiwiUGEiLCJRYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiRiIsInJldHVybiIsIlJhIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiWGEiLCJZYSIsIlphIiwiYWx0ZXJuYXRlIiwiJGEiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImFiIiwiYmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJHIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm1iIiwibmIiLCJvYiIsInBiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiSCIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwicmIiLCJldmVudFBvb2wiLCJzYiIsImRlc3RydWN0b3IiLCJxYiIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsImV4dGVuZCIsInRiIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsInpiIiwiQWIiLCJCYiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJDYiIsIkRiIiwiRWIiLCJkZXRhaWwiLCJGYiIsIkliIiwid2hpY2giLCJHYiIsImNoYXIiLCJIYiIsIkpiIiwiS2IiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiTGIiLCJNYiIsIk5iIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwidGVsIiwidGltZSIsIndlZWsiLCJZYiIsIlpiIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCIkYiIsImFjIiwiY2MiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJiYyIsImRjIiwiZWMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInBlbmRpbmdQcm9wcyIsInZjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJ3YyIsInhjIiwiemMiLCJJIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkoiLCJEYyIsIkVjIiwiRmMiLCJCYyIsIkNjIiwiQWMiLCJzZXRBdHRyaWJ1dGVOUyIsIkdjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJIYyIsIkljIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsImJkIiwidmlldyIsImNkIiwiQWx0IiwiTWV0YSIsIlNoaWZ0IiwiZGQiLCJnZXRNb2RpZmllclN0YXRlIiwiZWQiLCJmZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiZ2QiLCJwb2ludGVySWQiLCJwcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsImhkIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJqZCIsImVmZmVjdFRhZyIsImtkIiwibGQiLCJzaWJsaW5nIiwib2QiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJwZCIsImNsaXBib2FyZERhdGEiLCJxZCIsInJkIiwiY2hhckNvZGUiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInVkIiwibG9jYWxlIiwidmQiLCJkYXRhVHJhbnNmZXIiLCJ3ZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ4ZCIsInlkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsImlzSW50ZXJhY3RpdmUiLCJEZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIkVkIiwiRmQiLCJHZCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiSGQiLCJJZCIsIksiLCJLZCIsIkxkIiwiTWQiLCJOZCIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJ0ZXh0Q29udGVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImJlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsIkwiLCJsZSIsIm1lIiwibmUiLCJvZSIsInBlIiwicWUiLCJzZSIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwidWUiLCJzY2hlZHVsZWRDYWxsYmFjayIsInRlIiwidGltZW91dFRpbWUiLCJ2ZSIsInByZXYiLCJ3ZSIsIkluZmluaXR5IiwieWUiLCJ4ZSIsInplIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJBZSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJCZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJtYXRobWwiLCJzdmciLCJHZSIsIkhlIiwiSWUiLCJKZSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJLZSIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIkxlIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiTWUiLCJOZSIsInNldFByb3BlcnR5IiwiT2UiLCJtZW51aXRlbSIsImJyIiwiZW1iZWQiLCJpbWciLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiYmx1ciIsIlRlIiwiY3JlYXRlRWxlbWVudE5TIiwiVWUiLCJWZSIsIl9faHRtbCIsIm9uY2xpY2siLCJXZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJmb3JtIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJsZiIsIm1mIiwiTSIsIk4iLCJuZiIsIm9mIiwicGYiLCJxZiIsInJmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0Iiwic2YiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwieGYiLCJ5ZiIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJFZiIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImVhcmxpZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RQaW5nZWRUaW1lIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiZmluaXNoZWRXb3JrIiwicGVuZGluZ0NvbnRleHQiLCJoeWRyYXRlIiwicmVtYWluaW5nRXhwaXJhdGlvblRpbWUiLCJmaXJzdEJhdGNoIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJGZiIsIkdmIiwiSGYiLCJKZiIsIktmIiwiTGYiLCJNZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiTmYiLCJPZiIsInBheWxvYWQiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJ3IiwiVmYiLCJXZiIsIlhmIiwic3RhY2siLCJZZiIsIlpmIiwiJGYiLCJhZyIsIl9jb250ZXh0IiwiX2NoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJpZyIsImpnIiwia2ciLCJwZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJlbnF1ZXVlU2V0U3RhdGUiLCJtZyIsIm5nIiwib2ciLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwicWciLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInJnIiwic2ciLCJ0ZyIsInVnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInZnIiwid2ciLCJQIiwibmMiLCJKZCIsIkUiLCJ4ZyIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiUSIsIklnIiwiSmciLCJLZyIsIlIiLCJMZyIsIk1nIiwiUmciLCJ1cGRhdGVyIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiUWciLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJjb21wb25lbnREaWRDYXRjaCIsImhoIiwiY29tcG9uZW50U3RhY2siLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwiUyIsInFoIiwiVCIsInJoIiwic2giLCJVIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIlgiLCJCaCIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJWIiwiS2giLCJMaCIsIlciLCJZIiwiTWgiLCJOaCIsIk9oIiwiUGgiLCJaIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsIl9vbkNvbXBsZXRlIiwiYWkiLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiV2EiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiRCIsImphIiwibWkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInoiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImhnIiwib2MiLCJjYSIsIndpIiwieGkiLCJOZyIsIk9nIiwieWkiLCJ5YyIsIlBnIiwiemkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiSWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImxpIiwib2kiLCJfY2FsbGJhY2tzIiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwicGkiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwicWkiLCJfaW50ZXJuYWxSb290IiwicmkiLCJ0aSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJzaSIsInVpIiwibmkiLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJ2aSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkFpIiwiQmkiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImtleVByZWZpeCIsIj0iLCI6IiwiZXNjYXBlIiwiX2RlZmF1bHRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX2NoYW5nZWRCaXRzMiIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY3JlYXRlRmFjdG9yeSIsImJhc2VVcmwiLCJwcm90b2NvbCIsImN1cnJlbnREaXIiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJmYWN0b3J5Iiwibm9HbG9iYWwiLCJnZXRQcm90byIsImNsYXNzMnR5cGUiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsInRvVHlwZSIsImpRdWVyeSIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiZXEiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiZXhwYW5kbyIsImlzUmVhZHkiLCJtc2ciLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiZ3VpZCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoX25hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiYXNDb2RlUG9pbnQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJlbHMiLCJzZWVkIiwibmlkIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImFkZEhhbmRsZSIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJkaWZmIiwic291cmNlSW5kZXgiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidG1wIiwib01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwib3BlcmF0b3IiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc0ZvY3VzIiwiZW1wdHkiLCJoZWFkZXIiLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwic3VibWl0IiwicmVzZXQiLCJjb21iaW5hdG9yIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImNvbXBpbGVkIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJub1ZhbHVlIiwicHJvbWlzZSIsImZhaWwiLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwic3RvcE9uRmFsc2UiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJkZWZlciIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3dhcCIsIm9sZCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5Iiwic2hvd0hpZGUiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJ3cmFwTWFwIiwib3B0aW9uIiwidGhlYWQiLCJ0ciIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInJodG1sIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0IiwiZ2V0U3R5bGVzIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwibWVhc3VyZSIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJib3giLCJpc0JvcmRlckJveCIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImNzc0hvb2tzIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJnZXRDbGllbnRSZWN0cyIsInByb3BIb29rcyIsInBlcmNlbnQiLCJlYXNlZCIsInBvcyIsImZ4IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiY2xhc3MiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInZhbHVlT3JGdW5jdGlvbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJwYXJlbnRPZmZzZXQiLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiZm5PdmVyIiwiZm5PdXQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2RlZmluZVByb3BlcnR5IiwiX29iamVjdFNwcmVhZCIsIm93bktleXMiLCJzeW0iLCJUUkFOU0lUSU9OX0VORCIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIlV0aWwiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJocmVmQXR0ciIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJmbG9hdFRyYW5zaXRpb25EZWxheSIsInJlZmxvdyIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsInR5cGVDaGVja0NvbmZpZyIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwiZ2V0Um9vdE5vZGUiLCJTaGFkb3dSb290IiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiQUxFUlQiLCJGQURFIiwiU0hPVyIsIl9lbGVtZW50Iiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJjdXN0b21FdmVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsImNsb3NlRXZlbnQiLCJfZGVzdHJveUVsZW1lbnQiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiJGVsZW1lbnQiLCJfaGFuZGxlRGlzbWlzcyIsImFsZXJ0SW5zdGFuY2UiLCJKUVVFUllfTk9fQ09ORkxJQ1QkMSIsIkNsYXNzTmFtZSQxIiwiQUNUSVZFIiwiQlVUVE9OIiwiRk9DVVMiLCJTZWxlY3RvciQxIiwiREFUQV9UT0dHTEVfQ0FSUk9UIiwiREFUQV9UT0dHTEUiLCJJTlBVVCIsIkV2ZW50JDEiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJOQU1FJDIiLCJFVkVOVF9LRVkkMiIsIkpRVUVSWV9OT19DT05GTElDVCQyIiwiRGVmYXVsdCIsInRvdWNoIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJORVhUIiwiUFJFViIsIkxFRlQiLCJSSUdIVCIsIkV2ZW50JDIiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSFNUQVJUIiwiVE9VQ0hNT1ZFIiwiVE9VQ0hFTkQiLCJQT0lOVEVSRE9XTiIsIlBPSU5URVJVUCIsIkRSQUdfU1RBUlQiLCJMT0FEX0RBVEFfQVBJIiwiQ2xhc3NOYW1lJDIiLCJDQVJPVVNFTCIsIklURU0iLCJQT0lOVEVSX0VWRU5UIiwiU2VsZWN0b3IkMiIsIkFDVElWRV9JVEVNIiwiSVRFTV9JTUciLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiREFUQV9TTElERSIsIkRBVEFfUklERSIsIlBvaW50ZXJUeXBlIiwiVE9VQ0giLCJQRU4iLCJfaXRlbXMiLCJ0b3VjaFRpbWVvdXQiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoRGVsdGFYIiwiX2NvbmZpZyIsIl9nZXRDb25maWciLCJfaW5kaWNhdG9yc0VsZW1lbnQiLCJfdG91Y2hTdXBwb3J0ZWQiLCJtYXhUb3VjaFBvaW50cyIsIl9wb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsIl9nZXRJdGVtSW5kZXgiLCJfaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJhYnMiLCJfa2V5ZG93biIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwibW92ZSIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXNHb2luZ1RvV3JhcCIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4Iiwic2xpZGVFdmVudCIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwibmV4dEluZGljYXRvciIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJuZXh0RWxlbWVudEludGVydmFsIiwiZGVmYXVsdEludGVydmFsIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJzbGlkZUluZGV4IiwiY2Fyb3VzZWxzIiwiJGNhcm91c2VsIiwiTkFNRSQzIiwiSlFVRVJZX05PX0NPTkZMSUNUJDMiLCJEZWZhdWx0JDEiLCJEZWZhdWx0VHlwZSQxIiwiRXZlbnQkMyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkNsYXNzTmFtZSQzIiwiQ09MTEFQU0UiLCJDT0xMQVBTSU5HIiwiQ09MTEFQU0VEIiwiRGltZW5zaW9uIiwiV0lEVEgiLCJIRUlHSFQiLCJTZWxlY3RvciQzIiwiQUNUSVZFUyIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidG9nZ2xlTGlzdCIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJhY3RpdmVzIiwiYWN0aXZlc0RhdGEiLCJzdGFydEV2ZW50IiwiX2dldERpbWVuc2lvbiIsInNldFRyYW5zaXRpb25pbmciLCJjYXBpdGFsaXplZERpbWVuc2lvbiIsInNjcm9sbFNpemUiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCIkZWxlbSIsImlzVHJhbnNpdGlvbmluZyIsImhhc1dpZHRoIiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiJHRoaXMiLCIkdHJpZ2dlciIsIiR0YXJnZXQiLCJOQU1FJDQiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNCIsIlJFR0VYUF9LRVlET1dOIiwiQVJST1dfVVBfS0VZQ09ERSIsIkV2ZW50JDQiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkNsYXNzTmFtZSQ0IiwiRElTQUJMRUQiLCJEUk9QVVAiLCJEUk9QUklHSFQiLCJEUk9QTEVGVCIsIk1FTlVSSUdIVCIsIk1FTlVMRUZUIiwiUE9TSVRJT05fU1RBVElDIiwiU2VsZWN0b3IkNCIsIkZPUk1fQ0hJTEQiLCJNRU5VIiwiTkFWQkFSX05BViIsIlZJU0lCTEVfSVRFTVMiLCJBdHRhY2htZW50TWFwIiwiVE9QIiwiVE9QRU5EIiwiQk9UVE9NIiwiQk9UVE9NRU5EIiwiUklHSFRFTkQiLCJMRUZURU5EIiwiRGVmYXVsdCQyIiwiYm91bmRhcnkiLCJEZWZhdWx0VHlwZSQyIiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImhpZGVFdmVudCIsIl9nZXRQbGFjZW1lbnQiLCIkcGFyZW50RHJvcGRvd24iLCJvZmZzZXRDb25mIiwidG9nZ2xlcyIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiSlFVRVJZX05PX0NPTkZMSUNUJDUiLCJEZWZhdWx0JDMiLCJEZWZhdWx0VHlwZSQzIiwiRXZlbnQkNSIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJDbGFzc05hbWUkNSIsIlNDUk9MTEJBUl9NRUFTVVJFUiIsIkJBQ0tEUk9QIiwiT1BFTiIsIlNlbGVjdG9yJDUiLCJESUFMT0ciLCJEQVRBX0RJU01JU1MiLCJGSVhFRF9DT05URU5UIiwiU1RJQ0tZX0NPTlRFTlQiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2lzU2hvd24iLCJfaXNCb2R5T3ZlcmZsb3dpbmciLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaHRtbEVsZW1lbnQiLCJoYW5kbGVVcGRhdGUiLCJFTEVNRU5UX05PREUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzNiIsIl90aGlzNyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiX3RoaXM4IiwiYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJjYWxsYmFja1JlbW92ZSIsIl9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImlzTW9kYWxPdmVyZmxvd2luZyIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsIl90aGlzOSIsImZpeGVkQ29udGVudCIsInN0aWNreUNvbnRlbnQiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJjYWxjdWxhdGVkTWFyZ2luIiwic2Nyb2xsYmFyV2lkdGgiLCJfdGhpczEwIiwiTkFNRSQ2IiwiSlFVRVJZX05PX0NPTkZMSUNUJDYiLCJCU0NMU19QUkVGSVhfUkVHRVgiLCJEZWZhdWx0VHlwZSQ0IiwidGVtcGxhdGUiLCJmYWxsYmFja1BsYWNlbWVudCIsIkF0dGFjaG1lbnRNYXAkMSIsIkFVVE8iLCJEZWZhdWx0JDQiLCJIb3ZlclN0YXRlIiwiT1VUIiwiRXZlbnQkNiIsIklOU0VSVEVEIiwiRk9DVVNPVVQiLCJDbGFzc05hbWUkNiIsIlNlbGVjdG9yJDYiLCJUT09MVElQIiwiVE9PTFRJUF9JTk5FUiIsIkFSUk9XIiwiVHJpZ2dlciIsIkhPVkVSIiwiTUFOVUFMIiwiX2lzRW5hYmxlZCIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiREFUQV9LRVkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJFVkVOVF9LRVkiLCJpc1dpdGhDb250ZW50Iiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsIk5BTUUiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwiQ0xBU1NfUFJFRklYIiwic2V0RWxlbWVudENvbnRlbnQiLCJldmVudEluIiwiZXZlbnRPdXQiLCJfZml4VGl0bGUiLCJ0aXRsZVR5cGUiLCIkdGlwIiwidGFiQ2xhc3MiLCJwb3BwZXJEYXRhIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIk5BTUUkNyIsIkpRVUVSWV9OT19DT05GTElDVCQ3IiwiQlNDTFNfUFJFRklYX1JFR0VYJDEiLCJEZWZhdWx0JDUiLCJEZWZhdWx0VHlwZSQ1IiwiQ2xhc3NOYW1lJDciLCJTZWxlY3RvciQ3IiwiVElUTEUiLCJDT05URU5UIiwiRXZlbnQkNyIsIl9Ub29sdGlwIiwiX2dldENvbnRlbnQiLCJDTEFTU19QUkVGSVgkMSIsIk5BTUUkOCIsIkpRVUVSWV9OT19DT05GTElDVCQ4IiwiRGVmYXVsdCQ2IiwiRGVmYXVsdFR5cGUkNiIsIkV2ZW50JDgiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIkNsYXNzTmFtZSQ4IiwiRFJPUERPV05fSVRFTSIsIkRST1BET1dOX01FTlUiLCJTZWxlY3RvciQ4IiwiREFUQV9TUFkiLCJOQVZfTElTVF9HUk9VUCIsIk5BVl9MSU5LUyIsIk5BVl9JVEVNUyIsIkxJU1RfSVRFTVMiLCJEUk9QRE9XTiIsIkRST1BET1dOX0lURU1TIiwiRFJPUERPV05fVE9HR0xFIiwiT2Zmc2V0TWV0aG9kIiwiT0ZGU0VUIiwiUE9TSVRJT04iLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIl9nZXRPZmZzZXRIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJvZmZzZXRMZW5ndGgiLCJpc0FjdGl2ZVRhcmdldCIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCJzY3JvbGxTcHlzTGVuZ3RoIiwiJHNweSIsIkpRVUVSWV9OT19DT05GTElDVCQ5IiwiRXZlbnQkOSIsIkNsYXNzTmFtZSQ5IiwiU2VsZWN0b3IkOSIsIkFDVElWRV9VTCIsIkRST1BET1dOX0FDVElWRV9DSElMRCIsImxpc3RFbGVtZW50IiwiaGlkZGVuRXZlbnQiLCJhY3RpdmVFbGVtZW50cyIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0IiwiSlFVRVJZX05PX0NPTkZMSUNUJGEiLCJFdmVudCRhIiwiQ2xhc3NOYW1lJGEiLCJTSE9XSU5HIiwiRGVmYXVsdFR5cGUkNyIsImF1dG9oaWRlIiwiRGVmYXVsdCQ3IiwiU2VsZWN0b3IkYSIsIlRvYXN0Iiwid2l0aG91dFRpbWVvdXQiLCJfY2xvc2UiLCJTY3JvbGxzcHkiLCJSZWFjdERPTSIsIl9hcHAyIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEs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QUEsRUFBQSxvQ0NOQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQSxRQUFBQSxFQUFBLFFBQ0FBLEVBQUEsSUFDQXFoRSxFQUFBcmhFLEVBQUEsUUFDQUEsRUFBQSx5REFFQWc5SSxVQUFTbjFJLE9BQ1A0c0MsRUFBQXZ4QyxRQUFBNEMsY0FBQ3U3RCxFQUFBbDJCLGNBQUQsS0FDRXNKLEVBQUF2eEMsUUFBQTRDLGNBQUNtM0ksRUFBQS81SSxRQUFELE9BRUZpUixTQUFTb29CLGVBQWUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTYzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNyBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGlubmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGtleSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBkZWZhdWx0OiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICByZXR1cm4gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocCwgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHAsIHtcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHAuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gICAgfSkpO1xuICB9KTtcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgZm9yd2FyZFJlZiBmcm9tICdyZWFjdC1jb250ZXh0LXRvb2xib3gvZm9yd2FyZFJlZic7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgX1JlYWN0JGNyZWF0ZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSksXG4gICAgUHJvdmlkZXIgPSBfUmVhY3QkY3JlYXRlQ29udGV4dC5Qcm92aWRlcixcbiAgICBDb25zdW1lciA9IF9SZWFjdCRjcmVhdGVDb250ZXh0LkNvbnN1bWVyO1xuXG52YXIgVGhlbWVQcm92aWRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUaGVtZVByb3ZpZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnByZWZpeGVzID0gbmV3IE1hcCgpO1xuICAgIE9iamVjdC5rZXlzKF90aGlzLnByb3BzLnByZWZpeGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF90aGlzLnByZWZpeGVzLnNldChrZXksIF90aGlzLnByb3BzLnByZWZpeGVzW2tleV0pO1xuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcmVmaXhlc1xuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5mdW5jdGlvbiBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ29tcG9uZW50LCBvcHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7XG4gICAgcHJlZml4OiBvcHRzXG4gIH07XG4gIHZhciBpc0NsYXNzeSA9IENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50OyAvLyBJZiBpdCdzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQgbWFrZSBzdXJlIHdlIGRvbid0IGJyZWFrIGl0IHdpdGggYSByZWZcblxuICB2YXIgX29wdHMgPSBvcHRzLFxuICAgICAgcHJlZml4ID0gX29wdHMucHJlZml4LFxuICAgICAgX29wdHMkZm9yd2FyZFJlZkFzID0gX29wdHMuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX29wdHMkZm9yd2FyZFJlZkFzID09PSB2b2lkIDAgPyBpc0NsYXNzeSA/ICdyZWYnIDogJ2lubmVyUmVmJyA6IF9vcHRzJGZvcndhcmRSZWZBcztcbiAgcmV0dXJuIGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBfcmVmKTtcblxuICAgIHByb3BzW2ZvcndhcmRSZWZBc10gPSByZWY7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChwcmVmaXhlcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgYnNQcmVmaXg6IHByb3BzLmJzUHJlZml4IHx8IHByZWZpeGVzLmdldChwcmVmaXgpIHx8IHByZWZpeFxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9LCB7XG4gICAgZGlzcGxheU5hbWU6IFwiQm9vdHN0cmFwKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIlxuICB9KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50LCBDb25zdW1lciBhcyBUaGVtZUNvbnN1bWVyIH07XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjYW1lbGl6ZSBmcm9tICdkb20taGVscGVycy91dGlsL2NhbWVsaXplJztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4uL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgcGFzY2FsQ2FzZSA9IGZ1bmN0aW9uIHBhc2NhbENhc2Uoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIGNhbWVsaXplKHN0cikuc2xpY2UoMSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVXaXRoQnNQcmVmaXgocHJlZml4LCBfdGVtcCkge1xuICB2YXIgX2NsYXNzLCBfdGVtcDI7XG5cbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgZGlzcGxheU5hbWUgPSBfcmVmJGRpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBwYXNjYWxDYXNlKHByZWZpeCkgOiBfcmVmJGRpc3BsYXlOYW1lLFxuICAgICAgX3JlZiRDb21wb25lbnQgPSBfcmVmLkNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9yZWYkQ29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9yZWYkQ29tcG9uZW50LFxuICAgICAgZGVmYXVsdFByb3BzID0gX3JlZi5kZWZhdWx0UHJvcHM7XG5cbiAgcmV0dXJuIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCgoX3RlbXAyID0gX2NsYXNzID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKF9jbGFzcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBfY2xhc3MoKSB7XG4gICAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IF9jbGFzcy5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICAgIFRhZyA9IF90aGlzJHByb3BzJGFzID09PSB2b2lkIDAgPyBDb21wb25lbnQgOiBfdGhpcyRwcm9wcyRhcyxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiLCBcImFzXCJdKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzLCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICAgIH0pKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZSwgX3RlbXAyKSwgcHJlZml4KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5cbnZhciBfZmFkZVN0eWxlcztcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24sIHsgRU5URVJFRCwgRU5URVJJTkcgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuaW1wb3J0IG9uRW5kIGZyb20gJ2RvbS1oZWxwZXJzL3RyYW5zaXRpb24vZW5kJztcbmltcG9ydCB0cmlnZ2VyQnJvd3NlclJlZmxvdyBmcm9tICcuL3V0aWxzL3RyaWdnZXJCcm93c2VyUmVmbG93JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgdGltZW91dDogMzAwLFxuICBtb3VudE9uRW50ZXI6IGZhbHNlLFxuICB1bm1vdW50T25FeGl0OiBmYWxzZSxcbiAgYXBwZWFyOiBmYWxzZVxufTtcbnZhciBmYWRlU3R5bGVzID0gKF9mYWRlU3R5bGVzID0ge30sIF9mYWRlU3R5bGVzW0VOVEVSSU5HXSA9ICdzaG93JywgX2ZhZGVTdHlsZXNbRU5URVJFRF0gPSAnc2hvdycsIF9mYWRlU3R5bGVzKTtcblxudmFyIEZhZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmFkZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFkZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHRyaWdnZXJCcm93c2VyUmVmbG93KG5vZGUpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGYWRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgYWRkRW5kTGlzdGVuZXI6IG9uRW5kXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXJcbiAgICB9KSwgZnVuY3Rpb24gKHN0YXR1cywgaW5uZXJQcm9wcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdmYWRlJywgY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGZhZGVTdHlsZXNbc3RhdHVzXSlcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRmFkZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRmFkZS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsIi8vIHJlYWRpbmcgYSBkaW1lbnNpb24gcHJvcCB3aWxsIGNhdXNlIHRoZSBicm93c2VyIHRvIHJlY2FsY3VsYXRlLFxuLy8gd2hpY2ggd2lsbCBsZXQgb3VyIGFuaW1hdGlvbnMgd29ya1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJpZ2dlckJyb3dzZXJSZWZsb3cobm9kZSkge1xuICBub2RlLm9mZnNldEhlaWdodDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ0Nsb3NlJ1xufTtcblxudmFyIENsb3NlQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENsb3NlQnV0dG9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbG9zZUJ1dHRvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2xvc2VCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGNsYXNzTmFtZTogXCJjbG9zZVwiLFxuICAgICAgb25DbGljazogb25DbGlja1xuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICB9LCBcIlxceEQ3XCIpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgbGFiZWwpKTtcbiAgfTtcblxuICByZXR1cm4gQ2xvc2VCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNsb3NlQnV0dG9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IENsb3NlQnV0dG9uOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5maWx0ZXIoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZiAhPSBudWxsO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZikge1xuICAgIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgIH1cblxuICAgIGlmIChhY2MgPT09IG51bGwpIHJldHVybiBmO1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDaGFpbmVkRnVuY3Rpb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gZnJvbSAnLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdhJ1xufTtcblxuZnVuY3Rpb24gaXNUcml2aWFsSHJlZihocmVmKSB7XG4gIHJldHVybiAhaHJlZiB8fCBocmVmLnRyaW0oKSA9PT0gJyMnO1xufVxuLyoqXG4gKiBUaGVyZSBhcmUgc2l0dWF0aW9ucyBkdWUgdG8gYnJvd3NlciBxdWlya3Mgb3IgQm9vdHN0cmFwIENTUyB3aGVyZVxuICogYW4gYW5jaG9yIHRhZyBpcyBuZWVkZWQsIHdoZW4gc2VtYW50aWNhbGx5IGEgYnV0dG9uIHRhZyBpcyB0aGVcbiAqIGJldHRlciBjaG9pY2UuIFNhZmVBbmNob3IgZW5zdXJlcyB0aGF0IHdoZW4gYW4gYW5jaG9yIGlzIHVzZWQgbGlrZSBhXG4gKiBidXR0b24gaXRzIGFjY2Vzc2libGUuIEl0IGFsc28gZW11bGF0ZXMgaW5wdXQgYGRpc2FibGVkYCBiZWhhdmlvciBmb3JcbiAqIGxpbmtzLCB3aGljaCBpcyB1c3VhbGx5IGRlc2lyYWJsZSBmb3IgQnV0dG9ucywgTmF2SXRlbXMsIERyb3Bkb3duSXRlbXMsIGV0Yy5cbiAqL1xuXG5cbnZhciBTYWZlQW5jaG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFNhZmVBbmNob3IsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNhZmVBbmNob3IocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IF90aGlzLmhhbmRsZUNsaWNrLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBfdGhpcy5oYW5kbGVLZXlEb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTYWZlQW5jaG9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGhyZWYgPSBfdGhpcyRwcm9wcy5ocmVmLFxuICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljaztcblxuICAgIGlmIChkaXNhYmxlZCB8fCBpc1RyaXZpYWxIcmVmKGhyZWYpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmhhbmRsZUNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMyLm9uS2V5RG93bixcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wczIuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJhc1wiLCBcImRpc2FibGVkXCIsIFwib25LZXlEb3duXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gICAgaWYgKGlzVHJpdmlhbEhyZWYocHJvcHMuaHJlZikpIHtcbiAgICAgIHByb3BzLnJvbGUgPSBwcm9wcy5yb2xlIHx8ICdidXR0b24nOyAvLyB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBhIGhyZWYgYXR0cmlidXRlIG9uIHRoZSBub2RlXG4gICAgICAvLyBvdGhlcndpc2UsIHRoZSBjdXJzb3IgaW5jb3JyZWN0bHkgc3R5bGVkIChleGNlcHQgd2l0aCByb2xlPSdidXR0b24nKVxuXG4gICAgICBwcm9wcy5ocmVmID0gcHJvcHMuaHJlZiB8fCAnIyc7XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xuICAgICAgcHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGlubmVyUmVmKSBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIG9uS2V5RG93bjogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlS2V5RG93biwgb25LZXlEb3duKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU2FmZUFuY2hvcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2FmZUFuY2hvci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBTYWZlQW5jaG9yOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgZGl2V2l0aENsYXNzTmFtZSBmcm9tICcuL3V0aWxzL2RpdldpdGhDbGFzc05hbWUnO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tICcuL0Nsb3NlQnV0dG9uJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG4vKipcbiAqIEBwcm9wZXJ0eSB7QWxlcnRIZWFkaW5nfSBIZWFkaW5nXG4gKiBAcHJvcGVydHkge0FsZXJ0TGlua30gTGlua1xuICovXG5cbnZhciBBbGVydCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShBbGVydCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWxlcnQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGZhbHNlLCBlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wcy5zaG93LFxuICAgICAgICBjbG9zZUxhYmVsID0gX3RoaXMkcHJvcHMuY2xvc2VMYWJlbCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgZGlzbWlzc2libGUgPSBfdGhpcyRwcm9wcy5kaXNtaXNzaWJsZSxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNob3dcIiwgXCJjbG9zZUxhYmVsXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJ2YXJpYW50XCIsIFwiZGlzbWlzc2libGVcIiwgXCJ0cmFuc2l0aW9uXCIsIFwib25DbG9zZVwiXSk7XG5cbiAgICB2YXIgYWxlcnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICAgIHJvbGU6IFwiYWxlcnRcIlxuICAgIH0sIFRyYW5zaXRpb24gPyBwcm9wcyA6IHVuZGVmaW5lZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHZhcmlhbnQgJiYgYnNQcmVmaXggKyBcIi1cIiArIHZhcmlhbnQsIGRpc21pc3NpYmxlICYmIGJzUHJlZml4ICsgXCItZGlzbWlzc2libGVcIilcbiAgICB9KSwgZGlzbWlzc2libGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbG9zZSxcbiAgICAgIGxhYmVsOiBjbG9zZUxhYmVsXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgICBpZiAoIVRyYW5zaXRpb24pIHJldHVybiBzaG93ID8gYWxlcnQgOiBudWxsO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICAgIHVubW91bnRPbkV4aXQ6IHRydWVcbiAgICB9LCBwcm9wcywge1xuICAgICAgaW46IHNob3dcbiAgICB9KSwgYWxlcnQpO1xuICB9O1xuXG4gIHJldHVybiBBbGVydDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQWxlcnQuZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiB0cnVlLFxuICB0cmFuc2l0aW9uOiBGYWRlLFxuICBjbG9zZUxhYmVsOiAnQ2xvc2UgYWxlcnQnXG59O1xudmFyIERlY29yYXRlZEFsZXJ0ID0gdW5jb250cm9sbGFibGUoY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEFsZXJ0LCAnYWxlcnQnKSwge1xuICBzaG93OiAnb25DbG9zZSdcbn0pO1xudmFyIERpdlN0eWxlZEFzSDQgPSBkaXZXaXRoQ2xhc3NOYW1lKCdoNCcpO1xuRGVjb3JhdGVkQWxlcnQuTGluayA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnYWxlcnQtbGluaycsIHtcbiAgQ29tcG9uZW50OiBTYWZlQW5jaG9yXG59KTtcbkRlY29yYXRlZEFsZXJ0LkhlYWRpbmcgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2FsZXJ0LWhlYWRpbmcnLCB7XG4gIENvbXBvbmVudDogRGl2U3R5bGVkQXNINFxufSk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRBbGVydDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgQmFkZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQmFkZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJhZGdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCYWRnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMudmFyaWFudCxcbiAgICAgICAgcGlsbCA9IF90aGlzJHByb3BzLnBpbGwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJ2YXJpYW50XCIsIFwicGlsbFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgcGlsbCAmJiBic1ByZWZpeCArIFwiLXBpbGxcIiwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJhZGdlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CYWRnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHBpbGw6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJhZGdlLCAnYmFkZ2UnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIEJyZWFkY3J1bWJJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyZWFkY3J1bWJJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcmVhZGNydW1iSXRlbSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJlYWRjcnVtYkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBocmVmID0gcHJvcHMuaHJlZixcbiAgICAgICAgdGl0bGUgPSBwcm9wcy50aXRsZSxcbiAgICAgICAgdGFyZ2V0ID0gcHJvcHMudGFyZ2V0LFxuICAgICAgICBlbGVtZW50UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiaHJlZlwiLCBcInRpdGxlXCIsIFwidGFyZ2V0XCJdKTtcblxuICAgIHZhciBsaW5rUHJvcHMgPSB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGJzUHJlZml4LCBjbGFzc05hbWUsIHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgIH0pLFxuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYWN0aXZlID8gJ3BhZ2UnIDogdW5kZWZpbmVkXG4gICAgfSwgYWN0aXZlID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe30sIGVsZW1lbnRQcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKHtcbiAgICAgICAgYWN0aXZlOiBhY3RpdmVcbiAgICAgIH0pXG4gICAgfSkpIDogUmVhY3QuY3JlYXRlRWxlbWVudChTYWZlQW5jaG9yLCBfZXh0ZW5kcyh7fSwgZWxlbWVudFByb3BzLCBsaW5rUHJvcHMpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyZWFkY3J1bWJJdGVtO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5CcmVhZGNydW1iSXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZTogZmFsc2UsXG4gIGFzOiAnbGknXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJyZWFkY3J1bWJJdGVtLCAnYnJlYWRjcnVtYi1pdGVtJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBCcmVhZGNydW1iSXRlbSBmcm9tICcuL0JyZWFkY3J1bWJJdGVtJztcblxudmFyIEJyZWFkY3J1bWIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJlYWRjcnVtYiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJlYWRjcnVtYigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJlYWRjcnVtYi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGxpc3RQcm9wcyA9IF90aGlzJHByb3BzLmxpc3RQcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwibGlzdFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJsYWJlbFwiLCBcImFzXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCBfZXh0ZW5kcyh7fSwgbGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNQcmVmaXgsIGxpc3RQcm9wcy5jbGFzc05hbWUpXG4gICAgfSksIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyZWFkY3J1bWI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyZWFkY3J1bWIuZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ2JyZWFkY3J1bWInLFxuICBsaXN0UHJvcHM6IHt9LFxuICBhczogJ25hdidcbn07XG52YXIgRGVjb3JhdGVkQnJlYWRjcnVtYiA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChCcmVhZGNydW1iLCAnYnJlYWRjcnVtYicpO1xuRGVjb3JhdGVkQnJlYWRjcnVtYi5JdGVtID0gQnJlYWRjcnVtYkl0ZW07XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRCcmVhZGNydW1iOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgU2FmZUFuY2hvciBmcm9tICcuL1NhZmVBbmNob3InO1xuXG52YXIgQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBhY3RpdmUgPSBfdGhpcyRwcm9wcy5hY3RpdmUsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wcy5ibG9jayxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGlubmVyUmVmID0gX3RoaXMkcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcInNpemVcIiwgXCJhY3RpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJibG9ja1wiLCBcInR5cGVcIiwgXCJhc1wiLCBcImlubmVyUmVmXCJdKTtcblxuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBhY3RpdmUgJiYgJ2FjdGl2ZScsIGJzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBibG9jayAmJiBic1ByZWZpeCArIFwiLWJsb2NrXCIsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUpO1xuXG4gICAgaWYgKHByb3BzLmhyZWYpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNhZmVBbmNob3IsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBhczogYXMsXG4gICAgICAgIGlubmVyUmVmOiBpbm5lclJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzZXMsIHByb3BzLmRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdmFyIENvbXBvbmVudCA9IGFzIHx8ICdidXR0b24nO1xuICAgIGlmIChpbm5lclJlZikgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmFyaWFudDogJ3ByaW1hcnknLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHR5cGU6ICdidXR0b24nXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEJ1dHRvbiwge1xuICBwcmVmaXg6ICdidG4nLFxuICBmb3J3YXJkUmVmQXM6ICdpbm5lclJlZidcbn0pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBCdXR0b25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCdXR0b25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJ1dHRvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICB0b2dnbGUgPSBfdGhpcyRwcm9wcy50b2dnbGUsXG4gICAgICAgIHZlcnRpY2FsID0gX3RoaXMkcHJvcHMudmVydGljYWwsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwic2l6ZVwiLCBcInRvZ2dsZVwiLCBcInZlcnRpY2FsXCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIGJhc2VDbGFzcyA9IGJzUHJlZml4O1xuICAgIGlmICh2ZXJ0aWNhbCkgYmFzZUNsYXNzID0gYnNQcmVmaXggKyBcIi12ZXJ0aWNhbFwiO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBiYXNlQ2xhc3MsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUsIHRvZ2dsZSAmJiBic1ByZWZpeCArIFwiLXRvZ2dsZVwiKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmVydGljYWw6IGZhbHNlLFxuICB0b2dnbGU6IGZhbHNlLFxuICByb2xlOiAnZ3JvdXAnLFxuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQnV0dG9uR3JvdXAsICdidG4tZ3JvdXAnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgQnV0dG9uVG9vbGJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShCdXR0b25Ub29sYmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCdXR0b25Ub29sYmFyKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b25Ub29sYmFyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvblRvb2xiYXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJ1dHRvblRvb2xiYXIuZGVmYXVsdFByb3BzID0ge1xuICByb2xlOiAndG9vbGJhcidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQnV0dG9uVG9vbGJhciwgJ2J0bi10b29sYmFyJyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIENhcmRJbWcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2FyZEltZywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2FyZEltZygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2FyZEltZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJ2YXJpYW50XCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIGJhc2VDbGFzcyA9IHZhcmlhbnQgPyBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCA6IGJzUHJlZml4O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGJhc2VDbGFzcywgY2xhc3NOYW1lKVxuICAgIH0sIHByb3BzKSk7XG4gIH07XG5cbiAgcmV0dXJuIENhcmRJbWc7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNhcmRJbWcuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2ltZycsXG4gIHZhcmlhbnQ6IG51bGxcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ2FyZEltZywgJ2NhcmQtaW1nJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuaW1wb3J0IGRpdldpdGhDbGFzc05hbWUgZnJvbSAnLi91dGlscy9kaXZXaXRoQ2xhc3NOYW1lJztcbmltcG9ydCBDYXJkQ29udGV4dCBmcm9tICcuL0NhcmRDb250ZXh0JztcbmltcG9ydCBDYXJkSW1nIGZyb20gJy4vQ2FyZEltZyc7XG52YXIgQ2FyZEJvZHkgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtYm9keScpO1xuXG52YXIgQ2FyZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDYXJkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJkKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQ2FyZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZikge1xuICAgIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXg7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhcmRDb250ZXh0OiB7XG4gICAgICAgIGNhcmRIZWFkZXJCc1ByZWZpeDogYnNQcmVmaXggKyBcIi1oZWFkZXJcIlxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IENhcmQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgYmcgPSBfdGhpcyRwcm9wcy5iZyxcbiAgICAgICAgdGV4dCA9IF90aGlzJHByb3BzLnRleHQsXG4gICAgICAgIGJvcmRlciA9IF90aGlzJHByb3BzLmJvcmRlcixcbiAgICAgICAgYm9keSA9IF90aGlzJHByb3BzLmJvZHksXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIiwgXCJiZ1wiLCBcInRleHRcIiwgXCJib3JkZXJcIiwgXCJib2R5XCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGJnICYmIFwiYmctXCIgKyBiZywgdGV4dCAmJiBcInRleHQtXCIgKyB0ZXh0LCBib3JkZXIgJiYgXCJib3JkZXItXCIgKyBib3JkZXIpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5jYXJkQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgICB9LCBwcm9wcyksIGJvZHkgPyBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmRCb2R5LCBudWxsLCBjaGlsZHJlbikgOiBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBDYXJkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXJkLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICBib2R5OiBmYWxzZVxufTtcbnZhciBEaXZTdHlsZWRBc0g1ID0gZGl2V2l0aENsYXNzTmFtZSgnaDUnKTtcbnZhciBEaXZTdHlsZWRBc0g2ID0gZGl2V2l0aENsYXNzTmFtZSgnaDYnKTtcbnZhciBEZWNvcmF0ZWRDYXJkID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KENhcmQsICdjYXJkJyk7XG5EZWNvcmF0ZWRDYXJkLkltZyA9IENhcmRJbWc7XG5EZWNvcmF0ZWRDYXJkLlRpdGxlID0gY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLXRpdGxlJywge1xuICBDb21wb25lbnQ6IERpdlN0eWxlZEFzSDVcbn0pO1xuRGVjb3JhdGVkQ2FyZC5TdWJ0aXRsZSA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1zdWJ0aXRsZScsIHtcbiAgQ29tcG9uZW50OiBEaXZTdHlsZWRBc0g2XG59KTtcbkRlY29yYXRlZENhcmQuQm9keSA9IENhcmRCb2R5O1xuRGVjb3JhdGVkQ2FyZC5MaW5rID0gY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWxpbmsnLCB7XG4gIENvbXBvbmVudDogJ2EnXG59KTtcbkRlY29yYXRlZENhcmQuVGV4dCA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC10ZXh0Jywge1xuICBDb21wb25lbnQ6ICdwJ1xufSk7XG5EZWNvcmF0ZWRDYXJkLkhlYWRlciA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1oZWFkZXInKTtcbkRlY29yYXRlZENhcmQuRm9vdGVyID0gY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWZvb3RlcicpO1xuRGVjb3JhdGVkQ2FyZC5JbWdPdmVybGF5ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWltZy1vdmVybGF5Jyk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRDYXJkOyIsImltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlV2l0aEJzUHJlZml4KCdjYXJkLWNvbHVtbnMnKTsiLCJpbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVdpdGhCc1ByZWZpeCgnY2FyZC1kZWNrJyk7IiwiaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXaXRoQnNQcmVmaXgoJ2NhcmQtZ3JvdXAnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnXG59O1xuXG52YXIgQ2Fyb3VzZWxDYXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENhcm91c2VsQ2FwdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2Fyb3VzZWxDYXB0aW9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDYXJvdXNlbENhcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJic1ByZWZpeFwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDYXJvdXNlbENhcHRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNhcm91c2VsQ2FwdGlvbi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQ2Fyb3VzZWxDYXB0aW9uLCAnY2Fyb3VzZWwtY2FwdGlvbicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBDYXJvdXNlbEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ2Fyb3VzZWxJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDYXJvdXNlbEl0ZW0oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENhcm91c2VsSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBDYXJvdXNlbEl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChDYXJvdXNlbEl0ZW0sICdjYXJvdXNlbC1pdGVtJyk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsXG4gKiBidXQgb25seSBtYXBzIG92ZXIgY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBlbGVtZW50c1wiLlxuICpcbiAqIFRoZSBtYXBGdW5jdGlvbiBwcm92aWRlZCBpbmRleCB3aWxsIGJlIG5vcm1hbGlzZWQgdG8gdGhlIGNvbXBvbmVudHMgbWFwcGVkLFxuICogc28gYW4gaW52YWxpZCBjb21wb25lbnQgd291bGQgbm90IGluY3JlYXNlIHRoZSBpbmRleC5cbiAqXG4gKi9cblxuZnVuY3Rpb24gbWFwKGNoaWxkcmVuLCBmdW5jKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBmdW5jKGNoaWxkLCBpbmRleCsrKSA6IGNoaWxkO1xuICB9KTtcbn1cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSBcInZhbGlkIGVsZW1lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKi9cblxuXG5mdW5jdGlvbiBmb3JFYWNoKGNoaWxkcmVuLCBmdW5jKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIGZ1bmMoY2hpbGQsIGluZGV4KyspO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgbWFwLCBmb3JFYWNoIH07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJ2RvbS1oZWxwZXJzL3N0eWxlJztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJ2RvbS1oZWxwZXJzL3RyYW5zaXRpb24nO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgQ2Fyb3VzZWxDYXB0aW9uIGZyb20gJy4vQ2Fyb3VzZWxDYXB0aW9uJztcbmltcG9ydCBDYXJvdXNlbEl0ZW0gZnJvbSAnLi9DYXJvdXNlbEl0ZW0nO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCB7IG1hcCwgZm9yRWFjaCB9IGZyb20gJy4vdXRpbHMvRWxlbWVudENoaWxkcmVuJztcbmltcG9ydCB0cmlnZ2VyQnJvd3NlclJlZmxvdyBmcm9tICcuL3V0aWxzL3RyaWdnZXJCcm93c2VyUmVmbG93JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBjb3VudENoaWxkcmVuID0gZnVuY3Rpb24gY291bnRDaGlsZHJlbihjKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGMpLmZpbHRlcihSZWFjdC5pc1ZhbGlkRWxlbWVudCkubGVuZ3RoO1xufTsgLy8gVE9ETzogYHNsaWRlYCBzaG91bGQgYmUgYGFuaW1hdGVgLlxuXG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHNsaWRlOiB0cnVlLFxuICBmYWRlOiBmYWxzZSxcbiAgaW50ZXJ2YWw6IDUwMDAsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIHdyYXA6IHRydWUsXG4gIGluZGljYXRvcnM6IHRydWUsXG4gIGNvbnRyb2xzOiB0cnVlLFxuICBhY3RpdmVJbmRleDogMCxcbiAgcHJldkljb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgIGNsYXNzTmFtZTogXCJjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvblwiXG4gIH0pLFxuICBwcmV2TGFiZWw6ICdQcmV2aW91cycsXG4gIG5leHRJY29uOiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICBjbGFzc05hbWU6IFwiY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb25cIlxuICB9KSxcbiAgbmV4dExhYmVsOiAnTmV4dCdcbn07XG5cbnZhciBDYXJvdXNlbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDYXJvdXNlbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2Fyb3VzZWwocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVNsaWRlRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBlbmRpbmdJbmRleCA9IF90aGlzLl9wZW5kaW5nSW5kZXg7XG4gICAgICBfdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICBfdGhpcy5fcGVuZGluZ0luZGV4ID0gbnVsbDtcbiAgICAgIGlmIChwZW5kaW5nSW5kZXggIT0gbnVsbCkgX3RoaXMudG8ocGVuZGluZ0luZGV4KTtlbHNlIF90aGlzLmN5Y2xlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY3ljbGUoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnBhdXNlT25Ib3ZlcikgX3RoaXMucGF1c2UoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm47XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZVByZXYoZXZlbnQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIF90aGlzLmhhbmRsZU5leHQoZXZlbnQpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5pc1VubW91bnRlZCAmJiAhZG9jdW1lbnQuaGlkZGVuICYmIHN0eWxlcyhfdGhpcy5jYXJvdXNlbC5jdXJyZW50LCAndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykge1xuICAgICAgICBfdGhpcy5oYW5kbGVOZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU5leHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLl9pc1NsaWRpbmcpIHJldHVybjtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHdyYXAgPSBfdGhpcyRwcm9wcy53cmFwLFxuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gX3RoaXMkcHJvcHMuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgaW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgICB2YXIgY291bnQgPSBjb3VudENoaWxkcmVuKF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKGluZGV4ID4gY291bnQgLSAxKSB7XG4gICAgICAgIGlmICghd3JhcCkgcmV0dXJuO1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNlbGVjdChpbmRleCwgZSwgJ25leHQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUHJldiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMuX2lzU2xpZGluZykgcmV0dXJuO1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHdyYXAgPSBfdGhpcyRwcm9wczIud3JhcCxcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IF90aGlzJHByb3BzMi5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBpbmRleCA9IGFjdGl2ZUluZGV4IC0gMTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpZiAoIXdyYXApIHJldHVybjtcbiAgICAgICAgaW5kZXggPSBjb3VudENoaWxkcmVuKF90aGlzLnByb3BzLmNoaWxkcmVuKSAtIDE7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNlbGVjdChpbmRleCwgZSwgJ3ByZXYnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBwcmV2Q2xhc3NlczogJycsXG4gICAgICBjdXJyZW50Q2xhc3NlczogJ2FjdGl2ZSdcbiAgICB9O1xuICAgIF90aGlzLmlzVW5tb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuY2Fyb3VzZWwgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ2Fyb3VzZWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuY3ljbGUoKTtcbiAgfTtcblxuICBDYXJvdXNlbC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZpb3VzQWN0aXZlSW5kZXggPSBfcmVmLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKG5leHRQcm9wcy5hY3RpdmVJbmRleCAhPT0gcHJldmlvdXNBY3RpdmVJbmRleCkge1xuICAgICAgdmFyIGxhc3RQb3NzaWJsZUluZGV4ID0gY291bnRDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pIC0gMTtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuZXh0UHJvcHMuYWN0aXZlSW5kZXgsIGxhc3RQb3NzaWJsZUluZGV4KSk7XG4gICAgICB2YXIgZGlyZWN0aW9uO1xuXG4gICAgICBpZiAobmV4dEluZGV4ID09PSAwICYmIHByZXZpb3VzQWN0aXZlSW5kZXggPj0gbGFzdFBvc3NpYmxlSW5kZXggfHwgcHJldmlvdXNBY3RpdmVJbmRleCA8PSBuZXh0SW5kZXgpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gJ25leHQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uID0gJ3ByZXYnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgcHJldmlvdXNBY3RpdmVJbmRleDogcHJldmlvdXNBY3RpdmVJbmRleCxcbiAgICAgICAgYWN0aXZlSW5kZXg6IG5leHRJbmRleFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKF8sIHByZXZTdGF0ZSkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMzLmJzUHJlZml4LFxuICAgICAgICBzbGlkZSA9IF90aGlzJHByb3BzMy5zbGlkZTtcbiAgICBpZiAoIXNsaWRlIHx8IHRoaXMuc3RhdGUuYWN0aXZlSW5kZXggPT09IHByZXZTdGF0ZS5hY3RpdmVJbmRleCB8fCB0aGlzLl9pc1NsaWRpbmcpIHJldHVybjtcbiAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBhY3RpdmVJbmRleCA9IF90aGlzJHN0YXRlLmFjdGl2ZUluZGV4LFxuICAgICAgICBkaXJlY3Rpb24gPSBfdGhpcyRzdGF0ZS5kaXJlY3Rpb247XG4gICAgdmFyIG9yZGVyQ2xhc3NOYW1lLCBkaXJlY3Rpb25hbENsYXNzTmFtZTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgb3JkZXJDbGFzc05hbWUgPSBic1ByZWZpeCArIFwiLWl0ZW0tbmV4dFwiO1xuICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBic1ByZWZpeCArIFwiLWl0ZW0tbGVmdFwiO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIG9yZGVyQ2xhc3NOYW1lID0gYnNQcmVmaXggKyBcIi1pdGVtLXByZXZcIjtcbiAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gYnNQcmVmaXggKyBcIi1pdGVtLXJpZ2h0XCI7XG4gICAgfVxuXG4gICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBhdXNlKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuXG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgcHJldkNsYXNzZXM6ICdhY3RpdmUnLFxuICAgICAgY3VycmVudENsYXNzZXM6IG9yZGVyQ2xhc3NOYW1lXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGl0ZW1zID0gX3RoaXMyLmNhcm91c2VsLmN1cnJlbnQuY2hpbGRyZW47XG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBpdGVtc1thY3RpdmVJbmRleF07XG4gICAgICB0cmlnZ2VyQnJvd3NlclJlZmxvdyhuZXh0RWxlbWVudCk7XG5cbiAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBwcmV2Q2xhc3NlczogY2xhc3NOYW1lcygnYWN0aXZlJywgZGlyZWN0aW9uYWxDbGFzc05hbWUpLFxuICAgICAgICBjdXJyZW50Q2xhc3NlczogY2xhc3NOYW1lcyhvcmRlckNsYXNzTmFtZSwgZGlyZWN0aW9uYWxDbGFzc05hbWUpXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2l0aW9uLmVuZChuZXh0RWxlbWVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICAgIHByZXZDbGFzc2VzOiAnJyxcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzc2VzOiAnYWN0aXZlJ1xuICAgICAgICAgIH0sIF90aGlzMi5oYW5kbGVTbGlkZUVuZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgdGhpcy5pc1VubW91bnRlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShzdGF0ZSwgY2IpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICh0aGlzLmlzVW5tb3VudGVkKSByZXR1cm47XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICFfdGhpczMuaXNVbm1vdW50ZWQgJiYgY2IoKTtcbiAgICB9KTtcbiAgfSAvLyBUaGlzIG1pZ2h0IGJlIGEgcHVibGljIEFQSS5cbiAgO1xuXG4gIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoKSB7XG4gICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5oYW5kbGVOZXh0V2hlblZpc2libGUgOiB0aGlzLmhhbmRsZU5leHQsIHRoaXMucHJvcHMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCwgZXZlbnQpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4pIC0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdJbmRleCA9IGluZGV4O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2VsZWN0KGluZGV4LCBldmVudCk7XG4gIH07XG5cbiAgX3Byb3RvLnNlbGVjdCA9IGZ1bmN0aW9uIHNlbGVjdChpbmRleCwgZXZlbnQsIGRpcmVjdGlvbikge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VsZWN0VGhyb3R0bGUpO1xuICAgIGlmIChldmVudCAmJiBldmVudC5wZXJzaXN0KSBldmVudC5wZXJzaXN0KCk7IC8vIFRoZSB0aW1lb3V0IHRocm90dGxlcyBmYXN0IGNsaWNrcywgaW4gb3JkZXIgdG8gZ2l2ZSBhbnkgcGVuZGluZyBzdGF0ZVxuICAgIC8vIGEgY2hhbmNlIHRvIHVwZGF0ZSBhbmQgcHJvcGFnYXRlIGJhY2sgdGhyb3VnaCBwcm9wc1xuXG4gICAgdGhpcy5zZWxlY3RUaHJvdHRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzNC50aW1lb3V0KTtcbiAgICAgIHZhciBfdGhpczQkcHJvcHMgPSBfdGhpczQucHJvcHMsXG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBfdGhpczQkcHJvcHMuYWN0aXZlSW5kZXgsXG4gICAgICAgICAgb25TZWxlY3QgPSBfdGhpczQkcHJvcHMub25TZWxlY3Q7XG4gICAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUluZGV4IHx8IF90aGlzNC5faXNTbGlkaW5nIHx8IF90aGlzNC5pc1VubW91bnRlZCkgcmV0dXJuO1xuICAgICAgb25TZWxlY3QoaW5kZXgsIGRpcmVjdGlvbiB8fCAoaW5kZXggPCBhY3RpdmVJbmRleCA/ICdwcmV2JyA6ICduZXh0JyksIGV2ZW50KTtcbiAgICB9LCA1MCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckNvbnRyb2xzID0gZnVuY3Rpb24gcmVuZGVyQ29udHJvbHMocHJvcGVydGllcykge1xuICAgIHZhciBic1ByZWZpeCA9IHRoaXMucHJvcHMuYnNQcmVmaXg7XG4gICAgdmFyIHdyYXAgPSBwcm9wZXJ0aWVzLndyYXAsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcGVydGllcy5jaGlsZHJlbixcbiAgICAgICAgYWN0aXZlSW5kZXggPSBwcm9wZXJ0aWVzLmFjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2SWNvbiA9IHByb3BlcnRpZXMucHJldkljb24sXG4gICAgICAgIG5leHRJY29uID0gcHJvcGVydGllcy5uZXh0SWNvbixcbiAgICAgICAgcHJldkxhYmVsID0gcHJvcGVydGllcy5wcmV2TGFiZWwsXG4gICAgICAgIG5leHRMYWJlbCA9IHByb3BlcnRpZXMubmV4dExhYmVsO1xuICAgIHZhciBjb3VudCA9IGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4pO1xuICAgIHJldHVybiBbKHdyYXAgfHwgYWN0aXZlSW5kZXggIT09IDApICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2FmZUFuY2hvciwge1xuICAgICAga2V5OiBcInByZXZcIixcbiAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1jb250cm9sLXByZXZcIixcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlUHJldlxuICAgIH0sIHByZXZJY29uLCBwcmV2TGFiZWwgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgIH0sIHByZXZMYWJlbCkpLCAod3JhcCB8fCBhY3RpdmVJbmRleCAhPT0gY291bnQgLSAxKSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFNhZmVBbmNob3IsIHtcbiAgICAgIGtleTogXCJuZXh0XCIsXG4gICAgICBjbGFzc05hbWU6IGJzUHJlZml4ICsgXCItY29udHJvbC1uZXh0XCIsXG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZU5leHRcbiAgICB9LCBuZXh0SWNvbiwgbmV4dExhYmVsICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogXCJzci1vbmx5XCJcbiAgICB9LCBuZXh0TGFiZWwpKV07XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckluZGljYXRvcnMgPSBmdW5jdGlvbiByZW5kZXJJbmRpY2F0b3JzKGNoaWxkcmVuLCBhY3RpdmVJbmRleCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIGJzUHJlZml4ID0gdGhpcy5wcm9wcy5ic1ByZWZpeDtcbiAgICB2YXIgaW5kaWNhdG9ycyA9IFtdO1xuICAgIGZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgIGluZGljYXRvcnMucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICBjbGFzc05hbWU6IGluZGV4ID09PSBhY3RpdmVJbmRleCA/ICdhY3RpdmUnIDogbnVsbCxcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNS50byhpbmRleCwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLCAvLyBGb3JjZSB3aGl0ZXNwYWNlIGJldHdlZW4gaW5kaWNhdG9yIGVsZW1lbnRzLiBCb290c3RyYXAgcmVxdWlyZXNcbiAgICAgIC8vIHRoaXMgZm9yIGNvcnJlY3Qgc3BhY2luZyBvZiBlbGVtZW50cy5cbiAgICAgICcgJyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCB7XG4gICAgICBjbGFzc05hbWU6IGJzUHJlZml4ICsgXCItaW5kaWNhdG9yc1wiXG4gICAgfSwgaW5kaWNhdG9ycyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczQuYnNQcmVmaXgsXG4gICAgICAgIHNsaWRlID0gX3RoaXMkcHJvcHM0LnNsaWRlLFxuICAgICAgICBmYWRlID0gX3RoaXMkcHJvcHM0LmZhZGUsXG4gICAgICAgIGluZGljYXRvcnMgPSBfdGhpcyRwcm9wczQuaW5kaWNhdG9ycyxcbiAgICAgICAgY29udHJvbHMgPSBfdGhpcyRwcm9wczQuY29udHJvbHMsXG4gICAgICAgIHdyYXAgPSBfdGhpcyRwcm9wczQud3JhcCxcbiAgICAgICAgcHJldkljb24gPSBfdGhpcyRwcm9wczQucHJldkljb24sXG4gICAgICAgIHByZXZMYWJlbCA9IF90aGlzJHByb3BzNC5wcmV2TGFiZWwsXG4gICAgICAgIG5leHRJY29uID0gX3RoaXMkcHJvcHM0Lm5leHRJY29uLFxuICAgICAgICBuZXh0TGFiZWwgPSBfdGhpcyRwcm9wczQubmV4dExhYmVsLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczQuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNC5jaGlsZHJlbixcbiAgICAgICAga2V5Ym9hcmQgPSBfdGhpcyRwcm9wczQua2V5Ym9hcmQsXG4gICAgICAgIF81ID0gX3RoaXMkcHJvcHM0LmFjdGl2ZUluZGV4LFxuICAgICAgICBfNCA9IF90aGlzJHByb3BzNC5wYXVzZU9uSG92ZXIsXG4gICAgICAgIF8zID0gX3RoaXMkcHJvcHM0LmludGVydmFsLFxuICAgICAgICBfMiA9IF90aGlzJHByb3BzNC5vblNlbGVjdCxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wczQub25TbGlkZUVuZCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczQsIFtcImJzUHJlZml4XCIsIFwic2xpZGVcIiwgXCJmYWRlXCIsIFwiaW5kaWNhdG9yc1wiLCBcImNvbnRyb2xzXCIsIFwid3JhcFwiLCBcInByZXZJY29uXCIsIFwicHJldkxhYmVsXCIsIFwibmV4dEljb25cIiwgXCJuZXh0TGFiZWxcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImtleWJvYXJkXCIsIFwiYWN0aXZlSW5kZXhcIiwgXCJwYXVzZU9uSG92ZXJcIiwgXCJpbnRlcnZhbFwiLCBcIm9uU2VsZWN0XCIsIFwib25TbGlkZUVuZFwiXSk7XG5cbiAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgYWN0aXZlSW5kZXggPSBfdGhpcyRzdGF0ZTIuYWN0aXZlSW5kZXgsXG4gICAgICAgIHByZXZpb3VzQWN0aXZlSW5kZXggPSBfdGhpcyRzdGF0ZTIucHJldmlvdXNBY3RpdmVJbmRleCxcbiAgICAgICAgcHJldkNsYXNzZXMgPSBfdGhpcyRzdGF0ZTIucHJldkNsYXNzZXMsXG4gICAgICAgIGN1cnJlbnRDbGFzc2VzID0gX3RoaXMkc3RhdGUyLmN1cnJlbnRDbGFzc2VzO1xuICAgIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNsaWRlICYmICdzbGlkZScsIGZhZGUgJiYgYnNQcmVmaXggKyBcIi1mYWRlXCIpLFxuICAgICAgICBvbktleURvd246IGtleWJvYXJkID8gdGhpcy5oYW5kbGVLZXlEb3duIDogdW5kZWZpbmVkLFxuICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5oYW5kbGVNb3VzZU92ZXIsXG4gICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuaGFuZGxlTW91c2VPdXRcbiAgICAgIH0pLCBpbmRpY2F0b3JzICYmIHRoaXMucmVuZGVySW5kaWNhdG9ycyhjaGlsZHJlbiwgYWN0aXZlSW5kZXgpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWlubmVyXCIsXG4gICAgICAgIHJlZjogdGhpcy5jYXJvdXNlbFxuICAgICAgfSwgbWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gaW5kZXggPT09IGFjdGl2ZUluZGV4O1xuICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleCA9PT0gcHJldmlvdXNBY3RpdmVJbmRleDtcbiAgICAgICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGJzUHJlZml4ICsgXCItaXRlbVwiLCBjdXJyZW50ICYmIGN1cnJlbnRDbGFzc2VzLCBwcmV2aW91cyAmJiBwcmV2Q2xhc3NlcylcbiAgICAgICAgfSk7XG4gICAgICB9KSksIGNvbnRyb2xzICYmIHRoaXMucmVuZGVyQ29udHJvbHMoe1xuICAgICAgICB3cmFwOiB3cmFwLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleCxcbiAgICAgICAgcHJldkljb246IHByZXZJY29uLFxuICAgICAgICBwcmV2TGFiZWw6IHByZXZMYWJlbCxcbiAgICAgICAgbmV4dEljb246IG5leHRJY29uLFxuICAgICAgICBuZXh0TGFiZWw6IG5leHRMYWJlbFxuICAgICAgfSkpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNhcm91c2VsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWRDYXJvdXNlbCA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCh1bmNvbnRyb2xsYWJsZShDYXJvdXNlbCwge1xuICBhY3RpdmVJbmRleDogJ29uU2VsZWN0J1xufSksICdjYXJvdXNlbCcpO1xuRGVjb3JhdGVkQ2Fyb3VzZWwuQ2FwdGlvbiA9IENhcm91c2VsQ2FwdGlvbjtcbkRlY29yYXRlZENhcm91c2VsLkl0ZW0gPSBDYXJvdXNlbEl0ZW07XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRDYXJvdXNlbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERFVklDRV9TSVpFUyA9IFsneGwnLCAnbGcnLCAnbWQnLCAnc20nLCAneHMnXTtcblxudmFyIENvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShDb2wsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29sLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIHNwYW5zID0gW107XG4gICAgdmFyIGNsYXNzZXMgPSBbXTtcbiAgICBERVZJQ0VfU0laRVMuZm9yRWFjaChmdW5jdGlvbiAoYnJrUG9pbnQpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1ticmtQb2ludF07XG4gICAgICBkZWxldGUgcHJvcHNbYnJrUG9pbnRdO1xuICAgICAgdmFyIHNwYW4sIG9mZnNldCwgb3JkZXI7XG5cbiAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgX3Byb3BWYWx1ZSRzcGFuID0gcHJvcFZhbHVlLnNwYW47XG4gICAgICAgIHNwYW4gPSBfcHJvcFZhbHVlJHNwYW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcFZhbHVlJHNwYW47XG4gICAgICAgIG9mZnNldCA9IHByb3BWYWx1ZS5vZmZzZXQ7XG4gICAgICAgIG9yZGVyID0gcHJvcFZhbHVlLm9yZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BhbiA9IHByb3BWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZml4ID0gYnJrUG9pbnQgIT09ICd4cycgPyBcIi1cIiArIGJya1BvaW50IDogJyc7XG4gICAgICBpZiAoc3BhbiAhPSBudWxsKSBzcGFucy5wdXNoKHNwYW4gPT09IHRydWUgPyBcIlwiICsgYnNQcmVmaXggKyBpbmZpeCA6IFwiXCIgKyBic1ByZWZpeCArIGluZml4ICsgXCItXCIgKyBzcGFuKTtcbiAgICAgIGlmIChvcmRlciAhPSBudWxsKSBjbGFzc2VzLnB1c2goXCJvcmRlclwiICsgaW5maXggKyBcIi1cIiArIG9yZGVyKTtcbiAgICAgIGlmIChvZmZzZXQgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKFwib2Zmc2V0XCIgKyBpbmZpeCArIFwiLVwiICsgb2Zmc2V0KTtcbiAgICB9KTtcblxuICAgIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgICBzcGFucy5wdXNoKGJzUHJlZml4KTsgLy8gcGxhaW4gJ2NvbCdcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmFwcGx5KHZvaWQgMCwgW2NsYXNzTmFtZV0uY29uY2F0KHNwYW5zLCBjbGFzc2VzKSlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29sLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KENvbCwgJ2NvbCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcblxudmFyIF9jb2xsYXBzZVN0eWxlcztcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgY3NzIGZyb20gJ2RvbS1oZWxwZXJzL3N0eWxlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgb25FbmQgZnJvbSAnZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9lbmQnO1xuaW1wb3J0IFRyYW5zaXRpb24sIHsgRVhJVEVELCBFTlRFUkVELCBFTlRFUklORywgRVhJVElORyB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7XG5pbXBvcnQgdHJpZ2dlckJyb3dzZXJSZWZsb3cgZnJvbSAnLi91dGlscy90cmlnZ2VyQnJvd3NlclJlZmxvdyc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbnZhciBNQVJHSU5TID0ge1xuICBoZWlnaHQ6IFsnbWFyZ2luVG9wJywgJ21hcmdpbkJvdHRvbSddLFxuICB3aWR0aDogWydtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0J11cbn07XG5cbmZ1bmN0aW9uIGdldERpbWVuc2lvblZhbHVlKGRpbWVuc2lvbiwgZWxlbSkge1xuICB2YXIgb2Zmc2V0ID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICB2YXIgdmFsdWUgPSBlbGVtW29mZnNldF07XG4gIHZhciBtYXJnaW5zID0gTUFSR0lOU1tkaW1lbnNpb25dO1xuICByZXR1cm4gdmFsdWUgKyBwYXJzZUludChjc3MoZWxlbSwgbWFyZ2luc1swXSksIDEwKSArIHBhcnNlSW50KGNzcyhlbGVtLCBtYXJnaW5zWzFdKSwgMTApO1xufVxuXG52YXIgY29sbGFwc2VTdHlsZXMgPSAoX2NvbGxhcHNlU3R5bGVzID0ge30sIF9jb2xsYXBzZVN0eWxlc1tFWElURURdID0gJ2NvbGxhcHNlJywgX2NvbGxhcHNlU3R5bGVzW0VYSVRJTkddID0gJ2NvbGxhcHNpbmcnLCBfY29sbGFwc2VTdHlsZXNbRU5URVJJTkddID0gJ2NvbGxhcHNpbmcnLCBfY29sbGFwc2VTdHlsZXNbRU5URVJFRF0gPSAnY29sbGFwc2Ugc2hvdycsIF9jb2xsYXBzZVN0eWxlcyk7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIHRpbWVvdXQ6IDMwMCxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGRpbWVuc2lvbjogJ2hlaWdodCcsXG4gIGdldERpbWVuc2lvblZhbHVlOiBnZXREaW1lbnNpb25WYWx1ZVxufTtcblxudmFyIENvbGxhcHNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbGxhcHNlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb2xsYXBzZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIGVsZW0uc3R5bGVbX3RoaXMuZ2V0RGltZW5zaW9uKCldID0gJzAnO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlcmluZyA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICB2YXIgZGltZW5zaW9uID0gX3RoaXMuZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIGVsZW0uc3R5bGVbZGltZW5zaW9uXSA9IF90aGlzLl9nZXRTY3JvbGxEaW1lbnNpb25WYWx1ZShlbGVtLCBkaW1lbnNpb24pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlcmVkID0gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIGVsZW0uc3R5bGVbX3RoaXMuZ2V0RGltZW5zaW9uKCldID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICB2YXIgZGltZW5zaW9uID0gX3RoaXMuZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIGVsZW0uc3R5bGVbZGltZW5zaW9uXSA9IF90aGlzLnByb3BzLmdldERpbWVuc2lvblZhbHVlKGRpbWVuc2lvbiwgZWxlbSkgKyBcInB4XCI7XG4gICAgICB0cmlnZ2VyQnJvd3NlclJlZmxvdyhlbGVtKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGluZyA9IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBlbGVtLnN0eWxlW190aGlzLmdldERpbWVuc2lvbigpXSA9ICcwJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbGxhcHNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gZ2V0RGltZW5zaW9uKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wcm9wcy5kaW1lbnNpb24gPT09ICdmdW5jdGlvbicgPyB0aGlzLnByb3BzLmRpbWVuc2lvbigpIDogdGhpcy5wcm9wcy5kaW1lbnNpb247XG4gIH1cbiAgLyogLS0gRXhwYW5kaW5nIC0tICovXG4gIDtcblxuICAvLyBmb3IgdGVzdGluZ1xuICBfcHJvdG8uX2dldFNjcm9sbERpbWVuc2lvblZhbHVlID0gZnVuY3Rpb24gX2dldFNjcm9sbERpbWVuc2lvblZhbHVlKGVsZW0sIGRpbWVuc2lvbikge1xuICAgIHZhciBzY3JvbGwgPSBcInNjcm9sbFwiICsgZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgcmV0dXJuIGVsZW1bc2Nyb2xsXSArIFwicHhcIjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJpbmcgPSBfdGhpcyRwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBfdGhpcyRwcm9wcy5vbkVudGVyZWQsXG4gICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgb25FeGl0aW5nID0gX3RoaXMkcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRpbWVuc2lvbjtcbiAgICBkZWxldGUgcHJvcHMuZ2V0RGltZW5zaW9uVmFsdWU7XG4gICAgdmFyIGhhbmRsZUVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRW50ZXIsIG9uRW50ZXIpO1xuICAgIHZhciBoYW5kbGVFbnRlcmluZyA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyaW5nLCBvbkVudGVyaW5nKTtcbiAgICB2YXIgaGFuZGxlRW50ZXJlZCA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbih0aGlzLmhhbmRsZUVudGVyZWQsIG9uRW50ZXJlZCk7XG4gICAgdmFyIGhhbmRsZUV4aXQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24odGhpcy5oYW5kbGVFeGl0LCBvbkV4aXQpO1xuICAgIHZhciBoYW5kbGVFeGl0aW5nID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHRoaXMuaGFuZGxlRXhpdGluZywgb25FeGl0aW5nKTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBhZGRFbmRMaXN0ZW5lcjogb25FbmRcbiAgICB9LCBwcm9wcywge1xuICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IHByb3BzLnJvbGUgPyBwcm9wcy5pbiA6IG51bGwsXG4gICAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nXG4gICAgfSksIGZ1bmN0aW9uIChzdGF0ZSwgaW5uZXJQcm9wcykge1xuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGlubmVyUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2hpbGRyZW4ucHJvcHMuY2xhc3NOYW1lLCBjb2xsYXBzZVN0eWxlc1tzdGF0ZV0sIF90aGlzMi5nZXREaW1lbnNpb24oKSA9PT0gJ3dpZHRoJyAmJiAnd2lkdGgnKVxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBDb2xsYXBzZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQ29sbGFwc2UuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJhc2VEcm9wZG93bk1lbnUgZnJvbSAncmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25NZW51JztcbmltcG9ydCBOYXZiYXJDb250ZXh0IGZyb20gJy4vTmF2YmFyQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgd3JhcFJlZiA9IGZ1bmN0aW9uIHdyYXBSZWYocHJvcHMpIHtcbiAgdmFyIHJlZiA9IHByb3BzLnJlZjtcblxuICBwcm9wcy5yZWYgPSByZWYuX193cmFwcGVkIHx8IChyZWYuX193cmFwcGVkID0gZnVuY3Rpb24gKHIpIHtcbiAgICByZXR1cm4gcmVmKGZpbmRET01Ob2RlKHIpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb3BzO1xufTtcblxudmFyIERyb3Bkb3duTWVudSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93bk1lbnUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duTWVudSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25NZW51LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYWxpZ25SaWdodCA9IF90aGlzJHByb3BzLmFsaWduUmlnaHQsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIGZsaXAgPSBfdGhpcyRwcm9wcy5mbGlwLFxuICAgICAgICBwb3BwZXJDb25maWcgPSBfdGhpcyRwcm9wcy5wb3BwZXJDb25maWcsXG4gICAgICAgIHNob3dQcm9wcyA9IF90aGlzJHByb3BzLnNob3csXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFsaWduUmlnaHRcIiwgXCJyb290Q2xvc2VFdmVudFwiLCBcImZsaXBcIiwgXCJwb3BwZXJDb25maWdcIiwgXCJzaG93XCIsIFwiYXNcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGlzTmF2YmFyKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlRHJvcGRvd25NZW51LCB7XG4gICAgICAgIGZsaXA6IGZsaXAsXG4gICAgICAgIHNob3c6IHNob3dQcm9wcyxcbiAgICAgICAgYWxpZ25FbmQ6IGFsaWduUmlnaHQsXG4gICAgICAgIHVzZVBvcHBlcjogIWlzTmF2YmFyLFxuICAgICAgICBwb3BwZXJDb25maWc6IHBvcHBlckNvbmZpZyxcbiAgICAgICAgcm9vdENsb3NlRXZlbnQ6IHJvb3RDbG9zZUV2ZW50XG4gICAgICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICAgICAgICBzaG93ID0gX3JlZi5zaG93LFxuICAgICAgICAgICAgYWxpZ25FbmQgPSBfcmVmLmFsaWduRW5kLFxuICAgICAgICAgICAgY2xvc2UgPSBfcmVmLmNsb3NlLFxuICAgICAgICAgICAgbWVudVByb3BzID0gX3JlZi5wcm9wcztcbiAgICAgICAgd3JhcFJlZihtZW51UHJvcHMpOyAvLyBGb3IgY3VzdG9tIGNvbXBvbmVudHMgcHJvdmlkZSBhZGRpdGlvbmFsLCBub24tRE9NLCBwcm9wcztcblxuICAgICAgICBpZiAodHlwZW9mIENvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBtZW51UHJvcHMuc2hvdyA9IHNob3c7XG4gICAgICAgICAgbWVudVByb3BzLmNsb3NlID0gY2xvc2U7XG4gICAgICAgICAgbWVudVByb3BzLmFsaWduUmlnaHQgPSBhbGlnbkVuZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG4gICAgICAgIGlmIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRoZSBkZWZhdWx0IHBvcHBlciBzdHlsZSxcbiAgICAgICAgICAvLyBtZW51cyBhcmUgZGlzcGxheTogbm9uZSB3aGVuIG5vdCBzaG93bi5cbiAgICAgICAgICBzdHlsZSA9IF9leHRlbmRzKHt9LCBzdHlsZSwgbWVudVByb3BzLnN0eWxlKTtcbiAgICAgICAgICBwcm9wc1sneC1wbGFjZW1lbnQnXSA9IHBsYWNlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCBtZW51UHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNob3cgJiYgJ3Nob3cnLCBhbGlnbkVuZCAmJiBic1ByZWZpeCArIFwiLXJpZ2h0XCIpXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bk1lbnU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsaWduUmlnaHQ6IGZhbHNlLFxuICBhczogJ2RpdicsXG4gIGZsaXA6IHRydWVcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRHJvcGRvd25NZW51LCAnZHJvcGRvd24tbWVudScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCBCYXNlRHJvcGRvd25Ub2dnbGUgZnJvbSAncmVhY3Qtb3ZlcmxheXMvRHJvcGRvd25Ub2dnbGUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIHdyYXBSZWYgPSBmdW5jdGlvbiB3cmFwUmVmKHByb3BzKSB7XG4gIHZhciByZWYgPSBwcm9wcy5yZWY7XG5cbiAgcHJvcHMucmVmID0gcmVmLl9fd3JhcHBlZCB8fCAocmVmLl9fd3JhcHBlZCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIHJlZihmaW5kRE9NTm9kZShyKSk7XG4gIH0pO1xuXG4gIHJldHVybiBwcm9wcztcbn07XG5cbnZhciBEcm9wZG93blRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93blRvZ2dsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25Ub2dnbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duVG9nZ2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHNwbGl0ID0gX3RoaXMkcHJvcHMuc3BsaXQsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRCc1ByZWZpeCA9IF90aGlzJHByb3BzLmNoaWxkQnNQcmVmaXgsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcInNwbGl0XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjaGlsZEJzUHJlZml4XCIsIFwiYXNcIl0pOyAvLyBUaGlzIGludGVudGlvbmFsbHkgZm9yd2FyZHMgc2l6ZSBhbmQgdmFyaWFudCAoaWYgc2V0KSB0byB0aGVcbiAgICAvLyB1bmRlcmx5aW5nIGNvbXBvbmVudCwgdG8gYWxsb3cgaXQgdG8gcmVuZGVyIHNpemUgYW5kIHN0eWxlIHZhcmlhbnRzLlxuXG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCYXNlRHJvcGRvd25Ub2dnbGUsIG51bGwsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdG9nZ2xlID0gX3JlZi50b2dnbGUsXG4gICAgICAgICAgdG9nZ2xlUHJvcHMgPSBfcmVmLnByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIG9uQ2xpY2s6IHRvZ2dsZSxcbiAgICAgICAgYnNQcmVmaXg6IGNoaWxkQnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzcGxpdCAmJiBic1ByZWZpeCArIFwiLXNwbGl0XCIpXG4gICAgICB9LCB3cmFwUmVmKHRvZ2dsZVByb3BzKSwgcHJvcHMpLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93blRvZ2dsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBCdXR0b25cbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRHJvcGRvd25Ub2dnbGUsICdkcm9wZG93bi10b2dnbGUnKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFNlbGVjdGFibGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZXhwb3J0IHZhciBtYWtlRXZlbnRLZXkgPSBmdW5jdGlvbiBtYWtlRXZlbnRLZXkoZXZlbnRLZXksIGhyZWYpIHtcbiAgaWYgKGV2ZW50S2V5ICE9IG51bGwpIHJldHVybiBTdHJpbmcoZXZlbnRLZXkpO1xuICByZXR1cm4gaHJlZiB8fCBudWxsO1xufTtcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdGFibGVDb250ZXh0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgTmF2Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBOYXZDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtYXBDb250ZXh0VG9Qcm9wcyBmcm9tICdyZWFjdC1jb250ZXh0LXRvb2xib3gvbWFwQ29udGV4dFRvUHJvcHMnO1xuaW1wb3J0IGNoYWluIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCBTYWZlQW5jaG9yIGZyb20gJy4vU2FmZUFuY2hvcic7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQsIHsgbWFrZUV2ZW50S2V5IH0gZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdkNvbnRleHQgZnJvbSAnLi9OYXZDb250ZXh0JztcblxudmFyIERyb3Bkb3duSXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93bkl0ZW0sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duSXRlbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2ssXG4gICAgICAgICAgZXZlbnRLZXkgPSBfdGhpcyRwcm9wcy5ldmVudEtleSxcbiAgICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZjtcbiAgICAgIHZhciBrZXkgPSBtYWtlRXZlbnRLZXkoZXZlbnRLZXksIGhyZWYpOyAvLyBTYWZlQW5jaG9yIGhhbmRsZXMgdGhlIGRpc2FibGVkIGNhc2UsIGJ1dCBiZSBoYW5kbGUgaXQgaGVyZVxuICAgICAgLy8gZm9yIG90aGVyIGNvbXBvbmVudHNcblxuICAgICAgaWYgKGRpc2FibGVkKSByZXR1cm47XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0KGtleSwgZXZlbnQpO1xuICAgICAgaWYgKGtleSAhPT0gbnVsbCAmJiBfdGhpcy5jb250ZXh0U2VsZWN0KSBfdGhpcy5jb250ZXh0U2VsZWN0KGtleSwgZXZlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25JdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzMi5ic1ByZWZpeCxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMyLmFjdGl2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wczIuZXZlbnRLZXksXG4gICAgICAgIF8xID0gX3RoaXMkcHJvcHMyLm9uU2VsZWN0LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wczIuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJic1ByZWZpeFwiLCBcImFjdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiZXZlbnRLZXlcIiwgXCJvblNlbGVjdFwiLCBcImFzXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBwcm9wcy5kaXNhYmxlZCAmJiAnZGlzYWJsZWQnKSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bkl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkRyb3Bkb3duSXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBTYWZlQW5jaG9yLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBtYXBDb250ZXh0VG9Qcm9wcyhbU2VsZWN0YWJsZUNvbnRleHQsIE5hdkNvbnRleHRdLCBmdW5jdGlvbiAob25TZWxlY3QsIG5hdkNvbnRleHQsIHByb3BzKSB7XG4gIHZhciBfcmVmID0gbmF2Q29udGV4dCB8fCB7fSxcbiAgICAgIGFjdGl2ZUtleSA9IF9yZWYuYWN0aXZlS2V5O1xuXG4gIHZhciBrZXkgPSBtYWtlRXZlbnRLZXkocHJvcHMuZXZlbnRLZXksIHByb3BzLmhyZWYpO1xuICByZXR1cm4ge1xuICAgIG9uU2VsZWN0OiBjaGFpbihwcm9wcy5vblNlbGVjdCwgb25TZWxlY3QpLFxuICAgIGFjdGl2ZTogcHJvcHMuYWN0aXZlID09IG51bGwgJiYga2V5ICE9IG51bGwgPyBtYWtlRXZlbnRLZXkoYWN0aXZlS2V5KSA9PT0ga2V5IDogcHJvcHMuYWN0aXZlXG4gIH07XG59LCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRHJvcGRvd25JdGVtLCAnZHJvcGRvd24taXRlbScpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbWFwQ29udGV4dFRvUHJvcHMgZnJvbSAncmVhY3QtY29udGV4dC10b29sYm94L21hcENvbnRleHRUb1Byb3BzJztcbmltcG9ydCBCYXNlRHJvcGRvd24gZnJvbSAncmVhY3Qtb3ZlcmxheXMvRHJvcGRvd24nO1xuaW1wb3J0IGNoYWluIGZyb20gJy4vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRHJvcGRvd25NZW51IGZyb20gJy4vRHJvcGRvd25NZW51JztcbmltcG9ydCBEcm9wZG93blRvZ2dsZSBmcm9tICcuL0Ryb3Bkb3duVG9nZ2xlJztcbmltcG9ydCBEcm9wZG93bkl0ZW0gZnJvbSAnLi9Ecm9wZG93bkl0ZW0nO1xuaW1wb3J0IFNlbGVjdGFibGVDb250ZXh0IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2RpdicsXG4gIG5hdmJhcjogZmFsc2Vcbn07XG5cbnZhciBEcm9wZG93biA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd24oKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3QgPSBmdW5jdGlvbiAoa2V5LCBldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uU2VsZWN0KSBfdGhpcy5wcm9wcy5vblNlbGVjdChrZXksIGV2ZW50KTtcblxuICAgICAgX3RoaXMuaGFuZGxlVG9nZ2xlKGZhbHNlLCBldmVudCwgJ3NlbGVjdCcpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiAoc2hvdywgZXZlbnQsIHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHNvdXJjZSA9IGV2ZW50LnR5cGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0ID09PSBkb2N1bWVudCkgc291cmNlID0gJ3Jvb3RDbG9zZSc7XG5cbiAgICAgIF90aGlzLnByb3BzLm9uVG9nZ2xlKHNob3csIGV2ZW50LCB7XG4gICAgICAgIHNvdXJjZTogc291cmNlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGRyb3AgPSBfdGhpcyRwcm9wcy5kcm9wLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHMuc2hvdyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgYWxpZ25SaWdodCA9IF90aGlzJHByb3BzLmFsaWduUmlnaHQsXG4gICAgICAgIF8xID0gX3RoaXMkcHJvcHMub25TZWxlY3QsXG4gICAgICAgIF8zID0gX3RoaXMkcHJvcHMub25Ub2dnbGUsXG4gICAgICAgIF80ID0gX3RoaXMkcHJvcHMubmF2YmFyLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImRyb3BcIiwgXCJzaG93XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIiwgXCJhbGlnblJpZ2h0XCIsIFwib25TZWxlY3RcIiwgXCJvblRvZ2dsZVwiLCBcIm5hdmJhclwiXSk7XG5cbiAgICBkZWxldGUgcHJvcHMub25Ub2dnbGU7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLmhhbmRsZVNlbGVjdFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQmFzZURyb3Bkb3duLkNvbnRyb2xsZWRDb21wb25lbnQsIHtcbiAgICAgIGRyb3A6IGRyb3AsXG4gICAgICBzaG93OiBzaG93LFxuICAgICAgYWxpZ25FbmQ6IGFsaWduUmlnaHQsXG4gICAgICBvblRvZ2dsZTogdGhpcy5oYW5kbGVUb2dnbGUsXG4gICAgICBpdGVtU2VsZWN0b3I6IFwiLlwiICsgYnNQcmVmaXggKyBcIi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCJcbiAgICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGRyb3Bkb3duUHJvcHMgPSBfcmVmLnByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIGRyb3Bkb3duUHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgc2hvdyAmJiAnc2hvdycsICghZHJvcCB8fCBkcm9wID09PSAnZG93bicpICYmIGJzUHJlZml4LCBkcm9wID09PSAndXAnICYmICdkcm9wdXAnLCBkcm9wID09PSAncmlnaHQnICYmICdkcm9wcmlnaHQnLCBkcm9wID09PSAnbGVmdCcgJiYgJ2Ryb3BsZWZ0JylcbiAgICAgIH0pKTtcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bi5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgVW5jb250cm9sbGVkRHJvcGRvd24gPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoQmFzZURyb3Bkb3duLmRlZmVyQ29udHJvbFRvKERyb3Bkb3duKSwgJ2Ryb3Bkb3duJyk7XG52YXIgRGVjb3JhdGVkRHJvcGRvd24gPSBtYXBDb250ZXh0VG9Qcm9wcyhTZWxlY3RhYmxlQ29udGV4dCwgZnVuY3Rpb24gKG9uU2VsZWN0LCBwcm9wcykge1xuICByZXR1cm4ge1xuICAgIG9uU2VsZWN0OiBjaGFpbihwcm9wcy5vblNlbGVjdCwgb25TZWxlY3QpXG4gIH07XG59LCBVbmNvbnRyb2xsZWREcm9wZG93bik7XG5EZWNvcmF0ZWREcm9wZG93bi5Ub2dnbGUgPSBEcm9wZG93blRvZ2dsZTtcbkRlY29yYXRlZERyb3Bkb3duLk1lbnUgPSBEcm9wZG93bk1lbnU7XG5EZWNvcmF0ZWREcm9wZG93bi5JdGVtID0gRHJvcGRvd25JdGVtO1xuRGVjb3JhdGVkRHJvcGRvd24uSGVhZGVyID0gY3JlYXRlV2l0aEJzUHJlZml4KCdkcm9wZG93bi1oZWFkZXInLCB7XG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHJvbGU6ICdoZWFkaW5nJ1xuICB9XG59KTtcbkRlY29yYXRlZERyb3Bkb3duLkRpdmlkZXIgPSBjcmVhdGVXaXRoQnNQcmVmaXgoJ2Ryb3Bkb3duLWRpdmlkZXInLCB7XG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHJvbGU6ICdzZXBhcmF0b3InXG4gIH1cbn0pO1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkRHJvcGRvd247IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9Ecm9wZG93bic7XG5cbi8qKlxuICogQSBjb252ZW5pZW5jZSBjb21wb25lbnQgZm9yIHNpbXBsZSBvciBnZW5lcmFsIHVzZSBkcm9wZG93bnMuIFJlbmRlcnMgYSBgQnV0dG9uYCB0b2dnbGUgYW5kIGFsbCBgY2hpbGRyZW5gXG4gKiBhcmUgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBkZWZhdWx0IGBEcm9wZG93bi5NZW51YC5cbiAqXG4gKiBfQWxsIHVua25vd24gcHJvcHMgYXJlIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBgRHJvcGRvd25gIGNvbXBvbmVudC5fIE9ubHlcbiAqIHRoZSBCdXR0b24gYHZhcmlhbnRgLCBgc2l6ZWAgYW5kIGBic1ByZWZpeGAgcHJvcHMgYXJlIHBhc3NlZCB0byB0aGUgdG9nZ2xlLFxuICogYWxvbmcgd2l0aCBtZW51IHJlbGF0ZWQgcHJvcHMgYXJlIHBhc3NlZCB0byB0aGUgYERyb3Bkb3duLk1lbnVgXG4gKi9cbnZhciBEcm9wZG93bkJ1dHRvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93bkJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25CdXR0b24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyb3Bkb3duQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgbWVudVJvbGUgPSBfdGhpcyRwcm9wcy5tZW51Um9sZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgaHJlZiA9IF90aGlzJHByb3BzLmhyZWYsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcInRpdGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJic1ByZWZpeFwiLCBcInJvb3RDbG9zZUV2ZW50XCIsIFwidmFyaWFudFwiLCBcInNpemVcIiwgXCJtZW51Um9sZVwiLCBcImRpc2FibGVkXCIsIFwiaHJlZlwiLCBcImlkXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLCBwcm9wcywgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5Ub2dnbGUsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNoaWxkQnNQcmVmaXg6IGJzUHJlZml4XG4gICAgfSwgdGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLk1lbnUsIHtcbiAgICAgIHJvbGU6IG1lbnVSb2xlLFxuICAgICAgcm9vdENsb3NlRXZlbnQ6IHJvb3RDbG9zZUV2ZW50XG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd25CdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duQnV0dG9uOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHJhbnNmb3JtQ29udGV4dCBmcm9tICdyZWFjdC1jb250ZXh0LXRvb2xib3gvdHJhbnNmb3JtQ29udGV4dCc7XG52YXIgRm9ybUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgY29udHJvbElkOiB1bmRlZmluZWRcbn0pO1xuRm9ybUNvbnRleHQuVHJhbnNmb3JtID0gdHJhbnNmb3JtQ29udGV4dChGb3JtQ29udGV4dCk7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcblxuZnVuY3Rpb24gRm9ybUdyb3VwKF9yZWYpIHtcbiAgdmFyIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgY29udHJvbElkID0gX3JlZi5jb250cm9sSWQsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImlubmVyUmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250cm9sSWRcIiwgXCJhc1wiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgY29udHJvbElkOiBjb250cm9sSWRcbiAgICB9XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICB9KSwgY2hpbGRyZW4pKTtcbn1cblxuRm9ybUdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtR3JvdXAsICdmb3JtLWdyb3VwJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgRmVlZGJhY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmVlZGJhY2ssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZlZWRiYWNrKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGZWVkYmFjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJ0eXBlXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB0eXBlICYmIHR5cGUgKyBcIi1mZWVkYmFja1wiKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRmVlZGJhY2s7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkZlZWRiYWNrLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3ZhbGlkJyxcbiAgYXM6ICdkaXYnXG59O1xuZXhwb3J0IGRlZmF1bHQgRmVlZGJhY2s7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgbWFwQ29udGV4dFRvUHJvcHMgZnJvbSAncmVhY3QtY29udGV4dC10b29sYm94L21hcENvbnRleHRUb1Byb3BzJztcbmltcG9ydCBGZWVkYmFjayBmcm9tICcuL0ZlZWRiYWNrJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2lucHV0J1xufTtcblxudmFyIEZvcm1Db250cm9sID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEZvcm1Db250cm9sLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ29udHJvbCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzLmlucHV0UmVmLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGlzVmFsaWQgPSBfdGhpcyRwcm9wcy5pc1ZhbGlkLFxuICAgICAgICBpc0ludmFsaWQgPSBfdGhpcyRwcm9wcy5pc0ludmFsaWQsXG4gICAgICAgIHBsYWludGV4dCA9IF90aGlzJHByb3BzLnBsYWludGV4dCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wcy5yZWFkT25seSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwidHlwZVwiLCBcInNpemVcIiwgXCJpZFwiLCBcImlucHV0UmVmXCIsIFwiY2xhc3NOYW1lXCIsIFwiaXNWYWxpZFwiLCBcImlzSW52YWxpZFwiLCBcInBsYWludGV4dFwiLCBcInJlYWRPbmx5XCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIGNsYXNzZXM7XG5cbiAgICBpZiAocGxhaW50ZXh0KSB7XG4gICAgICB2YXIgX2NsYXNzZXM7XG5cbiAgICAgIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7fSwgX2NsYXNzZXNbYnNQcmVmaXggKyBcIi1wbGFpbnRleHRcIl0gPSB0cnVlLCBfY2xhc3Nlcyk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHZhciBfY2xhc3NlczI7XG5cbiAgICAgIGNsYXNzZXMgPSAoX2NsYXNzZXMyID0ge30sIF9jbGFzc2VzMltic1ByZWZpeCArIFwiLWZpbGVcIl0gPSB0cnVlLCBfY2xhc3NlczIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2NsYXNzZXMzO1xuXG4gICAgICBjbGFzc2VzID0gKF9jbGFzc2VzMyA9IHt9LCBfY2xhc3NlczNbYnNQcmVmaXhdID0gdHJ1ZSwgX2NsYXNzZXMzW2JzUHJlZml4ICsgXCItXCIgKyBzaXplXSA9IHNpemUsIF9jbGFzc2VzMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBpZDogaWQsXG4gICAgICByZWY6IGlucHV0UmVmLFxuICAgICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcywgaXNWYWxpZCAmJiBcImlzLXZhbGlkXCIsIGlzSW52YWxpZCAmJiBcImlzLWludmFsaWRcIilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBtYXBDb250ZXh0ID0gZnVuY3Rpb24gbWFwQ29udGV4dChfcmVmLCBfcmVmMikge1xuICB2YXIgY29udHJvbElkID0gX3JlZi5jb250cm9sSWQ7XG4gIHZhciBpZCA9IF9yZWYyLmlkO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNvbnRyb2xJZCA9PSBudWxsIHx8ICFpZCwgJ2Bjb250cm9sSWRgIGlzIGlnbm9yZWQgb24gYDxGb3JtQ29udHJvbD5gIHdoZW4gYGlkYCBpcyBzcGVjaWZpZWQuJykgOiB2b2lkIDA7XG4gIHJldHVybiB7XG4gICAgaWQ6IGlkIHx8IGNvbnRyb2xJZFxuICB9O1xufTtcblxudmFyIERlY29yYXRlZEZvcm1Db250cm9sID0gbWFwQ29udGV4dFRvUHJvcHMoRm9ybUNvbnRleHQsIG1hcENvbnRleHQsIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGb3JtQ29udHJvbCwge1xuICBwcmVmaXg6ICdmb3JtLWNvbnRyb2wnLFxuICBmb3J3YXJkUmVmQXM6ICdpbnB1dFJlZidcbn0pKTtcbkRlY29yYXRlZEZvcm1Db250cm9sLkZlZWRiYWNrID0gRmVlZGJhY2s7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRGb3JtQ29udHJvbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdjaGVja2JveCdcbn07XG5cbmZ1bmN0aW9uIEZvcm1DaGVja0lucHV0KF9yZWYpIHtcbiAgdmFyIGlkID0gX3JlZi5pZCxcbiAgICAgIGJzUHJlZml4ID0gX3JlZi5ic1ByZWZpeCxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaXNWYWxpZCA9IF9yZWYuaXNWYWxpZCxcbiAgICAgIGlzSW52YWxpZCA9IF9yZWYuaXNJbnZhbGlkLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgaXNTdGF0aWMgPSBfcmVmLmlzU3RhdGljLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpZFwiLCBcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiaXNWYWxpZFwiLCBcImlzSW52YWxpZFwiLCBcImlubmVyUmVmXCIsIFwiaXNTdGF0aWNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgY29udHJvbElkID0gX3JlZjIuY29udHJvbElkLFxuICAgICAgICBjdXN0b20gPSBfcmVmMi5jdXN0b207XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJlZjogaW5uZXJSZWYsXG4gICAgICBpZDogaWQgfHwgY29udHJvbElkLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgIWN1c3RvbSAmJiBic1ByZWZpeCwgY3VzdG9tICYmICdjdXN0b20tY29udHJvbC1pbnB1dCcsIGlzVmFsaWQgJiYgJ2lzLXZhbGlkJywgaXNJbnZhbGlkICYmICdpcy1pbnZhbGlkJywgaXNTdGF0aWMgJiYgJ3Bvc2l0aW9uLXN0YXRpYycpXG4gICAgfSkpO1xuICB9KTtcbn1cblxuRm9ybUNoZWNrSW5wdXQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZvcm1DaGVja0lucHV0LCAnZm9ybS1jaGVjay1pbnB1dCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ2NoZWNrYm94J1xufTtcblxuZnVuY3Rpb24gRm9ybUNoZWNrTGFiZWwoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBodG1sRm9yID0gX3JlZi5odG1sRm9yLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImlubmVyUmVmXCIsIFwiaHRtbEZvclwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBjb250cm9sSWQgPSBfcmVmMi5jb250cm9sSWQsXG4gICAgICAgIGN1c3RvbSA9IF9yZWYyLmN1c3RvbTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiBpbm5lclJlZixcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IgfHwgY29udHJvbElkLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgIWN1c3RvbSAmJiBic1ByZWZpeCwgY3VzdG9tICYmICdjdXN0b20tY29udHJvbC1sYWJlbCcpXG4gICAgfSkpO1xuICB9KTtcbn1cblxuRm9ybUNoZWNrTGFiZWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZvcm1DaGVja0xhYmVsLCAnZm9ybS1jaGVjay1sYWJlbCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgRmVlZGJhY2sgZnJvbSAnLi9GZWVkYmFjayc7XG5pbXBvcnQgRm9ybUNoZWNrSW5wdXQgZnJvbSAnLi9Gb3JtQ2hlY2tJbnB1dCc7XG5pbXBvcnQgRm9ybUNoZWNrTGFiZWwgZnJvbSAnLi9Gb3JtQ2hlY2tMYWJlbCc7XG5cbnZhciBGb3JtQ2hlY2sgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRm9ybUNoZWNrLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb3JtQ2hlY2soKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvcm1DaGVjay5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBpbmxpbmUgPSBfdGhpcyRwcm9wcy5pbmxpbmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGlzVmFsaWQgPSBfdGhpcyRwcm9wcy5pc1ZhbGlkLFxuICAgICAgICBpc0ludmFsaWQgPSBfdGhpcyRwcm9wcy5pc0ludmFsaWQsXG4gICAgICAgIGZlZWRiYWNrID0gX3RoaXMkcHJvcHMuZmVlZGJhY2ssXG4gICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wcy50aXRsZSxcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzLnR5cGUsXG4gICAgICAgIGxhYmVsID0gX3RoaXMkcHJvcHMubGFiZWwsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGN1c3RvbSA9IF90aGlzJHByb3BzLmN1c3RvbSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaWRcIiwgXCJic1ByZWZpeFwiLCBcImlubGluZVwiLCBcImRpc2FibGVkXCIsIFwiaXNWYWxpZFwiLCBcImlzSW52YWxpZFwiLCBcImZlZWRiYWNrXCIsIFwiaW5wdXRSZWZcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwidHlwZVwiLCBcImxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjdXN0b21cIl0pO1xuXG4gICAgdmFyIGhhc0xhYmVsID0gbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gZmFsc2UgJiYgIWNoaWxkcmVuO1xuICAgIHZhciBpbnB1dCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNoZWNrSW5wdXQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHJlZjogaW5wdXRSZWYsXG4gICAgICBpc1ZhbGlkOiBpc1ZhbGlkLFxuICAgICAgaXNJbnZhbGlkOiBpc0ludmFsaWQsXG4gICAgICBpc1N0YXRpYzogIWhhc0xhYmVsLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSkpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Db250ZXh0LlRyYW5zZm9ybSwge1xuICAgICAgbWFwVG9WYWx1ZTogZnVuY3Rpb24gbWFwVG9WYWx1ZShfcmVmKSB7XG4gICAgICAgIHZhciBjb250cm9sSWQgPSBfcmVmLmNvbnRyb2xJZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250cm9sSWQ6IGlkIHx8IGNvbnRyb2xJZCxcbiAgICAgICAgICBjdXN0b206IGN1c3RvbVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgIWN1c3RvbSAmJiBic1ByZWZpeCwgY3VzdG9tICYmIFwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLVwiICsgdHlwZSwgaW5saW5lICYmIChjdXN0b20gPyAnY3VzdG9tLWNvbnRyb2wnIDogYnNQcmVmaXgpICsgXCItaW5saW5lXCIpXG4gICAgfSwgY2hpbGRyZW4gfHwgUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgaW5wdXQsIGhhc0xhYmVsICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNoZWNrTGFiZWwsIHtcbiAgICAgIHRpdGxlOiB0aXRsZVxuICAgIH0sIGxhYmVsKSwgKGlzVmFsaWQgfHwgaXNJbnZhbGlkKSAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KEZlZWRiYWNrLCB7XG4gICAgICB0eXBlOiBpc1ZhbGlkID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJ1xuICAgIH0sIGZlZWRiYWNrKSkpKTtcbiAgfTtcblxuICByZXR1cm4gRm9ybUNoZWNrO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Gb3JtQ2hlY2suZGVmYXVsdFByb3BzID0ge1xuICB0eXBlOiAnY2hlY2tib3gnLFxuICBpbmxpbmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGlzVmFsaWQ6IGZhbHNlLFxuICBpc0ludmFsaWQ6IGZhbHNlLFxuICB0aXRsZTogJydcbn07XG52YXIgRGVjb3JhdGVkRm9ybUNoZWNrID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZvcm1DaGVjaywge1xuICBmb3J3YXJkUmVmQXM6ICdpbnB1dFJlZicsXG4gIHByZWZpeDogJ2Zvcm0tY2hlY2snXG59KTtcbkRlY29yYXRlZEZvcm1DaGVjay5JbnB1dCA9IEZvcm1DaGVja0lucHV0O1xuRGVjb3JhdGVkRm9ybUNoZWNrLkxhYmVsID0gRm9ybUNoZWNrTGFiZWw7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRGb3JtQ2hlY2s7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgQ29sIGZyb20gJy4vQ29sJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb2x1bW46IGZhbHNlLFxuICBzck9ubHk6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBGb3JtTGFiZWwoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY29sdW1uID0gX3JlZi5jb2x1bW4sXG4gICAgICBzck9ubHkgPSBfcmVmLnNyT25seSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNvbHVtblwiLCBcInNyT25seVwiLCBcImNsYXNzTmFtZVwiLCBcImlubmVyUmVmXCJdKTtcblxuICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgc3JPbmx5ICYmICdzci1vbmx5JywgY29sdW1uICYmICdjb2wtZm9ybS1sYWJlbCcpO1xuICBpZiAoY29sdW1uKSByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb2wsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBhczogXCJsYWJlbFwiXG4gIH0pKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2xhYmVsLWhhcy1mb3IsIGpzeC1hMTF5L2xhYmVsLWhhcy1hc3NvY2lhdGVkLWNvbnRyb2xcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHJlZjogaW5uZXJSZWYsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cblxuRm9ybUxhYmVsLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIG1hcENvbnRleHQgPSBmdW5jdGlvbiBtYXBDb250ZXh0KF9yZWYyLCBfcmVmMykge1xuICB2YXIgY29udHJvbElkID0gX3JlZjIuY29udHJvbElkO1xuICB2YXIgaHRtbEZvciA9IF9yZWYzLmh0bWxGb3I7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29udHJvbElkID09IG51bGwgfHwgIWh0bWxGb3IsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUxhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGh0bWxGb3I6IGh0bWxGb3IgfHwgY29udHJvbElkXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXBDb250ZXh0VG9Qcm9wcyhGb3JtQ29udGV4dCwgbWFwQ29udGV4dCwgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZvcm1MYWJlbCwgJ2Zvcm0tbGFiZWwnKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ3NtYWxsJ1xufTtcblxuZnVuY3Rpb24gRm9ybVRleHQoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImlubmVyUmVmXCIsIFwiYXNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgfSkpO1xufVxuXG5Gb3JtVGV4dC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoRm9ybVRleHQsICdmb3JtLXRleHQnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZvcm1Hcm91cCBmcm9tICcuL0Zvcm1Hcm91cCc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUNoZWNrIGZyb20gJy4vRm9ybUNoZWNrJztcbmltcG9ydCBGb3JtTGFiZWwgZnJvbSAnLi9Gb3JtTGFiZWwnO1xuaW1wb3J0IEZvcm1UZXh0IGZyb20gJy4vRm9ybVRleHQnO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgaW5saW5lOiBmYWxzZSxcbiAgYXM6ICdmb3JtJ1xufTtcblxuZnVuY3Rpb24gRm9ybShfcmVmKSB7XG4gIHZhciBic1ByZWZpeCA9IF9yZWYuYnNQcmVmaXgsXG4gICAgICBpbmxpbmUgPSBfcmVmLmlubGluZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgdmFsaWRhdGVkID0gX3JlZi52YWxpZGF0ZWQsXG4gICAgICBDb21wb25lbnQgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImlubGluZVwiLCBcImNsYXNzTmFtZVwiLCBcImlubmVyUmVmXCIsIFwidmFsaWRhdGVkXCIsIFwiYXNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCB2YWxpZGF0ZWQgJiYgJ3dhcy12YWxpZGF0ZWQnLCBpbmxpbmUgJiYgYnNQcmVmaXggKyBcIi1pbmxpbmVcIilcbiAgfSkpO1xufVxuXG5Gb3JtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWRGb3JtID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZvcm0sICdmb3JtJyk7XG5EZWNvcmF0ZWRGb3JtLlJvdyA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnZm9ybS1yb3cnKTtcbkRlY29yYXRlZEZvcm0uR3JvdXAgPSBGb3JtR3JvdXA7XG5EZWNvcmF0ZWRGb3JtLkNvbnRyb2wgPSBGb3JtQ29udHJvbDtcbkRlY29yYXRlZEZvcm0uQ2hlY2sgPSBGb3JtQ2hlY2s7XG5EZWNvcmF0ZWRGb3JtLkxhYmVsID0gRm9ybUxhYmVsO1xuRGVjb3JhdGVkRm9ybS5UZXh0ID0gRm9ybVRleHQ7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRGb3JtOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQ29udGFpbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbnRhaW5lci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBmbHVpZCA9IF90aGlzJHByb3BzLmZsdWlkLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImZsdWlkXCIsIFwiYXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGZsdWlkID8gYnNQcmVmaXggKyBcIi1mbHVpZFwiIDogYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDb250YWluZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNvbnRhaW5lci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2JyxcbiAgZmx1aWQ6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KENvbnRhaW5lciwgJ2NvbnRhaW5lcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBJbWFnZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShJbWFnZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW1hZ2UoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEltYWdlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgZmx1aWQgPSBfdGhpcyRwcm9wcy5mbHVpZCxcbiAgICAgICAgcm91bmRlZCA9IF90aGlzJHByb3BzLnJvdW5kZWQsXG4gICAgICAgIHJvdW5kZWRDaXJjbGUgPSBfdGhpcyRwcm9wcy5yb3VuZGVkQ2lyY2xlLFxuICAgICAgICB0aHVtYm5haWwgPSBfdGhpcyRwcm9wcy50aHVtYm5haWwsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiZmx1aWRcIiwgXCJyb3VuZGVkXCIsIFwicm91bmRlZENpcmNsZVwiLCBcInRodW1ibmFpbFwiXSk7XG5cbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZXMoZmx1aWQgJiYgYnNQcmVmaXggKyBcIi1mbHVpZFwiLCByb3VuZGVkICYmIFwicm91bmRlZFwiLCByb3VuZGVkQ2lyY2xlICYmIFwicm91bmRlZC1jaXJjbGVcIiwgdGh1bWJuYWlsICYmIGJzUHJlZml4ICsgXCItdGh1bWJuYWlsXCIpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgY2xhc3NlcylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIEltYWdlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5JbWFnZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGZsdWlkOiBmYWxzZSxcbiAgcm91bmRlZDogZmFsc2UsXG4gIHJvdW5kZWRDaXJjbGU6IGZhbHNlLFxuICB0aHVtYm5haWw6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEltYWdlLCAnaW1nJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4vSW1hZ2UnO1xuXG52YXIgRmlndXJlSW1hZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoRmlndXJlSW1hZ2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZpZ3VyZUltYWdlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBGaWd1cmVJbWFnZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbWFnZSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAnZmlndXJlLWltZycpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGaWd1cmVJbWFnZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuRmlndXJlSW1hZ2UuZGVmYXVsdFByb3BzID0ge1xuICBmbHVpZDogdHJ1ZVxufTtcbmV4cG9ydCBkZWZhdWx0IEZpZ3VyZUltYWdlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5cbnZhciBGaWd1cmVDYXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEZpZ3VyZUNhcHRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZpZ3VyZUNhcHRpb24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZpZ3VyZUNhcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBGaWd1cmVDYXB0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5GaWd1cmVDYXB0aW9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdmaWdjYXB0aW9uJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChGaWd1cmVDYXB0aW9uLCAnZmlndXJlLWNhcHRpb24nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZpZ3VyZUltYWdlIGZyb20gJy4vRmlndXJlSW1hZ2UnO1xuaW1wb3J0IEZpZ3VyZUNhcHRpb24gZnJvbSAnLi9GaWd1cmVDYXB0aW9uJztcblxudmFyIEZpZ3VyZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShGaWd1cmUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZpZ3VyZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRmlndXJlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFzXCIsIFwiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gRmlndXJlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5GaWd1cmUuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2ZpZ3VyZSdcbn07XG52YXIgRGVjb3JhdGVkRmlndXJlID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEZpZ3VyZSwgJ2ZpZ3VyZScpO1xuRGVjb3JhdGVkRmlndXJlLkltYWdlID0gRmlndXJlSW1hZ2U7XG5EZWNvcmF0ZWRGaWd1cmUuQ2FwdGlvbiA9IEZpZ3VyZUNhcHRpb247XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRGaWd1cmU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVdpdGhCc1ByZWZpeCBmcm9tICcuL3V0aWxzL2NyZWF0ZVdpdGhCc1ByZWZpeCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuLyoqXG4gKlxuICogQHByb3BlcnR5IHtJbnB1dEdyb3VwQXBwZW5kfSBBcHBlbmRcbiAqIEBwcm9wZXJ0eSB7SW5wdXRHcm91cFByZXBlbmR9IFByZXBlbmRcbiAqIEBwcm9wZXJ0eSB7SW5wdXRHcm91cFRleHR9IFRleHRcbiAqIEBwcm9wZXJ0eSB7SW5wdXRHcm91cFJhZGlvfSBSYWRpb1xuICogQHByb3BlcnR5IHtJbnB1dEdyb3VwQ2hlY2tib3h9IENoZWNrYm94XG4gKi9cblxudmFyIElucHV0R3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5wdXRHcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSW5wdXRHcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5wdXRHcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJzaXplXCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSW5wdXRHcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSW5wdXRHcm91cC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcbnZhciBJbnB1dEdyb3VwQXBwZW5kID0gY3JlYXRlV2l0aEJzUHJlZml4KCdpbnB1dC1ncm91cC1hcHBlbmQnKTtcbnZhciBJbnB1dEdyb3VwUHJlcGVuZCA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnaW5wdXQtZ3JvdXAtcHJlcGVuZCcpO1xudmFyIElucHV0R3JvdXBUZXh0ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdpbnB1dC1ncm91cC10ZXh0Jywge1xuICBDb21wb25lbnQ6ICdzcGFuJ1xufSk7XG5cbnZhciBJbnB1dEdyb3VwQ2hlY2tib3ggPSBmdW5jdGlvbiBJbnB1dEdyb3VwQ2hlY2tib3gocHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRHcm91cFRleHQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCBfZXh0ZW5kcyh7XG4gICAgdHlwZTogXCJjaGVja2JveFwiXG4gIH0sIHByb3BzKSkpO1xufTtcblxudmFyIElucHV0R3JvdXBSYWRpbyA9IGZ1bmN0aW9uIElucHV0R3JvdXBSYWRpbyhwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEdyb3VwVGV4dCwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIF9leHRlbmRzKHtcbiAgICB0eXBlOiBcInJhZGlvXCJcbiAgfSwgcHJvcHMpKSk7XG59O1xuXG52YXIgRGVjb3JhdGVkSW5wdXRHcm91cCA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChJbnB1dEdyb3VwLCAnaW5wdXQtZ3JvdXAnKTtcbkRlY29yYXRlZElucHV0R3JvdXAuVGV4dCA9IElucHV0R3JvdXBUZXh0O1xuRGVjb3JhdGVkSW5wdXRHcm91cC5SYWRpbyA9IElucHV0R3JvdXBSYWRpbztcbkRlY29yYXRlZElucHV0R3JvdXAuQ2hlY2tib3ggPSBJbnB1dEdyb3VwQ2hlY2tib3g7XG5EZWNvcmF0ZWRJbnB1dEdyb3VwLkFwcGVuZCA9IElucHV0R3JvdXBBcHBlbmQ7XG5EZWNvcmF0ZWRJbnB1dEdyb3VwLlByZXBlbmQgPSBJbnB1dEdyb3VwUHJlcGVuZDtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZElucHV0R3JvdXA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2JyxcbiAgZmx1aWQ6IGZhbHNlXG59O1xuXG52YXIgSnVtYm90cm9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEp1bWJvdHJvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSnVtYm90cm9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBKdW1ib3Ryb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9jbGFzc2VzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgZmx1aWQgPSBfdGhpcyRwcm9wcy5mbHVpZCxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJjbGFzc05hbWVcIiwgXCJmbHVpZFwiLCBcImJzUHJlZml4XCJdKTtcblxuICAgIHZhciBjbGFzc2VzID0gKF9jbGFzc2VzID0ge30sIF9jbGFzc2VzW2JzUHJlZml4XSA9IHRydWUsIF9jbGFzc2VzW2JzUHJlZml4ICsgXCItZmx1aWRcIl0gPSBmbHVpZCwgX2NsYXNzZXMpO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBjbGFzc2VzKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gSnVtYm90cm9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5KdW1ib3Ryb24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KEp1bWJvdHJvbiwgJ2p1bWJvdHJvbicpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGFiQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBUYWJDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcXNhIGZyb20gJ2RvbS1oZWxwZXJzL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGwnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQsIHsgbWFrZUV2ZW50S2V5IH0gZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5pbXBvcnQgTmF2Q29udGV4dCBmcm9tICcuL05hdkNvbnRleHQnO1xuaW1wb3J0IFRhYkNvbnRleHQgZnJvbSAnLi9UYWJDb250ZXh0JztcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBBYnN0cmFjdE5hdiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShBYnN0cmFjdE5hdiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWJzdHJhY3ROYXYoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVTZWxlY3QgPSBmdW5jdGlvbiAoa2V5LCBldmVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgICBwYXJlbnRPblNlbGVjdCA9IF90aGlzJHByb3BzLnBhcmVudE9uU2VsZWN0O1xuICAgICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm47XG4gICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0KGtleSwgZXZlbnQpO1xuICAgICAgaWYgKHBhcmVudE9uU2VsZWN0KSBwYXJlbnRPblNlbGVjdChrZXksIGV2ZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uS2V5RG93biA9IF90aGlzLnByb3BzLm9uS2V5RG93bjtcbiAgICAgIGlmIChvbktleURvd24pIG9uS2V5RG93bihldmVudCk7XG4gICAgICB2YXIgbmV4dEFjdGl2ZUNoaWxkO1xuXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgICBuZXh0QWN0aXZlQ2hpbGQgPSBfdGhpcy5nZXROZXh0QWN0aXZlQ2hpbGQoLTEpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIG5leHRBY3RpdmVDaGlsZCA9IF90aGlzLmdldE5leHRBY3RpdmVDaGlsZCgxKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuZXh0QWN0aXZlQ2hpbGQpIHJldHVybjtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLmhhbmRsZVNlbGVjdChuZXh0QWN0aXZlQ2hpbGQuZGF0YXNldC5yYkV2ZW50S2V5LCBldmVudCk7XG5cbiAgICAgIF90aGlzLl9uZWVkc1JlZm9jdXMgPSB0cnVlO1xuICAgIH07XG5cbiAgICBfdGhpcy5hdHRhY2hSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5saXN0Tm9kZSA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBuYXZDb250ZXh0OiBudWxsXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBBYnN0cmFjdE5hdi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZikge1xuICAgIHZhciBhY3RpdmVLZXkgPSBfcmVmLmFjdGl2ZUtleSxcbiAgICAgICAgZ2V0Q29udHJvbGxlZElkID0gX3JlZi5nZXRDb250cm9sbGVkSWQsXG4gICAgICAgIGdldENvbnRyb2xsZXJJZCA9IF9yZWYuZ2V0Q29udHJvbGxlcklkLFxuICAgICAgICByb2xlID0gX3JlZi5yb2xlO1xuICAgIHJldHVybiB7XG4gICAgICBuYXZDb250ZXh0OiB7XG4gICAgICAgIHJvbGU6IHJvbGUsXG4gICAgICAgIC8vIHVzZWQgYnkgTmF2TGluayB0byBkZXRlcm1pbmUgaXQncyByb2xlXG4gICAgICAgIGFjdGl2ZUtleTogbWFrZUV2ZW50S2V5KGFjdGl2ZUtleSksXG4gICAgICAgIGdldENvbnRyb2xsZWRJZDogZ2V0Q29udHJvbGxlZElkIHx8IG5vb3AsXG4gICAgICAgIGdldENvbnRyb2xsZXJJZDogZ2V0Q29udHJvbGxlcklkIHx8IG5vb3BcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBBYnN0cmFjdE5hdi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX25lZWRzUmVmb2N1cyB8fCAhdGhpcy5saXN0Tm9kZSkgcmV0dXJuO1xuICAgIHZhciBhY3RpdmVDaGlsZCA9IHRoaXMubGlzdE5vZGUucXVlcnlTZWxlY3RvcignW2RhdGEtcmItZXZlbnQta2V5XS5hY3RpdmUnKTtcbiAgICBpZiAoYWN0aXZlQ2hpbGQpIGFjdGl2ZUNoaWxkLmZvY3VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldE5leHRBY3RpdmVDaGlsZCA9IGZ1bmN0aW9uIGdldE5leHRBY3RpdmVDaGlsZChvZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMubGlzdE5vZGUpIHJldHVybiBudWxsO1xuICAgIHZhciBpdGVtcyA9IHFzYSh0aGlzLmxpc3ROb2RlLCAnW2RhdGEtcmItZXZlbnQta2V5XTpub3QoLmRpc2FibGVkKScpO1xuICAgIHZhciBhY3RpdmVDaGlsZCA9IHRoaXMubGlzdE5vZGUucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpO1xuICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoYWN0aXZlQ2hpbGQpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBudWxsO1xuICAgIHZhciBuZXh0SW5kZXggPSBpbmRleCArIG9mZnNldDtcbiAgICBpZiAobmV4dEluZGV4ID49IGl0ZW1zLmxlbmd0aCkgbmV4dEluZGV4ID0gMDtcbiAgICBpZiAobmV4dEluZGV4IDwgMCkgbmV4dEluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gaXRlbXNbbmV4dEluZGV4XTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wczIuYXMsXG4gICAgICAgIF8gPSBfdGhpcyRwcm9wczIub25TZWxlY3QsXG4gICAgICAgIF8wID0gX3RoaXMkcHJvcHMyLnBhcmVudE9uU2VsZWN0LFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzMi5nZXRDb250cm9sbGVkSWQsXG4gICAgICAgIF8yID0gX3RoaXMkcHJvcHMyLmdldENvbnRyb2xsZXJJZCxcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wczIuYWN0aXZlS2V5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiYXNcIiwgXCJvblNlbGVjdFwiLCBcInBhcmVudE9uU2VsZWN0XCIsIFwiZ2V0Q29udHJvbGxlZElkXCIsIFwiZ2V0Q29udHJvbGxlcklkXCIsIFwiYWN0aXZlS2V5XCJdKTtcblxuICAgIGlmIChwcm9wcy5yb2xlID09PSAndGFibGlzdCcpIHtcbiAgICAgIHByb3BzLm9uS2V5RG93biA9IHRoaXMuaGFuZGxlS2V5RG93bjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChTZWxlY3RhYmxlQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChOYXZDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5uYXZDb250ZXh0XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICByZWY6IHRoaXMuYXR0YWNoUmVmXG4gICAgfSkpKSk7XG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0TmF2O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5BYnN0cmFjdE5hdi5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAndWwnXG59O1xuZXhwb3J0IGRlZmF1bHQgbWFwQ29udGV4dFRvUHJvcHMoW1NlbGVjdGFibGVDb250ZXh0LCBUYWJDb250ZXh0XSwgZnVuY3Rpb24gKHBhcmVudE9uU2VsZWN0LCB0YWJDb250ZXh0LCBfcmVmMikge1xuICB2YXIgcm9sZSA9IF9yZWYyLnJvbGU7XG4gIGlmICghdGFiQ29udGV4dCkgcmV0dXJuIHtcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3RcbiAgfTtcbiAgdmFyIGFjdGl2ZUtleSA9IHRhYkNvbnRleHQuYWN0aXZlS2V5LFxuICAgICAgZ2V0Q29udHJvbGxlcklkID0gdGFiQ29udGV4dC5nZXRDb250cm9sbGVySWQsXG4gICAgICBnZXRDb250cm9sbGVkSWQgPSB0YWJDb250ZXh0LmdldENvbnRyb2xsZWRJZDtcbiAgcmV0dXJuIHtcbiAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICBwYXJlbnRPblNlbGVjdDogcGFyZW50T25TZWxlY3QsXG4gICAgcm9sZTogcm9sZSB8fCAndGFibGlzdCcsXG4gICAgLy8gcGFzcyB0aGVzZSB0d28gdGhyb3VnaCB0byBhdm9pZCBoYXZpbmcgdG8gbGlzdGVuIHRvXG4gICAgLy8gYm90aCBUYWIgYW5kIE5hdiBjb250ZXh0cyBpbiBOYXZMaW5rXG4gICAgZ2V0Q29udHJvbGxlcklkOiBnZXRDb250cm9sbGVySWQsXG4gICAgZ2V0Q29udHJvbGxlZElkOiBnZXRDb250cm9sbGVkSWRcbiAgfTtcbn0sIEFic3RyYWN0TmF2KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTmF2Q29udGV4dCBmcm9tICcuL05hdkNvbnRleHQnO1xuaW1wb3J0IFNlbGVjdGFibGVDb250ZXh0LCB7IG1ha2VFdmVudEtleSB9IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59O1xuXG52YXIgQWJzdHJhY3ROYXZJdGVtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEFic3RyYWN0TmF2SXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQWJzdHJhY3ROYXZJdGVtKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBYnN0cmFjdE5hdkl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICB0YWJJbmRleCA9IF90aGlzJHByb3BzLnRhYkluZGV4LFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBvblNlbGVjdCA9IF90aGlzJHByb3BzLm9uU2VsZWN0LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwidGFiSW5kZXhcIiwgXCJldmVudEtleVwiLCBcIm9uU2VsZWN0XCIsIFwiYXNcIl0pO1xuXG4gICAgdmFyIG5hdktleSA9IG1ha2VFdmVudEtleShldmVudEtleSwgcHJvcHMuaHJlZik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChwYXJlbnRPblNlbGVjdCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2Q29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKG5hdkNvbnRleHQpIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gYWN0aXZlO1xuXG4gICAgICAgIGlmIChuYXZDb250ZXh0KSB7XG4gICAgICAgICAgaWYgKCFwcm9wcy5yb2xlICYmIG5hdkNvbnRleHQucm9sZSA9PT0gJ3RhYmxpc3QnKSBwcm9wcy5yb2xlID0gJ3RhYic7XG4gICAgICAgICAgcHJvcHNbJ2RhdGEtcmItZXZlbnQta2V5J10gPSBuYXZLZXk7XG4gICAgICAgICAgcHJvcHMuaWQgPSBuYXZDb250ZXh0LmdldENvbnRyb2xsZXJJZChuYXZLZXkpO1xuICAgICAgICAgIHByb3BzWydhcmlhLWNvbnRyb2xzJ10gPSBuYXZDb250ZXh0LmdldENvbnRyb2xsZWRJZChuYXZLZXkpO1xuICAgICAgICAgIGlzQWN0aXZlID0gYWN0aXZlID09IG51bGwgJiYgbmF2S2V5ICE9IG51bGwgPyBuYXZDb250ZXh0LmFjdGl2ZUtleSA9PT0gbmF2S2V5IDogYWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLnJvbGUgPT09ICd0YWInKSB7XG4gICAgICAgICAgcHJvcHMudGFiSW5kZXggPSBpc0FjdGl2ZSA/IHRhYkluZGV4IDogLTE7XG4gICAgICAgICAgcHJvcHNbJ2FyaWEtc2VsZWN0ZWQnXSA9IGlzQWN0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBpc0FjdGl2ZSAmJiAnYWN0aXZlJyksXG4gICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgICB2YXIgb25DbGljayA9IF90aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICAgICAgICAgIGlmIChuYXZLZXkgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG9uU2VsZWN0KSBvblNlbGVjdChuYXZLZXksIGUpO1xuICAgICAgICAgICAgaWYgKHBhcmVudE9uU2VsZWN0KSBwYXJlbnRPblNlbGVjdChuYXZLZXksIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0TmF2SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQWJzdHJhY3ROYXZJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0TmF2SXRlbTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWJzdHJhY3ROYXZJdGVtIGZyb20gJy4vQWJzdHJhY3ROYXZJdGVtJztcbmltcG9ydCB7IG1ha2VFdmVudEtleSB9IGZyb20gJy4vU2VsZWN0YWJsZUNvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIExpc3RHcm91cEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlzdEdyb3VwSXRlbSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdEdyb3VwSXRlbSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNsaWNrID0gX3RoaXMkcHJvcHMub25DbGljayxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkO1xuXG4gICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwSXRlbS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczIuYnNQcmVmaXgsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzMi5hY3RpdmUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMyLnZhcmlhbnQsXG4gICAgICAgIGFjdGlvbiA9IF90aGlzJHByb3BzMi5hY3Rpb24sXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMyLmFzLFxuICAgICAgICBldmVudEtleSA9IF90aGlzJHByb3BzMi5ldmVudEtleSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJzUHJlZml4XCIsIFwiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJ2YXJpYW50XCIsIFwiYWN0aW9uXCIsIFwiYXNcIiwgXCJldmVudEtleVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBYnN0cmFjdE5hdkl0ZW0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgZXZlbnRLZXk6IG1ha2VFdmVudEtleShldmVudEtleSwgcHJvcHMuaHJlZikgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAsXG4gICAgICBhczogYXMgfHwgKGFjdGlvbiA/IHByb3BzLmhyZWYgPyAnYScgOiAnYnV0dG9uJyA6ICdkaXYnKSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgYWN0aXZlICYmICdhY3RpdmUnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB2YXJpYW50ICYmIGJzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBhY3Rpb24gJiYgYnNQcmVmaXggKyBcIi1hY3Rpb25cIilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cEl0ZW07XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RHcm91cEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICB2YXJpYW50OiBudWxsLFxuICBhY3RpdmU6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2Vcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTGlzdEdyb3VwSXRlbSwgJ2xpc3QtZ3JvdXAtaXRlbScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEFic3RyYWN0TmF2IGZyb20gJy4vQWJzdHJhY3ROYXYnO1xuaW1wb3J0IExpc3RHcm91cEl0ZW0gZnJvbSAnLi9MaXN0R3JvdXBJdGVtJztcblxudmFyIExpc3RHcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaXN0R3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3RHcm91cCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlzdEdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNsYXNzTmFtZVwiLCBcImJzUHJlZml4XCIsIFwidmFyaWFudFwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBYnN0cmFjdE5hdiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3RHcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGlzdEdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICB2YXJpYW50OiBudWxsXG59O1xudmFyIERlY29yYXRlZExpc3RHcm91cCA9IHVuY29udHJvbGxhYmxlKGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChMaXN0R3JvdXAsICdsaXN0LWdyb3VwJyksIHtcbiAgYWN0aXZlS2V5OiAnb25TZWxlY3QnXG59KTtcbkRlY29yYXRlZExpc3RHcm91cC5JdGVtID0gTGlzdEdyb3VwSXRlbTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZExpc3RHcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlV2l0aEJzUHJlZml4IGZyb20gJy4vdXRpbHMvY3JlYXRlV2l0aEJzUHJlZml4JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5cbnZhciBNZWRpYSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZWRpYSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVkaWEoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lZGlhLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiYXNcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTWVkaWE7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lZGlhLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWRNZWRpYSA9IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNZWRpYSwgJ21lZGlhJyk7XG5EZWNvcmF0ZWRNZWRpYS5Cb2R5ID0gY3JlYXRlV2l0aEJzUHJlZml4KCdtZWRpYS1ib2R5Jyk7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRNZWRpYTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgTW9kYWxCb2R5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsQm9keSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWxCb2R5KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbEJvZHkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEJvZHk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsQm9keS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbEJvZHksICdtb2RhbC1ib2R5Jyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE1vZGFsRGlhbG9nID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsRGlhbG9nLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbERpYWxvZygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxEaWFsb2cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjZW50ZXJlZCA9IF90aGlzJHByb3BzLmNlbnRlcmVkLFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIiwgXCJjZW50ZXJlZFwiLCBcInNpemVcIiwgXCJjaGlsZHJlblwiXSk7XG5cbiAgICB2YXIgYnNDbGFzcyA9IGJzUHJlZml4ICsgXCItZGlhbG9nXCI7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNDbGFzcywgY2xhc3NOYW1lLCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplLCBjZW50ZXJlZCAmJiBic0NsYXNzICsgXCItY2VudGVyZWRcIilcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNQcmVmaXggKyBcIi1jb250ZW50XCIpXG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxEaWFsb2c7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbERpYWxvZywgJ21vZGFsJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE1vZGFsRm9vdGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsRm9vdGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEZvb3RlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxGb290ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbEZvb3Rlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxGb290ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTW9kYWxGb290ZXIsICdtb2RhbC1mb290ZXInKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIE1vZGFsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvbkhpZGU6IGZ1bmN0aW9uIG9uSGlkZSgpIHt9XG59KTtcbmV4cG9ydCBkZWZhdWx0IE1vZGFsQ29udGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSAnLi9DbG9zZUJ1dHRvbic7XG5pbXBvcnQgTW9kYWxDb250ZXh0IGZyb20gJy4vTW9kYWxDb250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gIGNsb3NlQnV0dG9uOiBmYWxzZVxufTtcblxudmFyIE1vZGFsSGVhZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsSGVhZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbEhlYWRlcigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxIZWFkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xvc2VMYWJlbCA9IF90aGlzJHByb3BzLmNsb3NlTGFiZWwsXG4gICAgICAgIGNsb3NlQnV0dG9uID0gX3RoaXMkcHJvcHMuY2xvc2VCdXR0b24sXG4gICAgICAgIG9uSGlkZSA9IF90aGlzJHByb3BzLm9uSGlkZSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsb3NlTGFiZWxcIiwgXCJjbG9zZUJ1dHRvblwiLCBcIm9uSGlkZVwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KE1vZGFsQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICAgIH0pLCBjaGlsZHJlbiwgY2xvc2VCdXR0b24gJiYgUmVhY3QuY3JlYXRlRWxlbWVudChDbG9zZUJ1dHRvbiwge1xuICAgICAgICBsYWJlbDogY2xvc2VMYWJlbCxcbiAgICAgICAgb25DbGljazogY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGNvbnRleHQgJiYgY29udGV4dC5vbkhpZGUsIG9uSGlkZSlcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxIZWFkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1vZGFsSGVhZGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChNb2RhbEhlYWRlciwgJ21vZGFsLWhlYWRlcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkaXZXaXRoQ2xhc3NOYW1lIGZyb20gJy4vdXRpbHMvZGl2V2l0aENsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xudmFyIERpdlN0eWxlZEFzSDQgPSBkaXZXaXRoQ2xhc3NOYW1lKCdoNCcpO1xuXG52YXIgTW9kYWxUaXRsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbFRpdGxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbFRpdGxlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbFRpdGxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImFzXCIsIFwiYnNQcmVmaXhcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWxUaXRsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWxUaXRsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiBEaXZTdHlsZWRBc0g0XG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE1vZGFsVGl0bGUsICdtb2RhbC10aXRsZScpOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHFzYSBmcm9tICdkb20taGVscGVycy9xdWVyeS9xdWVyeVNlbGVjdG9yQWxsJztcbmltcG9ydCBjc3MgZnJvbSAnZG9tLWhlbHBlcnMvc3R5bGUnO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJztcbmltcG9ydCBNb2RhbE1hbmFnZXIgZnJvbSAncmVhY3Qtb3ZlcmxheXMvTW9kYWxNYW5hZ2VyJztcbnZhciBTZWxlY3RvciA9IHtcbiAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJyxcbiAgTkFWQkFSX1RPR0dMRVI6ICcubmF2YmFyLXRvZ2dsZXInXG59O1xuXG52YXIgQm9vdHN0cmFwTW9kYWxNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTW9kYWxNYW5hZ2VyKSB7XG4gIF9pbmhlcml0c0xvb3NlKEJvb3RzdHJhcE1vZGFsTWFuYWdlciwgX01vZGFsTWFuYWdlcik7XG5cbiAgZnVuY3Rpb24gQm9vdHN0cmFwTW9kYWxNYW5hZ2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9Nb2RhbE1hbmFnZXIuY2FsbC5hcHBseShfTW9kYWxNYW5hZ2VyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuYWRqdXN0QW5kU3RvcmUgPSBmdW5jdGlvbiAocHJvcCwgZWxlbWVudCwgYWRqdXN0KSB7XG4gICAgICB2YXIgYWN0dWFsID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcbiAgICAgIGVsZW1lbnQuZGF0YXNldFtwcm9wXSA9IGFjdHVhbDtcbiAgICAgIGNzcyhlbGVtZW50LCBwcm9wLCBwYXJzZUZsb2F0KGNzcyhlbGVtZW50LCBwcm9wKSkgKyBhZGp1c3QgKyBcInB4XCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZXN0b3JlID0gZnVuY3Rpb24gKHByb3AsIGVsZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuZGF0YXNldFtwcm9wXTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZGF0YXNldFtwcm9wXTtcbiAgICAgICAgY3NzKGVsZW1lbnQsIHByb3AsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEJvb3RzdHJhcE1vZGFsTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldENvbnRhaW5lclN0eWxlID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lcikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgX01vZGFsTWFuYWdlci5wcm90b3R5cGUuc2V0Q29udGFpbmVyU3R5bGUuY2FsbCh0aGlzLCBjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKTtcblxuICAgIGlmICghY29udGFpbmVyU3RhdGUub3ZlcmZsb3dpbmcpIHJldHVybjtcbiAgICB2YXIgc2l6ZSA9IGdldFNjcm9sbGJhclNpemUoKTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5hZGp1c3RBbmRTdG9yZSgncGFkZGluZ1JpZ2h0JywgZWwsIHNpemUpO1xuICAgIH0pO1xuICAgIHFzYShjb250YWluZXIsIFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5hZGp1c3RBbmRTdG9yZSgnbWFyZ2luZ1JpZ2h0JywgZWwsIC1zaXplKTtcbiAgICB9KTtcbiAgICBxc2EoY29udGFpbmVyLCBTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpczIuYWRqdXN0QW5kU3RvcmUoJ21hcmdpbmdSaWdodCcsIGVsLCBzaXplKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlQ29udGFpbmVyU3R5bGUgPSBmdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShjb250YWluZXJTdGF0ZSwgY29udGFpbmVyKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBfTW9kYWxNYW5hZ2VyLnByb3RvdHlwZS5yZW1vdmVDb250YWluZXJTdHlsZS5jYWxsKHRoaXMsIGNvbnRhaW5lclN0YXRlLCBjb250YWluZXIpO1xuXG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfdGhpczMucmVzdG9yZSgncGFkZGluZ1JpZ2h0JywgZWwpO1xuICAgIH0pO1xuICAgIHFzYShjb250YWluZXIsIFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIF90aGlzMy5yZXN0b3JlKCdtYXJnaW5nUmlnaHQnLCBlbCk7XG4gICAgfSk7XG4gICAgcXNhKGNvbnRhaW5lciwgU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gX3RoaXMzLnJlc3RvcmUoJ21hcmdpbmdSaWdodCcsIGVsKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQm9vdHN0cmFwTW9kYWxNYW5hZ2VyO1xufShNb2RhbE1hbmFnZXIpO1xuXG5leHBvcnQgeyBCb290c3RyYXBNb2RhbE1hbmFnZXIgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICdkb20taGVscGVycy9ldmVudHMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FuVXNlRE9NIGZyb20gJ2RvbS1oZWxwZXJzL3V0aWwvaW5ET00nO1xuaW1wb3J0IGdldFNjcm9sbGJhclNpemUgZnJvbSAnZG9tLWhlbHBlcnMvdXRpbC9zY3JvbGxiYXJTaXplJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQmFzZU1vZGFsIGZyb20gJ3JlYWN0LW92ZXJsYXlzL01vZGFsJztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5pbXBvcnQgQm9keSBmcm9tICcuL01vZGFsQm9keSc7XG5pbXBvcnQgTW9kYWxEaWFsb2cgZnJvbSAnLi9Nb2RhbERpYWxvZyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vTW9kYWxGb290ZXInO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL01vZGFsSGVhZGVyJztcbmltcG9ydCBUaXRsZSBmcm9tICcuL01vZGFsVGl0bGUnO1xuaW1wb3J0IEJvb3RzdHJhcE1vZGFsTWFuYWdlciBmcm9tICcuL3V0aWxzL0Jvb3RzdHJhcE1vZGFsTWFuYWdlcic7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE1vZGFsQ29udGV4dCBmcm9tICcuL01vZGFsQ29udGV4dCc7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiBmYWxzZSxcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBhdXRvRm9jdXM6IHRydWUsXG4gIGVuZm9yY2VGb2N1czogdHJ1ZSxcbiAgcmVzdG9yZUZvY3VzOiB0cnVlLFxuICBhbmltYXRpb246IHRydWUsXG4gIGRpYWxvZ0FzOiBNb2RhbERpYWxvZyxcbiAgbWFuYWdlcjogbmV3IEJvb3RzdHJhcE1vZGFsTWFuYWdlcigpXG59O1xuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cblxuZnVuY3Rpb24gRGlhbG9nVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIEJhY2tkcm9wVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGYWRlLCBwcm9wcyk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cblxudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChfcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBfcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5zZXRNb2RhbFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLl9tb2RhbCA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRGlhbG9nTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwICYmIGUudGFyZ2V0ID09PSBfdGhpcy5fbW9kYWwuZGlhbG9nKSB7XG4gICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3dhaXRpbmdGb3JNb3VzZVVwID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayB8fCBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25IaWRlKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcztcblxuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgICBfdGhpcy51cGRhdGVEaWFsb2dTdHlsZShub2RlKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXIpIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkVudGVyLmFwcGx5KF90aGlzJHByb3BzLCBbbm9kZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjtcblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIChfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcykub25FbnRlcmluZy5hcHBseShfdGhpcyRwcm9wczIsIFtub2RlXS5jb25jYXQoYXJncykpOyAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuXG4gICAgICBldmVudHMub24od2luZG93LCAncmVzaXplJywgX3RoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczM7XG5cbiAgICAgIGlmIChub2RlKSBub2RlLnN0eWxlLmRpc3BsYXkgPSAnJzsgLy8gUkhMIHJlbW92ZXMgaXQgc29tZXRpbWVzXG5cbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkgKF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzKS5vbkV4aXRlZC5hcHBseShfdGhpcyRwcm9wczMsIGFyZ3MpOyAvLyBGSVhNRTogVGhpcyBzaG91bGQgd29yayBldmVuIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuXG4gICAgICBldmVudHMub2ZmKHdpbmRvdywgJ3Jlc2l6ZScsIF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVwZGF0ZURpYWxvZ1N0eWxlKF90aGlzLl9tb2RhbC5kaWFsb2cpO1xuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJCYWNrZHJvcCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHM0LmJzUHJlZml4LFxuICAgICAgICAgIGJhY2tkcm9wQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmJhY2tkcm9wQ2xhc3NOYW1lO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhic1ByZWZpeCArIFwiLWJhY2tkcm9wXCIsIGJhY2tkcm9wQ2xhc3NOYW1lKVxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0eWxlOiB7fVxuICAgIH07XG4gICAgX3RoaXMubW9kYWxDb250ZXh0ID0ge1xuICAgICAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5vbkhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgLy8gQ2xlYW4gdXAgdGhlIGxpc3RlbmVyIGlmIHdlIG5lZWQgdG8uXG4gICAgZXZlbnRzLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZURpYWxvZ1N0eWxlID0gZnVuY3Rpb24gdXBkYXRlRGlhbG9nU3R5bGUobm9kZSkge1xuICAgIGlmICghY2FuVXNlRE9NKSByZXR1cm47XG4gICAgdmFyIG1hbmFnZXIgPSB0aGlzLnByb3BzLm1hbmFnZXI7XG4gICAgdmFyIGNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgPSBtYW5hZ2VyLmlzQ29udGFpbmVyT3ZlcmZsb3dpbmcodGhpcy5fbW9kYWwpO1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSBub2RlLnNjcm9sbEhlaWdodCA+IG93bmVyRG9jdW1lbnQobm9kZSkuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVySXNPdmVyZmxvd2luZyAmJiAhbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICBwYWRkaW5nTGVmdDogIWNvbnRhaW5lcklzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gZ2V0U2Nyb2xsYmFyU2l6ZSgpIDogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wczUuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzNS5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHM1LnN0eWxlLFxuICAgICAgICBkaWFsb2dDbGFzc05hbWUgPSBfdGhpcyRwcm9wczUuZGlhbG9nQ2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzNS5jaGlsZHJlbixcbiAgICAgICAgRGlhbG9nID0gX3RoaXMkcHJvcHM1LmRpYWxvZ0FzLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHM1LnNob3csXG4gICAgICAgIG1hbmFnZXIgPSBfdGhpcyRwcm9wczUubWFuYWdlcixcbiAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHM1LmFuaW1hdGlvbixcbiAgICAgICAgYmFja2Ryb3AgPSBfdGhpcyRwcm9wczUuYmFja2Ryb3AsXG4gICAgICAgIGtleWJvYXJkID0gX3RoaXMkcHJvcHM1LmtleWJvYXJkLFxuICAgICAgICBvbkVzY2FwZUtleURvd24gPSBfdGhpcyRwcm9wczUub25Fc2NhcGVLZXlEb3duLFxuICAgICAgICBvblNob3cgPSBfdGhpcyRwcm9wczUub25TaG93LFxuICAgICAgICBvbkhpZGUgPSBfdGhpcyRwcm9wczUub25IaWRlLFxuICAgICAgICBjb250YWluZXIgPSBfdGhpcyRwcm9wczUuY29udGFpbmVyLFxuICAgICAgICBhdXRvRm9jdXMgPSBfdGhpcyRwcm9wczUuYXV0b0ZvY3VzLFxuICAgICAgICBlbmZvcmNlRm9jdXMgPSBfdGhpcyRwcm9wczUuZW5mb3JjZUZvY3VzLFxuICAgICAgICByZXN0b3JlRm9jdXMgPSBfdGhpcyRwcm9wczUucmVzdG9yZUZvY3VzLFxuICAgICAgICBvbkVudGVyZWQgPSBfdGhpcyRwcm9wczUub25FbnRlcmVkLFxuICAgICAgICBvbkV4aXQgPSBfdGhpcyRwcm9wczUub25FeGl0LFxuICAgICAgICBvbkV4aXRpbmcgPSBfdGhpcyRwcm9wczUub25FeGl0aW5nLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHM1Lm9uRXhpdGVkLFxuICAgICAgICBfMSA9IF90aGlzJHByb3BzNS5vbkVudGVyaW5nLFxuICAgICAgICBfNiA9IF90aGlzJHByb3BzNS5vbkVudGVyLFxuICAgICAgICBfNCA9IF90aGlzJHByb3BzNS5vbkVudGVyaW5nLFxuICAgICAgICBfMiA9IF90aGlzJHByb3BzNS5iYWNrZHJvcENsYXNzTmFtZSxcbiAgICAgICAgXzMgPSBfdGhpcyRwcm9wczUuYmFja2Ryb3BTdHlsZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczUsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJkaWFsb2dDbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImRpYWxvZ0FzXCIsIFwic2hvd1wiLCBcIm1hbmFnZXJcIiwgXCJhbmltYXRpb25cIiwgXCJiYWNrZHJvcFwiLCBcImtleWJvYXJkXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25TaG93XCIsIFwib25IaWRlXCIsIFwiY29udGFpbmVyXCIsIFwiYXV0b0ZvY3VzXCIsIFwiZW5mb3JjZUZvY3VzXCIsIFwicmVzdG9yZUZvY3VzXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJiYWNrZHJvcENsYXNzTmFtZVwiLCBcImJhY2tkcm9wU3R5bGVcIl0pO1xuXG4gICAgdmFyIGNsaWNrSGFuZGxlciA9IGJhY2tkcm9wID09PSB0cnVlID8gdGhpcy5oYW5kbGVDbGljayA6IG51bGw7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWxDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5tb2RhbENvbnRleHRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VNb2RhbCwge1xuICAgICAgc2hvdzogc2hvdyxcbiAgICAgIGJhY2tkcm9wOiBiYWNrZHJvcCxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAga2V5Ym9hcmQ6IGtleWJvYXJkLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgICBlbmZvcmNlRm9jdXM6IGVuZm9yY2VGb2N1cyxcbiAgICAgIHJlc3RvcmVGb2N1czogcmVzdG9yZUZvY3VzLFxuICAgICAgb25Fc2NhcGVLZXlEb3duOiBvbkVzY2FwZUtleURvd24sXG4gICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgIG9uSGlkZTogb25IaWRlLFxuICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgbWFuYWdlcjogbWFuYWdlcixcbiAgICAgIHJlZjogdGhpcy5zZXRNb2RhbFJlZixcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGUsIHRoaXMuc3RhdGUuc3R5bGUpLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpLFxuICAgICAgY29udGFpbmVyQ2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLW9wZW5cIixcbiAgICAgIHRyYW5zaXRpb246IGFuaW1hdGlvbiA/IERpYWxvZ1RyYW5zaXRpb24gOiB1bmRlZmluZWQsXG4gICAgICBiYWNrZHJvcFRyYW5zaXRpb246IGFuaW1hdGlvbiA/IEJhY2tkcm9wVHJhbnNpdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgIHJlbmRlckJhY2tkcm9wOiB0aGlzLnJlbmRlckJhY2tkcm9wLFxuICAgICAgb25DbGljazogY2xpY2tIYW5kbGVyLFxuICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICBvbkVudGVyOiB0aGlzLmhhbmRsZUVudGVyLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5oYW5kbGVFbnRlcmluZyxcbiAgICAgIG9uRXhpdGVkOiB0aGlzLmhhbmRsZUV4aXRlZFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRGlhbG9nLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZURpYWxvZ01vdXNlRG93bixcbiAgICAgIGNsYXNzTmFtZTogZGlhbG9nQ2xhc3NOYW1lXG4gICAgfSksIGNoaWxkcmVuKSkpO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTW9kYWwuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIERlY29yYXRlZE1vZGFsID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE1vZGFsLCAnbW9kYWwnKTtcbkRlY29yYXRlZE1vZGFsLkJvZHkgPSBCb2R5O1xuRGVjb3JhdGVkTW9kYWwuSGVhZGVyID0gSGVhZGVyO1xuRGVjb3JhdGVkTW9kYWwuVGl0bGUgPSBUaXRsZTtcbkRlY29yYXRlZE1vZGFsLkZvb3RlciA9IEZvb3RlcjtcbkRlY29yYXRlZE1vZGFsLkRpYWxvZyA9IE1vZGFsRGlhbG9nO1xuRGVjb3JhdGVkTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMDtcbkRlY29yYXRlZE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWRNb2RhbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgTmF2SXRlbSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZJdGVtLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZJdGVtKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOYXZJdGVtLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJhc1wiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gTmF2SXRlbTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnZGl2J1xufTtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChOYXZJdGVtLCAnbmF2LWl0ZW0nKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbmltcG9ydCBBYnN0cmFjdE5hdkl0ZW0gZnJvbSAnLi9BYnN0cmFjdE5hdkl0ZW0nO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgYXM6IFNhZmVBbmNob3Jcbn07XG5cbmZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBocmVmID0gX3JlZi5ocmVmLFxuICAgICAgZXZlbnRLZXkgPSBfcmVmLmV2ZW50S2V5LFxuICAgICAgb25TZWxlY3QgPSBfcmVmLm9uU2VsZWN0LFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgYXMgPSBfcmVmLmFzLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJic1ByZWZpeFwiLCBcImRpc2FibGVkXCIsIFwiY2xhc3NOYW1lXCIsIFwiaHJlZlwiLCBcImV2ZW50S2V5XCIsIFwib25TZWxlY3RcIiwgXCJpbm5lclJlZlwiLCBcImFzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChBYnN0cmFjdE5hdkl0ZW0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGhyZWY6IGhyZWYsXG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBldmVudEtleTogZXZlbnRLZXksXG4gICAgYXM6IGFzLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBvblNlbGVjdDogb25TZWxlY3QsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gIH0pKTtcbn1cblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTmF2TGluaywgJ25hdi1saW5rJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgYWxsIGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2FsbCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgdW5jb250cm9sbGFibGUgZnJvbSAndW5jb250cm9sbGFibGUnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBOYXZiYXJDb250ZXh0IGZyb20gJy4vTmF2YmFyQ29udGV4dCc7XG5pbXBvcnQgQ2FyZENvbnRleHQgZnJvbSAnLi9DYXJkQ29udGV4dCc7XG5pbXBvcnQgQWJzdHJhY3ROYXYgZnJvbSAnLi9BYnN0cmFjdE5hdic7XG5pbXBvcnQgTmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xuaW1wb3J0IE5hdkxpbmsgZnJvbSAnLi9OYXZMaW5rJztcblxudmFyIE5hdiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXYsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFzID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIG5hdmJhckJzUHJlZml4ID0gX3RoaXMkcHJvcHMubmF2YmFyQnNQcmVmaXgsXG4gICAgICAgIGNhcmRIZWFkZXJCc1ByZWZpeCA9IF90aGlzJHByb3BzLmNhcmRIZWFkZXJCc1ByZWZpeCxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIGZpbGwgPSBfdGhpcyRwcm9wcy5maWxsLFxuICAgICAgICBqdXN0aWZ5ID0gX3RoaXMkcHJvcHMuanVzdGlmeSxcbiAgICAgICAgbmF2YmFyID0gX3RoaXMkcHJvcHMubmF2YmFyLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGFjdGl2ZUtleSA9IF90aGlzJHByb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiYXNcIiwgXCJic1ByZWZpeFwiLCBcIm5hdmJhckJzUHJlZml4XCIsIFwiY2FyZEhlYWRlckJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcImZpbGxcIiwgXCJqdXN0aWZ5XCIsIFwibmF2YmFyXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJhY3RpdmVLZXlcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWJzdHJhY3ROYXYsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBhcyxcbiAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgKF9jbGFzc05hbWVzID0ge30sIF9jbGFzc05hbWVzW2JzUHJlZml4XSA9ICFuYXZiYXIsIF9jbGFzc05hbWVzW25hdmJhckJzUHJlZml4ICsgXCItbmF2XCJdID0gbmF2YmFyLCBfY2xhc3NOYW1lc1tjYXJkSGVhZGVyQnNQcmVmaXggKyBcIi1cIiArIHZhcmlhbnRdID0gISFjYXJkSGVhZGVyQnNQcmVmaXgsIF9jbGFzc05hbWVzW2JzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50XSA9ICEhdmFyaWFudCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1maWxsXCJdID0gZmlsbCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1qdXN0aWZpZWRcIl0gPSBqdXN0aWZ5LCBfY2xhc3NOYW1lcykpXG4gICAgfSwgcHJvcHMpLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIE5hdjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2LmRlZmF1bHRQcm9wcyA9IHtcbiAganVzdGlmeTogZmFsc2UsXG4gIGZpbGw6IGZhbHNlLFxuICBhczogJ2Rpdidcbn07XG52YXIgVW5jb250cm9sbGVkTmF2ID0gdW5jb250cm9sbGFibGUoY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE5hdiwgJ25hdicpLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7XG52YXIgRGVjb3JhdGVkTmF2ID0gbWFwQ29udGV4dFRvUHJvcHMoW05hdmJhckNvbnRleHQsIENhcmRDb250ZXh0XSwgZnVuY3Rpb24gKG5hdmJhckNvbnRleHQsIGNhcmRDb250ZXh0LCBfcmVmKSB7XG4gIHZhciBuYXZiYXIgPSBfcmVmLm5hdmJhcjtcbiAgaWYgKCFuYXZiYXJDb250ZXh0ICYmICFjYXJkQ29udGV4dCkgcmV0dXJuIHt9O1xuICBpZiAobmF2YmFyQ29udGV4dCkgcmV0dXJuIHtcbiAgICBuYXZiYXJCc1ByZWZpeDogbmF2YmFyQ29udGV4dC5ic1ByZWZpeCxcbiAgICBuYXZiYXI6IG5hdmJhciA9PSBudWxsID8gdHJ1ZSA6IG5hdmJhclxuICB9O1xuICByZXR1cm4ge1xuICAgIGNhcmRIZWFkZXJCc1ByZWZpeDogY2FyZENvbnRleHQuY2FyZEhlYWRlckJzUHJlZml4XG4gIH07XG59LCBVbmNvbnRyb2xsZWROYXYpO1xuRGVjb3JhdGVkTmF2Lkl0ZW0gPSBOYXZJdGVtO1xuRGVjb3JhdGVkTmF2LkxpbmsgPSBOYXZMaW5rO1xuRGVjb3JhdGVkTmF2Ll9OYXYgPSBOYXY7IC8vIGZvciBUZXN0aW5nIHVudGlsIGVuenltZSBpcyB3b3JraW5nIHdpdGggY29udGV4dFxuXG5leHBvcnQgZGVmYXVsdCBEZWNvcmF0ZWROYXY7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIE5hdmJhckJyYW5kID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdmJhckJyYW5kLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJCcmFuZCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2YmFyQnJhbmQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBhcyA9IF90aGlzJHByb3BzLmFzLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImFzXCJdKTtcblxuICAgIHZhciBDb21wb25lbnQgPSBhcyB8fCAocHJvcHMuaHJlZiA/ICdhJyA6ICdzcGFuJyk7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyQnJhbmQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChOYXZiYXJCcmFuZCwgJ25hdmJhci1icmFuZCcpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ29sbGFwc2UgZnJvbSAnLi9Db2xsYXBzZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcblxudmFyIE5hdmJhckNvbGxhcHNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE5hdmJhckNvbGxhcHNlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOYXZiYXJDb2xsYXBzZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTmF2YmFyQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJic1ByZWZpeFwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOYXZiYXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29sbGFwc2UsIF9leHRlbmRzKHtcbiAgICAgICAgaW46ICEhKGNvbnRleHQgJiYgY29udGV4dC5leHBhbmRlZClcbiAgICAgIH0sIHByb3BzKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXhcbiAgICAgIH0sIGNoaWxkcmVuKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhckNvbGxhcHNlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoTmF2YmFyQ29sbGFwc2UsICduYXZiYXItY29sbGFwc2UnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcblxudmFyIE5hdmJhclRvZ2dsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXJUb2dnbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhclRvZ2dsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBvbkNsaWNrID0gX3RoaXMucHJvcHMub25DbGljaztcbiAgICAgIHZhciBvblRvZ2dsZSA9IF90aGlzLm5hdmJhckNvbnRleHQub25Ub2dnbGU7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICAgIGlmIChvblRvZ2dsZSkgb25Ub2dnbGUoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdmJhclRvZ2dsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hpbGRyZW5cIiwgXCJsYWJlbFwiLCBcImFzXCJdKTtcblxuICAgIGlmIChDb21wb25lbnQgPT09ICdidXR0b24nKSB7XG4gICAgICBwcm9wcy50eXBlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIF90aGlzMi5uYXZiYXJDb250ZXh0ID0gY29udGV4dCB8fCB7fTtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IF90aGlzMi5oYW5kbGVDbGljayxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgISEoY29udGV4dCAmJiBjb250ZXh0LmV4cGFuZGVkKSAmJiAnY29sbGFwc2VkJylcbiAgICAgIH0pLCBjaGlsZHJlbiB8fCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1pY29uXCJcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTmF2YmFyVG9nZ2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5OYXZiYXJUb2dnbGUuZGVmYXVsdFByb3BzID0ge1xuICBsYWJlbDogJ1RvZ2dsZSBuYXZpZ2F0aW9uJyxcbiAgYXM6ICdidXR0b24nXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KE5hdmJhclRvZ2dsZSwgJ25hdmJhci10b2dnbGVyJyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBjcmVhdGVXaXRoQnNQcmVmaXggZnJvbSAnLi91dGlscy9jcmVhdGVXaXRoQnNQcmVmaXgnO1xuaW1wb3J0IE5hdmJhckJyYW5kIGZyb20gJy4vTmF2YmFyQnJhbmQnO1xuaW1wb3J0IE5hdmJhckNvbGxhcHNlIGZyb20gJy4vTmF2YmFyQ29sbGFwc2UnO1xuaW1wb3J0IE5hdmJhclRvZ2dsZSBmcm9tICcuL05hdmJhclRvZ2dsZSc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IE5hdmJhckNvbnRleHQgZnJvbSAnLi9OYXZiYXJDb250ZXh0JztcbmltcG9ydCBTZWxlY3RhYmxlQ29udGV4dCBmcm9tICcuL1NlbGVjdGFibGVDb250ZXh0JztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFzOiAnbmF2JyxcbiAgZXhwYW5kOiB0cnVlLFxuICB2YXJpYW50OiAnbGlnaHQnLFxuICBjb2xsYXBzZU9uU2VsZWN0OiBmYWxzZVxufTtcblxudmFyIE5hdmJhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZiYXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5hdmJhcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgX2FyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBfYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KF9hcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZUNvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25Ub2dnbGUgPSBfdGhpcyRwcm9wcy5vblRvZ2dsZSxcbiAgICAgICAgICBleHBhbmRlZCA9IF90aGlzJHByb3BzLmV4cGFuZGVkLFxuICAgICAgICAgIGNvbGxhcHNlT25TZWxlY3QgPSBfdGhpcyRwcm9wcy5jb2xsYXBzZU9uU2VsZWN0LFxuICAgICAgICAgIG9uU2VsZWN0ID0gX3RoaXMkcHJvcHMub25TZWxlY3Q7XG4gICAgICBpZiAob25TZWxlY3QpIG9uU2VsZWN0LmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgaWYgKGNvbGxhcHNlT25TZWxlY3QgJiYgZXhwYW5kZWQpIHtcbiAgICAgICAgb25Ub2dnbGUoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25Ub2dnbGUgPSBfdGhpcyRwcm9wczIub25Ub2dnbGUsXG4gICAgICAgICAgZXhwYW5kZWQgPSBfdGhpcyRwcm9wczIuZXhwYW5kZWQ7XG4gICAgICBvblRvZ2dsZSghZXhwYW5kZWQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hdmJhckNvbnRleHQ6IHtcbiAgICAgICAgb25Ub2dnbGU6IF90aGlzLmhhbmRsZVRvZ2dsZVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgTmF2YmFyLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgICBleHBhbmRlZCA9IF9yZWYuZXhwYW5kZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hdmJhckNvbnRleHQ6IF9leHRlbmRzKHt9LCBwcmV2U3RhdGUubmF2YmFyQ29udGV4dCwge1xuICAgICAgICBic1ByZWZpeDogYnNQcmVmaXgsXG4gICAgICAgIGV4cGFuZGVkOiBleHBhbmRlZFxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBOYXZiYXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMzLmJzUHJlZml4LFxuICAgICAgICBleHBhbmQgPSBfdGhpcyRwcm9wczMuZXhwYW5kLFxuICAgICAgICB2YXJpYW50ID0gX3RoaXMkcHJvcHMzLnZhcmlhbnQsXG4gICAgICAgIGJnID0gX3RoaXMkcHJvcHMzLmJnLFxuICAgICAgICBmaXhlZCA9IF90aGlzJHByb3BzMy5maXhlZCxcbiAgICAgICAgc3RpY2t5ID0gX3RoaXMkcHJvcHMzLnN0aWNreSxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMzLmNsYXNzTmFtZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczMuY2hpbGRyZW4sXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzMy5hcyxcbiAgICAgICAgXzEgPSBfdGhpcyRwcm9wczMuZXhwYW5kZWQsXG4gICAgICAgIF8yID0gX3RoaXMkcHJvcHMzLm9uVG9nZ2xlLFxuICAgICAgICBfMyA9IF90aGlzJHByb3BzMy5vblNlbGVjdCxcbiAgICAgICAgXzQgPSBfdGhpcyRwcm9wczMuY29sbGFwc2VPblNlbGVjdCxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczMsIFtcImJzUHJlZml4XCIsIFwiZXhwYW5kXCIsIFwidmFyaWFudFwiLCBcImJnXCIsIFwiZml4ZWRcIiwgXCJzdGlja3lcIiwgXCJjbGFzc05hbWVcIiwgXCJjaGlsZHJlblwiLCBcImFzXCIsIFwiZXhwYW5kZWRcIiwgXCJvblRvZ2dsZVwiLCBcIm9uU2VsZWN0XCIsIFwiY29sbGFwc2VPblNlbGVjdFwiXSk7IC8vIHdpbGwgcmVzdWx0IGluIHNvbWUgZmFsc2UgcG9zaXRpdmVzIGJ1dCB0aGF0IHNlZW1zIGJldHRlclxuICAgIC8vIHRoYW4gZmFsc2UgbmVnYXRpdmVzLiBzdHJpY3QgYHVuZGVmaW5lZGAgY2hlY2sgYWxsb3dzIGV4cGxpY2l0XG4gICAgLy8gXCJudWxsaW5nXCIgb2YgdGhlIHJvbGUgaWYgdGhlIHVzZXIgcmVhbGx5IGRvZXNuJ3Qgd2FudCBvbmVcblxuXG4gICAgaWYgKHByb3BzLnJvbGUgPT09IHVuZGVmaW5lZCAmJiBDb21wb25lbnQgIT09ICduYXYnKSB7XG4gICAgICBwcm9wcy5yb2xlID0gJ25hdmlnYXRpb24nO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRDbGFzcyA9IGJzUHJlZml4ICsgXCItZXhwYW5kXCI7XG4gICAgaWYgKHR5cGVvZiBleHBhbmQgPT09ICdzdHJpbmcnKSBleHBhbmRDbGFzcyA9IGV4cGFuZENsYXNzICsgXCItXCIgKyBleHBhbmQ7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2YmFyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUubmF2YmFyQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLmhhbmRsZUNvbGxhcHNlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIGV4cGFuZCAmJiBleHBhbmRDbGFzcywgdmFyaWFudCAmJiBic1ByZWZpeCArIFwiLVwiICsgdmFyaWFudCwgYmcgJiYgXCJiZy1cIiArIGJnLCBzdGlja3kgJiYgXCJzdGlja3ktXCIgKyBzdGlja3ksIGZpeGVkICYmIFwiZml4ZWQtXCIgKyBmaXhlZClcbiAgICB9KSwgY2hpbGRyZW4pKSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmJhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTmF2YmFyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBEZWNvcmF0ZWROYXZiYXIgPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQodW5jb250cm9sbGFibGUoTmF2YmFyLCB7XG4gIGV4cGFuZGVkOiAnb25Ub2dnbGUnXG59KSwgJ25hdmJhcicpO1xuRGVjb3JhdGVkTmF2YmFyLkJyYW5kID0gTmF2YmFyQnJhbmQ7XG5EZWNvcmF0ZWROYXZiYXIuVG9nZ2xlID0gTmF2YmFyVG9nZ2xlO1xuRGVjb3JhdGVkTmF2YmFyLkNvbGxhcHNlID0gTmF2YmFyQ29sbGFwc2U7XG5EZWNvcmF0ZWROYXZiYXIuVGV4dCA9IGNyZWF0ZVdpdGhCc1ByZWZpeCgnbmF2YmFyLXRleHQnLCB7XG4gIENvbXBvbmVudDogJ3NwYW4nXG59KTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZE5hdmJhcjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IERyb3Bkb3duIGZyb20gJy4vRHJvcGRvd24nO1xuaW1wb3J0IE5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcbmltcG9ydCBOYXZMaW5rIGZyb20gJy4vTmF2TGluayc7XG5cbnZhciBOYXZEcm9wZG93biA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShOYXZEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTmF2RHJvcGRvd24oKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5hdkRyb3Bkb3duLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGJzUHJlZml4ID0gX3RoaXMkcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIG1lbnVSb2xlID0gX3RoaXMkcHJvcHMubWVudVJvbGUsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIGFjdGl2ZSA9IF90aGlzJHByb3BzLmFjdGl2ZSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaWRcIiwgXCJ0aXRsZVwiLCBcImNoaWxkcmVuXCIsIFwiYnNQcmVmaXhcIiwgXCJyb290Q2xvc2VFdmVudFwiLCBcIm1lbnVSb2xlXCIsIFwiZGlzYWJsZWRcIiwgXCJhY3RpdmVcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IE5hdkl0ZW1cbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5Ub2dnbGUsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIGV2ZW50S2V5OiBudWxsLFxuICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjaGlsZEJzUHJlZml4OiBic1ByZWZpeCxcbiAgICAgIGFzOiBOYXZMaW5rXG4gICAgfSwgdGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bkb3duLk1lbnUsIHtcbiAgICAgIHJvbGU6IG1lbnVSb2xlLFxuICAgICAgcm9vdENsb3NlRXZlbnQ6IHJvb3RDbG9zZUV2ZW50XG4gICAgfSwgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gTmF2RHJvcGRvd247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk5hdkRyb3Bkb3duLkl0ZW0gPSBEcm9wZG93bi5JdGVtO1xuTmF2RHJvcGRvd24uRGl2aWRlciA9IERyb3Bkb3duLkRpdmlkZXI7XG5OYXZEcm9wZG93bi5IZWFkZXIgPSBEcm9wZG93bi5IZWFkZXI7XG5leHBvcnQgZGVmYXVsdCBOYXZEcm9wZG93bjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IEJhc2VPdmVybGF5IGZyb20gJ3JlYWN0LW92ZXJsYXlzL092ZXJsYXknO1xuaW1wb3J0IEZhZGUgZnJvbSAnLi9GYWRlJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHRyYW5zaXRpb246IEZhZGUsXG4gIHJvb3RDbG9zZTogZmFsc2UsXG4gIHNob3c6IGZhbHNlLFxuICBwbGFjZW1lbnQ6ICd0b3AnXG59O1xuXG5mdW5jdGlvbiB3cmFwUmVmcyhwcm9wcywgYXJyb3dQcm9wcykge1xuICB2YXIgcmVmID0gcHJvcHMucmVmO1xuICB2YXIgYVJlZiA9IGFycm93UHJvcHMucmVmO1xuXG4gIHByb3BzLnJlZiA9IHJlZi5fX3dyYXBwZWQgfHwgKHJlZi5fX3dyYXBwZWQgPSBmdW5jdGlvbiAocikge1xuICAgIHJldHVybiByZWYoZmluZERPTU5vZGUocikpO1xuICB9KTtcblxuICBhcnJvd1Byb3BzLnJlZiA9IGFSZWYuX193cmFwcGVkIHx8IChhUmVmLl9fd3JhcHBlZCA9IGZ1bmN0aW9uIChyKSB7XG4gICAgcmV0dXJuIGFSZWYoZmluZERPTU5vZGUocikpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT3ZlcmxheShfcmVmKSB7XG4gIHZhciBvdmVybGF5ID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHRyYW5zaXRpb24gPSBfcmVmLnRyYW5zaXRpb24sXG4gICAgICBvdXRlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiY2hpbGRyZW5cIiwgXCJ0cmFuc2l0aW9uXCJdKTtcblxuICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbiA9PT0gdHJ1ZSA/IEZhZGUgOiB0cmFuc2l0aW9uIHx8IG51bGw7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhc2VPdmVybGF5LCBfZXh0ZW5kcyh7fSwgb3V0ZXJQcm9wcywge1xuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb25cbiAgfSksIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBvdmVybGF5UHJvcHMgPSBfcmVmMi5wcm9wcyxcbiAgICAgICAgYXJyb3dQcm9wcyA9IF9yZWYyLmFycm93UHJvcHMsXG4gICAgICAgIHNob3cgPSBfcmVmMi5zaG93LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJwcm9wc1wiLCBcImFycm93UHJvcHNcIiwgXCJzaG93XCJdKTtcblxuICAgIHdyYXBSZWZzKG92ZXJsYXlQcm9wcywgYXJyb3dQcm9wcyk7XG4gICAgaWYgKHR5cGVvZiBvdmVybGF5ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gb3ZlcmxheShfZXh0ZW5kcyh7fSwgcHJvcHMsIG92ZXJsYXlQcm9wcywge1xuICAgICAgc2hvdzogc2hvdyxcbiAgICAgIGFycm93UHJvcHM6IGFycm93UHJvcHNcbiAgICB9KSk7XG4gICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChvdmVybGF5LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIG92ZXJsYXlQcm9wcywge1xuICAgICAgYXJyb3dQcm9wczogYXJyb3dQcm9wcyxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhvdmVybGF5LnByb3BzLmNsYXNzTmFtZSwgIXRyYW5zaXRpb24gJiYgc2hvdyAmJiAnc2hvdycpLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHt9LCBvdmVybGF5LnByb3BzLnN0eWxlLCBvdmVybGF5UHJvcHMuc3R5bGUpXG4gICAgfSkpO1xuICB9KTtcbn1cblxuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBPdmVybGF5OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjb250YWlucyBmcm9tICdkb20taGVscGVycy9xdWVyeS9jb250YWlucyc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBPdmVybGF5IGZyb20gJy4vT3ZlcmxheSc7XG5cbnZhciBSZWZIb2xkZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUmVmSG9sZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWZIb2xkZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlZkhvbGRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gUmVmSG9sZGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgbm9ybWFsaXplRGVsYXkgPSBmdW5jdGlvbiBub3JtYWxpemVEZWxheShkZWxheSkge1xuICByZXR1cm4gZGVsYXkgJiYgdHlwZW9mIGRlbGF5ID09PSAnb2JqZWN0JyA/IGRlbGF5IDoge1xuICAgIHNob3c6IGRlbGF5LFxuICAgIGhpZGU6IGRlbGF5XG4gIH07XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBkZWZhdWx0T3ZlcmxheVNob3duOiBmYWxzZSxcbiAgdHJpZ2dlcjogWydob3ZlcicsICdmb2N1cyddXG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tbXVsdGktY29tcFxuXG52YXIgT3ZlcmxheVRyaWdnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQyKSB7XG4gIF9pbmhlcml0c0xvb3NlKE92ZXJsYXlUcmlnZ2VyLCBfUmVhY3QkQ29tcG9uZW50Mik7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheVRyaWdnZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQyLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5nZXRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoX3RoaXMudHJpZ2dlci5jdXJyZW50KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlU2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5fdGltZW91dCk7XG4gICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9ICdzaG93JztcbiAgICAgIHZhciBkZWxheSA9IG5vcm1hbGl6ZURlbGF5KF90aGlzLnByb3BzLmRlbGF5KTtcblxuICAgICAgaWYgKCFkZWxheS5zaG93KSB7XG4gICAgICAgIF90aGlzLnNob3coKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5faG92ZXJTdGF0ZSA9PT0gJ3Nob3cnKSBfdGhpcy5zaG93KCk7XG4gICAgICB9LCBkZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChfdGhpcy5fdGltZW91dCk7XG4gICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9ICdoaWRlJztcbiAgICAgIHZhciBkZWxheSA9IG5vcm1hbGl6ZURlbGF5KF90aGlzLnByb3BzLmRlbGF5KTtcblxuICAgICAgaWYgKCFkZWxheS5oaWRlKSB7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5faG92ZXJTdGF0ZSA9PT0gJ2hpZGUnKSBfdGhpcy5oaWRlKCk7XG4gICAgICB9LCBkZWxheS5oaWRlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJGdldENoaWxkUHJvcHMgPSBfdGhpcy5nZXRDaGlsZFByb3BzKCksXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJGdldENoaWxkUHJvcHMub25Gb2N1cztcblxuICAgICAgX3RoaXMuaGFuZGxlU2hvdyhlKTtcblxuICAgICAgaWYgKG9uRm9jdXMpIG9uRm9jdXMoZSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJGdldENoaWxkUHJvcHMyID0gX3RoaXMuZ2V0Q2hpbGRQcm9wcygpLFxuICAgICAgICAgIG9uQmx1ciA9IF90aGlzJGdldENoaWxkUHJvcHMyLm9uQmx1cjtcblxuICAgICAgX3RoaXMuaGFuZGxlSGlkZShlKTtcblxuICAgICAgaWYgKG9uQmx1cikgb25CbHVyKGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgX3RoaXMkZ2V0Q2hpbGRQcm9wczMgPSBfdGhpcy5nZXRDaGlsZFByb3BzKCksXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJGdldENoaWxkUHJvcHMzLm9uQ2xpY2s7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zaG93KSBfdGhpcy5oaWRlKCk7ZWxzZSBfdGhpcy5zaG93KCk7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVTaG93LCBlLCAnZnJvbUVsZW1lbnQnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VPdXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZU1vdXNlT3Zlck91dChfdGhpcy5oYW5kbGVIaWRlLCBlLCAndG9FbGVtZW50Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnRyaWdnZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3c6ICEhcHJvcHMuZGVmYXVsdFNob3dcbiAgICB9OyAvLyBXZSBhZGQgYXJpYS1kZXNjcmliZWRieSBpbiB0aGUgY2FzZSB3aGVyZSB0aGUgb3ZlcmxheSBpcyBhIHJvbGU9XCJ0b29sdGlwXCJcbiAgICAvLyBmb3Igb3RoZXIgY2FzZXMgZGVzY3JpYmVkYnkgaXNuJ3QgYXBwcm9wcmlhdGUgKGUuZy4gYSBwb3BvdmVyIHdpdGggaW5wdXRzKSBzbyB3ZSBkb24ndCBhZGQgaXQuXG5cbiAgICBfdGhpcy5hcmlhTW9kaWZpZXIgPSB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgb3JkZXI6IDkwMCxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihkYXRhKSB7XG4gICAgICAgIHZhciBwb3BwZXIgPSBkYXRhLmluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5zaG93IHx8ICF0YXJnZXQpIHJldHVybiBkYXRhO1xuICAgICAgICB2YXIgcm9sZSA9IHBvcHBlci5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSB8fCAnJztcblxuICAgICAgICBpZiAocG9wcGVyLmlkICYmIHJvbGUudG9Mb3dlckNhc2UoKSA9PT0gJ3Rvb2x0aXAnKSB7XG4gICAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHBvcHBlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gT3ZlcmxheVRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZFByb3BzID0gZnVuY3Rpb24gZ2V0Q2hpbGRQcm9wcygpIHtcbiAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKS5wcm9wcztcbiAgfTtcblxuICAvLyBTaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgbW91c2VFbnRlciBhbmQgbW91c2VMZWF2ZS5cbiAgLy8gUmVhY3QncyBidWlsdCB2ZXJzaW9uIGlzIGJyb2tlbjogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy80MjUxXG4gIC8vIGZvciBjYXNlcyB3aGVuIHRoZSB0cmlnZ2VyIGlzIGRpc2FibGVkIGFuZCBtb3VzZU91dC9PdmVyIGNhbiBjYXVzZSBmbGlja2VyXG4gIC8vIG1vdmluZyBmcm9tIG9uZSBjaGlsZCBlbGVtZW50IHRvIGFub3RoZXIuXG4gIF9wcm90bzIuaGFuZGxlTW91c2VPdmVyT3V0ID0gZnVuY3Rpb24gaGFuZGxlTW91c2VPdmVyT3V0KGhhbmRsZXIsIGUsIHJlbGF0ZWROYXRpdmUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0O1xuICAgIHZhciByZWxhdGVkID0gZS5yZWxhdGVkVGFyZ2V0IHx8IGUubmF0aXZlRXZlbnRbcmVsYXRlZE5hdGl2ZV07XG5cbiAgICBpZiAoKCFyZWxhdGVkIHx8IHJlbGF0ZWQgIT09IHRhcmdldCkgJiYgIWNvbnRhaW5zKHRhcmdldCwgcmVsYXRlZCkpIHtcbiAgICAgIGhhbmRsZXIoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIuaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgdHJpZ2dlciA9IF90aGlzJHByb3BzLnRyaWdnZXIsXG4gICAgICAgIG92ZXJsYXkgPSBfdGhpcyRwcm9wcy5vdmVybGF5LFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfdGhpcyRwcm9wcyRwb3BwZXJDb24gPSBfdGhpcyRwcm9wcy5wb3BwZXJDb25maWcsXG4gICAgICAgIHBvcHBlckNvbmZpZyA9IF90aGlzJHByb3BzJHBvcHBlckNvbiA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRwb3BwZXJDb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcInRyaWdnZXJcIiwgXCJvdmVybGF5XCIsIFwiY2hpbGRyZW5cIiwgXCJwb3BwZXJDb25maWdcIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLmRlbGF5O1xuICAgIGRlbGV0ZSBwcm9wcy5kZWZhdWx0U2hvdztcbiAgICB2YXIgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICB2YXIgdHJpZ2dlclByb3BzID0ge307XG4gICAgdmFyIHRyaWdnZXJzID0gdHJpZ2dlciA9PSBudWxsID8gW10gOiBbXS5jb25jYXQodHJpZ2dlcik7XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignY2xpY2snKSAhPT0gLTEpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkNsaWNrID0gdGhpcy5oYW5kbGVDbGljaztcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignZm9jdXMnKSAhPT0gLTEpIHtcbiAgICAgIHRyaWdnZXJQcm9wcy5vbkZvY3VzID0gdGhpcy5oYW5kbGVTaG93O1xuICAgICAgdHJpZ2dlclByb3BzLm9uQmx1ciA9IHRoaXMuaGFuZGxlSGlkZTtcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignaG92ZXInKSAhPT0gLTEpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHJpZ2dlcnMubGVuZ3RoID49IDEsICdbcmVhY3QtYm9vdHN0cmFwXSBTcGVjaWZ5aW5nIG9ubHkgdGhlIGBcImhvdmVyXCJgIHRyaWdnZXIgbGltaXRzIHRoZSAnICsgJ3Zpc2liaWxpdHkgb2YgdGhlIG92ZXJsYXkgdG8ganVzdCBtb3VzZSB1c2Vycy4gQ29uc2lkZXIgYWxzbyAnICsgJ2luY2x1ZGluZyB0aGUgYFwiZm9jdXNcImAgdHJpZ2dlciBzbyB0aGF0IHRvdWNoIGFuZCBrZXlib2FyZCBvbmx5ICcgKyAndXNlcnMgY2FuIHNlZSB0aGUgb3ZlcmxheSBhcyB3ZWxsLicpIDogdm9pZCAwO1xuICAgICAgdHJpZ2dlclByb3BzLm9uTW91c2VPdmVyID0gdGhpcy5oYW5kbGVNb3VzZU92ZXI7XG4gICAgICB0cmlnZ2VyUHJvcHMub25Nb3VzZU91dCA9IHRoaXMuaGFuZGxlTW91c2VPdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVmSG9sZGVyLCB7XG4gICAgICByZWY6IHRoaXMudHJpZ2dlclxuICAgIH0sIGNsb25lRWxlbWVudChjaGlsZCwgdHJpZ2dlclByb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoT3ZlcmxheSwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBwb3BwZXJDb25maWc6IF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICAgICAgbW9kaWZpZXJzOiBfZXh0ZW5kcyh7fSwgcG9wcGVyQ29uZmlnLm1vZGlmaWVycywge1xuICAgICAgICAgIGFyaWFNb2RpZmllcjogdGhpcy5hcmlhTW9kaWZpZXJcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgc2hvdzogdGhpcy5zdGF0ZS5zaG93LFxuICAgICAgb25IaWRlOiB0aGlzLmhhbmRsZUhpZGUsXG4gICAgICB0YXJnZXQ6IHRoaXMuZ2V0VGFyZ2V0XG4gICAgfSksIG92ZXJsYXkpKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheVRyaWdnZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk92ZXJsYXlUcmlnZ2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IE92ZXJsYXlUcmlnZ2VyOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tbXVsdGktY29tcCAqL1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNhZmVBbmNob3IgZnJvbSAnLi9TYWZlQW5jaG9yJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZTogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgYWN0aXZlTGFiZWw6ICcoY3VycmVudCknXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnZUl0ZW0oX3JlZikge1xuICB2YXIgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGFjdGl2ZUxhYmVsID0gX3JlZi5hY3RpdmVMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYWN0aXZlXCIsIFwiZGlzYWJsZWRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImFjdGl2ZUxhYmVsXCIsIFwiY2hpbGRyZW5cIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSBhY3RpdmUgfHwgZGlzYWJsZWQgPyAnc3BhbicgOiBTYWZlQW5jaG9yO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgJ3BhZ2UtaXRlbScsIHtcbiAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSlcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwicGFnZS1saW5rXCIsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gIH0sIHByb3BzKSwgY2hpbGRyZW4sIGFjdGl2ZSAmJiBhY3RpdmVMYWJlbCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICB9LCBhY3RpdmVMYWJlbCkpKTtcbn1cblBhZ2VJdGVtLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZnVuY3Rpb24gY3JlYXRlQnV0dG9uKG5hbWUsIGRlZmF1bHRWYWx1ZSwgbGFiZWwpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgaWYgKGxhYmVsID09PSB2b2lkIDApIHtcbiAgICBsYWJlbCA9IG5hbWU7XG4gIH1cblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoX2NsYXNzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gX2NsYXNzLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pO1xuXG4gICAgICBkZWxldGUgcHJvcHMuYWN0aXZlO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZUl0ZW0sIHByb3BzLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgICAgIH0sIGNoaWxkcmVuIHx8IGRlZmF1bHRWYWx1ZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgICAgfSwgbGFiZWwpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9jbGFzcztcbiAgfShSZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBuYW1lLCBfdGVtcDtcbn1cblxuZXhwb3J0IHZhciBGaXJzdCA9IGNyZWF0ZUJ1dHRvbignRmlyc3QnLCBcIlxceEFCXCIpO1xuZXhwb3J0IHZhciBQcmV2ID0gY3JlYXRlQnV0dG9uKCdQcmV2JywgXCJcXHUyMDM5XCIsICdQcmV2aW91cycpO1xuZXhwb3J0IHZhciBFbGxpcHNpcyA9IGNyZWF0ZUJ1dHRvbignRWxsaXBzaXMnLCBcIlxcdTIwMjZcIiwgJ01vcmUnKTtcbmV4cG9ydCB2YXIgTmV4dCA9IGNyZWF0ZUJ1dHRvbignTmV4dCcsIFwiXFx1MjAzQVwiKTtcbmV4cG9ydCB2YXIgTGFzdCA9IGNyZWF0ZUJ1dHRvbignTGFzdCcsIFwiXFx4QkJcIik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCBQYWdlSXRlbSwgeyBGaXJzdCwgUHJldiwgRWxsaXBzaXMsIE5leHQsIExhc3QgfSBmcm9tICcuL1BhZ2VJdGVtJztcbi8qKlxuICogQHByb3BlcnR5IHtQYWdlSXRlbX0gSXRlbVxuICogQHByb3BlcnR5IHtQYWdlSXRlbX0gRmlyc3RcbiAqIEBwcm9wZXJ0eSB7UGFnZUl0ZW19IFByZXZcbiAqIEBwcm9wZXJ0eSB7UGFnZUl0ZW19IEVsbGlwc2lzXG4gKiBAcHJvcGVydHkge1BhZ2VJdGVtfSBOZXh0XG4gKiBAcHJvcGVydHkge1BhZ2VJdGVtfSBMYXN0XG4gKi9cblxudmFyIFBhZ2luYXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUGFnaW5hdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGFnaW5hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHNpemUgPSBfdGhpcyRwcm9wcy5zaXplLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwic2l6ZVwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIHNpemUgJiYgYnNQcmVmaXggKyBcIi1cIiArIHNpemUpXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gUGFnaW5hdGlvbjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxudmFyIERlY29yYXRlZFBhZ2luYXRpb24gPSBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoUGFnaW5hdGlvbiwgJ3BhZ2luYXRpb24nKTtcbkRlY29yYXRlZFBhZ2luYXRpb24uRmlyc3QgPSBGaXJzdDtcbkRlY29yYXRlZFBhZ2luYXRpb24uUHJldiA9IFByZXY7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkVsbGlwc2lzID0gRWxsaXBzaXM7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkl0ZW0gPSBQYWdlSXRlbTtcbkRlY29yYXRlZFBhZ2luYXRpb24uTmV4dCA9IE5leHQ7XG5EZWNvcmF0ZWRQYWdpbmF0aW9uLkxhc3QgPSBMYXN0O1xuZXhwb3J0IGRlZmF1bHQgRGVjb3JhdGVkUGFnaW5hdGlvbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbmZ1bmN0aW9uIFBvcG92ZXIoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIHRpdGxlID0gX3JlZi50aXRsZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGFycm93UHJvcHMgPSBfcmVmLmFycm93UHJvcHMsXG4gICAgICBfID0gX3JlZi5zY2hlZHVsZVVwZGF0ZSxcbiAgICAgIF8xID0gX3JlZi5vdXRPZkJvdW5kYXJpZXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5uZXJSZWZcIiwgXCJwbGFjZW1lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcInRpdGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJhcnJvd1Byb3BzXCIsIFwic2NoZWR1bGVVcGRhdGVcIiwgXCJvdXRPZkJvdW5kYXJpZXNcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcInRvb2x0aXBcIixcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBcIngtcGxhY2VtZW50XCI6IHBsYWNlbWVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgXCJicy1wb3BvdmVyLVwiICsgcGxhY2VtZW50KVxuICB9LCBwcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogXCJhcnJvd1wiXG4gIH0sIGFycm93UHJvcHMpKSwgdGl0bGUgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWhlYWRlciBoM1wiXG4gIH0sIHRpdGxlKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBic1ByZWZpeCArIFwiLWJvZHlcIlxuICB9LCBjaGlsZHJlbikpO1xufVxuXG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChQb3BvdmVyLCAncG9wb3ZlcicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IGNsb25lRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL3V0aWxzL0VsZW1lbnRDaGlsZHJlbic7XG52YXIgUk9VTkRfUFJFQ0lTSU9OID0gMTAwMDtcbi8qKlxuICogVmFsaWRhdGUgdGhhdCBjaGlsZHJlbiwgaWYgYW55LCBhcmUgaW5zdGFuY2VzIG9mIGA8UHJvZ3Jlc3NCYXI+YC5cbiAqL1xuXG5mdW5jdGlvbiBvbmx5UHJvZ3Jlc3NCYXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXJyb3IgPSBudWxsO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcGFyZSB0eXBlcyBpbiBhIHdheSB0aGF0IHdvcmtzIHdpdGggbGlicmFyaWVzIHRoYXQgcGF0Y2ggYW5kIHByb3h5XG4gICAgICogY29tcG9uZW50cyBsaWtlIHJlYWN0LWhvdC1sb2FkZXIuXG4gICAgICpcbiAgICAgKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dhZWFyb24vcmVhY3QtaG90LWxvYWRlciNjaGVja2luZy1lbGVtZW50LXR5cGVzXG4gICAgICovXG5cblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChEZWNvcmF0ZWRQcm9ncmVzc0JhciwgbnVsbCk7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IGVsZW1lbnQudHlwZSkgcmV0dXJuO1xuICAgIHZhciBjaGlsZElkZW50aWZpZXIgPSBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgPyBjaGlsZC50eXBlLmRpc3BsYXlOYW1lIHx8IGNoaWxkLnR5cGUubmFtZSB8fCBjaGlsZC50eXBlIDogY2hpbGQ7XG4gICAgZXJyb3IgPSBuZXcgRXJyb3IoXCJDaGlsZHJlbiBvZiBcIiArIGNvbXBvbmVudE5hbWUgKyBcIiBjYW4gY29udGFpbiBvbmx5IFByb2dyZXNzQmFyIFwiICsgKFwiY29tcG9uZW50cy4gRm91bmQgXCIgKyBjaGlsZElkZW50aWZpZXIgKyBcIi5cIikpO1xuICB9KTtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBtaW46IDAsXG4gIG1heDogMTAwLFxuICBhbmltYXRlZDogZmFsc2UsXG4gIGlzQ2hpbGQ6IGZhbHNlLFxuICBzck9ubHk6IGZhbHNlLFxuICBzdHJpcGVkOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZ2V0UGVyY2VudGFnZShub3csIG1pbiwgbWF4KSB7XG4gIHZhciBwZXJjZW50YWdlID0gKG5vdyAtIG1pbikgLyAobWF4IC0gbWluKSAqIDEwMDtcbiAgcmV0dXJuIE1hdGgucm91bmQocGVyY2VudGFnZSAqIFJPVU5EX1BSRUNJU0lPTikgLyBST1VORF9QUkVDSVNJT047XG59XG5cbnZhciBQcm9ncmVzc0JhciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShQcm9ncmVzc0JhciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvZ3Jlc3NCYXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb2dyZXNzQmFyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiByZW5kZXJQcm9ncmVzc0JhcihfcmVmKSB7XG4gICAgdmFyIF9jbGFzc05hbWVzO1xuXG4gICAgdmFyIG1pbiA9IF9yZWYubWluLFxuICAgICAgICBub3cgPSBfcmVmLm5vdyxcbiAgICAgICAgbWF4ID0gX3JlZi5tYXgsXG4gICAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgICAgc3JPbmx5ID0gX3JlZi5zck9ubHksXG4gICAgICAgIHN0cmlwZWQgPSBfcmVmLnN0cmlwZWQsXG4gICAgICAgIGFuaW1hdGVkID0gX3JlZi5hbmltYXRlZCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgICAgdmFyaWFudCA9IF9yZWYudmFyaWFudCxcbiAgICAgICAgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcIm1pblwiLCBcIm5vd1wiLCBcIm1heFwiLCBcImxhYmVsXCIsIFwic3JPbmx5XCIsIFwic3RyaXBlZFwiLCBcImFuaW1hdGVkXCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJ2YXJpYW50XCIsIFwiYnNQcmVmaXhcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcInByb2dyZXNzYmFyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCArIFwiLWJhclwiLCAoX2NsYXNzTmFtZXMgPSB7fSwgX2NsYXNzTmFtZXNbXCJiZy1cIiArIHZhcmlhbnRdID0gdmFyaWFudCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1iYXItYW5pbWF0ZWRcIl0gPSBhbmltYXRlZCwgX2NsYXNzTmFtZXNbYnNQcmVmaXggKyBcIi1iYXItc3RyaXBlZFwiXSA9IGFuaW1hdGVkIHx8IHN0cmlwZWQsIF9jbGFzc05hbWVzKSksXG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICB3aWR0aDogZ2V0UGVyY2VudGFnZShub3csIG1pbiwgbWF4KSArIFwiJVwiXG4gICAgICB9LCBzdHlsZSksXG4gICAgICBcImFyaWEtdmFsdWVub3dcIjogbm93LFxuICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IG1pbixcbiAgICAgIFwiYXJpYS12YWx1ZW1heFwiOiBtYXhcbiAgICB9KSwgc3JPbmx5ID8gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcInNyLW9ubHlcIlxuICAgIH0sIGxhYmVsKSA6IGxhYmVsKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzQ2hpbGQgPSBfdGhpcyRwcm9wcy5pc0NoaWxkLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJpc0NoaWxkXCJdKTtcblxuICAgIGlmIChpc0NoaWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcihwcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIG1pbiA9IHByb3BzLm1pbixcbiAgICAgICAgbm93ID0gcHJvcHMubm93LFxuICAgICAgICBtYXggPSBwcm9wcy5tYXgsXG4gICAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICAgIHNyT25seSA9IHByb3BzLnNyT25seSxcbiAgICAgICAgc3RyaXBlZCA9IHByb3BzLnN0cmlwZWQsXG4gICAgICAgIGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgIGJzUHJlZml4ID0gcHJvcHMuYnNQcmVmaXgsXG4gICAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJtaW5cIiwgXCJub3dcIiwgXCJtYXhcIiwgXCJsYWJlbFwiLCBcInNyT25seVwiLCBcInN0cmlwZWRcIiwgXCJhbmltYXRlZFwiLCBcImJzUHJlZml4XCIsIFwidmFyaWFudFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCB3cmFwcGVyUHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICAgIH0pLCBjaGlsZHJlbiA/IG1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGlzQ2hpbGQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pIDogdGhpcy5yZW5kZXJQcm9ncmVzc0Jhcih7XG4gICAgICBtaW46IG1pbixcbiAgICAgIG5vdzogbm93LFxuICAgICAgbWF4OiBtYXgsXG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBzck9ubHk6IHNyT25seSxcbiAgICAgIHN0cmlwZWQ6IHN0cmlwZWQsXG4gICAgICBhbmltYXRlZDogYW5pbWF0ZWQsXG4gICAgICBic1ByZWZpeDogYnNQcmVmaXgsXG4gICAgICB2YXJpYW50OiB2YXJpYW50XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBQcm9ncmVzc0Jhcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvZ3Jlc3NCYXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIERlY29yYXRlZFByb2dyZXNzQmFyID0gY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFByb2dyZXNzQmFyLCAncHJvZ3Jlc3MnKTtcbmV4cG9ydCBkZWZhdWx0IERlY29yYXRlZFByb2dyZXNzQmFyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBhc3BlY3RSYXRpbzogJzFieTEnXG59O1xuXG52YXIgUmVzcG9uc2l2ZUVtYmVkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJlc3BvbnNpdmVFbWJlZCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVzcG9uc2l2ZUVtYmVkKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZXNwb25zaXZlRW1iZWQucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBhc3BlY3RSYXRpbyA9IF90aGlzJHByb3BzLmFzcGVjdFJhdGlvLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcImNoaWxkcmVuXCIsIFwiYXNwZWN0UmF0aW9cIl0pO1xuXG4gICAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoYnNQcmVmaXgsIGNsYXNzTmFtZSwgYXNwZWN0UmF0aW8gJiYgYnNQcmVmaXggKyBcIi1cIiArIGFzcGVjdFJhdGlvKVxuICAgIH0pLCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjaGlsZC5wcm9wcy5jbGFzc05hbWUsIGJzUHJlZml4ICsgXCItaXRlbVwiKVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUmVzcG9uc2l2ZUVtYmVkO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZXNwb25zaXZlRW1iZWQuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFJlc3BvbnNpdmVFbWJlZCwgJ2VtYmVkLXJlc3BvbnNpdmUnKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgUm93ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm93KCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3cucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgbm9HdXR0ZXJzID0gX3RoaXMkcHJvcHMubm9HdXR0ZXJzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcIm5vR3V0dGVyc1wiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgbm9HdXR0ZXJzICYmICduby1ndXR0ZXJzJylcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXM6ICdkaXYnLFxuICBub0d1dHRlcnM6IGZhbHNlXG59O1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFJvdywgJ3JvdycpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcbmltcG9ydCBCdXR0b25Hcm91cCBmcm9tICcuL0J1dHRvbkdyb3VwJztcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duJztcbi8qKlxuICogQGluaGVyaXRzIEJ1dHRvbiwgRHJvcGRvd25cbiAqL1xuXG52YXIgU3BsaXRCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3BsaXRCdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNwbGl0QnV0dG9uKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTcGxpdEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHRpdGxlID0gX3RoaXMkcHJvcHMudGl0bGUsXG4gICAgICAgIHRvZ2dsZUxhYmVsID0gX3RoaXMkcHJvcHMudG9nZ2xlTGFiZWwsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkNsaWNrLFxuICAgICAgICBocmVmID0gX3RoaXMkcHJvcHMuaHJlZixcbiAgICAgICAgdGFyZ2V0ID0gX3RoaXMkcHJvcHMudGFyZ2V0LFxuICAgICAgICBtZW51Um9sZSA9IF90aGlzJHByb3BzLm1lbnVSb2xlLFxuICAgICAgICByb290Q2xvc2VFdmVudCA9IF90aGlzJHByb3BzLnJvb3RDbG9zZUV2ZW50LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJpZFwiLCBcImJzUHJlZml4XCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJ0aXRsZVwiLCBcInRvZ2dsZUxhYmVsXCIsIFwiY2hpbGRyZW5cIiwgXCJvbkNsaWNrXCIsIFwiaHJlZlwiLCBcInRhcmdldFwiLCBcIm1lbnVSb2xlXCIsIFwicm9vdENsb3NlRXZlbnRcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgYXM6IEJ1dHRvbkdyb3VwXG4gICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uLCB7XG4gICAgICBzaXplOiBzaXplLFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGJzUHJlZml4OiBic1ByZWZpeCxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICB9LCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHJvcGRvd24uVG9nZ2xlLCB7XG4gICAgICBzcGxpdDogdHJ1ZSxcbiAgICAgIGlkOiBpZCxcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICB2YXJpYW50OiB2YXJpYW50LFxuICAgICAgZGlzYWJsZWQ6IHByb3BzLmRpc2FibGVkLFxuICAgICAgY2hpbGRCc1ByZWZpeDogYnNQcmVmaXhcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwic3Itb25seVwiXG4gICAgfSwgdG9nZ2xlTGFiZWwpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wZG93bi5NZW51LCB7XG4gICAgICByb2xlOiBtZW51Um9sZSxcbiAgICAgIHJvb3RDbG9zZUV2ZW50OiByb290Q2xvc2VFdmVudFxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFNwbGl0QnV0dG9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TcGxpdEJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHRvZ2dsZUxhYmVsOiAnVG9nZ2xlIGRyb3Bkb3duJ1xufTtcbmV4cG9ydCBkZWZhdWx0IFNwbGl0QnV0dG9uOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVuY29udHJvbGxhYmxlIGZyb20gJ3VuY29udHJvbGxhYmxlJztcbmltcG9ydCBUYWJDb250ZXh0IGZyb20gJy4vVGFiQ29udGV4dCc7XG5pbXBvcnQgU2VsZWN0YWJsZUNvbnRleHQgZnJvbSAnLi9TZWxlY3RhYmxlQ29udGV4dCc7XG5cbnZhciBUYWJDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiQ29udGFpbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJDb250YWluZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5nZXRDb250cm9sbGVkSWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMuZ2V0S2V5KGtleSwgJ3RhYnBhbmUnKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuZ2V0Q29udHJvbGxlcklkID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzLmdldEtleShrZXksICd0YWInKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICB0YWJDb250ZXh0OiB7XG4gICAgICAgIG9uU2VsZWN0OiBfdGhpcy5wcm9wcy5vblNlbGVjdCxcbiAgICAgICAgYWN0aXZlS2V5OiBfdGhpcy5wcm9wcy5hY3RpdmVLZXksXG4gICAgICAgIHRyYW5zaXRpb246IF90aGlzLnByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIG1vdW50T25FbnRlcjogX3RoaXMucHJvcHMubW91bnRPbkVudGVyLFxuICAgICAgICB1bm1vdW50T25FeGl0OiBfdGhpcy5wcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBnZXRDb250cm9sbGVkSWQ6IF90aGlzLmdldENvbnRyb2xsZWRJZCxcbiAgICAgICAgZ2V0Q29udHJvbGxlcklkOiBfdGhpcy5nZXRDb250cm9sbGVySWRcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRhYkNvbnRhaW5lci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIGFjdGl2ZUtleSA9IF9yZWYuYWN0aXZlS2V5LFxuICAgICAgICBtb3VudE9uRW50ZXIgPSBfcmVmLm1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdCA9IF9yZWYudW5tb3VudE9uRXhpdCxcbiAgICAgICAgdHJhbnNpdGlvbiA9IF9yZWYudHJhbnNpdGlvbjtcbiAgICByZXR1cm4ge1xuICAgICAgdGFiQ29udGV4dDogX2V4dGVuZHMoe30sIHByZXZTdGF0ZS50YWJDb250ZXh0LCB7XG4gICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5LFxuICAgICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdW5tb3VudE9uRXhpdCxcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvblxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIHZhciBfcHJvdG8gPSBUYWJDb250YWluZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRLZXkgPSBmdW5jdGlvbiBnZXRLZXkoa2V5LCB0eXBlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZ2VuZXJhdGVDaGlsZElkID0gX3RoaXMkcHJvcHMuZ2VuZXJhdGVDaGlsZElkLFxuICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkO1xuICAgIGlmIChnZW5lcmF0ZUNoaWxkSWQpIHJldHVybiBnZW5lcmF0ZUNoaWxkSWQoa2V5LCB0eXBlKTtcbiAgICByZXR1cm4gaWQgPyBpZCArIFwiLVwiICsgdHlwZSArIFwiLVwiICsga2V5IDogbnVsbDtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wczIub25TZWxlY3Q7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUudGFiQ29udGV4dFxuICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0YWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBvblNlbGVjdFxuICAgIH0sIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYkNvbnRhaW5lcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgdW5jb250cm9sbGFibGUoVGFiQ29udGFpbmVyLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcblxudmFyIFRhYkNvbnRlbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFiQ29udGVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiQ29udGVudCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFiQ29udGVudC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5hcyxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImFzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeClcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYkNvbnRlbnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRhYkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhczogJ2Rpdidcbn07XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoVGFiQ29udGVudCwgJ3RhYi1jb250ZW50Jyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1hcENvbnRleHRUb1Byb3BzIGZyb20gJ3JlYWN0LWNvbnRleHQtdG9vbGJveC9tYXBDb250ZXh0VG9Qcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IFRhYkNvbnRleHQgZnJvbSAnLi9UYWJDb250ZXh0JztcbmltcG9ydCBTZWxlY3RhYmxlQ29udGV4dCwgeyBtYWtlRXZlbnRLZXkgfSBmcm9tICcuL1NlbGVjdGFibGVDb250ZXh0JztcbmltcG9ydCBGYWRlIGZyb20gJy4vRmFkZSc7XG5cbnZhciBUYWJQYW5lID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRhYlBhbmUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYlBhbmUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRhYlBhbmUucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYnNQcmVmaXggPSBfdGhpcyRwcm9wcy5ic1ByZWZpeCxcbiAgICAgICAgYWN0aXZlID0gX3RoaXMkcHJvcHMuYWN0aXZlLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIG9uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgb25FbnRlcmVkID0gX3RoaXMkcHJvcHMub25FbnRlcmVkLFxuICAgICAgICBvbkV4aXQgPSBfdGhpcyRwcm9wcy5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgbW91bnRPbkVudGVyID0gX3RoaXMkcHJvcHMubW91bnRPbkVudGVyLFxuICAgICAgICB1bm1vdW50T25FeGl0ID0gX3RoaXMkcHJvcHMudW5tb3VudE9uRXhpdCxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIF90aGlzJHByb3BzJGFzID0gX3RoaXMkcHJvcHMuYXMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzJGFzID09PSB2b2lkIDAgPyAnZGl2JyA6IF90aGlzJHByb3BzJGFzLFxuICAgICAgICBfID0gX3RoaXMkcHJvcHMuZXZlbnRLZXksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImJzUHJlZml4XCIsIFwiYWN0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvbkV4aXRlZFwiLCBcIm1vdW50T25FbnRlclwiLCBcInVubW91bnRPbkV4aXRcIiwgXCJ0cmFuc2l0aW9uXCIsIFwiYXNcIiwgXCJldmVudEtleVwiXSk7XG5cbiAgICBpZiAoIWFjdGl2ZSAmJiB1bm1vdW50T25FeGl0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgcGFuZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHJvbGU6IFwidGFicGFuZWxcIixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogIWFjdGl2ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCB7XG4gICAgICAgIGFjdGl2ZTogYWN0aXZlXG4gICAgICB9KVxuICAgIH0pKTtcbiAgICBpZiAoVHJhbnNpdGlvbikgcGFuZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgaW46IGFjdGl2ZSxcbiAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgb25FbnRlcmVkOiBvbkVudGVyZWQsXG4gICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgIG9uRXhpdGluZzogb25FeGl0aW5nLFxuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLFxuICAgICAgbW91bnRPbkVudGVyOiBtb3VudE9uRW50ZXIsXG4gICAgICB1bm1vdW50T25FeGl0OiBtb3VudE9uRW50ZXJcbiAgICB9LCBwYW5lKTsgLy8gV2UgcHJvdmlkZSBhbiBlbXB0eSB0aGUgVGFiQ29udGV4dCBzbyBgPE5hdj5gcyBpbiBgPFRhYlBhbmU+YHMgZG9uJ3RcbiAgICAvLyBjb25mbGljdCB3aXRoIHRoZSB0b3AgbGV2ZWwgb25lLlxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IG51bGxcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbGVjdGFibGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogbnVsbFxuICAgIH0sIHBhbmUpKTtcbiAgfTtcblxuICByZXR1cm4gVGFiUGFuZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgbWFwQ29udGV4dFRvUHJvcHMoVGFiQ29udGV4dCwgZnVuY3Rpb24gKGNvbnRleHQsIHByb3BzKSB7XG4gIGlmICghY29udGV4dCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGFjdGl2ZUtleSA9IGNvbnRleHQuYWN0aXZlS2V5LFxuICAgICAgZ2V0Q29udHJvbGxlZElkID0gY29udGV4dC5nZXRDb250cm9sbGVkSWQsXG4gICAgICBnZXRDb250cm9sbGVySWQgPSBjb250ZXh0LmdldENvbnRyb2xsZXJJZCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShjb250ZXh0LCBbXCJhY3RpdmVLZXlcIiwgXCJnZXRDb250cm9sbGVkSWRcIiwgXCJnZXRDb250cm9sbGVySWRcIl0pO1xuXG4gIHZhciBzaG91bGRUcmFuc2l0aW9uID0gcHJvcHMudHJhbnNpdGlvbiAhPT0gZmFsc2UgJiYgcmVzdC50cmFuc2l0aW9uICE9PSBmYWxzZTtcbiAgdmFyIGtleSA9IG1ha2VFdmVudEtleShwcm9wcy5ldmVudEtleSk7XG4gIHJldHVybiB7XG4gICAgYWN0aXZlOiBwcm9wcy5hY3RpdmUgPT0gbnVsbCAmJiBrZXkgIT0gbnVsbCA/IG1ha2VFdmVudEtleShhY3RpdmVLZXkpID09PSBrZXkgOiBwcm9wcy5hY3RpdmUsXG4gICAgaWQ6IGdldENvbnRyb2xsZWRJZChwcm9wcy5ldmVudEtleSksXG4gICAgJ2FyaWEtbGFiZWxsZWRieSc6IGdldENvbnRyb2xsZXJJZChwcm9wcy5ldmVudEtleSksXG4gICAgdHJhbnNpdGlvbjogc2hvdWxkVHJhbnNpdGlvbiAmJiAocHJvcHMudHJhbnNpdGlvbiB8fCByZXN0LnRyYW5zaXRpb24gfHwgRmFkZSksXG4gICAgbW91bnRPbkVudGVyOiBwcm9wcy5tb3VudE9uRW50ZXIgIT0gbnVsbCA/IHByb3BzLm1vdW50T25FbnRlciA6IHJlc3QubW91bnRPbkVudGVyLFxuICAgIHVubW91bnRPbkV4aXQ6IHByb3BzLnVubW91bnRPbkV4aXQgIT0gbnVsbCA/IHByb3BzLnVubW91bnRPbkV4aXQgOiByZXN0LnVubW91bnRPbkV4aXRcbiAgfTtcbn0sIGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudChUYWJQYW5lLCAndGFiLXBhbmUnKSk7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRhYkNvbnRhaW5lciBmcm9tICcuL1RhYkNvbnRhaW5lcic7XG5pbXBvcnQgVGFiQ29udGVudCBmcm9tICcuL1RhYkNvbnRlbnQnO1xuaW1wb3J0IFRhYlBhbmUgZnJvbSAnLi9UYWJQYW5lJztcbi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3JlcXVpcmUtcmVuZGVyLXJldHVybiwgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXMgKi9cblxudmFyIFRhYiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUYWIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYigpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFiLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RCb290c3RyYXA6IFRoZSBgVGFiYCBjb21wb25lbnQgaXMgbm90IG1lYW50IHRvIGJlIHJlbmRlcmVkISAnICsgXCJJdCdzIGFuIGFic3RyYWN0IGNvbXBvbmVudCB0aGF0IGlzIG9ubHkgdmFsaWQgYXMgYSBkaXJlY3QgQ2hpbGQgb2YgdGhlIGBUYWJzYCBDb21wb25lbnQuIFwiICsgJ0ZvciBjdXN0b20gdGFicyBjb21wb25lbnRzIHVzZSBUYWJQYW5lIGFuZCBUYWJzQ29udGFpbmVyIGRpcmVjdGx5Jyk7XG4gIH07XG5cbiAgcmV0dXJuIFRhYjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFiLkNvbnRhaW5lciA9IFRhYkNvbnRhaW5lcjtcblRhYi5Db250ZW50ID0gVGFiQ29udGVudDtcblRhYi5QYW5lID0gVGFiUGFuZTtcbmV4cG9ydCBkZWZhdWx0IFRhYjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuXG52YXIgVGFibGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFibGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYmxlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUYWJsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBic1ByZWZpeCA9IF90aGlzJHByb3BzLmJzUHJlZml4LFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIHN0cmlwZWQgPSBfdGhpcyRwcm9wcy5zdHJpcGVkLFxuICAgICAgICBib3JkZXJlZCA9IF90aGlzJHByb3BzLmJvcmRlcmVkLFxuICAgICAgICBob3ZlciA9IF90aGlzJHByb3BzLmhvdmVyLFxuICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgIHJlc3BvbnNpdmUgPSBfdGhpcyRwcm9wcy5yZXNwb25zaXZlLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJic1ByZWZpeFwiLCBcImNsYXNzTmFtZVwiLCBcInN0cmlwZWRcIiwgXCJib3JkZXJlZFwiLCBcImhvdmVyXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIiwgXCJyZXNwb25zaXZlXCJdKTtcblxuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lcyhic1ByZWZpeCwgY2xhc3NOYW1lLCB2YXJpYW50ICYmIGJzUHJlZml4ICsgXCItXCIgKyB2YXJpYW50LCBzaXplICYmIGJzUHJlZml4ICsgXCItXCIgKyBzaXplLCBzdHJpcGVkICYmIGJzUHJlZml4ICsgXCItc3RyaXBlZFwiLCBib3JkZXJlZCAmJiBic1ByZWZpeCArIFwiLWJvcmRlcmVkXCIsIGhvdmVyICYmIGJzUHJlZml4ICsgXCItaG92ZXJcIik7XG4gICAgdmFyIHRhYmxlID0gUmVhY3QuY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gICAgfSkpO1xuXG4gICAgaWYgKHJlc3BvbnNpdmUpIHtcbiAgICAgIHZhciByZXNwb25zaXZlQ2xhc3MgPSBic1ByZWZpeCArIFwiLXJlc3BvbnNpdmVcIjtcblxuICAgICAgaWYgKHR5cGVvZiByZXNwb25zaXZlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXNwb25zaXZlQ2xhc3MgPSByZXNwb25zaXZlQ2xhc3MgKyBcIi1cIiArIHJlc3BvbnNpdmU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiByZXNwb25zaXZlQ2xhc3NcbiAgICAgIH0sIHRhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGU7XG4gIH07XG5cbiAgcmV0dXJuIFRhYmxlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb290c3RyYXBDb21wb25lbnQoVGFibGUsICd0YWJsZScpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgTmF2IGZyb20gJy4vTmF2JztcbmltcG9ydCBOYXZMaW5rIGZyb20gJy4vTmF2TGluayc7XG5pbXBvcnQgTmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xuaW1wb3J0IFVuY29udHJvbGxlZFRhYkNvbnRhaW5lciBmcm9tICcuL1RhYkNvbnRhaW5lcic7XG5pbXBvcnQgVGFiQ29udGVudCBmcm9tICcuL1RhYkNvbnRlbnQnO1xuaW1wb3J0IFRhYlBhbmUgZnJvbSAnLi9UYWJQYW5lJztcbmltcG9ydCB7IGZvckVhY2gsIG1hcCB9IGZyb20gJy4vdXRpbHMvRWxlbWVudENoaWxkcmVuJztcbnZhciBUYWJDb250YWluZXIgPSBVbmNvbnRyb2xsZWRUYWJDb250YWluZXIuQ29udHJvbGxlZENvbXBvbmVudDtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHZhcmlhbnQ6ICd0YWJzJyxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBY3RpdmVLZXkoY2hpbGRyZW4pIHtcbiAgdmFyIGRlZmF1bHRBY3RpdmVLZXk7XG4gIGZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChkZWZhdWx0QWN0aXZlS2V5ID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRBY3RpdmVLZXkgPSBjaGlsZC5wcm9wcy5ldmVudEtleTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVmYXVsdEFjdGl2ZUtleTtcbn1cblxudmFyIFRhYnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVGFicywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFicygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVGFicy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlclRhYiA9IGZ1bmN0aW9uIHJlbmRlclRhYihjaGlsZCkge1xuICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgdGl0bGUgPSBfY2hpbGQkcHJvcHMudGl0bGUsXG4gICAgICAgIGV2ZW50S2V5ID0gX2NoaWxkJHByb3BzLmV2ZW50S2V5LFxuICAgICAgICBkaXNhYmxlZCA9IF9jaGlsZCRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgdGFiQ2xhc3NOYW1lID0gX2NoaWxkJHByb3BzLnRhYkNsYXNzTmFtZTtcblxuICAgIGlmICh0aXRsZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOYXZJdGVtLCB7XG4gICAgICBhczogTmF2TGluayxcbiAgICAgIGV2ZW50S2V5OiBldmVudEtleSxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIGNsYXNzTmFtZTogdGFiQ2xhc3NOYW1lXG4gICAgfSwgdGl0bGUpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgb25TZWxlY3QgPSBfdGhpcyRwcm9wcy5vblNlbGVjdCxcbiAgICAgICAgdHJhbnNpdGlvbiA9IF90aGlzJHByb3BzLnRyYW5zaXRpb24sXG4gICAgICAgIG1vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgdW5tb3VudE9uRXhpdCA9IF90aGlzJHByb3BzLnVubW91bnRPbkV4aXQsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIF90aGlzJHByb3BzJGFjdGl2ZUtleSA9IF90aGlzJHByb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgYWN0aXZlS2V5ID0gX3RoaXMkcHJvcHMkYWN0aXZlS2V5ID09PSB2b2lkIDAgPyBnZXREZWZhdWx0QWN0aXZlS2V5KGNoaWxkcmVuKSA6IF90aGlzJHByb3BzJGFjdGl2ZUtleSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaWRcIiwgXCJvblNlbGVjdFwiLCBcInRyYW5zaXRpb25cIiwgXCJtb3VudE9uRW50ZXJcIiwgXCJ1bm1vdW50T25FeGl0XCIsIFwiY2hpbGRyZW5cIiwgXCJhY3RpdmVLZXlcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiQ29udGFpbmVyLCB7XG4gICAgICBpZDogaWQsXG4gICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleSxcbiAgICAgIG9uU2VsZWN0OiBvblNlbGVjdCxcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgICBtb3VudE9uRW50ZXI6IG1vdW50T25FbnRlcixcbiAgICAgIHVubW91bnRPbkV4aXQ6IHVubW91bnRPbkV4aXRcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KE5hdiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByb2xlOiBcInRhYmxpc3RcIixcbiAgICAgIGFzOiBcIm5hdlwiXG4gICAgfSksIG1hcChjaGlsZHJlbiwgdGhpcy5yZW5kZXJUYWIpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChUYWJDb250ZW50LCBudWxsLCBtYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIGNoaWxkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMpO1xuXG4gICAgICBkZWxldGUgY2hpbGRQcm9wcy50aXRsZTtcbiAgICAgIGRlbGV0ZSBjaGlsZFByb3BzLmRpc2FibGVkO1xuICAgICAgZGVsZXRlIGNoaWxkUHJvcHMudGFiQ2xhc3NOYW1lO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFiUGFuZSwgY2hpbGRQcm9wcyk7XG4gICAgfSkpKTtcbiAgfTtcblxuICByZXR1cm4gVGFicztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVGFicy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCB1bmNvbnRyb2xsYWJsZShUYWJzLCB7XG4gIGFjdGl2ZUtleTogJ29uU2VsZWN0J1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgVG9nZ2xlQnV0dG9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRvZ2dsZUJ1dHRvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlQnV0dG9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCcpIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVG9nZ2xlQnV0dG9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lLFxuICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgIGNoZWNrZWQgPSBfdGhpcyRwcm9wcy5jaGVja2VkLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZSxcbiAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZSxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wcy5pbnB1dFJlZixcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJuYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2hlY2tlZFwiLCBcInR5cGVcIiwgXCJvbkNoYW5nZVwiLCBcInZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJpbnB1dFJlZlwiLCBcImlubmVyUmVmXCJdKTtcblxuICAgIHZhciBmb2N1c2VkID0gdGhpcy5zdGF0ZS5mb2N1c2VkO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICByZWY6IGlubmVyUmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgZm9jdXNlZCAmJiAnZm9jdXMnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnKSxcbiAgICAgIHR5cGU6IG51bGwsXG4gICAgICBhY3RpdmU6ICEhY2hlY2tlZCxcbiAgICAgIGFzOiBcImxhYmVsXCJcbiAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgIGNoZWNrZWQ6ICEhY2hlY2tlZCxcbiAgICAgIGRpc2FibGVkOiAhIWRpc2FibGVkLFxuICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlIHx8IG5vb3BcbiAgICB9KSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBUb2dnbGVCdXR0b247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVG9nZ2xlQnV0dG9uLCBfZXh0ZW5kcyh7XG4gICAgaW5uZXJSZWY6IHJlZlxuICB9LCBwcm9wcykpO1xufSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB1bmNvbnRyb2xsYWJsZSBmcm9tICd1bmNvbnRyb2xsYWJsZSc7XG5pbXBvcnQgY2hhaW5GdW5jdGlvbiBmcm9tICcuL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL3V0aWxzL0VsZW1lbnRDaGlsZHJlbic7XG5pbXBvcnQgQnV0dG9uR3JvdXAgZnJvbSAnLi9CdXR0b25Hcm91cCc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uIGZyb20gJy4vVG9nZ2xlQnV0dG9uJztcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICdyYWRpbydcbn07XG5cbnZhciBUb2dnbGVCdXR0b25Hcm91cCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUb2dnbGVCdXR0b25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9nZ2xlQnV0dG9uR3JvdXAoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRvZ2dsZUJ1dHRvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0VmFsdWVzID0gZnVuY3Rpb24gZ2V0VmFsdWVzKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyBbXSA6IFtdLmNvbmNhdCh2YWx1ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZVRvZ2dsZSA9IGZ1bmN0aW9uIGhhbmRsZVRvZ2dsZSh2YWx1ZSwgZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkNoYW5nZTtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoKTtcbiAgICB2YXIgaXNBY3RpdmUgPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuXG4gICAgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgIGlmICghaXNBY3RpdmUpIG9uQ2hhbmdlKHZhbHVlLCBldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICBvbkNoYW5nZSh2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuICE9PSB2YWx1ZTtcbiAgICAgIH0pLCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKFtdLmNvbmNhdCh2YWx1ZXMsIFt2YWx1ZV0pLCBldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMi5jaGlsZHJlbixcbiAgICAgICAgdHlwZSA9IF90aGlzJHByb3BzMi50eXBlLFxuICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMyLm5hbWUsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJjaGlsZHJlblwiLCBcInR5cGVcIiwgXCJuYW1lXCJdKTtcblxuICAgIGRlbGV0ZSBwcm9wcy5vbkNoYW5nZTtcbiAgICBkZWxldGUgcHJvcHMudmFsdWU7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMuZ2V0VmFsdWVzKCk7XG4gICAgISh0eXBlICE9PSAncmFkaW8nIHx8ICEhbmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdBIGBuYW1lYCBpcyByZXF1aXJlZCB0byBncm91cCB0aGUgdG9nZ2xlIGJ1dHRvbnMgd2hlbiB0aGUgYHR5cGVgICcgKyAnaXMgc2V0IHRvIFwicmFkaW9cIicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25Hcm91cCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0b2dnbGU6IHRydWVcbiAgICB9KSwgbWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHZhciBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgICAgICB2YWx1ZSA9IF9jaGlsZCRwcm9wcy52YWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZSA9IF9jaGlsZCRwcm9wcy5vbkNoYW5nZTtcblxuICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhbmRsZVRvZ2dsZSh2YWx1ZSwgZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIG5hbWU6IGNoaWxkLm5hbWUgfHwgbmFtZSxcbiAgICAgICAgY2hlY2tlZDogdmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSxcbiAgICAgICAgb25DaGFuZ2U6IGNoYWluRnVuY3Rpb24ob25DaGFuZ2UsIGhhbmRsZXIpXG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvZ2dsZUJ1dHRvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ub2dnbGVCdXR0b25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG52YXIgVW5jb250cm9sbGVkVG9nZ2xlQnV0dG9uR3JvdXAgPSB1bmNvbnRyb2xsYWJsZShUb2dnbGVCdXR0b25Hcm91cCwge1xuICB2YWx1ZTogJ29uQ2hhbmdlJ1xufSk7XG5VbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cC5CdXR0b24gPSBUb2dnbGVCdXR0b247XG5leHBvcnQgZGVmYXVsdCBVbmNvbnRyb2xsZWRUb2dnbGVCdXR0b25Hcm91cDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUmVxdWlyZWRGb3JBMTF5IGZyb20gJ3Byb3AtdHlwZXMtZXh0cmEvbGliL2lzUmVxdWlyZWRGb3JBMTF5JztcbmltcG9ydCB7IGNyZWF0ZUJvb3RzdHJhcENvbXBvbmVudCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBwbGFjZW1lbnQ6ICdyaWdodCdcbn07XG5cbmZ1bmN0aW9uIFRvb2x0aXAoX3JlZikge1xuICB2YXIgYnNQcmVmaXggPSBfcmVmLmJzUHJlZml4LFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGFycm93UHJvcHMgPSBfcmVmLmFycm93UHJvcHMsXG4gICAgICBfID0gX3JlZi5zY2hlZHVsZVVwZGF0ZSxcbiAgICAgIF8xID0gX3JlZi5vdXRPZkJvdW5kYXJpZXMsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImJzUHJlZml4XCIsIFwiaW5uZXJSZWZcIiwgXCJwbGFjZW1lbnRcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImNoaWxkcmVuXCIsIFwiYXJyb3dQcm9wc1wiLCBcInNjaGVkdWxlVXBkYXRlXCIsIFwib3V0T2ZCb3VuZGFyaWVzXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBpbm5lclJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgcm9sZTogXCJ0b29sdGlwXCIsXG4gICAgXCJ4LXBsYWNlbWVudFwiOiBwbGFjZW1lbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYnNQcmVmaXgsIFwiYnMtdG9vbHRpcC1cIiArIHBsYWNlbWVudClcbiAgfSwgcHJvcHMpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IFwiYXJyb3dcIlxuICB9LCBhcnJvd1Byb3BzKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogYnNQcmVmaXggKyBcIi1pbm5lclwiXG4gIH0sIGNoaWxkcmVuKSk7XG59XG5cblRvb2x0aXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQm9vdHN0cmFwQ29tcG9uZW50KFRvb2x0aXAsICd0b29sdGlwJyk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmNvbnRyb2xsYWJsZTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9pbnZhcmlhbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpbnZhcmlhbnRcIikpO1xuXG52YXIgVXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi91dGlsc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gdW5jb250cm9sbGFibGUoQ29tcG9uZW50LCBjb250cm9sbGVkVmFsdWVzLCBtZXRob2RzKSB7XG4gIGlmIChtZXRob2RzID09PSB2b2lkIDApIHtcbiAgICBtZXRob2RzID0gW107XG4gIH1cblxuICB2YXIgZGlzcGxheU5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIHZhciBjYW5BY2NlcHRSZWYgPSBVdGlscy5jYW5BY2NlcHRSZWYoQ29tcG9uZW50KTtcbiAgdmFyIGNvbnRyb2xsZWRQcm9wcyA9IE9iamVjdC5rZXlzKGNvbnRyb2xsZWRWYWx1ZXMpO1xuICB2YXIgUFJPUFNfVE9fT01JVCA9IGNvbnRyb2xsZWRQcm9wcy5tYXAoVXRpbHMuZGVmYXVsdEtleSk7XG4gICEoY2FuQWNjZXB0UmVmIHx8ICFtZXRob2RzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2ludmFyaWFudC5kZWZhdWx0KShmYWxzZSwgJ1t1bmNvbnRyb2xsYWJsZV0gc3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IHBhc3MgdGhyb3VnaCBtZXRob2RzICcgKyAnYmVjYXVzZSB0aGV5IGhhdmUgbm8gYXNzb2NpYXRlZCBpbnN0YW5jZXMuIENoZWNrIGNvbXBvbmVudDogJyArIGRpc3BsYXlOYW1lICsgJywgJyArICdhdHRlbXB0aW5nIHRvIHBhc3MgdGhyb3VnaCBtZXRob2RzOiAnICsgbWV0aG9kcy5qb2luKCcsICcpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgdmFyIFVuY29udHJvbGxlZENvbXBvbmVudCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShVbmNvbnRyb2xsZWRDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gVW5jb250cm9sbGVkQ29tcG9uZW50KCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICAgIF90aGlzLmhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICB2YXIgaGFuZGxlck5hbWUgPSBjb250cm9sbGVkVmFsdWVzW3Byb3BOYW1lXTtcblxuICAgICAgICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzW2hhbmRsZXJOYW1lXSkge1xuICAgICAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgICAgICBfdGhpcy5fbm90aWZ5aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMpW2hhbmRsZXJOYW1lXS5hcHBseShfdGhpcyRwcm9wcywgW3ZhbHVlXS5jb25jYXQoYXJncykpO1xuXG4gICAgICAgICAgICBfdGhpcy5fbm90aWZ5aW5nID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuX3ZhbHVlc1twcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAoIV90aGlzLnVubW91bnRlZCkgX3RoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVyc1toYW5kbGVyTmFtZV0gPSBoYW5kbGVDaGFuZ2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChtZXRob2RzLmxlbmd0aCkgX3RoaXMuYXR0YWNoUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICBfdGhpcy5pbm5lciA9IHJlZjtcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFVuY29udHJvbGxlZENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgLy9sZXQgdGhlIGZvcmNlVXBkYXRlIHRyaWdnZXIgdGhlIHVwZGF0ZVxuICAgICAgcmV0dXJuICF0aGlzLl9ub3RpZnlpbmc7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBjb250cm9sbGVkUHJvcHMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzMi5fdmFsdWVzW2tleV0gPSBwcm9wc1tVdGlscy5kZWZhdWx0S2V5KGtleSldO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgY29udHJvbGxlZFByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgYSBwcm9wIHN3aXRjaGVzIGZyb20gY29udHJvbGxlZCB0byBVbmNvbnRyb2xsZWRcbiAgICAgICAgICogcmVzZXQgaXRzIHZhbHVlIHRvIHRoZSBkZWZhdWx0VmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIGlmICghVXRpbHMuaXNQcm9wKG5leHRQcm9wcywga2V5KSAmJiBVdGlscy5pc1Byb3AocHJvcHMsIGtleSkpIHtcbiAgICAgICAgICBfdGhpczMuX3ZhbHVlc1trZXldID0gbmV4dFByb3BzW1V0aWxzLmRlZmF1bHRLZXkoa2V5KV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMudW5tb3VudGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbm5lclJlZiA9IF90aGlzJHByb3BzMi5pbm5lclJlZixcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1wiaW5uZXJSZWZcIl0pO1xuXG4gICAgICBQUk9QU19UT19PTUlULmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgZGVsZXRlIHByb3BzW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcbiAgICAgIGNvbnRyb2xsZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICB2YXIgcHJvcFZhbHVlID0gX3RoaXM0LnByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgbmV3UHJvcHNbcHJvcE5hbWVdID0gcHJvcFZhbHVlICE9PSB1bmRlZmluZWQgPyBwcm9wVmFsdWUgOiBfdGhpczQuX3ZhbHVlc1twcm9wTmFtZV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzLCBuZXdQcm9wcywgdGhpcy5oYW5kbGVycywge1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHRoaXMuYXR0YWNoUmVmXG4gICAgICB9KSk7XG4gICAgfTtcblxuICAgIHJldHVybiBVbmNvbnRyb2xsZWRDb21wb25lbnQ7XG4gIH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBVbmNvbnRyb2xsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlVuY29udHJvbGxlZChcIiArIGRpc3BsYXlOYW1lICsgXCIpXCI7XG4gIFVuY29udHJvbGxlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7XG4gICAgaW5uZXJSZWY6IGZ1bmN0aW9uIGlubmVyUmVmKCkge31cbiAgfSwgVXRpbHMudW5jb250cm9sbGVkUHJvcFR5cGVzKGNvbnRyb2xsZWRWYWx1ZXMsIGRpc3BsYXlOYW1lKSk7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgVW5jb250cm9sbGVkQ29tcG9uZW50LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gJHByb3hpZWRNZXRob2QoKSB7XG4gICAgICB2YXIgX3RoaXMkaW5uZXI7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkaW5uZXIgPSB0aGlzLmlubmVyKVttZXRob2RdLmFwcGx5KF90aGlzJGlubmVyLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH0pO1xuICB2YXIgV3JhcHBlZENvbXBvbmVudCA9IFVuY29udHJvbGxlZENvbXBvbmVudDtcblxuICBpZiAoX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZikge1xuICAgIFdyYXBwZWRDb21wb25lbnQgPSBfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChVbmNvbnRyb2xsZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBpbm5lclJlZjogcmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgV3JhcHBlZENvbXBvbmVudC5wcm9wVHlwZXMgPSBVbmNvbnRyb2xsZWRDb21wb25lbnQucHJvcFR5cGVzO1xuICB9XG5cbiAgV3JhcHBlZENvbXBvbmVudC5Db250cm9sbGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICAvKipcbiAgICogdXNlZnVsIHdoZW4gd3JhcHBpbmcgYSBDb21wb25lbnQgYW5kIHlvdSB3YW50IHRvIGNvbnRyb2xcbiAgICogZXZlcnl0aGluZ1xuICAgKi9cblxuICBXcmFwcGVkQ29tcG9uZW50LmRlZmVyQ29udHJvbFRvID0gZnVuY3Rpb24gKG5ld0NvbXBvbmVudCwgYWRkaXRpb25zLCBuZXh0TWV0aG9kcykge1xuICAgIGlmIChhZGRpdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgYWRkaXRpb25zID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuY29udHJvbGxhYmxlKG5ld0NvbXBvbmVudCwgX2V4dGVuZHMoe30sIGNvbnRyb2xsZWRWYWx1ZXMsIGFkZGl0aW9ucyksIG5leHRNZXRob2RzKTtcbiAgfTtcblxuICByZXR1cm4gV3JhcHBlZENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hcENvbnRleHRUb1Byb3BzO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2ZvcndhcmRSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZvcndhcmRSZWZcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgdmFyIG5hbWUgPSB0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJyA/IENvbXBvbmVudCA6IENvbXBvbmVudC5uYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZTtcbiAgcmV0dXJuIG5hbWUgPyBcIkNvbnRleHRUcmFuc2Zvcm0oXCIgKyBuYW1lICsgXCIpXCIgOiAnQ29udGV4dFRyYW5zZm9ybSc7XG59O1xuXG52YXIgZW5zdXJlQ29uc3VtZXIgPSBmdW5jdGlvbiBlbnN1cmVDb25zdW1lcihjKSB7XG4gIHJldHVybiBjLkNvbnN1bWVyIHx8IGM7XG59O1xuXG5mdW5jdGlvbiAkbWFwQ29udGV4dFRvUHJvcHMoX3JlZiwgQ29tcG9uZW50KSB7XG4gIHZhciBtYXliZUFycmF5T2ZDb25zdW1lcnMgPSBfcmVmLmNvbnN1bWVycyxcbiAgICAgIG1hcFRvUHJvcHMgPSBfcmVmLm1hcFRvUHJvcHMsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICBfcmVmJGZvcndhcmRSZWZBcyA9IF9yZWYuZm9yd2FyZFJlZkFzLFxuICAgICAgZm9yd2FyZFJlZkFzID0gX3JlZiRmb3J3YXJkUmVmQXMgPT09IHZvaWQgMCA/ICdyZWYnIDogX3JlZiRmb3J3YXJkUmVmQXM7XG4gIHZhciBjb25zdW1lcnMgPSBtYXliZUFycmF5T2ZDb25zdW1lcnM7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlQXJyYXlPZkNvbnN1bWVycykpIHtcbiAgICBjb25zdW1lcnMgPSBbbWF5YmVBcnJheU9mQ29uc3VtZXJzXTtcbiAgfVxuXG4gIHZhciBTaW5nbGVDb25zdW1lciA9IGVuc3VyZUNvbnN1bWVyKGNvbnN1bWVyc1swXSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlUmVuZGVyKHByb3BzLCByZWYpIHtcbiAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgdmFyIHByb3BzV2l0aFJlZiA9IF9leHRlbmRzKChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2ZvcndhcmRSZWZBc10gPSByZWYsIF9leHRlbmRzMiksIHByb3BzKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNpbmdsZUNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHByb3BzV2l0aFJlZiwgbWFwVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBtdWx0aVJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIF9leHRlbmRzMztcblxuICAgIHZhciBwcm9wc1dpdGhSZWYgPSBfZXh0ZW5kcygoX2V4dGVuZHMzID0ge30sIF9leHRlbmRzM1tmb3J3YXJkUmVmQXNdID0gcmVmLCBfZXh0ZW5kczMpLCBwcm9wcyk7XG5cbiAgICByZXR1cm4gY29uc3VtZXJzLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChpbm5lciwgQ29udGV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBDb25zdW1lciA9IGVuc3VyZUNvbnN1bWVyKENvbnRleHQpO1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlubmVyLmFwcGx5KHZvaWQgMCwgYXJncy5jb25jYXQoW3ZhbHVlXSkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjb250ZXh0cyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBjb250ZXh0c1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wc1dpdGhSZWYsIG1hcFRvUHJvcHMuYXBwbHkodm9pZCAwLCBjb250ZXh0cy5jb25jYXQoW3Byb3BzXSkpKSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHZhciBjb250ZXh0VHJhbnNmb3JtID0gY29uc3VtZXJzLmxlbmd0aCA9PT0gMSA/IHNpbmdsZVJlbmRlciA6IG11bHRpUmVuZGVyO1xuICByZXR1cm4gKDAsIF9mb3J3YXJkUmVmLmRlZmF1bHQpKGNvbnRleHRUcmFuc2Zvcm0sIHtcbiAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUgfHwgZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwQ29udGV4dFRvUHJvcHMobWF5YmVPcHRzLCBtYXBUb1Byb3BzLCBDb21wb25lbnQpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHJldHVybiAkbWFwQ29udGV4dFRvUHJvcHMobWF5YmVPcHRzLCBtYXBUb1Byb3BzKTtcbiAgcmV0dXJuICRtYXBDb250ZXh0VG9Qcm9wcyh7XG4gICAgY29uc3VtZXJzOiBtYXliZU9wdHMsXG4gICAgbWFwVG9Qcm9wczogbWFwVG9Qcm9wc1xuICB9LCBDb21wb25lbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcXNhO1xuLy8gWmVwdG8uanNcbi8vIChjKSAyMDEwLTIwMTUgVGhvbWFzIEZ1Y2hzXG4vLyBaZXB0by5qcyBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbnZhciBzaW1wbGVTZWxlY3RvclJFID0gL15bXFx3LV0qJC87XG52YXIgdG9BcnJheSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsIFtdLnNsaWNlKTtcblxuZnVuY3Rpb24gcXNhKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIHZhciBtYXliZUlEID0gc2VsZWN0b3JbMF0gPT09ICcjJyxcbiAgICAgIG1heWJlQ2xhc3MgPSBzZWxlY3RvclswXSA9PT0gJy4nLFxuICAgICAgbmFtZU9ubHkgPSBtYXliZUlEIHx8IG1heWJlQ2xhc3MgPyBzZWxlY3Rvci5zbGljZSgxKSA6IHNlbGVjdG9yLFxuICAgICAgaXNTaW1wbGUgPSBzaW1wbGVTZWxlY3RvclJFLnRlc3QobmFtZU9ubHkpLFxuICAgICAgZm91bmQ7XG5cbiAgaWYgKGlzU2ltcGxlKSB7XG4gICAgaWYgKG1heWJlSUQpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LmdldEVsZW1lbnRCeUlkID8gZWxlbWVudCA6IGRvY3VtZW50O1xuICAgICAgcmV0dXJuIChmb3VuZCA9IGVsZW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZU9ubHkpKSA/IFtmb3VuZF0gOiBbXTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIG1heWJlQ2xhc3MpIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShuYW1lT25seSkpO1xuICAgIHJldHVybiB0b0FycmF5KGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpKTtcbiAgfVxuXG4gIHJldHVybiB0b0FycmF5KGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5FWElUSU5HID0gZXhwb3J0cy5FTlRFUkVEID0gZXhwb3J0cy5FTlRFUklORyA9IGV4cG9ydHMuRVhJVEVEID0gZXhwb3J0cy5VTk1PVU5URUQgPSB2b2lkIDA7XG5cbnZhciBQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdCA9IHJlcXVpcmUoXCJyZWFjdC1saWZlY3ljbGVzLWNvbXBhdFwiKTtcblxudmFyIF9Qcm9wVHlwZXMgPSByZXF1aXJlKFwiLi91dGlscy9Qcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0cy5VTk1PVU5URUQgPSBVTk1PVU5URUQ7XG52YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnRzLkVYSVRFRCA9IEVYSVRFRDtcbnZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnRzLkVOVEVSSU5HID0gRU5URVJJTkc7XG52YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydHMuRU5URVJFRCA9IEVOVEVSRUQ7XG52YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZSBjb21wb25lbnRzLlxuICogSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3IgZXhhbXBsZSB3ZSBjYW5cbiAqIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24nO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMCB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHsoc3RhdGUpID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBBcyBub3RlZCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2Vzbid0IF9kb18gYW55dGhpbmcgYnkgaXRzZWxmIHRvIGl0cyBjaGlsZCBjb21wb25lbnQuXG4gKiBXaGF0IGl0IGRvZXMgZG8gaXMgdHJhY2sgdHJhbnNpdGlvbiBzdGF0ZXMgb3ZlciB0aW1lIHNvIHlvdSBjYW4gdXBkYXRlIHRoZVxuICogY29tcG9uZW50IChzdWNoIGFzIGJ5IGFkZGluZyBzdHlsZXMgb3IgY2xhc3Nlcykgd2hlbiBpdCBjaGFuZ2VzIHN0YXRlcy5cbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnQgYmVnaW5zIHRoZVxuICogXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb20gaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSxcbiAqIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlXG4gKiBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlIHRoZSBmb2xsb3dpbmcgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc3hcbiAqIHN0YXRlID0geyBpbjogZmFsc2UgfTtcbiAqXG4gKiB0b2dnbGVFbnRlclN0YXRlID0gKCkgPT4ge1xuICogICB0aGlzLnNldFN0YXRlKHsgaW46IHRydWUgfSk7XG4gKiB9XG4gKlxuICogcmVuZGVyKCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17dGhpcy5zdGF0ZS5pbn0gdGltZW91dD17NTAwfSAvPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVudGVyU3RhdGV9PkNsaWNrIHRvIEVudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZSBhbmRcbiAqIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlcyB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbSBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICpcbiAqICMjIFRpbWluZ1xuICpcbiAqIFRpbWluZyBpcyBvZnRlbiB0aGUgdHJpY2tpZXN0IHBhcnQgb2YgYW5pbWF0aW9uLCBtaXN0YWtlcyBjYW4gcmVzdWx0IGluIHNsaWdodCBkZWxheXNcbiAqIHRoYXQgYXJlIGhhcmQgdG8gcGluIGRvd24uIEEgY29tbW9uIGV4YW1wbGUgaXMgd2hlbiB5b3Ugd2FudCB0byBhZGQgYW4gZXhpdCB0cmFuc2l0aW9uLFxuICogeW91IHNob3VsZCBzZXQgdGhlIGRlc2lyZWQgZmluYWwgc3R5bGVzIHdoZW4gdGhlIHN0YXRlIGlzIGAnZXhpdGluZydgLiBUaGF0J3Mgd2hlbiB0aGVcbiAqIHRyYW5zaXRpb24gdG8gdGhvc2Ugc3R5bGVzIHdpbGwgc3RhcnQgYW5kLCBpZiB5b3UgbWF0Y2hlZCB0aGUgYHRpbWVvdXRgIHByb3Agd2l0aCB0aGVcbiAqIENTUyBUcmFuc2l0aW9uIGR1cmF0aW9uLCBpdCB3aWxsIGVuZCBleGFjdGx5IHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiA+ICoqTm90ZSoqOiBGb3Igc2ltcGxlciB0cmFuc2l0aW9ucyB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBtaWdodCBiZSBlbm91Z2gsIGJ1dFxuICogPiB0YWtlIGludG8gYWNjb3VudCB0aGF0IGl0J3MgcGxhdGZvcm0tYWdub3N0aWMsIHdoaWxlIHRoZSBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50XG4gKiA+IFtmb3JjZXMgcmVmbG93c10oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ibG9iLzUwMDczMDNlNzI5YTc0YmU2NmEyMWMzZTIyMDVlNDkxNjgyMTUyNGIvc3JjL0NTU1RyYW5zaXRpb24uanMjTDIwOC1MMjE1KVxuICogPiBpbiBvcmRlciB0byBtYWtlIG1vcmUgY29tcGxleCB0cmFuc2l0aW9ucyBtb3JlIHByZWRpY3RhYmxlLiBGb3IgZXhhbXBsZSwgZXZlbiB0aG91Z2hcbiAqID4gY2xhc3NlcyBgZXhhbXBsZS1lbnRlcmAgYW5kIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgb25lIGFmdGVyXG4gKiA+IGFub3RoZXIsIHlvdSBjYW4gc3RpbGwgdHJhbnNpdGlvbiBmcm9tIG9uZSB0byB0aGUgb3RoZXIgYmVjYXVzZSBvZiB0aGUgZm9yY2VkIHJlZmxvd1xuICogPiAocmVhZCBbdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9pc3N1ZXMvMTU5I2lzc3VlY29tbWVudC0zMjI3NjExNzEpXG4gKiA+IGZvciBtb3JlIGluZm8pLiBUYWtlIHRoaXMgaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgYmV0d2VlbiBgVHJhbnNpdGlvbmAgYW5kXG4gKiA+IGBDU1NUcmFuc2l0aW9uYC5cbiAqL1xuXG5leHBvcnRzLkVYSVRJTkcgPSBFWElUSU5HO1xuXG52YXIgVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dC50cmFuc2l0aW9uR3JvdXA7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHJhbnNpdGlvbkdyb3VwOiBudWxsIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG5cbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9OyAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cblxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudXBkYXRlU3RhdHVzKHRydWUsIHRoaXMuYXBwZWFyU3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBuZXh0U3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcmV2UHJvcHMgIT09IHRoaXMucHJvcHMpIHtcbiAgICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElORztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudXBkYXRlU3RhdHVzKGZhbHNlLCBuZXh0U3RhdHVzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuICB9O1xuXG4gIF9wcm90by5nZXRUaW1lb3V0cyA9IGZ1bmN0aW9uIGdldFRpbWVvdXRzKCkge1xuICAgIHZhciB0aW1lb3V0ID0gdGhpcy5wcm9wcy50aW1lb3V0O1xuICAgIHZhciBleGl0LCBlbnRlciwgYXBwZWFyO1xuICAgIGV4aXQgPSBlbnRlciA9IGFwcGVhciA9IHRpbWVvdXQ7XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykge1xuICAgICAgZXhpdCA9IHRpbWVvdXQuZXhpdDtcbiAgICAgIGVudGVyID0gdGltZW91dC5lbnRlcjtcbiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleGl0OiBleGl0LFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgYXBwZWFyOiBhcHBlYXJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0dXMobW91bnRpbmcsIG5leHRTdGF0dXMpIHtcbiAgICBpZiAobW91bnRpbmcgPT09IHZvaWQgMCkge1xuICAgICAgbW91bnRpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLlxuICAgICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcblxuICAgICAgdmFyIG5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKG5leHRTdGF0dXMgPT09IEVOVEVSSU5HKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUV4aXQobm9kZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0LnRyYW5zaXRpb25Hcm91cCA/IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRFxuICAgIC8vIGlmIHdlIGFyZSBtb3VudGluZyBhbmQgcnVubmluZyB0aGlzIGl0IG1lYW5zIGFwcGVhciBfbXVzdF8gYmUgc2V0XG5cbiAgICBpZiAoIW1vdW50aW5nICYmICFlbnRlcikge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhub2RlLCBhcHBlYXJpbmcpOyAvLyBGSVhNRTogYXBwZWFyIHRpbWVvdXQ/XG5cblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5lbnRlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUV4aXQgPSBmdW5jdGlvbiBwZXJmb3JtRXhpdChub2RlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGV4aXQgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRVhJVEVEXG5cbiAgICBpZiAoIWV4aXQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgdHJhbnNpdGlvbkdyb3VwOiBmdW5jdGlvbiB0cmFuc2l0aW9uR3JvdXAoKSB7fVxufTtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBgZnVuY3Rpb25gIGNoaWxkIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgYSBSZWFjdCBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHRyYW5zaXRpb24gc3RhdHVzXG4gICAqICgnZW50ZXJpbmcnLCAnZW50ZXJlZCcsICdleGl0aW5nJywgJ2V4aXRlZCcsICd1bm1vdW50ZWQnKSwgd2hpY2ggY2FuIGJlIHVzZWRcbiAgICogdG8gYXBwbHkgY29udGV4dCBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIHRpbWVvdXQ9ezE1MH0+XG4gICAqICAgeyhzdGF0dXMpID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0dXN9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZSBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLlxuICAgKiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdCBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlXG4gICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+IE5vdGU6IHRoZXJlIGFyZSBubyBzcGVjaWZpYyBcImFwcGVhclwiIHN0YXRlcy4gYGFwcGVhcmAgb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgYGVudGVyYCB0cmFuc2l0aW9uLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGV4aXQgdHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFJlcXVpcmVkIHVubGVzcyBgYWRkRW5kTGlzdGVuZXJgIGlzIHByb3ZpZGVkXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMgbGlrZTogYHRpbWVvdXQ9ezUwMH1gLFxuICAgKiBvciBpbmRpdmlkdWFsbHkgbGlrZTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyIHwgeyBlbnRlcj86IG51bWJlciwgZXhpdD86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IF9Qcm9wVHlwZXMudGltZW91dHNTaGFwZSA6IHt9OztcbiAgICBpZiAoIXByb3BzLmFkZEVuZExpc3RlbmVyKSBwdCA9IHB0LmlzUmVxdWlyZWQ7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHQuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZ1xuICAgKiBET00gbm9kZSBhbmQgYSBgZG9uZWAgY2FsbGJhY2suIEFsbG93cyBmb3IgbW9yZSBmaW5lIGdyYWluZWQgdHJhbnNpdGlvbiBlbmRcbiAgICogbG9naWMuICoqTm90ZToqKiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jIC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxufSA6IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gMDtcblRyYW5zaXRpb24uRVhJVEVEID0gMTtcblRyYW5zaXRpb24uRU5URVJJTkcgPSAyO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gMztcblRyYW5zaXRpb24uRVhJVElORyA9IDQ7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0LnBvbHlmaWxsKShUcmFuc2l0aW9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJpbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgXCJBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnRcIik7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAocGF0dGVybiwga2V5cywgb3B0aW9ucyk7XG4gIHZhciBjb21waWxlZFBhdHRlcm4gPSB7IHJlOiByZSwga2V5czoga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRQYXR0ZXJuO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFBhdHRlcm47XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aCBwYXR0ZXJuLlxuICovXG52YXIgbWF0Y2hQYXRoID0gZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50c1syXTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuXG5cbiAgaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuIHBhcmVudDtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1Byb21wdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVHZW5lcmF0b3IgPSBmdW5jdGlvbiBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pIHtcbiAgdmFyIGNhY2hlS2V5ID0gcGF0dGVybjtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIgY29tcGlsZWRHZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXR0ZXJuKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkR2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZEdlbmVyYXRvcjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0dGVybiBhbmQgcGFyYW1ldGVycy5cbiAqL1xudmFyIGdlbmVyYXRlUGF0aCA9IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aCgpIHtcbiAgdmFyIHBhdHRlcm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiL1wiO1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAocGF0dGVybiA9PT0gXCIvXCIpIHtcbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICB2YXIgZ2VuZXJhdG9yID0gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKTtcbiAgcmV0dXJuIGdlbmVyYXRvcihwYXJhbXMsIHsgcHJldHR5OiB0cnVlIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9SZWRpcmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgICBleGFjdCA9IF9lbGVtZW50JHByb3BzLmV4YWN0LFxuICAgICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgICAgZnJvbSA9IF9lbGVtZW50JHByb3BzLmZyb207XG5cbiAgICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgZXhhY3Q6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSwgcm91dGUubWF0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N3aXRjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSBcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywge1xuICAgICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgd2l0aFJvdXRlciBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTZXBhcmF0b3IgZnJvbSAnLi9zZXBhcmF0b3InXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXBhcmF0b3JDb250YWN0IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFNlcGFyYXRvcj5cclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJtYWlsdG86a2hlZXlhN0Bob3RtYWlsLmNvbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIENvbnRhY3QgS2F0ZSA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9TZXBhcmF0b3I+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2Nyb2xsYmFyU2l6ZTtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5ET01cIikpO1xuXG52YXIgc2l6ZTtcblxuZnVuY3Rpb24gc2Nyb2xsYmFyU2l6ZShyZWNhbGMpIHtcbiAgaWYgKCFzaXplICYmIHNpemUgIT09IDAgfHwgcmVjYWxjKSB7XG4gICAgaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc1MHB4JztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNpemU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xyXG5pbXBvcnQgeyBJbWFnZSwgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcblxyXG5mdW5jdGlvbiBQcm9qZWN0U3VtbWFyeUl0ZW0ocHJvcHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9qZWN0LXN1bW1hcnktaXRlbVwiPlxyXG4gICAgICAgICAgICA8SW1hZ2Ugc3JjPXtwcm9wcy5pbWFnZVBhdGh9PjwvSW1hZ2U+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1zdW1tYXJ5LXRpdGxlXCI+e3Byb3BzLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2plY3Qtc3VtbWFyeS10ZXh0XCI+e3Byb3BzLmRlc2NyaXB0aW9ufTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJvamVjdFN1bW1hcnkocHJvcHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcHJvcHMuc3VtbWFyeURhdGEubWFwKChzdW1tYXJ5SXRlbURhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdFN1bW1hcnlJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVBhdGg9e3N1bW1hcnlJdGVtRGF0YS5pbWFnZVBhdGh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17c3VtbWFyeUl0ZW1EYXRhLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb249e3N1bW1hcnlJdGVtRGF0YS5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17c3VtbWFyeUl0ZW1EYXRhLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9Sb3c+XHJcbiAgICApXHJcbn1cclxuXHJcblByb2plY3RTdW1tYXJ5LnByb3BUeXBlcyA9IHtcclxuICAgIHN1bW1hcnlEYXRhOiBQcm9wVHlwZXMuYXJyYXksXHJcbn1cclxuUHJvamVjdFN1bW1hcnkuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgc3VtbWFyeURhdGE6IFtdLFxyXG59IiwiaW1wb3J0IFRpdGxlIGZyb20gJy4vdGl0bGUnXHJcbmltcG9ydCB7IFBhcmFncmFwaCB9IGZyb20gJy4vcGFyYWdyYXBoJ1xyXG5pbXBvcnQgeyBQcm9qZWN0RGVzY3JpcHRpb24gfSBmcm9tICcuL3Byb2plY3QtZGVzY3JpcHRpb24nXHJcbmltcG9ydCBTZWN0aW9uVGl0bGUgZnJvbSAnLi9zZWN0aW9uLXRpdGxlJ1xyXG5pbXBvcnQgU2VjdGlvblN1YnRpdGxlIGZyb20gJy4vc2VjdGlvbi1zdWJ0aXRsZSdcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBUaXRsZSxcclxuICAgIFBhcmFncmFwaCxcclxuICAgIFNlY3Rpb25UaXRsZSxcclxuICAgIFNlY3Rpb25TdWJ0aXRsZSxcclxuICAgIFByb2plY3REZXNjcmlwdGlvblxyXG59XHJcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLCBldmFsKShcInRoaXNcIik7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2luRE9NXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MIERPTSBhbmQgU1ZHIERPTSBtYXkgaGF2ZSBkaWZmZXJlbnQgc3VwcG9ydCBsZXZlbHMsXG4gIC8vIHNvIHdlIG5lZWQgdG8gY2hlY2sgb24gY29udGV4dCBpbnN0ZWFkIG9mIGEgZG9jdW1lbnQgcm9vdCBlbGVtZW50LlxuICByZXR1cm4gX2luRE9NLmRlZmF1bHQgPyBmdW5jdGlvbiAoY29udGV4dCwgbm9kZSkge1xuICAgIGlmIChjb250ZXh0LmNvbnRhaW5zKSB7XG4gICAgICByZXR1cm4gY29udGV4dC5jb250YWlucyhub2RlKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBjb250ZXh0ID09PSBub2RlIHx8ICEhKGNvbnRleHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiAxNik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxsYmFjayhjb250ZXh0LCBub2RlKTtcbiAgICB9XG4gIH0gOiBmYWxsYmFjaztcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIGZhbGxiYWNrKGNvbnRleHQsIG5vZGUpIHtcbiAgaWYgKG5vZGUpIGRvIHtcbiAgICBpZiAobm9kZSA9PT0gY29udGV4dCkgcmV0dXJuIHRydWU7XG4gIH0gd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBmb3J3YXJkUmVmO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBmb3J3YXJkUmVmKHJlbmRlckZuLCBfcmVmKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICBwcm9wVHlwZXMgPSBfcmVmLnByb3BUeXBlcyxcbiAgICAgIGRlZmF1bHRQcm9wcyA9IF9yZWYuZGVmYXVsdFByb3BzLFxuICAgICAgX3JlZiRhbGxvd0ZhbGxiYWNrID0gX3JlZi5hbGxvd0ZhbGxiYWNrLFxuICAgICAgYWxsb3dGYWxsYmFjayA9IF9yZWYkYWxsb3dGYWxsYmFjayA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGFsbG93RmFsbGJhY2s7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIHJlbmRlckZuKHByb3BzLCByZWYpO1xuICB9O1xuXG4gIE9iamVjdC5hc3NpZ24ocmVuZGVyLCB7XG4gICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lXG4gIH0pO1xuICBpZiAoX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZiB8fCAhYWxsb3dGYWxsYmFjaykgcmV0dXJuIE9iamVjdC5hc3NpZ24oX3JlYWN0LmRlZmF1bHQuZm9yd2FyZFJlZihyZW5kZXIpLCB7XG4gICAgcHJvcFR5cGVzOiBwcm9wVHlwZXMsXG4gICAgZGVmYXVsdFByb3BzOiBkZWZhdWx0UHJvcHNcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHJldHVybiByZW5kZXIocHJvcHMsIG51bGwpO1xuICB9LCB7XG4gICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgIHByb3BUeXBlczogcHJvcFR5cGVzLFxuICAgIGRlZmF1bHRQcm9wczogZGVmYXVsdFByb3BzXG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wZXJ0aWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9zdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlXCIpKTtcblxuZnVuY3Rpb24gb25FbmQobm9kZSwgaGFuZGxlciwgZHVyYXRpb24pIHtcbiAgdmFyIGZha2VFdmVudCA9IHtcbiAgICB0YXJnZXQ6IG5vZGUsXG4gICAgY3VycmVudFRhcmdldDogbm9kZVxuICB9LFxuICAgICAgYmFja3VwO1xuICBpZiAoIV9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kKSBkdXJhdGlvbiA9IDA7ZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgZHVyYXRpb24gPSBwYXJzZUR1cmF0aW9uKG5vZGUpIHx8IDA7XG5cbiAgaWYgKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKF9wcm9wZXJ0aWVzLmRlZmF1bHQuZW5kLCBkb25lLCBmYWxzZSk7XG4gICAgYmFja3VwID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZG9uZShmYWtlRXZlbnQpO1xuICAgIH0sIChkdXJhdGlvbiB8fCAxMDApICogMS41KTtcbiAgfSBlbHNlIHNldFRpbWVvdXQoZG9uZS5iaW5kKG51bGwsIGZha2VFdmVudCksIDApO1xuXG4gIGZ1bmN0aW9uIGRvbmUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSByZXR1cm47XG4gICAgY2xlYXJUaW1lb3V0KGJhY2t1cCk7XG4gICAgZXZlbnQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoX3Byb3BlcnRpZXMuZGVmYXVsdC5lbmQsIGRvbmUpO1xuICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgfVxufVxuXG5vbkVuZC5fcGFyc2VEdXJhdGlvbiA9IHBhcnNlRHVyYXRpb247XG52YXIgX2RlZmF1bHQgPSBvbkVuZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBwYXJzZUR1cmF0aW9uKG5vZGUpIHtcbiAgdmFyIHN0ciA9ICgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgX3Byb3BlcnRpZXMuZGVmYXVsdC5kdXJhdGlvbiksXG4gICAgICBtdWx0ID0gc3RyLmluZGV4T2YoJ21zJykgPT09IC0xID8gMTAwMCA6IDE7XG4gIHJldHVybiBwYXJzZUZsb2F0KHN0cikgKiBtdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzUmVxdWlyZWRGb3JBMTF5O1xuZnVuY3Rpb24gaXNSZXF1aXJlZEZvckExMXkodmFsaWRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZVNhZmUgPSBjb21wb25lbnROYW1lIHx8ICc8PGFub255bW91cz4+JztcbiAgICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWVTYWZlICsgJ2AgaXMgcmVxdWlyZWQgdG8gbWFrZSAnICsgKCdgJyArIGNvbXBvbmVudE5hbWVTYWZlICsgJ2AgYWNjZXNzaWJsZSBmb3IgdXNlcnMgb2YgYXNzaXN0aXZlICcpICsgJ3RlY2hub2xvZ2llcyBzdWNoIGFzIHNjcmVlbiByZWFkZXJzLicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDUgPyBfbGVuIC0gNSA6IDApLCBfa2V5ID0gNTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gNV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvci5hcHBseSh1bmRlZmluZWQsIFtwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWVdLmNvbmNhdChhcmdzKSk7XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE0LjZcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSwgMTApICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUoMTApID8gcGFyc2VJbnQoaHRtbFsnb2Zmc2V0JyArIGF4aXNdKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldKSArIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSkgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoZG9jdW1lbnQpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKGVsZW1lbnQub3duZXJEb2N1bWVudCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIHZhciBzYW1lV2lkdGhPZGRuZXNzID0gcmVmZXJlbmNlLndpZHRoICUgMiA9PT0gcG9wcGVyLndpZHRoICUgMjtcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZS53aWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyLndpZHRoICUgMiA9PT0gMTtcbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aE9kZG5lc3MgPyBNYXRoLnJvdW5kIDogTWF0aC5mbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IE1hdGgucm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcbiAgfTtcbn1cblxudmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLWVuZGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFlvdXIgY3VzdG9tIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIG9uZXMgZGVmaW5lZCBpbiBbRGVmYXVsdHNdKCNkZWZhdWx0cylcbiAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZSAtIFRoZSBnZW5lcmF0ZWQgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqL1xuICBmdW5jdGlvbiBQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHBlcik7XG5cbiAgICB0aGlzLnNjaGVkdWxlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBtYWtlIHVwZGF0ZSgpIGRlYm91bmNlZCwgc28gdGhhdCBpdCBvbmx5IHJ1bnMgYXQgbW9zdCBvbmNlLXBlci10aWNrXG4gICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgIC8vIHdpdGgge30gd2UgY3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBvcHRpb25zIGluc2lkZSBpdFxuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgICBpc0NyZWF0ZWQ6IGZhbHNlLFxuICAgICAgc2Nyb2xsUGFyZW50czogW11cbiAgICB9O1xuXG4gICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLmpxdWVyeSA/IHJlZmVyZW5jZVswXSA6IHJlZmVyZW5jZTtcbiAgICB0aGlzLnBvcHBlciA9IHBvcHBlciAmJiBwb3BwZXIuanF1ZXJ5ID8gcG9wcGVyWzBdIDogcG9wcGVyO1xuXG4gICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9uc1xuICAgIHRoaXMub3B0aW9ucy5tb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVycywgb3B0aW9ucy5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pO1xuICAgIH0pO1xuXG4gICAgLy8gUmVmYWN0b3JpbmcgbW9kaWZpZXJzJyBsaXN0IChPYmplY3QgPT4gQXJyYXkpXG4gICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIG5hbWU6IG5hbWVcbiAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTtcbiAgICB9KVxuICAgIC8vIHNvcnQgdGhlIG1vZGlmaWVycyBieSBvcmRlclxuICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XG4gICAgfSk7XG5cbiAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWRcbiAgICAvLyBzdWNoIGNvZGUgaXMgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgb2YgaXRzIG1vZGlmaWVyXG4gICAgLy8gdGhleSBjb3VsZCBhZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlaXIgb3B0aW9ucyBjb25maWd1cmF0aW9uXG4gICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhXG4gICAgdGhpcy5tb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXJPcHRpb25zKSB7XG4gICAgICBpZiAobW9kaWZpZXJPcHRpb25zLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihtb2RpZmllck9wdGlvbnMub25Mb2FkKSkge1xuICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZVxuICAgIHRoaXMudXBkYXRlKCk7XG5cbiAgICB2YXIgZXZlbnRzRW5hYmxlZCA9IHRoaXMub3B0aW9ucy5ldmVudHNFbmFibGVkO1xuICAgIGlmIChldmVudHNFbmFibGVkKSB7XG4gICAgICAvLyBzZXR1cCBldmVudCBsaXN0ZW5lcnMsIHRoZXkgd2lsbCB0YWtlIGNhcmUgb2YgdXBkYXRlIHRoZSBwb3NpdGlvbiBpbiBzcGVjaWZpYyBzaXR1YXRpb25zXG4gICAgICB0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkID0gZXZlbnRzRW5hYmxlZDtcbiAgfVxuXG4gIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZVxuICAvLyBjbGFzcyBwcm90b3R5cGUgYW5kIGJyZWFrIHN0dWZmIGxpa2UgU2lub24gc3R1YnNcblxuXG4gIGNyZWF0ZUNsYXNzKFBvcHBlciwgW3tcbiAgICBrZXk6ICd1cGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUkJDEoKSB7XG4gICAgICByZXR1cm4gdXBkYXRlLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVzdHJveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7XG4gICAgICByZXR1cm4gZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMkJDEoKSB7XG4gICAgICByZXR1cm4gZGlzYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2NoZWR1bGVzIGFuIHVwZGF0ZS4gSXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZS5cbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0XG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBkYXRhLmdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZXQgb2YgY29vcmRpbmF0ZXMgY29tcGF0aWJsZSB3aXRoIHRoZSBuYXRpdmUgYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgbWV0aG9kLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGhcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgd2lkdGggb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRIZWlnaHRcbiAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICovXG5cblxuUG9wcGVyLlV0aWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKS5Qb3BwZXJVdGlscztcblBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblBvcHBlci5EZWZhdWx0cyA9IERlZmF1bHRzO1xuXG5leHBvcnQgZGVmYXVsdCBQb3BwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL29uXCIpKTtcblxuZXhwb3J0cy5vbiA9IF9vbi5kZWZhdWx0O1xuXG52YXIgX29mZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vb2ZmXCIpKTtcblxuZXhwb3J0cy5vZmYgPSBfb2ZmLmRlZmF1bHQ7XG5cbnZhciBfZmlsdGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9maWx0ZXJcIikpO1xuXG5leHBvcnRzLmZpbHRlciA9IF9maWx0ZXIuZGVmYXVsdDtcblxudmFyIF9saXN0ZW4gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpc3RlblwiKSk7XG5cbmV4cG9ydHMubGlzdGVuID0gX2xpc3Rlbi5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBvbjogX29uLmRlZmF1bHQsXG4gIG9mZjogX29mZi5kZWZhdWx0LFxuICBmaWx0ZXI6IF9maWx0ZXIuZGVmYXVsdCxcbiAgbGlzdGVuOiBfbGlzdGVuLmRlZmF1bHRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnY3JlYXRlLXJlYWN0LWNvbnRleHQnO1xuZXhwb3J0IHZhciBNYW5hZ2VyQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICBzZXRSZWZlcmVuY2VOb2RlOiB1bmRlZmluZWQsXG4gIHJlZmVyZW5jZU5vZGU6IHVuZGVmaW5lZFxufSk7XG5cbnZhciBNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1hbmFnZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1hbmFnZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcykgfHwgdGhpcztcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzZXRSZWZlcmVuY2VOb2RlXCIsIGZ1bmN0aW9uIChyZWZlcmVuY2VOb2RlKSB7XG4gICAgICBpZiAoIXJlZmVyZW5jZU5vZGUgfHwgX3RoaXMuc3RhdGUuY29udGV4dC5yZWZlcmVuY2VOb2RlID09PSByZWZlcmVuY2VOb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBfcmVmLmNvbnRleHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29udGV4dDogX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZU5vZGU6IHJlZmVyZW5jZU5vZGVcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgc2V0UmVmZXJlbmNlTm9kZTogX3RoaXMuc2V0UmVmZXJlbmNlTm9kZSxcbiAgICAgICAgcmVmZXJlbmNlTm9kZTogdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNYW5hZ2VyQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuY29udGV4dFxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBNYW5hZ2VyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgeyBNYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCIvKipcbiAqIFRha2VzIGFuIGFyZ3VtZW50IGFuZCBpZiBpdCdzIGFuIGFycmF5LCByZXR1cm5zIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBhcnJheSxcbiAqIG90aGVyd2lzZSByZXR1cm5zIHRoZSBhcmd1bWVudC4gVXNlZCBmb3IgUHJlYWN0IGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCB2YXIgdW53cmFwQXJyYXkgPSBmdW5jdGlvbiB1bndyYXBBcnJheShhcmcpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSA/IGFyZ1swXSA6IGFyZztcbn07XG4vKipcbiAqIFRha2VzIGEgbWF5YmUtdW5kZWZpbmVkIGZ1bmN0aW9uIGFuZCBhcmJpdHJhcnkgYXJncyBhbmQgaW52b2tlcyB0aGUgZnVuY3Rpb25cbiAqIG9ubHkgaWYgaXQgaXMgZGVmaW5lZC5cbiAqL1xuXG5leHBvcnQgdmFyIHNhZmVJbnZva2UgPSBmdW5jdGlvbiBzYWZlSW52b2tlKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFBvcHBlckpTIGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQgeyBNYW5hZ2VyQ29udGV4dCB9IGZyb20gJy4vTWFuYWdlcic7XG5pbXBvcnQgeyBzYWZlSW52b2tlLCB1bndyYXBBcnJheSB9IGZyb20gJy4vdXRpbHMnO1xudmFyIGluaXRpYWxTdHlsZSA9IHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgb3BhY2l0eTogMCxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59O1xudmFyIGluaXRpYWxBcnJvd1N0eWxlID0ge307XG5leHBvcnQgdmFyIElubmVyUG9wcGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKElubmVyUG9wcGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbm5lclBvcHBlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICBwbGFjZW1lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInBvcHBlckluc3RhbmNlXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwicG9wcGVyTm9kZVwiLCBudWxsKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJhcnJvd05vZGVcIiwgbnVsbCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2V0UG9wcGVyTm9kZVwiLCBmdW5jdGlvbiAocG9wcGVyTm9kZSkge1xuICAgICAgaWYgKCFwb3BwZXJOb2RlIHx8IF90aGlzLnBvcHBlck5vZGUgPT09IHBvcHBlck5vZGUpIHJldHVybjtcbiAgICAgIHNhZmVJbnZva2UoX3RoaXMucHJvcHMuaW5uZXJSZWYsIHBvcHBlck5vZGUpO1xuICAgICAgX3RoaXMucG9wcGVyTm9kZSA9IHBvcHBlck5vZGU7XG5cbiAgICAgIF90aGlzLnVwZGF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2V0QXJyb3dOb2RlXCIsIGZ1bmN0aW9uIChhcnJvd05vZGUpIHtcbiAgICAgIF90aGlzLmFycm93Tm9kZSA9IGFycm93Tm9kZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJ1cGRhdGVTdGF0ZU1vZGlmaWVyXCIsIHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBvcmRlcjogOTAwLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKGRhdGEpIHtcbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldE9wdGlvbnNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGxhY2VtZW50OiBfdGhpcy5wcm9wcy5wbGFjZW1lbnQsXG4gICAgICAgIGV2ZW50c0VuYWJsZWQ6IF90aGlzLnByb3BzLmV2ZW50c0VuYWJsZWQsXG4gICAgICAgIHBvc2l0aW9uRml4ZWQ6IF90aGlzLnByb3BzLnBvc2l0aW9uRml4ZWQsXG4gICAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLm1vZGlmaWVycywge1xuICAgICAgICAgIGFycm93OiBfZXh0ZW5kcyh7fSwgX3RoaXMucHJvcHMubW9kaWZpZXJzICYmIF90aGlzLnByb3BzLm1vZGlmaWVycy5hcnJvdywge1xuICAgICAgICAgICAgZW5hYmxlZDogISFfdGhpcy5hcnJvd05vZGUsXG4gICAgICAgICAgICBlbGVtZW50OiBfdGhpcy5hcnJvd05vZGVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBhcHBseVN0eWxlOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlU3RhdGVNb2RpZmllcjogX3RoaXMudXBkYXRlU3RhdGVNb2RpZmllclxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRQb3BwZXJTdHlsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gIV90aGlzLnBvcHBlck5vZGUgfHwgIV90aGlzLnN0YXRlLmRhdGEgPyBpbml0aWFsU3R5bGUgOiBfZXh0ZW5kcyh7XG4gICAgICAgIHBvc2l0aW9uOiBfdGhpcy5zdGF0ZS5kYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uXG4gICAgICB9LCBfdGhpcy5zdGF0ZS5kYXRhLnN0eWxlcyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwiZ2V0UG9wcGVyUGxhY2VtZW50XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuc3RhdGUuZGF0YSA/IHVuZGVmaW5lZCA6IF90aGlzLnN0YXRlLnBsYWNlbWVudDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgXCJnZXRBcnJvd1N0eWxlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhX3RoaXMuYXJyb3dOb2RlIHx8ICFfdGhpcy5zdGF0ZS5kYXRhID8gaW5pdGlhbEFycm93U3R5bGUgOiBfdGhpcy5zdGF0ZS5kYXRhLmFycm93U3R5bGVzO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImdldE91dE9mQm91bmRhcmllc1N0YXRlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zdGF0ZS5kYXRhID8gX3RoaXMuc3RhdGUuZGF0YS5oaWRlIDogdW5kZWZpbmVkO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcImRlc3Ryb3lQb3BwZXJJbnN0YW5jZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnBvcHBlckluc3RhbmNlKSByZXR1cm47XG5cbiAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcblxuICAgICAgX3RoaXMucG9wcGVySW5zdGFuY2UgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInVwZGF0ZVBvcHBlckluc3RhbmNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICB2YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksXG4gICAgICAgICAgcG9wcGVyTm9kZSA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZS5wb3BwZXJOb2RlO1xuXG4gICAgICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IF90aGlzLnByb3BzLnJlZmVyZW5jZUVsZW1lbnQ7XG4gICAgICBpZiAoIXJlZmVyZW5jZUVsZW1lbnQgfHwgIXBvcHBlck5vZGUpIHJldHVybjtcbiAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlID0gbmV3IFBvcHBlckpTKHJlZmVyZW5jZUVsZW1lbnQsIHBvcHBlck5vZGUsIF90aGlzLmdldE9wdGlvbnMoKSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIFwic2NoZWR1bGVVcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICAgIF90aGlzLnBvcHBlckluc3RhbmNlLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5uZXJQb3BwZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAvLyBJZiB0aGUgUG9wcGVyLmpzIG9wdGlvbnMgaGF2ZSBjaGFuZ2VkLCB1cGRhdGUgdGhlIGluc3RhbmNlIChkZXN0cm95ICsgY3JlYXRlKVxuICAgIGlmICh0aGlzLnByb3BzLnBsYWNlbWVudCAhPT0gcHJldlByb3BzLnBsYWNlbWVudCB8fCB0aGlzLnByb3BzLnJlZmVyZW5jZUVsZW1lbnQgIT09IHByZXZQcm9wcy5yZWZlcmVuY2VFbGVtZW50IHx8IHRoaXMucHJvcHMucG9zaXRpb25GaXhlZCAhPT0gcHJldlByb3BzLnBvc2l0aW9uRml4ZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlUG9wcGVySW5zdGFuY2UoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZXZlbnRzRW5hYmxlZCAhPT0gcHJldlByb3BzLmV2ZW50c0VuYWJsZWQgJiYgdGhpcy5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgdGhpcy5wcm9wcy5ldmVudHNFbmFibGVkID8gdGhpcy5wb3BwZXJJbnN0YW5jZS5lbmFibGVFdmVudExpc3RlbmVycygpIDogdGhpcy5wb3BwZXJJbnN0YW5jZS5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEEgcGxhY2VtZW50IGRpZmZlcmVuY2UgaW4gc3RhdGUgbWVhbnMgcG9wcGVyIGRldGVybWluZWQgYSBuZXcgcGxhY2VtZW50XG4gICAgLy8gYXBhcnQgZnJvbSB0aGUgcHJvcHMgdmFsdWUuIEJ5IHRoZSB0aW1lIHRoZSBwb3BwZXIgZWxlbWVudCBpcyByZW5kZXJlZCB3aXRoXG4gICAgLy8gdGhlIG5ldyBwb3NpdGlvbiBQb3BwZXIgaGFzIGFscmVhZHkgbWVhc3VyZWQgaXQsIGlmIHRoZSBwbGFjZSBjaGFuZ2UgdHJpZ2dlcnNcbiAgICAvLyBhIHNpemUgY2hhbmdlIGl0IHdpbGwgcmVzdWx0IGluIGEgbWlzYWxpZ25lZCBwb3BwZXIuIFNvIHdlIHNjaGVkdWxlIGFuIHVwZGF0ZSB0byBiZSBzdXJlLlxuXG5cbiAgICBpZiAocHJldlN0YXRlLnBsYWNlbWVudCAhPT0gdGhpcy5zdGF0ZS5wbGFjZW1lbnQpIHtcbiAgICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgc2FmZUludm9rZSh0aGlzLnByb3BzLmlubmVyUmVmLCBudWxsKTtcbiAgICB0aGlzLmRlc3Ryb3lQb3BwZXJJbnN0YW5jZSgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHVud3JhcEFycmF5KHRoaXMucHJvcHMuY2hpbGRyZW4pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRQb3BwZXJOb2RlLFxuICAgICAgc3R5bGU6IHRoaXMuZ2V0UG9wcGVyU3R5bGUoKSxcbiAgICAgIHBsYWNlbWVudDogdGhpcy5nZXRQb3BwZXJQbGFjZW1lbnQoKSxcbiAgICAgIG91dE9mQm91bmRhcmllczogdGhpcy5nZXRPdXRPZkJvdW5kYXJpZXNTdGF0ZSgpLFxuICAgICAgc2NoZWR1bGVVcGRhdGU6IHRoaXMuc2NoZWR1bGVVcGRhdGUsXG4gICAgICBhcnJvd1Byb3BzOiB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRBcnJvd05vZGUsXG4gICAgICAgIHN0eWxlOiB0aGlzLmdldEFycm93U3R5bGUoKVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBJbm5lclBvcHBlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KElubmVyUG9wcGVyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG4gIHJlZmVyZW5jZUVsZW1lbnQ6IHVuZGVmaW5lZCxcbiAgcG9zaXRpb25GaXhlZDogZmFsc2Vcbn0pO1xuXG52YXIgcGxhY2VtZW50cyA9IFBvcHBlckpTLnBsYWNlbWVudHM7XG5leHBvcnQgeyBwbGFjZW1lbnRzIH07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3BwZXIoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IF9yZWYucmVmZXJlbmNlRWxlbWVudCxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wicmVmZXJlbmNlRWxlbWVudFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFuYWdlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciByZWZlcmVuY2VOb2RlID0gX3JlZjIucmVmZXJlbmNlTm9kZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbm5lclBvcHBlciwgX2V4dGVuZHMoe1xuICAgICAgcmVmZXJlbmNlRWxlbWVudDogcmVmZXJlbmNlRWxlbWVudCAhPT0gdW5kZWZpbmVkID8gcmVmZXJlbmNlRWxlbWVudCA6IHJlZmVyZW5jZU5vZGVcbiAgICB9LCBwcm9wcykpO1xuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBNYW5hZ2VyQ29udGV4dCB9IGZyb20gJy4vTWFuYWdlcic7XG5pbXBvcnQgeyBzYWZlSW52b2tlLCB1bndyYXBBcnJheSB9IGZyb20gJy4vdXRpbHMnO1xuXG52YXIgSW5uZXJSZWZlcmVuY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5uZXJSZWZlcmVuY2UsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyUmVmZXJlbmNlKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBcInJlZkhhbmRsZXJcIiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHNhZmVJbnZva2UoX3RoaXMucHJvcHMuaW5uZXJSZWYsIG5vZGUpO1xuICAgICAgc2FmZUludm9rZShfdGhpcy5wcm9wcy5zZXRSZWZlcmVuY2VOb2RlLCBub2RlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbm5lclJlZmVyZW5jZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB3YXJuaW5nKEJvb2xlYW4odGhpcy5wcm9wcy5zZXRSZWZlcmVuY2VOb2RlKSwgJ2BSZWZlcmVuY2VgIHNob3VsZCBub3QgYmUgdXNlZCBvdXRzaWRlIG9mIGEgYE1hbmFnZXJgIGNvbXBvbmVudC4nKTtcbiAgICByZXR1cm4gdW53cmFwQXJyYXkodGhpcy5wcm9wcy5jaGlsZHJlbikoe1xuICAgICAgcmVmOiB0aGlzLnJlZkhhbmRsZXJcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gSW5uZXJSZWZlcmVuY2U7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlZmVyZW5jZShwcm9wcykge1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChNYW5hZ2VyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgc2V0UmVmZXJlbmNlTm9kZSA9IF9yZWYuc2V0UmVmZXJlbmNlTm9kZTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChJbm5lclJlZmVyZW5jZSwgX2V4dGVuZHMoe1xuICAgICAgc2V0UmVmZXJlbmNlTm9kZTogc2V0UmVmZXJlbmNlTm9kZVxuICAgIH0sIHByb3BzKSk7XG4gIH0pO1xufSIsIi8vIFB1YmxpYyBjb21wb25lbnRzXG5pbXBvcnQgUG9wcGVyLCB7IHBsYWNlbWVudHMgfSBmcm9tICcuL1BvcHBlcic7XG5pbXBvcnQgTWFuYWdlciBmcm9tICcuL01hbmFnZXInO1xuaW1wb3J0IFJlZmVyZW5jZSBmcm9tICcuL1JlZmVyZW5jZSc7XG5leHBvcnQgeyBQb3BwZXIsIHBsYWNlbWVudHMsIE1hbmFnZXIsIFJlZmVyZW5jZSB9OyAvLyBQdWJsaWMgdHlwZXMiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbi8vIE1vc3RseSB0YWtlbiBmcm9tIFJlYWN0UHJvcFR5cGVzLlxuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWVTYWZlICsgJ2Agd2FzIG5vdCBzcGVjaWZpZWQgJyArICgnaW4gYCcgKyBjb21wb25lbnROYW1lU2FmZSArICdgLicpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gNiA/IF9sZW4gLSA2IDogMCksIF9rZXkgPSA2OyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSA2XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGUuYXBwbHkodW5kZWZpbmVkLCBbcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lU2FmZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZVNhZmVdLmNvbmNhdChhcmdzKSk7XG4gIH1cblxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcicpO1xuXG52YXIgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSk7XG5cbiAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBSZWFjdEVsZW1lbnQgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LiBZb3UgY2FuIHVzdWFsbHkgb2J0YWluIGEgUmVhY3RDb21wb25lbnQgb3IgRE9NRWxlbWVudCAnICsgJ2Zyb20gYSBSZWFjdEVsZW1lbnQgYnkgYXR0YWNoaW5nIGEgcmVmIHRvIGl0LicpO1xuICB9XG5cbiAgaWYgKChwcm9wVHlwZSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BWYWx1ZS5yZW5kZXIgIT09ICdmdW5jdGlvbicpICYmIHByb3BWYWx1ZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3RDb21wb25lbnQgb3IgYSAnKSArICdET01FbGVtZW50LicpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyLmRlZmF1bHQpKHZhbGlkYXRlKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgX29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vblwiKSk7XG5cbnZhciBfb2ZmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vZmZcIikpO1xuXG52YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKCkge307XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgKDAsIF9vbi5kZWZhdWx0KShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAoMCwgX29mZi5kZWZhdWx0KShub2RlLCBldmVudE5hbWUsIGhhbmRsZXIsIGNhcHR1cmUpO1xuICAgIH07XG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGxpc3RlbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIERyb3Bkb3duQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoe1xuICBtZW51UmVmOiBmdW5jdGlvbiBtZW51UmVmKCkge30sXG4gIHRvZ2dsZVJlZjogZnVuY3Rpb24gdG9nZ2xlUmVmKCkge30sXG4gIG9uVG9nZ2xlOiBmdW5jdGlvbiBvblRvZ2dsZSgpIHt9LFxuICB0b2dnbGVOb2RlOiB1bmRlZmluZWQsXG4gIGFsaWduRW5kOiBudWxsLFxuICBzaG93OiBudWxsLFxuICBkcm9wOiBudWxsXG59KTtcblxudmFyIF9kZWZhdWx0ID0gRHJvcGRvd25Db250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuYW5pbWF0aW9uRW5kID0gZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGV4cG9ydHMuYW5pbWF0aW9uTmFtZSA9IGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IGV4cG9ydHMudHJhbnNpdGlvbkR1cmF0aW9uID0gZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IGV4cG9ydHMudHJhbnNmb3JtID0gdm9pZCAwO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciB0cmFuc2Zvcm0gPSAndHJhbnNmb3JtJztcbmV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xudmFyIHByZWZpeCwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQ7XG5leHBvcnRzLnRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kO1xudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSwgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uVGltaW5nLCB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheTtcbmV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmc7XG5leHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbmV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5O1xudmFyIGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkR1cmF0aW9uLCBhbmltYXRpb25UaW1pbmcsIGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25EZWxheSA9IGFuaW1hdGlvbkRlbGF5O1xuZXhwb3J0cy5hbmltYXRpb25UaW1pbmcgPSBhbmltYXRpb25UaW1pbmc7XG5leHBvcnRzLmFuaW1hdGlvbkR1cmF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb247XG5leHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lO1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcGVydCA9IGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCk7XG5cbiAgcHJlZml4ID0gX2dldFRyYW5zaXRpb25Qcm9wZXJ0LnByZWZpeDtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC50cmFuc2l0aW9uRW5kO1xuICBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGFuaW1hdGlvbkVuZCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5hbmltYXRpb25FbmQ7XG4gIGV4cG9ydHMudHJhbnNmb3JtID0gdHJhbnNmb3JtID0gcHJlZml4ICsgXCItXCIgKyB0cmFuc2Zvcm07XG4gIGV4cG9ydHMudHJhbnNpdGlvblByb3BlcnR5ID0gdHJhbnNpdGlvblByb3BlcnR5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1wcm9wZXJ0eVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tZHVyYXRpb25cIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvblRpbWluZyA9IHRyYW5zaXRpb25UaW1pbmcgPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25OYW1lID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLW5hbWVcIjtcbiAgZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nID0gcHJlZml4ICsgXCItYW5pbWF0aW9uLWRlbGF5XCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbn1cblxudmFyIF9kZWZhdWx0ID0ge1xuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgZW5kOiB0cmFuc2l0aW9uRW5kLFxuICBwcm9wZXJ0eTogdHJhbnNpdGlvblByb3BlcnR5LFxuICB0aW1pbmc6IHRyYW5zaXRpb25UaW1pbmcsXG4gIGRlbGF5OiB0cmFuc2l0aW9uRGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMoKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB2YXIgdmVuZG9yTWFwID0ge1xuICAgIE86IGZ1bmN0aW9uIE8oZSkge1xuICAgICAgcmV0dXJuIFwib1wiICsgZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0sXG4gICAgTW96OiBmdW5jdGlvbiBNb3ooZSkge1xuICAgICAgcmV0dXJuIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIFdlYmtpdDogZnVuY3Rpb24gV2Via2l0KGUpIHtcbiAgICAgIHJldHVybiBcIndlYmtpdFwiICsgZTtcbiAgICB9LFxuICAgIG1zOiBmdW5jdGlvbiBtcyhlKSB7XG4gICAgICByZXR1cm4gXCJNU1wiICsgZTtcbiAgICB9XG4gIH07XG4gIHZhciB2ZW5kb3JzID0gT2JqZWN0LmtleXModmVuZG9yTWFwKTtcbiAgdmFyIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbiAgdmFyIHByZWZpeCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG4gICAgaWYgKHZlbmRvciArIFwiVHJhbnNpdGlvblByb3BlcnR5XCIgaW4gc3R5bGUpIHtcbiAgICAgIHByZWZpeCA9IFwiLVwiICsgdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0cmFuc2l0aW9uRW5kID0gdmVuZG9yTWFwW3ZlbmRvcl0oJ1RyYW5zaXRpb25FbmQnKTtcbiAgICAgIGFuaW1hdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdBbmltYXRpb25FbmQnKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdHJhbnNpdGlvbkVuZCAmJiAndHJhbnNpdGlvblByb3BlcnR5JyBpbiBzdHlsZSkgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgaWYgKCFhbmltYXRpb25FbmQgJiYgJ2FuaW1hdGlvbk5hbWUnIGluIHN0eWxlKSBhbmltYXRpb25FbmQgPSAnYW5pbWF0aW9uZW5kJztcbiAgc3R5bGUgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbkVuZDogYW5pbWF0aW9uRW5kLFxuICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG4gICAgcHJlZml4OiBwcmVmaXhcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9jbGFzc1wiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9zdHlsZVwiKSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfaXNPdmVyZmxvd2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvaXNPdmVyZmxvd2luZ1wiKSk7XG5cbnZhciBfbWFuYWdlQXJpYUhpZGRlbiA9IHJlcXVpcmUoXCIuL3V0aWxzL21hbmFnZUFyaWFIaWRkZW5cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGFyciwgY2IpIHtcbiAgdmFyIGlkeCA9IC0xO1xuICBhcnIuc29tZShmdW5jdGlvbiAoZCwgaSkge1xuICAgIGlmIChjYihkLCBpKSkge1xuICAgICAgaWR4ID0gaTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG4vKipcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ21lbnQgZm9yIGNvbnRhaW5lcnMgYW5kIHRoZSBtb2RhbHMgaW4gdGhvc2UgY29udGFpbmVycy5cbiAqXG4gKiBAaW50ZXJuYWwgVXNlZCBieSB0aGUgTW9kYWwgdG8gZW5zdXJlIHByb3BlciBzdHlsaW5nIG9mIGNvbnRhaW5lcnMuXG4gKi9cblxuXG52YXIgTW9kYWxNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTW9kYWxNYW5hZ2VyKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZiRoaWRlU2libGluZ05vZGVzID0gX3JlZi5oaWRlU2libGluZ05vZGVzLFxuICAgICAgICBoaWRlU2libGluZ05vZGVzID0gX3JlZiRoaWRlU2libGluZ05vZGVzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRoaWRlU2libGluZ05vZGVzLFxuICAgICAgICBfcmVmJGhhbmRsZUNvbnRhaW5lck8gPSBfcmVmLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9yZWYkaGFuZGxlQ29udGFpbmVyTyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkaGFuZGxlQ29udGFpbmVyTztcblxuICAgIHRoaXMuaGlkZVNpYmxpbmdOb2RlcyA9IGhpZGVTaWJsaW5nTm9kZXM7XG4gICAgdGhpcy5oYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IGhhbmRsZUNvbnRhaW5lck92ZXJmbG93O1xuICAgIHRoaXMubW9kYWxzID0gW107XG4gICAgdGhpcy5jb250YWluZXJzID0gW107XG4gICAgdGhpcy5kYXRhID0gW107XG4gICAgdGhpcy5zY3JvbGxiYXJTaXplID0gKDAsIF9zY3JvbGxiYXJTaXplLmRlZmF1bHQpKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTW9kYWxNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaXNDb250YWluZXJPdmVyZmxvd2luZyA9IGZ1bmN0aW9uIGlzQ29udGFpbmVyT3ZlcmZsb3dpbmcobW9kYWwpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YVt0aGlzLmNvbnRhaW5lckluZGV4RnJvbU1vZGFsKG1vZGFsKV07XG4gICAgcmV0dXJuIGRhdGEgJiYgZGF0YS5vdmVyZmxvd2luZztcbiAgfTtcblxuICBfcHJvdG8uY29udGFpbmVySW5kZXhGcm9tTW9kYWwgPSBmdW5jdGlvbiBjb250YWluZXJJbmRleEZyb21Nb2RhbChtb2RhbCkge1xuICAgIHJldHVybiBmaW5kSW5kZXhPZih0aGlzLmRhdGEsIGZ1bmN0aW9uIChkKSB7XG4gICAgICByZXR1cm4gZC5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRDb250YWluZXJTdHlsZSA9IGZ1bmN0aW9uIHNldENvbnRhaW5lclN0eWxlKGNvbnRhaW5lclN0YXRlLCBjb250YWluZXIpIHtcbiAgICB2YXIgc3R5bGUgPSB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicgLy8gd2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZVxuICAgICAgLy8gYmVjYXN1ZSB3ZSB3aWxsIG92ZXJyaWRlIGl0XG5cbiAgICB9O1xuICAgIGNvbnRhaW5lclN0YXRlLnN0eWxlID0ge1xuICAgICAgb3ZlcmZsb3c6IGNvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodFxuICAgIH07XG5cbiAgICBpZiAoY29udGFpbmVyU3RhdGUub3ZlcmZsb3dpbmcpIHtcbiAgICAgIC8vIHVzZSBjb21wdXRlZCBzdHlsZSwgaGVyZSB0byBnZXQgdGhlIHJlYWwgcGFkZGluZ1xuICAgICAgLy8gdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGhcbiAgICAgIHN0eWxlLnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkoY29udGFpbmVyLCAncGFkZGluZ1JpZ2h0JykgfHwgMCwgMTApICsgdGhpcy5zY3JvbGxiYXJTaXplICsgXCJweFwiO1xuICAgIH1cblxuICAgICgwLCBfc3R5bGUuZGVmYXVsdCkoY29udGFpbmVyLCBzdHlsZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUNvbnRhaW5lclN0eWxlID0gZnVuY3Rpb24gcmVtb3ZlQ29udGFpbmVyU3R5bGUoY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lcikge1xuICAgIHZhciBzdHlsZSA9IGNvbnRhaW5lclN0YXRlLnN0eWxlO1xuICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKG1vZGFsLCBjb250YWluZXIsIGNsYXNzTmFtZSkge1xuICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIHZhciBjb250YWluZXJJZHggPSB0aGlzLmNvbnRhaW5lcnMuaW5kZXhPZihjb250YWluZXIpO1xuXG4gICAgaWYgKG1vZGFsSWR4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cblxuICAgIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMubGVuZ3RoO1xuICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuXG4gICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmhpZGVTaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lcklkeCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuZGF0YVtjb250YWluZXJJZHhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgIC8vcmlnaHQgbm93IG9ubHkgdGhlIGZpcnN0IG1vZGFsIG9mIGEgY29udGFpbmVyIHdpbGwgaGF2ZSBpdHMgY2xhc3NlcyBhcHBsaWVkXG4gICAgICBjbGFzc2VzOiBjbGFzc05hbWUgPyBjbGFzc05hbWUuc3BsaXQoL1xccysvKSA6IFtdLFxuICAgICAgb3ZlcmZsb3dpbmc6ICgwLCBfaXNPdmVyZmxvd2luZy5kZWZhdWx0KShjb250YWluZXIpXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgZGF0YS5jbGFzc2VzLmZvckVhY2goX2NsYXNzLmRlZmF1bHQuYWRkQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaChjb250YWluZXIpO1xuICAgIHRoaXMuZGF0YS5wdXNoKGRhdGEpO1xuICAgIHJldHVybiBtb2RhbElkeDtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgdmFyIG1vZGFsSWR4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICBpZiAobW9kYWxJZHggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lcklkeCA9IHRoaXMuY29udGFpbmVySW5kZXhGcm9tTW9kYWwobW9kYWwpO1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhW2NvbnRhaW5lcklkeF07XG4gICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJZHhdO1xuICAgIGRhdGEubW9kYWxzLnNwbGljZShkYXRhLm1vZGFscy5pbmRleE9mKG1vZGFsKSwgMSk7XG4gICAgdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSWR4LCAxKTsgLy8gaWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsXG4gICAgLy8gY2xlYW4gdXAgdGhlIGNvbnRhaW5lclxuXG4gICAgaWYgKGRhdGEubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGF0YS5jbGFzc2VzLmZvckVhY2goX2NsYXNzLmRlZmF1bHQucmVtb3ZlQ2xhc3MuYmluZChudWxsLCBjb250YWluZXIpKTtcblxuICAgICAgaWYgKHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDb250YWluZXJTdHlsZShkYXRhLCBjb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oaWRlU2libGluZ05vZGVzKSB7XG4gICAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5zaG93U2libGluZ3MpKGNvbnRhaW5lciwgbW9kYWwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgICB0aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgIC8vb3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIFNSXG4gICAgICB2YXIgX2RhdGEkbW9kYWxzID0gZGF0YS5tb2RhbHNbZGF0YS5tb2RhbHMubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgYmFja2Ryb3AgPSBfZGF0YSRtb2RhbHMuYmFja2Ryb3AsXG4gICAgICAgICAgZGlhbG9nID0gX2RhdGEkbW9kYWxzLmRpYWxvZztcbiAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuKShmYWxzZSwgZGlhbG9nKTtcbiAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuKShmYWxzZSwgYmFja2Ryb3ApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNUb3BNb2RhbCA9IGZ1bmN0aW9uIGlzVG9wTW9kYWwobW9kYWwpIHtcbiAgICByZXR1cm4gISF0aGlzLm1vZGFscy5sZW5ndGggJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbE1hbmFnZXI7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IE1vZGFsTWFuYWdlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9Ecm9wZG93bkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duQ29udGV4dFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHJlbmRlciBwcm9wIHRoYXQgcmV0dXJucyBhIFRvZ2dsZSBlbGVtZW50LiBUaGUgYHByb3BzYFxuICAgKiBhcmd1bWVudCBzaG91bGQgc3ByZWFkIHRocm91Z2ggdG8gKiphIGNvbXBvbmVudCB0aGF0IGNhbiBhY2NlcHQgYSByZWYqKi4gVXNlXG4gICAqIHRoZSBgb25Ub2dnbGVgIGFyZ3VtZW50IHRvIHRvZ2dsZSB0aGUgbWVudSBvcGVuIG9yIGNsb3NlZFxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBzaG93OiBib29sZWFuLFxuICAgKiAgIHRvZ2dsZTogKHNob3c6IGJvb2xlYW4pID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIGFyaWEtaGFzcG9wdXA6IHRydWVcbiAgICogICAgIGFyaWEtZXhwYW5kZWQ6IGJvb2xlYW5cbiAgICogICB9LFxuICAgKiB9KSA9PiBSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWRcbn07XG5cbmZ1bmN0aW9uIERyb3Bkb3duVG9nZ2xlKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Ryb3Bkb3duQ29udGV4dC5kZWZhdWx0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgc2hvdyA9IF9yZWYyLnNob3csXG4gICAgICAgIHRvZ2dsZSA9IF9yZWYyLnRvZ2dsZSxcbiAgICAgICAgdG9nZ2xlUmVmID0gX3JlZjIudG9nZ2xlUmVmO1xuICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICBzaG93OiBzaG93LFxuICAgICAgdG9nZ2xlOiB0b2dnbGUsXG4gICAgICBwcm9wczoge1xuICAgICAgICByZWY6IHRvZ2dsZVJlZixcbiAgICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6ICEhc2hvd1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuRHJvcGRvd25Ub2dnbGUuZGlzcGxheU5hbWUgPSAnUmVhY3RPdmVybGF5c0Ryb3Bkb3duVG9nZ2xlJztcbkRyb3Bkb3duVG9nZ2xlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbnZhciBfZGVmYXVsdCA9IERyb3Bkb3duVG9nZ2xlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0UG9wcGVyID0gcmVxdWlyZShcInJlYWN0LXBvcHBlclwiKTtcblxudmFyIF9Ecm9wZG93bkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duQ29udGV4dFwiKSk7XG5cbnZhciBfUm9vdENsb3NlV3JhcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUm9vdENsb3NlV3JhcHBlclwiKSk7XG5cbnZhciBfbWFwQ29udGV4dFRvUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1jb250ZXh0LXRvb2xib3gvbWFwQ29udGV4dFRvUHJvcHNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRHJvcGRvd25NZW51ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyb3Bkb3duTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJvcGRvd25NZW51KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdG9nZ2xlSWQ6IG51bGxcbiAgICB9O1xuICAgIF90aGlzLnBvcHBlcklzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIF90aGlzLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICghX3RoaXMucHJvcHMub25Ub2dnbGUpIHJldHVybjtcblxuICAgICAgX3RoaXMucHJvcHMub25Ub2dnbGUoZmFsc2UsIGUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd25NZW51LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSBmdW5jdGlvbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAvLyBJZiwgdG8gdGhlIGJlc3Qgd2UgY2FuIHRlbGwsIHRoaXMgdXBkYXRlIHdvbid0IHJlaW5pdGlhbGl6ZSBwb3BwZXIsXG4gICAgLy8gbWFudWFsbHkgc2NoZWR1bGUgYW4gdXBkYXRlXG4gICAgdmFyIHNob3VsZFVwZGF0ZVBvcHBlciA9ICFwcmV2UHJvcHMuc2hvdyAmJiB0aGlzLnByb3BzLnNob3cgJiYgdGhpcy5wb3BwZXJJc0luaXRpYWxpemVkICYmIC8vIGEgbmV3IHJlZmVyZW5jZSBub2RlIHdpbGwgYWxyZWFkeSB0cmlnZ2VyIHRoaXMgaW50ZXJuYWxseVxuICAgIHByZXZQcm9wcy50b2dnbGVOb2RlID09PSB0aGlzLnByb3BzLnRvZ2dsZU5vZGU7XG5cbiAgICBpZiAodGhpcy5wcm9wcy5zaG93ICYmIHRoaXMucHJvcHMudXNlUG9wcGVyICYmICF0aGlzLnBvcHBlcklzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMucG9wcGVySXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuICEhc2hvdWxkVXBkYXRlUG9wcGVyO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoXywgX18sIHNob3VsZFVwZGF0ZVBvcHBlcikge1xuICAgIGlmIChzaG91bGRVcGRhdGVQb3BwZXIgJiYgdGhpcy5zY2hlZHVsZVVwZGF0ZSkge1xuICAgICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc2hvdyA9IF90aGlzJHByb3BzLnNob3csXG4gICAgICAgIGZsaXAgPSBfdGhpcyRwcm9wcy5mbGlwLFxuICAgICAgICBtZW51UmVmID0gX3RoaXMkcHJvcHMubWVudVJlZixcbiAgICAgICAgYWxpZ25FbmQgPSBfdGhpcyRwcm9wcy5hbGlnbkVuZCxcbiAgICAgICAgZHJvcCA9IF90aGlzJHByb3BzLmRyb3AsXG4gICAgICAgIHVzZVBvcHBlciA9IF90aGlzJHByb3BzLnVzZVBvcHBlcixcbiAgICAgICAgdG9nZ2xlTm9kZSA9IF90aGlzJHByb3BzLnRvZ2dsZU5vZGUsXG4gICAgICAgIHJvb3RDbG9zZUV2ZW50ID0gX3RoaXMkcHJvcHMucm9vdENsb3NlRXZlbnQsXG4gICAgICAgIF90aGlzJHByb3BzJHBvcHBlckNvbiA9IF90aGlzJHByb3BzLnBvcHBlckNvbmZpZyxcbiAgICAgICAgcG9wcGVyQ29uZmlnID0gX3RoaXMkcHJvcHMkcG9wcGVyQ29uID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJHBvcHBlckNvbjtcbiAgICB2YXIgcGxhY2VtZW50ID0gYWxpZ25FbmQgPyAnYm90dG9tLWVuZCcgOiAnYm90dG9tLXN0YXJ0JztcbiAgICBpZiAoZHJvcCA9PT0gJ3VwJykgcGxhY2VtZW50ID0gYWxpZ25FbmQgPyAndG9wLWVuZCcgOiAndG9wLXN0YXJ0JztcbiAgICBpZiAoZHJvcCA9PT0gJ3JpZ2h0JykgcGxhY2VtZW50ID0gYWxpZ25FbmQgPyAncmlnaHQtZW5kJyA6ICdyaWdodC1zdGFydCc7XG4gICAgaWYgKGRyb3AgPT09ICdsZWZ0JykgcGxhY2VtZW50ID0gYWxpZ25FbmQgPyAnbGVmdC1lbmQnIDogJ2xlZnQtc3RhcnQnO1xuICAgIHZhciBtZW51ID0gbnVsbDtcbiAgICB2YXIgbWVudVByb3BzID0ge1xuICAgICAgcmVmOiBtZW51UmVmLFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IHRvZ2dsZU5vZGUgJiYgdG9nZ2xlTm9kZS5pZFxuICAgIH07XG4gICAgdmFyIGNoaWxkQXJncyA9IHtcbiAgICAgIHNob3c6IHNob3csXG4gICAgICBhbGlnbkVuZDogYWxpZ25FbmQsXG4gICAgICBjbG9zZTogdGhpcy5oYW5kbGVDbG9zZVxuICAgIH07XG5cbiAgICBpZiAoIXVzZVBvcHBlcikge1xuICAgICAgbWVudSA9IHRoaXMucHJvcHMuY2hpbGRyZW4oX2V4dGVuZHMoe30sIGNoaWxkQXJncywge1xuICAgICAgICBwcm9wczogbWVudVByb3BzXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBvcHBlcklzSW5pdGlhbGl6ZWQgfHwgc2hvdykge1xuICAgICAgLy8gQWRkIGl0IHRoaXMgd2F5LCBzbyBpdCBkb2Vzbid0IG92ZXJyaWRlIHNvbWVvbmVzIHVzYWdlXG4gICAgICAvLyB3aXRoIHJlYWN0LXBvcHBlcnMgPFJlZmVyZW5jZT5cbiAgICAgIGlmICh0b2dnbGVOb2RlKSBwb3BwZXJDb25maWcucmVmZXJlbmNlRWxlbWVudCA9IHRvZ2dsZU5vZGU7XG4gICAgICBtZW51ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RQb3BwZXIuUG9wcGVyLCBfZXh0ZW5kcyh7fSwgcG9wcGVyQ29uZmlnLCB7XG4gICAgICAgIGlubmVyUmVmOiBtZW51UmVmLFxuICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgZXZlbnRzRW5hYmxlZDogISFzaG93LFxuICAgICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHtcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiAhIWZsaXBcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHBvcHBlckNvbmZpZy5tb2RpZmllcnMpXG4gICAgICB9KSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIHJlZiA9IF9yZWYucmVmLFxuICAgICAgICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgICAgICAgcG9wcGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wicmVmXCIsIFwic3R5bGVcIl0pO1xuXG4gICAgICAgIF90aGlzMi5zY2hlZHVsZVVwZGF0ZSA9IHBvcHBlci5zY2hlZHVsZVVwZGF0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5jaGlsZHJlbihfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGlsZEFyZ3MsIHtcbiAgICAgICAgICBwcm9wczogX2V4dGVuZHMoe30sIG1lbnVQcm9wcywge1xuICAgICAgICAgICAgcmVmOiByZWYsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgICB9KVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVudSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHQsIHtcbiAgICAgIGRpc2FibGVkOiAhc2hvdyxcbiAgICAgIGV2ZW50OiByb290Q2xvc2VFdmVudCxcbiAgICAgIG9uUm9vdENsb3NlOiB0aGlzLmhhbmRsZUNsb3NlXG4gICAgfSwgbWVudSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duTWVudTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRHJvcGRvd25NZW51LmRpc3BsYXlOYW1lID0gJ1JlYWN0T3ZlcmxheXNEcm9wZG93bk1lbnUnO1xuRHJvcGRvd25NZW51LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgcmVuZGVyIHByb3AgdGhhdCByZXR1cm5zIGEgTWVudSBlbGVtZW50LiBUaGUgYHByb3BzYFxuICAgKiBhcmd1bWVudCBzaG91bGQgc3ByZWFkIHRocm91Z2ggdG8gKiphIGNvbXBvbmVudCB0aGF0IGNhbiBhY2NlcHQgYSByZWYqKi5cbiAgICpcbiAgICogQHR5cGUge0Z1bmN0aW9uICh7XG4gICAqICAgc2hvdzogYm9vbGVhbixcbiAgICogICBhbGlnbkVuZDogYm9vbGVhbixcbiAgICogICBjbG9zZTogKD9TeW50aGV0aWNFdmVudCkgPT4gdm9pZCxcbiAgICogICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgICogICBvdXRPZkJvdW5kYXJpZXM6ID9ib29sZWFuLFxuICAgKiAgIHNjaGVkdWxlVXBkYXRlOiAoKSA9PiB2b2lkLFxuICAgKiAgIHByb3BzOiB7XG4gICAqICAgICByZWY6ICg/SFRNTEVsZW1lbnQpID0+IHZvaWQsXG4gICAqICAgICBzdHlsZTogeyBbc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIH0sXG4gICAqICAgICBhcmlhLWxhYmVsbGVkYnk6ID9zdHJpbmdcbiAgICogICB9LFxuICAgKiAgIGFycm93UHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICB9LFxuICAgKiB9KSA9PiBSZWFjdC5FbGVtZW50fVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHRoZSB2aXNpYmxlIHN0YXRlIG9mIHRoZSBtZW51LCBnZW5lcmFsbHkgdGhpcyBpc1xuICAgKiBwcm92aWRlZCBieSB0aGUgcGFyZW50IGBEcm9wZG93bmAgY29tcG9uZW50LFxuICAgKiBidXQgbWF5IGFsc28gYmUgc3BlY2lmaWVkIGFzIGEgcHJvcCBkaXJlY3RseS5cbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBbGlnbnMgdGhlIGRyb3Bkb3duIG1lbnUgdG8gdGhlICdlbmQnIG9mIGl0J3MgcGxhY2VtZW50IHBvc2l0aW9uLlxuICAgKiBHZW5lcmFsbHkgdGhpcyBpcyBwcm92aWRlZCBieSB0aGUgcGFyZW50IGBEcm9wZG93bmAgY29tcG9uZW50LFxuICAgKiBidXQgbWF5IGFsc28gYmUgc3BlY2lmaWVkIGFzIGEgcHJvcCBkaXJlY3RseS5cbiAgICovXG4gIGFsaWduRW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgUG9wcGVyLmpzIGBmbGlwYCBtb2RpZmllciwgYWxsb3dpbmcgdGhlIERyb3Bkb3duIHRvXG4gICAqIGF1dG9tYXRpY2FsbHkgYWRqdXN0IGl0J3MgcGxhY2VtZW50IGluIGNhc2Ugb2Ygb3ZlcmxhcCB3aXRoIHRoZSB2aWV3cG9ydCBvciB0b2dnbGUuXG4gICAqIFJlZmVyIHRvIHRoZSBbZmxpcCBkb2NzXShodHRwczovL3BvcHBlci5qcy5vcmcvcG9wcGVyLWRvY3VtZW50YXRpb24uaHRtbCNtb2RpZmllcnMuLmZsaXAuZW5hYmxlZCkgZm9yIG1vcmUgaW5mb1xuICAgKi9cbiAgZmxpcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIHVzZVBvcHBlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFt0cnVlLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBwb3BwZXIgb3B0aW9ucyBhbmQgcHJvcHMgcGFzc2VkIGRpcmVjdGx5IHRvIHJlYWN0LXBvcHBlcidzIFBvcHBlciBjb21wb25lbnQuXG4gICAqL1xuICBwb3BwZXJDb25maWc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGV2ZW50IHVzZWQgYnkgUm9vdENsb3NlV3JhcHBlci5cbiAgICovXG4gIHJvb3RDbG9zZUV2ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBvblRvZ2dsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqIEBwcml2YXRlICovXG4gIG1lbnVSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBkcm9wOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICB0b2dnbGVOb2RlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYW55XG59O1xuRHJvcGRvd25NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgdXNlUG9wcGVyOiB0cnVlXG59O1xudmFyIERlY29yYXRlZERyb3Bkb3duTWVudSA9ICgwLCBfbWFwQ29udGV4dFRvUHJvcHMuZGVmYXVsdCkoX0Ryb3Bkb3duQ29udGV4dC5kZWZhdWx0LCBmdW5jdGlvbiAoX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzaG93ID0gX3JlZjIuc2hvdyxcbiAgICAgIGFsaWduRW5kID0gX3JlZjIuYWxpZ25FbmQsXG4gICAgICB0b2dnbGUgPSBfcmVmMi50b2dnbGUsXG4gICAgICBkcm9wID0gX3JlZjIuZHJvcCxcbiAgICAgIG1lbnVSZWYgPSBfcmVmMi5tZW51UmVmLFxuICAgICAgdG9nZ2xlTm9kZSA9IF9yZWYyLnRvZ2dsZU5vZGU7XG4gIHJldHVybiB7XG4gICAgZHJvcDogZHJvcCxcbiAgICBtZW51UmVmOiBtZW51UmVmLFxuICAgIHRvZ2dsZU5vZGU6IHRvZ2dsZU5vZGUsXG4gICAgb25Ub2dnbGU6IHRvZ2dsZSxcbiAgICBzaG93OiBzaG93ID09IG51bGwgPyBwcm9wcy5zaG93IDogc2hvdyxcbiAgICBhbGlnbkVuZDogYWxpZ25FbmQgPT0gbnVsbCA/IHByb3BzLmFsaWduRW5kIDogYWxpZ25FbmRcbiAgfTtcbn0sIERyb3Bkb3duTWVudSk7XG52YXIgX2RlZmF1bHQgPSBEZWNvcmF0ZWREcm9wZG93bk1lbnU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBjYW1lbGl6ZTtcbnZhciBySHlwaGVuID0gLy0oLikvZztcblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShySHlwaGVuLCBmdW5jdGlvbiAoXywgY2hyKSB7XG4gICAgcmV0dXJuIGNoci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9tYXRjaGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvbWF0Y2hlc1wiKSk7XG5cbnZhciBfcXVlcnlTZWxlY3RvckFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGxcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF91bmNvbnRyb2xsYWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInVuY29udHJvbGxhYmxlXCIpKTtcblxudmFyIFBvcHBlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdC1wb3BwZXJcIikpO1xuXG52YXIgX0Ryb3Bkb3duQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJvcGRvd25Db250ZXh0XCIpKTtcblxudmFyIF9Ecm9wZG93bk1lbnUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duTWVudVwiKSk7XG5cbnZhciBfRHJvcGRvd25Ub2dnbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Ryb3Bkb3duVG9nZ2xlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSByZW5kZXIgcHJvcCB0aGF0IHJldHVybnMgdGhlIHJvb3QgZHJvcGRvd24gZWxlbWVudC4gVGhlIGBwcm9wc2BcbiAgICogYXJndW1lbnQgc2hvdWxkIHNwcmVhZCB0aHJvdWdoIHRvIGFuIGVsZW1lbnQgY29udGFpbmluZyBfYm90aF8gdGhlXG4gICAqIG1lbnUgYW5kIHRvZ2dsZSBpbiBvcmRlciB0byBoYW5kbGUga2V5Ym9hcmQgZXZlbnRzIGZvciBmb2N1cyBtYW5hZ2VtZW50LlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBwcm9wczoge1xuICAgKiAgICAgb25LZXlEb3duOiAoU3ludGhldGljRXZlbnQpID0+IHZvaWQsXG4gICAqICAgfSxcbiAgICogfSkgPT4gUmVhY3QuRWxlbWVudH1cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBkaXJlY3Rpb24gYW5kIGxvY2F0aW9uIG9mIHRoZSBNZW51IGluIHJlbGF0aW9uIHRvIGl0J3MgVG9nZ2xlLlxuICAgKi9cbiAgZHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsndXAnLCAnbGVmdCcsICdyaWdodCcsICdkb3duJ10pLFxuXG4gIC8qKlxuICAgKiBBIGNzcyBzbGVjdG9yIHN0cmluZyB0aGF0IHdpbGwgcmV0dXJuIF9fZm9jdXNhYmxlX18gbWVudSBpdGVtcy5cbiAgICogU2VsZWN0b3JzIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgbWVudSBjb21wb25lbnQ6XG4gICAqIGUuZy4gYCA+IGxpOm5vdCgnLmRpc2FibGVkJylgXG4gICAqL1xuICBpdGVtU2VsZWN0b3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQWxpZ24gdGhlIG1lbnUgdG8gdGhlICdlbmQnIHNpZGUgb2YgdGhlIHBsYWNlbWVudCBzaWRlIG9mIHRoZSBEcm9wZG93biB0b2dnbGUuIFRoZSBkZWZhdWx0IHBsYWNlbWVudCBpcyBgdG9wLXN0YXJ0YCBvciBgYm90dG9tLXN0YXJ0YC5cbiAgICovXG4gIGFsaWduRW5kOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogV2hldGhlciBvciBub3QgdGhlIERyb3Bkb3duIGlzIHZpc2libGUuXG4gICAqXG4gICAqIEBjb250cm9sbGFibGUgb25Ub2dnbGVcbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIERyb3Bkb3duIHdpc2hlcyB0byBjaGFuZ2UgdmlzaWJpbGl0eS4gQ2FsbGVkIHdpdGggdGhlIHJlcXVlc3RlZFxuICAgKiBgc2hvd2AgdmFsdWUsIHRoZSBET00gZXZlbnQsIGFuZCB0aGUgc291cmNlIHRoYXQgZmlyZWQgaXQ6IGAnY2xpY2snYCxgJ2tleWRvd24nYCxgJ3Jvb3RDbG9zZSdgLCBvciBgJ3NlbGVjdCdgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBmdW5jdGlvbihcbiAgICogICBpc09wZW46IGJvb2xlYW4sXG4gICAqICAgZXZlbnQ6IFN5bnRoZXRpY0V2ZW50LFxuICAgKiApOiB2b2lkXG4gICAqIGBgYFxuICAgKlxuICAgKiBAY29udHJvbGxhYmxlIHNob3dcbiAgICovXG4gIG9uVG9nZ2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGl0ZW1TZWxlY3RvcjogJyogPiAqJ1xufTtcbi8qKlxuICogYERyb3Bkb3duYCBpcyBzZXQgb2Ygc3RydWN0dXJhbCBjb21wb25lbnRzIGZvciBidWlsZGluZywgYWNjZXNzaWJsZSBkcm9wZG93biBtZW51cyB3aXRoIGNsb3NlLW9uLWNsaWNrLFxuICoga2V5Ym9hcmQgbmF2aWdhdGlvbiwgYW5kIGNvcnJlY3QgZm9jdXMgaGFuZGxpbmcuIEFzIHdpdGggYWxsIHRoZSByZWFjdC1vdmVybGF5J3NcbiAqIGNvbXBvbmVudHMgaXRzIEJZT1MgKGJyaW5nIHlvdXIgb3duIHN0eWxlcykuIERyb3Bkb3duIGlzIHByaW1hcmlseVxuICogYnVpbHQgZnJvbSB0aHJlZSBiYXNlIGNvbXBvbmVudHMsIHlvdSBzaG91bGQgY29tcG9zZSB0byBidWlsZCB5b3VyIERyb3Bkb3ducy5cbiAqXG4gKiAtIGBEcm9wZG93bmAsIHdoaWNoIHdyYXBzIHRoZSBtZW51IGFuZCB0b2dnbGUsIGFuZCBoYW5kbGVzIGtleWJvYXJkIG5hdmlnYXRpb25cbiAqIC0gYERyb3Bkb3duLlRvZ2dsZWAgZ2VuZXJhbGx5IGEgYnV0dG9uIHRoYXQgdHJpZ2dlcnMgdGhlIG1lbnUgb3BlbmluZ1xuICogLSBgRHJvcGRvd24uTWVudWAgVGhlIG92ZXJsYWlkLCBtZW51LCBwb3NpdGlvbmVkIHRvIHRoZSB0b2dnbGUgd2l0aCBQb3BwZXJKc1xuICovXG5cbnZhciBEcm9wZG93biA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShEcm9wZG93biwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgRHJvcGRvd24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBkcm9wID0gX3JlZi5kcm9wLFxuICAgICAgICBhbGlnbkVuZCA9IF9yZWYuYWxpZ25FbmQsXG4gICAgICAgIHNob3cgPSBfcmVmLnNob3c7XG4gICAgdmFyIGxhc3RTaG93ID0gcHJldlN0YXRlLmNvbnRleHQuc2hvdztcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdFNob3c6IGxhc3RTaG93LFxuICAgICAgY29udGV4dDogX2V4dGVuZHMoe30sIHByZXZTdGF0ZS5jb250ZXh0LCB7XG4gICAgICAgIGRyb3A6IGRyb3AsXG4gICAgICAgIHNob3c6IHNob3csXG4gICAgICAgIGFsaWduRW5kOiBhbGlnbkVuZFxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIERyb3Bkb3duKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMudG9nZ2xlT3BlbihldmVudCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXksXG4gICAgICAgICAgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgdmFyIGlzSW5wdXQgPSAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHRhcmdldC50YWdOYW1lKTsgLy8gU2Vjb25kIG9ubHkgdG8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvOGNmYmY2OTMzYjhhMDE0NmFjM2ZiYzM2OWYxOWU1MjBiZDFlYmRhYy9qcy9zcmMvZHJvcGRvd24uanMjTDQwMFxuICAgICAgLy8gaW4gaW5zY3J1dGFiaWxpdHlcblxuICAgICAgaWYgKGlzSW5wdXQgJiYgKGtleSA9PT0gJyAnIHx8IGtleSAhPT0gJ0VzY2FwZScgJiYgX3RoaXMubWVudS5jb250YWlucyh0YXJnZXQpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gX3RoaXMuZ2V0TmV4dEZvY3VzZWRDaGlsZCh0YXJnZXQsIC0xKTtcblxuICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5mb2N1cykgbmV4dC5mb2N1cygpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGVPcGVuKGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9uZXh0ID0gX3RoaXMuZ2V0TmV4dEZvY3VzZWRDaGlsZCh0YXJnZXQsIDEpO1xuXG4gICAgICAgICAgICBpZiAoX25leHQgJiYgX25leHQuZm9jdXMpIF9uZXh0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgX3RoaXMucHJvcHMub25Ub2dnbGUoZmFsc2UsIGV2ZW50KTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9mb2N1c0luRHJvcGRvd24gPSBmYWxzZTtcbiAgICBfdGhpcy5tZW51ID0gbnVsbDtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgY2xvc2U6IF90aGlzLmhhbmRsZUNsb3NlLFxuICAgICAgICB0b2dnbGU6IF90aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICBtZW51UmVmOiBmdW5jdGlvbiBtZW51UmVmKHIpIHtcbiAgICAgICAgICBfdGhpcy5tZW51ID0gcjtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlUmVmOiBmdW5jdGlvbiB0b2dnbGVSZWYocikge1xuICAgICAgICAgIHZhciB0b2dnbGVOb2RlID0gciAmJiBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShyKTtcblxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfcmVmMi5jb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgY29udGV4dDogX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVOb2RlOiB0b2dnbGVOb2RlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHNob3cgPSB0aGlzLnByb3BzLnNob3c7XG4gICAgdmFyIHByZXZPcGVuID0gcHJldlByb3BzLnNob3c7XG5cbiAgICBpZiAoc2hvdyAmJiAhcHJldk9wZW4pIHtcbiAgICAgIHRoaXMubWF5YmVGb2N1c0ZpcnN0KCk7XG4gICAgfVxuXG4gICAgaWYgKCFzaG93ICYmIHByZXZPcGVuKSB7XG4gICAgICAvLyBpZiBmb2N1cyBoYXNuJ3QgYWxyZWFkeSBtb3ZlZCBmcm9tIHRoZSBtZW51IGxldCdzIHJldHVybiBpdFxuICAgICAgLy8gdG8gdGhlIHRvZ2dsZVxuICAgICAgaWYgKHRoaXMuX2ZvY3VzSW5Ecm9wZG93bikge1xuICAgICAgICB0aGlzLl9mb2N1c0luRHJvcGRvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0TmV4dEZvY3VzZWRDaGlsZCA9IGZ1bmN0aW9uIGdldE5leHRGb2N1c2VkQ2hpbGQoY3VycmVudCwgb2Zmc2V0KSB7XG4gICAgaWYgKCF0aGlzLm1lbnUpIHJldHVybiBudWxsO1xuICAgIHZhciBpdGVtU2VsZWN0b3IgPSB0aGlzLnByb3BzLml0ZW1TZWxlY3RvcjtcbiAgICB2YXIgaXRlbXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkodGhpcy5tZW51LCBpdGVtU2VsZWN0b3IpO1xuICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoY3VycmVudCkgKyBvZmZzZXQ7XG4gICAgaW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgaXRlbXMubGVuZ3RoKSk7XG4gICAgcmV0dXJuIGl0ZW1zW2luZGV4XTtcbiAgfTtcblxuICBfcHJvdG8uaGFzTWVudVJvbGUgPSBmdW5jdGlvbiBoYXNNZW51Um9sZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZW51ICYmICgwLCBfbWF0Y2hlcy5kZWZhdWx0KSh0aGlzLm1lbnUsICdbcm9sZT1tZW51XScpO1xuICB9O1xuXG4gIF9wcm90by5mb2N1cyA9IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgIHZhciB0b2dnbGVOb2RlID0gdGhpcy5zdGF0ZS5jb250ZXh0LnRvZ2dsZU5vZGU7XG5cbiAgICBpZiAodG9nZ2xlTm9kZSAmJiB0b2dnbGVOb2RlLmZvY3VzKSB7XG4gICAgICB0b2dnbGVOb2RlLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5tYXliZUZvY3VzRmlyc3QgPSBmdW5jdGlvbiBtYXliZUZvY3VzRmlyc3QoKSB7XG4gICAgaWYgKCF0aGlzLmhhc01lbnVSb2xlKCkpIHJldHVybjtcbiAgICB2YXIgaXRlbVNlbGVjdG9yID0gdGhpcy5wcm9wcy5pdGVtU2VsZWN0b3I7XG4gICAgdmFyIGZpcnN0ID0gKDAsIF9xdWVyeVNlbGVjdG9yQWxsLmRlZmF1bHQpKHRoaXMubWVudSwgaXRlbVNlbGVjdG9yKVswXTtcbiAgICBpZiAoZmlyc3QgJiYgZmlyc3QuZm9jdXMpIGZpcnN0LmZvY3VzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnRvZ2dsZU9wZW4gPSBmdW5jdGlvbiB0b2dnbGVPcGVuKGV2ZW50KSB7XG4gICAgdmFyIHNob3cgPSAhdGhpcy5wcm9wcy5zaG93O1xuICAgIHRoaXMucHJvcHMub25Ub2dnbGUoc2hvdywgZXZlbnQpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pO1xuXG4gICAgZGVsZXRlIHByb3BzLm9uVG9nZ2xlO1xuXG4gICAgaWYgKHRoaXMubWVudSAmJiB0aGlzLnN0YXRlLmxhc3RTaG93ICYmICF0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMuX2ZvY3VzSW5Ecm9wZG93biA9IHRoaXMubWVudS5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRHJvcGRvd25Db250ZXh0LmRlZmF1bHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmNvbnRleHRcbiAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFBvcHBlci5NYW5hZ2VyLCBudWxsLCBjaGlsZHJlbih7XG4gICAgICBwcm9wczoge1xuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93blxuICAgICAgfVxuICAgIH0pKSk7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Ecm9wZG93bi5kaXNwbGF5TmFtZSA9ICdSZWFjdE92ZXJsYXlzRHJvcGRvd24nO1xuRHJvcGRvd24ucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuRHJvcGRvd24uZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xudmFyIFVuY29udHJvbGxlZERyb3Bkb3duID0gKDAsIF91bmNvbnRyb2xsYWJsZS5kZWZhdWx0KShEcm9wZG93biwge1xuICBzaG93OiAnb25Ub2dnbGUnXG59KTtcblVuY29udHJvbGxlZERyb3Bkb3duLk1lbnUgPSBfRHJvcGRvd25NZW51LmRlZmF1bHQ7XG5VbmNvbnRyb2xsZWREcm9wZG93bi5Ub2dnbGUgPSBfRHJvcGRvd25Ub2dnbGUuZGVmYXVsdDtcbnZhciBfZGVmYXVsdCA9IFVuY29udHJvbGxlZERyb3Bkb3duO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlPXRydWU7aWYoXCJ2YWx1ZVwiaW4gZGVzY3JpcHRvcilkZXNjcmlwdG9yLndyaXRhYmxlPXRydWU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe2lmKHByb3RvUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUscHJvdG9Qcm9wcyk7aWYoc3RhdGljUHJvcHMpZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyk7cmV0dXJuIENvbnN0cnVjdG9yfX0oKTtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3Rvcikpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7aWYoIXNlbGYpe3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKX1yZXR1cm4gY2FsbCYmKHR5cGVvZiBjYWxsPT09XCJvYmplY3RcInx8dHlwZW9mIGNhbGw9PT1cImZ1bmN0aW9uXCIpP2NhbGw6c2VsZn1mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3Msc3VwZXJDbGFzcyl7aWYodHlwZW9mIHN1cGVyQ2xhc3MhPT1cImZ1bmN0aW9uXCImJnN1cGVyQ2xhc3MhPT1udWxsKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2Ygc3VwZXJDbGFzcyl9c3ViQ2xhc3MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyYmc3VwZXJDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpzdWJDbGFzcyxlbnVtZXJhYmxlOmZhbHNlLHdyaXRhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWV9fSk7aWYoc3VwZXJDbGFzcylPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLHN1cGVyQ2xhc3MpOnN1YkNsYXNzLl9fcHJvdG9fXz1zdXBlckNsYXNzfXZhciBSZWFjdD1yZXF1aXJlKFwicmVhY3RcIik7dmFyIFB1cmVDb21wb25lbnQ9UmVhY3QuUHVyZUNvbXBvbmVudDt2YXIgUHJvcFR5cGVzPXJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpO3ZhciBvYmplY3RBc3NpZ249cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7ZnVuY3Rpb24gbm9vcCgpe312YXIgSWZyYW1lPWZ1bmN0aW9uKF9QdXJlQ29tcG9uZW50KXtfaW5oZXJpdHMoSWZyYW1lLF9QdXJlQ29tcG9uZW50KTtmdW5jdGlvbiBJZnJhbWUoKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxJZnJhbWUpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLChJZnJhbWUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoSWZyYW1lKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpKX1fY3JlYXRlQ2xhc3MoSWZyYW1lLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24gcmVuZGVyKCl7dmFyIHByb3BzPXtyZWY6XCJpZnJhbWVcIixmcmFtZUJvcmRlcjpcIjBcIixzcmM6dGhpcy5wcm9wcy51cmwsdGFyZ2V0OlwiX3BhcmVudFwiLGFsbG93RnVsbFNjcmVlbjp0aGlzLnByb3BzLmFsbG93RnVsbFNjcmVlbnx8ZmFsc2Usc3R5bGU6b2JqZWN0QXNzaWduKHt9LHtwb3NpdGlvbjp0aGlzLnByb3BzLnBvc2l0aW9ufHxcImFic29sdXRlXCIsZGlzcGxheTp0aGlzLnByb3BzLmRpc3BsYXl8fFwiYmxvY2tcIixoZWlnaHQ6dGhpcy5wcm9wcy5oZWlnaHR8fFwiMTAwJVwiLHdpZHRoOnRoaXMucHJvcHMud2lkdGh8fFwiMTAwJVwifSx0aGlzLnByb3BzLnN0eWxlc3x8e30pLGhlaWdodDp0aGlzLnByb3BzLmhlaWdodHx8XCIxMDAlXCIsbmFtZTp0aGlzLnByb3BzLm5hbWV8fFwiXCIsd2lkdGg6dGhpcy5wcm9wcy53aWR0aHx8XCIxMDAlXCIsb25Mb2FkOnRoaXMucHJvcHMub25Mb2FkfHxub29wLG9uTW91c2VPdmVyOnRoaXMucHJvcHMub25Nb3VzZU92ZXJ8fG5vb3Asb25Nb3VzZU91dDp0aGlzLnByb3BzLm9uTW91c2VPdXR8fG5vb3B9O3JldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIsb2JqZWN0QXNzaWduKHByb3BzLHRoaXMucHJvcHMuaWQ/e2lkOnRoaXMucHJvcHMuaWR9Ont9LHRoaXMucHJvcHMuc2FuZGJveD97c2FuZGJveDp0aGlzLnByb3BzLnNhbmRib3h9Ont9LHRoaXMucHJvcHMuYWxsb3c/e2FsbG93OnRoaXMucHJvcHMuYWxsb3d9Ont9LHRoaXMucHJvcHMuY2xhc3NOYW1lP3tjbGFzc05hbWU6dGhpcy5wcm9wcy5jbGFzc05hbWV9Ont9LHRoaXMucHJvcHMudGl0bGU/e3RpdGxlOnRoaXMucHJvcHMudGl0bGV9Ont9LHRoaXMucHJvcHMuYXJpYUhpZGRlbj97XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifTp7fSkpfX1dKTtyZXR1cm4gSWZyYW1lfShQdXJlQ29tcG9uZW50KTtJZnJhbWUucHJvcFR5cGVzPXt1cmw6UHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLGlkOlByb3BUeXBlcy5zdHJpbmcsdGl0bGU6UHJvcFR5cGVzLnN0cmluZyxjbGFzc05hbWU6UHJvcFR5cGVzLnN0cmluZyx3aWR0aDpQcm9wVHlwZXMuc3RyaW5nLHBvc2l0aW9uOlByb3BUeXBlcy5zdHJpbmcsZGlzcGxheTpQcm9wVHlwZXMuc3RyaW5nLG5hbWU6UHJvcFR5cGVzLnN0cmluZyxoZWlnaHQ6UHJvcFR5cGVzLnN0cmluZyxvbkxvYWQ6UHJvcFR5cGVzLmZ1bmMsc2FuZGJveDpQcm9wVHlwZXMuc3RyaW5nLGFsbG93OlByb3BUeXBlcy5zdHJpbmcsb25Nb3VzZU92ZXI6UHJvcFR5cGVzLmZ1bmMsb25Nb3VzZU91dDpQcm9wVHlwZXMuZnVuYyxzdHlsZXM6UHJvcFR5cGVzLm9iamVjdCxhbGxvd0Z1bGxTY3JlZW46UHJvcFR5cGVzLmJvb2wsYXJpYUhpZGRlbjpQcm9wVHlwZXMuYm9vbH07ZXhwb3J0cy5kZWZhdWx0PUlmcmFtZTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXBhcmF0b3IgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLW1haW4gcGFkLTUgc2VwYXJhdG9yXCI+XHJcbiAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvaDI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRDb250YWluZXI7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRDb250YWluZXIoY29udGFpbmVyLCBkZWZhdWx0Q29udGFpbmVyKSB7XG4gIGlmIChjb250YWluZXIgPT0gbnVsbCkgcmV0dXJuIGRlZmF1bHRDb250YWluZXI7XG4gIGNvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbiAgcmV0dXJuIF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbnRhaW5lcikgfHwgbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb21wb25lbnRPckVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9jb21wb25lbnRPckVsZW1lbnRcIikpO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9nZXRDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2dldENvbnRhaW5lclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEEgTm9kZSwgQ29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBQb3J0YWwgY2hpbGRyZW5cbiAgICogYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19jb21wb25lbnRPckVsZW1lbnQuZGVmYXVsdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcbiAgb25Db250YWluZXJSZXNvbHZlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn07XG5cbnZhciBXYWl0Rm9yQ29udGFpbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFdhaXRGb3JDb250YWluZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdhaXRGb3JDb250YWluZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgaWYgKCFfaW5ET00uZGVmYXVsdCkgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpO1xuICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5wcm9wcy5jb250YWluZXI7XG4gICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicpIGNvbnRhaW5lciA9IGNvbnRhaW5lcigpO1xuXG4gICAgaWYgKGNvbnRhaW5lciAmJiAhX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSkge1xuICAgICAgLy8gVGhlIGNvbnRhaW5lciBpcyBhIFJlYWN0IGNvbXBvbmVudCB0aGF0IGhhcyBub3QgeWV0IGJlZW4gcmVuZGVyZWQuXG4gICAgICAvLyBEb24ndCBzZXQgdGhlIGNvbnRhaW5lciBub2RlIHlldC5cbiAgICAgIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXRDb250YWluZXIoY29udGFpbmVyKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBXYWl0Rm9yQ29udGFpbmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLmNvbnRhaW5lciAhPT0gdGhpcy5wcm9wcy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKG5leHRQcm9wcy5jb250YWluZXIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgdGhpcy5zZXRDb250YWluZXIodGhpcy5wcm9wcy5jb250YWluZXIpO1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSh0aGlzLnByb3BzLm9uQ29udGFpbmVyUmVzb2x2ZWQpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5vbkNvbnRhaW5lclJlc29sdmVkKSB7XG4gICAgICB0aGlzLnByb3BzLm9uQ29udGFpbmVyUmVzb2x2ZWQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5fY29udGFpbmVyID0gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uc2V0Q29udGFpbmVyID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9ICgwLCBfZ2V0Q29udGFpbmVyLmRlZmF1bHQpKGNvbnRhaW5lciwgKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKCkuYm9keSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyID8gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLl9jb250YWluZXIpIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gV2FpdEZvckNvbnRhaW5lcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuV2FpdEZvckNvbnRhaW5lci5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG52YXIgX2RlZmF1bHQgPSBXYWl0Rm9yQ29udGFpbmVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbXBvbmVudE9yRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2NvbXBvbmVudE9yRWxlbWVudFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX1dhaXRGb3JDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1dhaXRGb3JDb250YWluZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBUaGUgYDxQb3J0YWwvPmAgY29tcG9uZW50IHJlbmRlcnMgaXRzIGNoaWxkcmVuIGludG8gYSBuZXcgXCJzdWJ0cmVlXCIgb3V0c2lkZSBvZiBjdXJyZW50IGNvbXBvbmVudCBoaWVyYXJjaHkuXG4gKiBZb3UgY2FuIHRoaW5rIG9mIGl0IGFzIGEgZGVjbGFyYXRpdmUgYGFwcGVuZENoaWxkKClgLCBvciBqUXVlcnkncyBgJC5mbi5hcHBlbmRUbygpYC5cbiAqIFRoZSBjaGlsZHJlbiBvZiBgPFBvcnRhbC8+YCBjb21wb25lbnQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgYGNvbnRhaW5lcmAgc3BlY2lmaWVkLlxuICovXG52YXIgUG9ydGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQb3J0YWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuID8gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfV2FpdEZvckNvbnRhaW5lci5kZWZhdWx0LCB7XG4gICAgICBjb250YWluZXI6IHRoaXMucHJvcHMuY29udGFpbmVyLFxuICAgICAgb25Db250YWluZXJSZXNvbHZlZDogdGhpcy5wcm9wcy5vblJlbmRlcmVkXG4gICAgfSwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIF9yZWFjdERvbS5kZWZhdWx0LmNyZWF0ZVBvcnRhbChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgY29udGFpbmVyKTtcbiAgICB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFBvcnRhbDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUG9ydGFsLmRpc3BsYXlOYW1lID0gJ1BvcnRhbCc7XG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBOb2RlLCBDb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuIFRoZSBgY29udGFpbmVyYCB3aWxsIGhhdmUgdGhlIFBvcnRhbCBjaGlsZHJlblxuICAgKiBhcHBlbmRlZCB0byBpdC5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX2NvbXBvbmVudE9yRWxlbWVudC5kZWZhdWx0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuICBvblJlbmRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufTtcbnZhciBfZGVmYXVsdCA9IFBvcnRhbDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhc0NsYXNzO1xuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSByZXR1cm4gISFjbGFzc05hbWUgJiYgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtlbHNlIHJldHVybiAoXCIgXCIgKyAoZWxlbWVudC5jbGFzc05hbWUuYmFzZVZhbCB8fCBlbGVtZW50LmNsYXNzTmFtZSkgKyBcIiBcIikuaW5kZXhPZihcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiKSAhPT0gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIgPSByZXF1aXJlKCcuL3V0aWxzL2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyJyk7XG5cbnZhciBfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBlbGVtZW50VHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICBpZiAoX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIFJlYWN0RWxlbWVudCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCxleHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgKGEgc3RyaW5nICcpICsgJywgY29tcG9uZW50IGNsYXNzLCBvciBmdW5jdGlvbiBjb21wb25lbnQpLicpO1xuICB9XG5cbiAgaWYgKCEoMCwgX3JlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gZWxlbWVudCB0eXBlIChhIHN0cmluZyAnKSArICcsIGNvbXBvbmVudCBjbGFzcywgb3IgZnVuY3Rpb24gY29tcG9uZW50KS4nKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMi5kZWZhdWx0KShlbGVtZW50VHlwZSk7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KGNvbXBvbmVudE9yRWxlbWVudCkge1xuICByZXR1cm4gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb2ZmID0gZnVuY3Rpb24gb2ZmKCkge307XG5cbmlmIChfaW5ET00uZGVmYXVsdCkge1xuICBvZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb2ZmO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgb24gPSBmdW5jdGlvbiBvbigpIHt9O1xuXG5pZiAoX2luRE9NLmRlZmF1bHQpIHtcbiAgb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybiBmdW5jdGlvbiAobm9kZSwgZXZlbnROYW1lLCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgY2FwdHVyZSB8fCBmYWxzZSk7XG4gICAgfTtlbHNlIGlmIChkb2N1bWVudC5hdHRhY2hFdmVudCkgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHJldHVybiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudE5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgZS50YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG4gICAgICAgIGUuY3VycmVudFRhcmdldCA9IG5vZGU7XG4gICAgICAgIGhhbmRsZXIuY2FsbChub2RlLCBlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKTtcbn1cblxudmFyIF9kZWZhdWx0ID0gb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3RlblwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciBlc2NhcGVLZXlDb2RlID0gMjc7XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG5mdW5jdGlvbiBpc0xlZnRDbGlja0V2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5idXR0b24gPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG4vKipcbiAqIFRoZSBgPFJvb3RDbG9zZVdyYXBwZXIvPmAgY29tcG9uZW50IHJlZ2lzdGVycyB5b3VyIGNhbGxiYWNrIG9uIHRoZSBkb2N1bWVudFxuICogd2hlbiByZW5kZXJlZC4gUG93ZXJzIHRoZSBgPE92ZXJsYXkvPmAgY29tcG9uZW50LiBUaGlzIGlzIHVzZWQgYWNoaWV2ZSBtb2RhbFxuICogc3R5bGUgYmVoYXZpb3Igd2hlcmUgeW91ciBjYWxsYmFjayBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciB0cmllcyB0b1xuICogaW50ZXJhY3Qgd2l0aCB0aGUgcmVzdCBvZiB0aGUgZG9jdW1lbnQgb3IgaGl0cyB0aGUgYGVzY2Aga2V5LlxuICovXG5cblxudmFyIFJvb3RDbG9zZVdyYXBwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm9vdENsb3NlV3JhcHBlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm9vdENsb3NlV3JhcHBlcihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfdGhpcy5wcm9wcy5ldmVudDtcbiAgICAgIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBVc2UgY2FwdHVyZSBmb3IgdGhpcyBsaXN0ZW5lciBzbyBpdCBmaXJlcyBiZWZvcmUgUmVhY3QncyBsaXN0ZW5lciwgdG9cbiAgICAgIC8vIGF2b2lkIGZhbHNlIHBvc2l0aXZlcyBpbiB0aGUgY29udGFpbnMoKSBjaGVjayBiZWxvdyBpZiB0aGUgdGFyZ2V0IERPTVxuICAgICAgLy8gZWxlbWVudCBpcyByZW1vdmVkIGluIHRoZSBSZWFjdCBtb3VzZSBjYWxsYmFjay5cblxuICAgICAgX3RoaXMucmVtb3ZlTW91c2VDYXB0dXJlTGlzdGVuZXIgPSAoMCwgX2xpc3Rlbi5kZWZhdWx0KShkb2MsIGV2ZW50LCBfdGhpcy5oYW5kbGVNb3VzZUNhcHR1cmUsIHRydWUpO1xuICAgICAgX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lciA9ICgwLCBfbGlzdGVuLmRlZmF1bHQpKGRvYywgZXZlbnQsIF90aGlzLmhhbmRsZU1vdXNlKTtcbiAgICAgIF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIgPSAoMCwgX2xpc3Rlbi5kZWZhdWx0KShkb2MsICdrZXl1cCcsIF90aGlzLmhhbmRsZUtleVVwKTtcblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvYy5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMubW9iaWxlU2FmYXJpSGFja0xpc3RlbmVycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuYm9keS5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiAoMCwgX2xpc3Rlbi5kZWZhdWx0KShlbCwgJ21vdXNlbW92ZScsIG5vb3ApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucmVtb3ZlTW91c2VDYXB0dXJlTGlzdGVuZXIpIF90aGlzLnJlbW92ZU1vdXNlQ2FwdHVyZUxpc3RlbmVyKCk7XG4gICAgICBpZiAoX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcikgX3RoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcigpO1xuICAgICAgaWYgKF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIpIF90aGlzLnJlbW92ZUtleXVwTGlzdGVuZXIoKTtcbiAgICAgIGlmIChfdGhpcy5tb2JpbGVTYWZhcmlIYWNrTGlzdGVuZXJzKSBfdGhpcy5tb2JpbGVTYWZhcmlIYWNrTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlbW92ZSkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VDYXB0dXJlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSA9IGlzTW9kaWZpZWRFdmVudChlKSB8fCAhaXNMZWZ0Q2xpY2tFdmVudChlKSB8fCAoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKSwgZS50YXJnZXQpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIV90aGlzLnByZXZlbnRNb3VzZVJvb3RDbG9zZSAmJiBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZShlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5VXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUua2V5Q29kZSA9PT0gZXNjYXBlS2V5Q29kZSAmJiBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJvb3RDbG9zZShlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucHJldmVudE1vdXNlUm9vdENsb3NlID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvb3RDbG9zZVdyYXBwZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICghdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiBwcmV2UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgJiYgIXByZXZQcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfTtcblxuICByZXR1cm4gUm9vdENsb3NlV3JhcHBlcjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuUm9vdENsb3NlV3JhcHBlci5kaXNwbGF5TmFtZSA9ICdSb290Q2xvc2VXcmFwcGVyJztcblJvb3RDbG9zZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgY2xpY2sgb3IgbW91c2Vkb3duLiBBbHNvIHRyaWdnZXJzIHdoZW4gdXNlciBoaXRzIGBlc2NgLlxuICAgKi9cbiAgb25Sb290Q2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDaGlsZHJlbiB0byByZW5kZXIuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHRoZSBSb290Q2xvc2VXcmFwcGVyLCBwcmV2ZW50aW5nIGl0IGZyb20gdHJpZ2dlcmluZyBgb25Sb290Q2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDaG9vc2Ugd2hpY2ggZG9jdW1lbnQgbW91c2UgZXZlbnQgdG8gYmluZCB0by5cbiAgICovXG4gIGV2ZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydjbGljaycsICdtb3VzZWRvd24nXSlcbn07XG5Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZXZlbnQ6ICdjbGljaydcbn07XG52YXIgX2RlZmF1bHQgPSBSb290Q2xvc2VXcmFwcGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG52YXIgX2NhbWVsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9jYW1lbGl6ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2NhbWVsaXplLmRlZmF1bHQpKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfZWxlbWVudFR5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzLWV4dHJhL2xpYi9lbGVtZW50VHlwZVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX1BvcnRhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUG9ydGFsXCIpKTtcblxudmFyIF9Sb290Q2xvc2VXcmFwcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Sb290Q2xvc2VXcmFwcGVyXCIpKTtcblxudmFyIF9yZWFjdFBvcHBlciA9IHJlcXVpcmUoXCJyZWFjdC1wb3BwZXJcIik7XG5cbnZhciBfZm9yd2FyZFJlZiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWNvbnRleHQtdG9vbGJveC9mb3J3YXJkUmVmXCIpKTtcblxudmFyIF9XYWl0Rm9yQ29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9XYWl0Rm9yQ29udGFpbmVyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbi8qKlxuICogQnVpbHQgb24gdG9wIG9mIGA8UG9zaXRpb24vPmAgYW5kIGA8UG9ydGFsLz5gLCB0aGUgb3ZlcmxheSBjb21wb25lbnQgaXNcbiAqIGdyZWF0IGZvciBjdXN0b20gdG9vbHRpcCBvdmVybGF5cy5cbiAqL1xudmFyIE92ZXJsYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoT3ZlcmxheSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheShwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlSGlkZGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBleGl0ZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkV4aXRlZC5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBleGl0ZWQ6ICFwcm9wcy5zaG93XG4gICAgfTtcbiAgICBfdGhpcy5vbkhpZGRlbkxpc3RlbmVyID0gX3RoaXMuaGFuZGxlSGlkZGVuLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpO1xuICAgIF90aGlzLl9sYXN0VGFyZ2V0ID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBPdmVybGF5LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLnNob3cpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4aXRlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbmV4dFByb3BzLnRyYW5zaXRpb24pIHtcbiAgICAgIC8vIE90aGVyd2lzZSBsZXQgaGFuZGxlSGlkZGVuIHRha2UgY2FyZSBvZiBtYXJraW5nIGV4aXRlZC5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgX3Byb3RvID0gT3ZlcmxheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMuZ2V0VGFyZ2V0KClcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzID09PSBwcmV2UHJvcHMpIHJldHVybjtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5nZXRUYXJnZXQoKTtcblxuICAgIGlmICh0YXJnZXQgIT09IHRoaXMuc3RhdGUudGFyZ2V0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLnByb3BzLnRhcmdldDtcbiAgICB0YXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gdGFyZ2V0KCkgOiB0YXJnZXQ7XG4gICAgcmV0dXJuIHRhcmdldCAmJiBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0YXJnZXQpIHx8IG51bGw7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfMCA9IF90aGlzJHByb3BzMi50YXJnZXQsXG4gICAgICAgIGNvbnRhaW5lciA9IF90aGlzJHByb3BzMi5jb250YWluZXIsXG4gICAgICAgIGNvbnRhaW5lclBhZGRpbmcgPSBfdGhpcyRwcm9wczIuY29udGFpbmVyUGFkZGluZyxcbiAgICAgICAgcGxhY2VtZW50ID0gX3RoaXMkcHJvcHMyLnBsYWNlbWVudCxcbiAgICAgICAgcm9vdENsb3NlID0gX3RoaXMkcHJvcHMyLnJvb3RDbG9zZSxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgIGZsaXAgPSBfdGhpcyRwcm9wczIuZmxpcCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJHBvcHBlckNvID0gX3RoaXMkcHJvcHMyLnBvcHBlckNvbmZpZyxcbiAgICAgICAgcG9wcGVyQ29uZmlnID0gX3RoaXMkcHJvcHMyJHBvcHBlckNvID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzMiRwb3BwZXJDbyxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzMi50cmFuc2l0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzMiwgW1widGFyZ2V0XCIsIFwiY29udGFpbmVyXCIsIFwiY29udGFpbmVyUGFkZGluZ1wiLCBcInBsYWNlbWVudFwiLCBcInJvb3RDbG9zZVwiLCBcImNoaWxkcmVuXCIsIFwiZmxpcFwiLCBcInBvcHBlckNvbmZpZ1wiLCBcInRyYW5zaXRpb25cIl0pO1xuXG4gICAgdmFyIHRhcmdldCA9IHRoaXMuc3RhdGUudGFyZ2V0OyAvLyBEb24ndCB1bi1yZW5kZXIgdGhlIG92ZXJsYXkgd2hpbGUgaXQncyB0cmFuc2l0aW9uaW5nIG91dC5cblxuICAgIHZhciBtb3VudE92ZXJsYXkgPSBwcm9wcy5zaG93IHx8IFRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkO1xuXG4gICAgaWYgKCFtb3VudE92ZXJsYXkpIHtcbiAgICAgIC8vIERvbid0IGJvdGhlciBzaG93aW5nIGFueXRoaW5nIGlmIHdlIGRvbid0IGhhdmUgdG8uXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbjtcbiAgICB2YXIgX3BvcHBlckNvbmZpZyRtb2RpZmllID0gcG9wcGVyQ29uZmlnLm1vZGlmaWVycyxcbiAgICAgICAgbW9kaWZpZXJzID0gX3BvcHBlckNvbmZpZyRtb2RpZmllID09PSB2b2lkIDAgPyB7fSA6IF9wb3BwZXJDb25maWckbW9kaWZpZTtcblxuICAgIHZhciBwb3BwZXJQcm9wcyA9IF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgcmVmZXJlbmNlRWxlbWVudDogdGFyZ2V0LFxuICAgICAgZW5hYmxlRXZlbnRzOiBwcm9wcy5zaG93LFxuICAgICAgbW9kaWZpZXJzOiBfZXh0ZW5kcyh7fSwgbW9kaWZpZXJzLCB7XG4gICAgICAgIHByZXZlbnRPdmVyZmxvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhZGRpbmc6IGNvbnRhaW5lclBhZGRpbmcgfHwgNVxuICAgICAgICB9LCBtb2RpZmllcnMucHJldmVudE92ZXJmbG93KSxcbiAgICAgICAgZmxpcDogX2V4dGVuZHMoe1xuICAgICAgICAgIGVuYWJsZWQ6ICEhZmxpcFxuICAgICAgICB9LCBtb2RpZmllcnMucHJldmVudE92ZXJmbG93KVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RQb3BwZXIuUG9wcGVyLCBwb3BwZXJQcm9wcywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBhcnJvd1Byb3BzID0gX3JlZi5hcnJvd1Byb3BzLFxuICAgICAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgICAgICByZWYgPSBfcmVmLnJlZixcbiAgICAgICAgICBwb3BwZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcnJvd1Byb3BzXCIsIFwic3R5bGVcIiwgXCJyZWZcIl0pO1xuXG4gICAgICBfdGhpczIucG9wcGVyID0gcG9wcGVyO1xuXG4gICAgICB2YXIgaW5uZXJDaGlsZCA9IF90aGlzMi5wcm9wcy5jaGlsZHJlbihfZXh0ZW5kcyh7fSwgcG9wcGVyLCB7XG4gICAgICAgIC8vIHBvcHBlciBkb2Vzbid0IHNldCB0aGUgaW5pdGlhbCBwbGFjZW1lbnRcbiAgICAgICAgcGxhY2VtZW50OiBwb3BwZXIucGxhY2VtZW50IHx8IHBsYWNlbWVudCxcbiAgICAgICAgc2hvdzogcHJvcHMuc2hvdyxcbiAgICAgICAgYXJyb3dQcm9wczogYXJyb3dQcm9wcyxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfVxuICAgICAgfSkpO1xuXG4gICAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICAgICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZDtcbiAgICAgICAgaW5uZXJDaGlsZCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbiwge1xuICAgICAgICAgIGluOiBwcm9wcy5zaG93LFxuICAgICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgICBvbkV4aXRlZDogX3RoaXMyLm9uSGlkZGVuTGlzdGVuZXIsXG4gICAgICAgICAgb25FbnRlcjogb25FbnRlcixcbiAgICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkXG4gICAgICAgIH0sIGlubmVyQ2hpbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5uZXJDaGlsZDtcbiAgICB9KTtcblxuICAgIGlmIChyb290Q2xvc2UpIHtcbiAgICAgIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUm9vdENsb3NlV3JhcHBlci5kZWZhdWx0LCB7XG4gICAgICAgIG9uUm9vdENsb3NlOiBwcm9wcy5vbkhpZGUsXG4gICAgICAgIGV2ZW50OiBwcm9wcy5yb290Q2xvc2VFdmVudCxcbiAgICAgICAgZGlzYWJsZWQ6IHByb3BzLnJvb3RDbG9zZURpc2FibGVkXG4gICAgICB9LCBjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbC5kZWZhdWx0LCB7XG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICAgIH0sIGNoaWxkKTtcbiAgfTtcblxuICByZXR1cm4gT3ZlcmxheTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuT3ZlcmxheS5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgX1BvcnRhbC5kZWZhdWx0LnByb3BUeXBlcywge1xuICAvKipcbiAgICogU2V0IHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBPdmVybGF5XG4gICAqL1xuICBzaG93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKiogU3BlY2lmeSB3aGVyZSB0aGUgb3ZlcmxheSBlbGVtZW50IGlzIHBvc2l0aW9uZWQgaW4gcmVsYXRpb24gdG8gdGhlIHRhcmdldCBlbGVtZW50ICovXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKF9yZWFjdFBvcHBlci5wbGFjZW1lbnRzKSxcblxuICAvKipcbiAgICogRW5hYmxlcyB0aGUgUG9wcGVyLmpzIGBmbGlwYCBtb2RpZmllciwgYWxsb3dpbmcgdGhlIE92ZXJsYXkgdG9cbiAgICogYXV0b21hdGljYWxseSBhZGp1c3QgaXQncyBwbGFjZW1lbnQgaW4gY2FzZSBvZiBvdmVybGFwIHdpdGggdGhlIHZpZXdwb3J0IG9yIHRvZ2dsZS5cbiAgICogUmVmZXIgdG8gdGhlIFtmbGlwIGRvY3NdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9wb3BwZXItZG9jdW1lbnRhdGlvbi5odG1sI21vZGlmaWVycy4uZmxpcC5lbmFibGVkKSBmb3IgbW9yZSBpbmZvXG4gICAqL1xuICBmbGlwOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSByZW5kZXIgcHJvcCB0aGF0IHJldHVybnMgYW4gZWxlbWVudCB0byBvdmVybGF5IGFuZCBwb3NpdGlvbi4gU2VlXG4gICAqIHRoZSBbcmVhY3QtcG9wcGVyIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcmVhY3QtcG9wcGVyI2NoaWxkcmVuKSBmb3IgbW9yZSBpbmZvLlxuICAgKlxuICAgKiBAdHlwZSB7RnVuY3Rpb24gKHtcbiAgICogICBzaG93OiBib29sZWFuLFxuICAgKiAgIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICAgKiAgIG91dE9mQm91bmRhcmllczogP2Jvb2xlYW4sXG4gICAqICAgc2NoZWR1bGVVcGRhdGU6ICgpID0+IHZvaWQsXG4gICAqICAgcHJvcHM6IHtcbiAgICogICAgIHJlZjogKD9IVE1MRWxlbWVudCkgPT4gdm9pZCxcbiAgICogICAgIHN0eWxlOiB7IFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSxcbiAgICogICAgIGFyaWEtbGFiZWxsZWRieTogP3N0cmluZ1xuICAgKiAgIH0sXG4gICAqICAgYXJyb3dQcm9wczoge1xuICAgKiAgICAgcmVmOiAoP0hUTUxFbGVtZW50KSA9PiB2b2lkLFxuICAgKiAgICAgc3R5bGU6IHsgW3N0cmluZ106IHN0cmluZyB8IG51bWJlciB9LFxuICAgKiAgIH0sXG4gICAqIH0pID0+IFJlYWN0LkVsZW1lbnR9XG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSBzZXQgb2YgcG9wcGVyIG9wdGlvbnMgYW5kIHByb3BzIHBhc3NlZCBkaXJlY3RseSB0byByZWFjdC1wb3BwZXIncyBQb3BwZXIgY29tcG9uZW50LlxuICAgKi9cbiAgcG9wcGVyQ29uZmlnOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHdoZXRoZXIgdGhlIG92ZXJsYXkgc2hvdWxkIHRyaWdnZXIgYG9uSGlkZWAgd2hlbiB0aGUgdXNlciBjbGlja3Mgb3V0c2lkZSB0aGUgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU3BlY2lmeSBldmVudCBmb3IgdG9nZ2xpbmcgb3ZlcmxheVxuICAgKi9cbiAgcm9vdENsb3NlRXZlbnQ6IF9Sb290Q2xvc2VXcmFwcGVyLmRlZmF1bHQucHJvcFR5cGVzLmV2ZW50LFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IGRpc2FibGVkIGZvciBkaXNhYmxlIFJvb3RDbG9zZVdyYXBwZXJcbiAgICovXG4gIHJvb3RDbG9zZURpc2FibGVkOiBfUm9vdENsb3NlV3JhcHBlci5kZWZhdWx0LnByb3BUeXBlcy5kaXNhYmxlZCxcblxuICAvKipcbiAgICogQSBDYWxsYmFjayBmaXJlZCBieSB0aGUgT3ZlcmxheSB3aGVuIGl0IHdpc2hlcyB0byBiZSBoaWRkZW4uXG4gICAqXG4gICAqIF9fcmVxdWlyZWRfXyB3aGVuIGByb290Q2xvc2VgIGlzIGB0cnVlYC5cbiAgICpcbiAgICogQHR5cGUgZnVuY1xuICAgKi9cbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUocHJvcHMpIHtcbiAgICB2YXIgcHJvcFR5cGUgPSBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYztcblxuICAgIGlmIChwcm9wcy5yb290Q2xvc2UpIHtcbiAgICAgIHByb3BUeXBlID0gcHJvcFR5cGUuaXNSZXF1aXJlZDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcFR5cGUuYXBwbHkodm9pZCAwLCBbcHJvcHNdLmNvbmNhdChhcmdzKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEEgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBAMi4wLjBgIGA8VHJhbnNpdGlvbi8+YCBjb21wb25lbnRcbiAgICogdXNlZCB0byBhbmltYXRlIHRoZSBvdmVybGF5IGFzIGl0IGNoYW5nZXMgdmlzaWJpbGl0eS5cbiAgICovXG4gIHRyYW5zaXRpb246IF9lbGVtZW50VHlwZS5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE92ZXJsYXkgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgT3ZlcmxheSBiZWdpbnMgdG8gdHJhbnNpdGlvbiBpblxuICAgKi9cbiAgb25FbnRlcmluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBPdmVybGF5IGZpbmlzaGVzIHRyYW5zaXRpb25pbmcgaW5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHJpZ2h0IGJlZm9yZSB0aGUgT3ZlcmxheSB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBPdmVybGF5IGJlZ2lucyB0byB0cmFuc2l0aW9uIG91dFxuICAgKi9cbiAgb25FeGl0aW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIE92ZXJsYXkgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBvdXRcbiAgICovXG4gIG9uRXhpdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY1xufSk7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfZm9yd2FyZFJlZi5kZWZhdWx0KShmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfV2FpdEZvckNvbnRhaW5lci5kZWZhdWx0LCB7XG4gICAgY29udGFpbmVyOiBwcm9wcy5jb250YWluZXJcbiAgfSwgZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE92ZXJsYXksIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICAgIH0pKTtcbiAgfSk7XG59LCB7XG4gIGRpc3BsYXlOYW1lOiAnd2l0aENvbnRhaW5lcihPdmVybGF5KSdcbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfYWN0aXZlRWxlbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL2FjdGl2ZUVsZW1lbnRcIikpO1xuXG52YXIgX2NvbnRhaW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvcXVlcnkvY29udGFpbnNcIikpO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfbGlzdGVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZG9tLWhlbHBlcnMvZXZlbnRzL2xpc3RlblwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29tcG9uZW50T3JFbGVtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlcy1leHRyYS9saWIvY29tcG9uZW50T3JFbGVtZW50XCIpKTtcblxudmFyIF9lbGVtZW50VHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXMtZXh0cmEvbGliL2VsZW1lbnRUeXBlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfTW9kYWxNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Nb2RhbE1hbmFnZXJcIikpO1xuXG52YXIgX1BvcnRhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUG9ydGFsXCIpKTtcblxudmFyIF9nZXRDb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2dldENvbnRhaW5lclwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvb3duZXJEb2N1bWVudFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG52YXIgbW9kYWxNYW5hZ2VyID0gbmV3IF9Nb2RhbE1hbmFnZXIuZGVmYXVsdCgpO1xuXG5mdW5jdGlvbiBvbWl0UHJvcHMocHJvcHMsIHByb3BUeXBlcykge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG4gIGtleXMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcFR5cGVzLCBwcm9wKSkge1xuICAgICAgbmV3UHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV3UHJvcHM7XG59XG4vKipcbiAqIExvdmUgdGhlbSBvciBoYXRlIHRoZW0sIGA8TW9kYWwgLz5gIHByb3ZpZGVzIGEgc29saWQgZm91bmRhdGlvbiBmb3IgY3JlYXRpbmcgZGlhbG9ncywgbGlnaHRib3hlcywgb3Igd2hhdGV2ZXIgZWxzZS5cbiAqIFRoZSBNb2RhbCBjb21wb25lbnQgcmVuZGVycyBpdHMgYGNoaWxkcmVuYCBub2RlIGluIGZyb250IG9mIGEgYmFja2Ryb3AgY29tcG9uZW50LlxuICpcbiAqIFRoZSBNb2RhbCBvZmZlcnMgYSBmZXcgaGVscGZ1bCBmZWF0dXJlcyBvdmVyIHVzaW5nIGp1c3QgYSBgPFBvcnRhbC8+YCBjb21wb25lbnQgYW5kIHNvbWUgc3R5bGVzOlxuICpcbiAqIC0gTWFuYWdlcyBkaWFsb2cgc3RhY2tpbmcgd2hlbiBvbmUtYXQtYS10aW1lIGp1c3QgaXNuJ3QgZW5vdWdoLlxuICogLSBDcmVhdGVzIGEgYmFja2Ryb3AsIGZvciBkaXNhYmxpbmcgaW50ZXJhY3Rpb24gYmVsb3cgdGhlIG1vZGFsLlxuICogLSBJdCBwcm9wZXJseSBtYW5hZ2VzIGZvY3VzOyBtb3ZpbmcgdG8gdGhlIG1vZGFsIGNvbnRlbnQsIGFuZCBrZWVwaW5nIGl0IHRoZXJlIHVudGlsIHRoZSBtb2RhbCBpcyBjbG9zZWQuXG4gKiAtIEl0IGRpc2FibGVzIHNjcm9sbGluZyBvZiB0aGUgcGFnZSBjb250ZW50IHdoaWxlIG9wZW4uXG4gKiAtIEFkZHMgdGhlIGFwcHJvcHJpYXRlIEFSSUEgcm9sZXMgYXJlIGF1dG9tYXRpY2FsbHkuXG4gKiAtIEVhc2lseSBwbHVnZ2FibGUgYW5pbWF0aW9ucyB2aWEgYSBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50LlxuICpcbiAqIE5vdGUgdGhhdCwgaW4gdGhlIHNhbWUgd2F5IHRoZSBiYWNrZHJvcCBlbGVtZW50IHByZXZlbnRzIHVzZXJzIGZyb20gY2xpY2tpbmcgb3IgaW50ZXJhY3RpbmdcbiAqIHdpdGggdGhlIHBhZ2UgY29udGVudCB1bmRlcm5lYXRoIHRoZSBNb2RhbCwgU2NyZWVuIHJlYWRlcnMgYWxzbyBuZWVkIHRvIGJlIHNpZ25hbGVkIHRvIG5vdCB0b1xuICogaW50ZXJhY3Qgd2l0aCBwYWdlIGNvbnRlbnQgd2hpbGUgdGhlIE1vZGFsIGlzIG9wZW4uIFRvIGRvIHRoaXMsIHdlIHVzZSBhIGNvbW1vbiB0ZWNobmlxdWUgb2YgYXBwbHlpbmdcbiAqIHRoZSBgYXJpYS1oaWRkZW49J3RydWUnYCBhdHRyaWJ1dGUgdG8gdGhlIG5vbi1Nb2RhbCBlbGVtZW50cyBpbiB0aGUgTW9kYWwgYGNvbnRhaW5lcmAuIFRoaXMgbWVhbnMgdGhhdCBmb3JcbiAqIGEgTW9kYWwgdG8gYmUgdHJ1bHkgbW9kYWwsIGl0IHNob3VsZCBoYXZlIGEgYGNvbnRhaW5lcmAgdGhhdCBpcyBfb3V0c2lkZV8geW91ciBhcHAnc1xuICogUmVhY3QgaGllcmFyY2h5IChzdWNoIGFzIHRoZSBkZWZhdWx0OiBkb2N1bWVudC5ib2R5KS5cbiAqL1xuXG5cbnZhciBNb2RhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNb2RhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTW9kYWwoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF9hcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgX2FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChfYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBleGl0ZWQ6ICFfdGhpcy5wcm9wcy5zaG93XG4gICAgfTtcblxuICAgIF90aGlzLm9uUG9ydGFsUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25TaG93KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uU2hvdygpO1xuICAgICAgfSAvLyBhdXRvZm9jdXMgYWZ0ZXIgb25TaG93LCB0byBub3QgdHJpZ2dlciBhIGZvY3VzIGV2ZW50IGZvciBwcmV2aW91c1xuICAgICAgLy8gbW9kYWxzIGJlZm9yZSB0aGlzIG9uZSBpcyBzaG93bi5cblxuXG4gICAgICBfdGhpcy5hdXRvRm9jdXMoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMub25TaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgICB2YXIgY29udGFpbmVyID0gKDAsIF9nZXRDb250YWluZXIuZGVmYXVsdCkoX3RoaXMucHJvcHMuY29udGFpbmVyLCBkb2MuYm9keSk7XG5cbiAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIuYWRkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBjb250YWluZXIsIF90aGlzLnByb3BzLmNvbnRhaW5lckNsYXNzTmFtZSk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUtleWRvd25MaXN0ZW5lciA9ICgwLCBfbGlzdGVuLmRlZmF1bHQpKGRvYywgJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24pO1xuICAgICAgX3RoaXMucmVtb3ZlRm9jdXNMaXN0ZW5lciA9ICgwLCBfbGlzdGVuLmRlZmF1bHQpKGRvYywgJ2ZvY3VzJywgLy8gdGhlIHRpbWVvdXQgaXMgbmVjZXNzYXJ5IGIvYyB0aGlzIHdpbGwgcnVuIGJlZm9yZSB0aGUgbmV3IG1vZGFsIGlzIG1vdW50ZWRcbiAgICAgIC8vIGFuZCBzbyBzdGVhbHMgZm9jdXMgZnJvbSBpdFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChfdGhpcy5lbmZvcmNlRm9jdXMpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIF90aGlzLm9uSGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnByb3BzLm1hbmFnZXIucmVtb3ZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcblxuICAgICAgX3RoaXMucmVtb3ZlS2V5ZG93bkxpc3RlbmVyKCk7XG5cbiAgICAgIF90aGlzLnJlbW92ZUZvY3VzTGlzdGVuZXIoKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLnJlc3RvcmVGb2N1cykge1xuICAgICAgICBfdGhpcy5yZXN0b3JlTGFzdEZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNldERpYWxvZ1JlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmRpYWxvZyA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0QmFja2Ryb3BSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5iYWNrZHJvcCA9IHJlZiAmJiBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShyZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVIaWRkZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGV4aXRlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uSGlkZSgpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkV4aXRlZC5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CYWNrZHJvcENsaWNrKGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuYmFja2Ryb3AgPT09IHRydWUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25IaWRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZURvY3VtZW50S2V5RG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMua2V5Ym9hcmQgJiYgZS5rZXlDb2RlID09PSAyNyAmJiBfdGhpcy5pc1RvcE1vZGFsKCkpIHtcbiAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXNjYXBlS2V5RG93bikge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uRXNjYXBlS2V5RG93bihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnByb3BzLm9uSGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmVuZm9yY2VGb2N1cyB8fCAhX3RoaXMuX2lzTW91bnRlZCB8fCAhX3RoaXMuaXNUb3BNb2RhbCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9hY3RpdmVFbGVtZW50LmRlZmF1bHQpKCgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSkpO1xuXG4gICAgICBpZiAoX3RoaXMuZGlhbG9nICYmICEoMCwgX2NvbnRhaW5zLmRlZmF1bHQpKF90aGlzLmRpYWxvZywgY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIF90aGlzLmRpYWxvZy5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5yZW5kZXJCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICByZW5kZXJCYWNrZHJvcCA9IF90aGlzJHByb3BzMi5yZW5kZXJCYWNrZHJvcCxcbiAgICAgICAgICBUcmFuc2l0aW9uID0gX3RoaXMkcHJvcHMyLmJhY2tkcm9wVHJhbnNpdGlvbjtcbiAgICAgIHZhciBiYWNrZHJvcCA9IHJlbmRlckJhY2tkcm9wKHtcbiAgICAgICAgcmVmOiBfdGhpcy5zZXRCYWNrZHJvcFJlZixcbiAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlQmFja2Ryb3BDbGlja1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChUcmFuc2l0aW9uKSB7XG4gICAgICAgIGJhY2tkcm9wID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICAgIGluOiBfdGhpcy5wcm9wcy5zaG93XG4gICAgICAgIH0sIGJhY2tkcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhY2tkcm9wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBNb2RhbC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5zaG93KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleGl0ZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW5leHRQcm9wcy50cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUhpZGRlbiB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBleGl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IE1vZGFsLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSBmdW5jdGlvbiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAoX2luRE9NLmRlZmF1bHQgJiYgIXByZXZQcm9wcy5zaG93ICYmIHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSAoMCwgX2FjdGl2ZUVsZW1lbnQuZGVmYXVsdCkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgdGhpcy5vblNob3coKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgdHJhbnNpdGlvbiA9IHRoaXMucHJvcHMudHJhbnNpdGlvbjtcblxuICAgIGlmIChwcmV2UHJvcHMuc2hvdyAmJiAhdGhpcy5wcm9wcy5zaG93ICYmICF0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBPdGhlcndpc2UgaGFuZGxlSGlkZGVuIHdpbGwgY2FsbCB0aGlzLlxuICAgICAgdGhpcy5vbkhpZGUoKTtcbiAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMuc2hvdyAmJiB0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgIHRoaXMub25TaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzaG93ID0gX3RoaXMkcHJvcHMzLnNob3csXG4gICAgICAgIHRyYW5zaXRpb24gPSBfdGhpcyRwcm9wczMudHJhbnNpdGlvbjtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcblxuICAgIGlmIChzaG93IHx8IHRyYW5zaXRpb24gJiYgIXRoaXMuc3RhdGUuZXhpdGVkKSB7XG4gICAgICB0aGlzLm9uSGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uYXV0b0ZvY3VzID0gZnVuY3Rpb24gYXV0b0ZvY3VzKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5hdXRvRm9jdXMpIHJldHVybjtcbiAgICB2YXIgY3VycmVudEFjdGl2ZUVsZW1lbnQgPSAoMCwgX2FjdGl2ZUVsZW1lbnQuZGVmYXVsdCkoKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKHRoaXMpKTtcblxuICAgIGlmICh0aGlzLmRpYWxvZyAmJiAhKDAsIF9jb250YWlucy5kZWZhdWx0KSh0aGlzLmRpYWxvZywgY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICB0aGlzLmxhc3RGb2N1cyA9IGN1cnJlbnRBY3RpdmVFbGVtZW50O1xuICAgICAgdGhpcy5kaWFsb2cuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RvcmVMYXN0Rm9jdXMgPSBmdW5jdGlvbiByZXN0b3JlTGFzdEZvY3VzKCkge1xuICAgIC8vIFN1cHBvcnQ6IDw9SUUxMSBkb2Vzbid0IHN1cHBvcnQgYGZvY3VzKClgIG9uIHN2ZyBlbGVtZW50cyAoUkI6ICM5MTcpXG4gICAgaWYgKHRoaXMubGFzdEZvY3VzICYmIHRoaXMubGFzdEZvY3VzLmZvY3VzKSB7XG4gICAgICB0aGlzLmxhc3RGb2N1cy5mb2N1cygpO1xuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNUb3BNb2RhbCA9IGZ1bmN0aW9uIGlzVG9wTW9kYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMubWFuYWdlci5pc1RvcE1vZGFsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIHNob3cgPSBfdGhpcyRwcm9wczQuc2hvdyxcbiAgICAgICAgY29udGFpbmVyID0gX3RoaXMkcHJvcHM0LmNvbnRhaW5lcixcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgIHJlbmRlckRpYWxvZyA9IF90aGlzJHByb3BzNC5yZW5kZXJEaWFsb2csXG4gICAgICAgIF90aGlzJHByb3BzNCRyb2xlID0gX3RoaXMkcHJvcHM0LnJvbGUsXG4gICAgICAgIHJvbGUgPSBfdGhpcyRwcm9wczQkcm9sZSA9PT0gdm9pZCAwID8gJ2RpYWxvZycgOiBfdGhpcyRwcm9wczQkcm9sZSxcbiAgICAgICAgVHJhbnNpdGlvbiA9IF90aGlzJHByb3BzNC50cmFuc2l0aW9uLFxuICAgICAgICBiYWNrZHJvcCA9IF90aGlzJHByb3BzNC5iYWNrZHJvcCxcbiAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHM0LmNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wczQuc3R5bGUsXG4gICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzNC5vbkV4aXQsXG4gICAgICAgIG9uRXhpdGluZyA9IF90aGlzJHByb3BzNC5vbkV4aXRpbmcsXG4gICAgICAgIG9uRW50ZXIgPSBfdGhpcyRwcm9wczQub25FbnRlcixcbiAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzNC5vbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQgPSBfdGhpcyRwcm9wczQub25FbnRlcmVkLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzNCwgW1wic2hvd1wiLCBcImNvbnRhaW5lclwiLCBcImNoaWxkcmVuXCIsIFwicmVuZGVyRGlhbG9nXCIsIFwicm9sZVwiLCBcInRyYW5zaXRpb25cIiwgXCJiYWNrZHJvcFwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkVudGVyZWRcIl0pO1xuXG4gICAgaWYgKCEoc2hvdyB8fCBUcmFuc2l0aW9uICYmICF0aGlzLnN0YXRlLmV4aXRlZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBkaWFsb2dQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHJvbGU6IHJvbGUsXG4gICAgICByZWY6IHRoaXMuc2V0RGlhbG9nUmVmLFxuICAgICAgLy8gYXBwYXJlbnRseSBvbmx5IHdvcmtzIG9uIHRoZSBkaWFsb2cgcm9sZSBlbGVtZW50XG4gICAgICAnYXJpYS1tb2RhbCc6IHJvbGUgPT09ICdkaWFsb2cnID8gdHJ1ZSA6IHVuZGVmaW5lZFxuICAgIH0sIG9taXRQcm9wcyhwcm9wcywgTW9kYWwucHJvcFR5cGVzKSwge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICB0YWJJbmRleDogJy0xJ1xuICAgIH0pO1xuXG4gICAgdmFyIGRpYWxvZyA9IHJlbmRlckRpYWxvZyA/IHJlbmRlckRpYWxvZyhkaWFsb2dQcm9wcykgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIGRpYWxvZ1Byb3BzLCBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIHJvbGU6ICdkb2N1bWVudCdcbiAgICB9KSk7XG5cbiAgICBpZiAoVHJhbnNpdGlvbikge1xuICAgICAgZGlhbG9nID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCB7XG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZSxcbiAgICAgICAgaW46IHNob3csXG4gICAgICAgIG9uRXhpdDogb25FeGl0LFxuICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgb25FeGl0ZWQ6IHRoaXMuaGFuZGxlSGlkZGVuLFxuICAgICAgICBvbkVudGVyOiBvbkVudGVyLFxuICAgICAgICBvbkVudGVyaW5nOiBvbkVudGVyaW5nLFxuICAgICAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZFxuICAgICAgfSwgZGlhbG9nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUG9ydGFsLmRlZmF1bHQsIHtcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgb25SZW5kZXJlZDogdGhpcy5vblBvcnRhbFJlbmRlcmVkXG4gICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuZGVmYXVsdC5GcmFnbWVudCwgbnVsbCwgYmFja2Ryb3AgJiYgdGhpcy5yZW5kZXJCYWNrZHJvcCgpLCBkaWFsb2cpKTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgTW9kYWxcbiAgICovXG4gIHNob3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIE5vZGUsIENvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci4gVGhlIE1vZGFsIGlzIGFwcGVuZGVkIHRvIGl0J3MgY29udGFpbmVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEZvciB0aGUgc2FrZSBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCB0aGUgY29udGFpbmVyIHNob3VsZCB1c3VhbGx5IGJlIHRoZSBkb2N1bWVudCBib2R5LCBzbyB0aGF0IHRoZSByZXN0IG9mIHRoZVxuICAgKiBwYWdlIGNvbnRlbnQgY2FuIGJlIHBsYWNlZCBiZWhpbmQgYSB2aXJ0dWFsIGJhY2tkcm9wIGFzIHdlbGwgYXMgYSB2aXN1YWwgb25lLlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfY29tcG9uZW50T3JFbGVtZW50LmRlZmF1bHQsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTW9kYWwgaXMgb3BlbmluZy5cbiAgICovXG4gIG9uU2hvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiBlaXRoZXIgdGhlIGJhY2tkcm9wIGlzIGNsaWNrZWQsIG9yIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQuXG4gICAqXG4gICAqIFRoZSBgb25IaWRlYCBjYWxsYmFjayBvbmx5IHNpZ25hbHMgaW50ZW50IGZyb20gdGhlIE1vZGFsLFxuICAgKiB5b3UgbXVzdCBhY3R1YWxseSBzZXQgdGhlIGBzaG93YCBwcm9wIHRvIGBmYWxzZWAgZm9yIHRoZSBNb2RhbCB0byBjbG9zZS5cbiAgICovXG4gIG9uSGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEluY2x1ZGUgYSBiYWNrZHJvcCBjb21wb25lbnQuXG4gICAqL1xuICBiYWNrZHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0YXRpYyddKV0pLFxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgZGlhbG9nIGNvbXBvbmVudC4gVXNlZnVsIGZvciBjdXN0b21cbiAgICogcmVuZGVyaW5nLiAqKk5vdGU6KiogdGhlIGNvbXBvbmVudCBzaG91bGQgbWFrZSBzdXJlIHRvIGFwcGx5IHRoZSBwcm92aWRlZCByZWYuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICByZW5kZXJEaWFsb2c9e3Byb3BzID0+IDxNeURpYWxvZyB7Li4ucHJvcHN9IC8+fVxuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlckRpYWxvZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgYmFja2Ryb3AgY29tcG9uZW50LiBVc2VmdWwgZm9yIGN1c3RvbVxuICAgKiBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICByZW5kZXJCYWNrZHJvcD17cHJvcHMgPT4gPE15QmFja2Ryb3Agey4uLnByb3BzfSAvPn1cbiAgICogYGBgXG4gICAqL1xuICByZW5kZXJCYWNrZHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSwgaWYgc3BlY2lmaWVkIGluIGBrZXlib2FyZGAsIGlzIHByZXNzZWQuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGJhY2tkcm9wLCBpZiBzcGVjaWZpZWQsIGlzIGNsaWNrZWQuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIGNzcyBjbGFzcyBvciBzZXQgb2YgY2xhc3NlcyBhcHBsaWVkIHRvIHRoZSBtb2RhbCBjb250YWluZXIgd2hlbiB0aGUgbW9kYWwgaXMgb3BlbixcbiAgICogYW5kIHJlbW92ZWQgd2hlbiBpdCBpcyBjbG9zZWQuXG4gICAqL1xuICBjb250YWluZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBtb2RhbCB3aGVuIGVzY2FwZSBrZXkgaXMgcHJlc3NlZFxuICAgKi9cbiAga2V5Ym9hcmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgZGlhbG9nIGNvbXBvbmVudC5cbiAgICovXG4gIHRyYW5zaXRpb246IF9lbGVtZW50VHlwZS5kZWZhdWx0LFxuXG4gIC8qKlxuICAgKiBBIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwQDIuMC4wYCBgPFRyYW5zaXRpb24vPmAgY29tcG9uZW50IHVzZWRcbiAgICogdG8gY29udHJvbCBhbmltYXRpb25zIGZvciB0aGUgYmFja2Ryb3AgY29tcG9uZW50cy5cbiAgICovXG4gIGJhY2tkcm9wVHJhbnNpdGlvbjogX2VsZW1lbnRUeXBlLmRlZmF1bHQsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy4gVGhpcyBhbHNvXG4gICAqIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBNb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBhdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYGZhbHNlYCBhcyBpdCBtYWtlcyB0aGUgTW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCBUaGUgbW9kYWwgd2lsbCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgTW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgZmFsc2VgIGFzIGl0IG1ha2VzIHRoZSBNb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGVuZm9yY2VGb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZW4gYHRydWVgIFRoZSBtb2RhbCB3aWxsIHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiBtb2RhbCBpcyBoaWRkZW5cbiAgICovXG4gIHJlc3RvcmVGb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTW9kYWwgdHJhbnNpdGlvbnMgaW5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhcyB0aGUgTW9kYWwgYmVnaW5zIHRvIHRyYW5zaXRpb24gaW5cbiAgICovXG4gIG9uRW50ZXJpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgTW9kYWwgZmluaXNoZXMgdHJhbnNpdGlvbmluZyBpblxuICAgKi9cbiAgb25FbnRlcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgcmlnaHQgYmVmb3JlIHRoZSBNb2RhbCB0cmFuc2l0aW9ucyBvdXRcbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFzIHRoZSBNb2RhbCBiZWdpbnMgdG8gdHJhbnNpdGlvbiBvdXRcbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBNb2RhbCBmaW5pc2hlcyB0cmFuc2l0aW9uaW5nIG91dFxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBBIE1vZGFsTWFuYWdlciBpbnN0YW5jZSB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW5cbiAgICogTW9kYWxzLiBVc2VmdWwgd2hlbiBjdXN0b21pemluZyBob3cgbW9kYWxzIGludGVyYWN0IHdpdGhpbiBhIGNvbnRhaW5lclxuICAgKi9cbiAgbWFuYWdlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBzaG93OiBmYWxzZSxcbiAgcm9sZTogJ2RpYWxvZycsXG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgYXV0b0ZvY3VzOiB0cnVlLFxuICBlbmZvcmNlRm9jdXM6IHRydWUsXG4gIHJlc3RvcmVGb2N1czogdHJ1ZSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgbWFuYWdlcjogbW9kYWxNYW5hZ2VyLFxuICByZW5kZXJCYWNrZHJvcDogZnVuY3Rpb24gcmVuZGVyQmFja2Ryb3AocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBwcm9wcyk7XG4gIH1cbn07XG5Nb2RhbC5NYW5hZ2VyID0gX01vZGFsTWFuYWdlci5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0gTW9kYWw7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2Zvcm1Db250ZXh0O1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX2ZvcndhcmRSZWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2ZvcndhcmRSZWZcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Db250ZXh0KENvbnRleHQpIHtcbiAgcmV0dXJuICgwLCBfZm9yd2FyZFJlZi5kZWZhdWx0KShmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHMubWFwVG9WYWx1ZShjb250ZXh0KVxuICAgICAgfSwgcHJvcHMuY2hpbGRyZW4pO1xuICAgIH0pO1xuICB9LCB7XG4gICAgZGlzcGxheU5hbWU6ICdDb250ZXh0VHJhbnNmb3JtZXInXG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgX2ltcGxlbWVudGF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltcGxlbWVudGF0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNvbnRleHQgfHwgX2ltcGxlbWVudGF0aW9uMi5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2VuZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZW5kXCIpKTtcblxuZXhwb3J0cy5lbmQgPSBfZW5kLmRlZmF1bHQ7XG5cbnZhciBfcHJvcGVydGllcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcHJvcGVydGllc1wiKSk7XG5cbmV4cG9ydHMucHJvcGVydGllcyA9IF9wcm9wZXJ0aWVzLmRlZmF1bHQ7XG52YXIgX2RlZmF1bHQgPSB7XG4gIGVuZDogX2VuZC5kZWZhdWx0LFxuICBwcm9wZXJ0aWVzOiBfcHJvcGVydGllcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICBuYW1lOiB0cnVlLFxuICAgIGxlbmd0aDogdHJ1ZSxcbiAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgY2FsbGVyOiB0cnVlLFxuICAgIGNhbGxlZTogdHJ1ZSxcbiAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHsgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7IC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IENvbnRhaW5lciwgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9vdGVyVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxDb250YWluZXIgZmx1aWQgY2xhc3NOYW1lPVwiZm9vdGVyLXZpZXctY29udGFpbmVyIG5vLWhvci1wYWRkaW5nXCI+XHJcbiAgICAgICAgICAgICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cImZvb3Rlci13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgZ3JvdXAgbWIteHMtNDAgbWItbXMtODBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLXNtLTEyIGNvbC1tZC02IG1iLXhzLTQwIGZvb3Rlci1pbnRyb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1iLXhzLTIwIG1iLXNtLTQwXCI+S2F0ZSBTb2huZzwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTUgcGwtMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC11bnN0eWxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyb250LWVuZCBkZXZlbG9wZXI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVYIHwgVUkgZGVzaWduZXI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF2YWlsYWJsZSBNYXkgMjAxOTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtN1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC11bnN0eWxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9XCJtYWlsdG86a2hlZXlhN0Bob3RtYWlsLmNvbVwiPkdldCBpbiB0b3VjaCA+PC9hPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj1cImthdGVzb2huZy1yZXN1bWUtMjAxOS5wZGZcIiB0aXRsZT1cIkRvd25sb2FkIFJlc3VtZVwiIGRvd25sb2FkPVwiS2F0ZXNvaG5nLXJlc3VtZS0yMDE5XCI+RG93bmxvYWQgcmVzdW1lID48L2E+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtNSBjb2wtc20tNSBjb2wtbWQtMyBjb2wtbWQtMiBtYi14cy00MFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1iLXhzLTIwIG1iLXNtLTQwXCI+TWVudTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC11bnN0eWxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWl0ZW1cIj48TGluayB0bz1cIi9cIj5Ib21lPC9MaW5rPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtaXRlbVwiPjxMaW5rIHRvPVwiL2Fib3V0XCI+QWJvdXQ8L0xpbms+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1pdGVtXCI+PExpbmsgdG89XCIvXCI+UG9ydGZvbGlvPC9MaW5rPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3QtaXRlbVwiPjxhIGhyZWY9XCJodHRwOi8va2F0ZXNvaG5nLmNvbS9ibG9nXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QmxvZzwvYT48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTcgY29sLXNtLTcgY29sLW1kLTMgY29sLW1kLTIgbWIteHMtNDBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJtYi14cy0yMCBtYi1zbS00MFwiPlNvY2lhbDwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC11bnN0eWxlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWl0ZW1cIj48YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2toZWV5YTdcIiBjbGFzc05hbWU9XCJidG4gYnRuLXNvY2lhbCBidG4tZ2l0aHViIGJ0bi1zaW1wbGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzc05hbWU9XCJmYSBmYS1naXRodWJcIj48L2k+IEdpdEh1YjwvYT48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0LWl0ZW1cIj48YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2thdGUtc29obmcvXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zb2NpYWwgYnRuLWxpbmtlZGluIGJ0bi1zaW1wbGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzc05hbWU9XCJmYSBmYS1saW5rZWRpblwiPjwvaT4gTGlua2VkSW48L2E+PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdC1pdGVtXCI+PGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20va2F0ZS5tb3N0bHkvXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zb2NpYWwgYnRuLWluc3RhZ3JhbSBidG4tc2ltcGxlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3NOYW1lPVwiZmEgZmEtaW5zdGFncmFtXCI+PC9pPiBJbnN0YWdyYW0gPC9hPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgY29weXJpZ2h0XCI+Q29weXJpZ2h0Jm5ic3A7JmNvcHk7Jm5ic3A7MjAxOSA8YSBocmVmPVwiL1wiPiBLYXRlIFNvaG5nPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59ICIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQ29udGFpbmVyLCBSb3csIENvbCB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYWNrZ3JvdW5kXCI+XHJcbiAgICAgICAgICAgICAgICA8Q29udGFpbmVyIGNsYXNzTmFtZT1cIm5hdi12aWV3LWNvbnRhaW5lclwiIHJvbGU9XCJiYW5uZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdi13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxuYXYgY2xhc3NOYW1lPVwibmF2YmFyIGJnLWJyaWdodCBuYXZiYXItYnJpZ2h0IG5hdmJhci1leHBhbmQtbWQgbm8taG9yLXBhZGRpbmdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2YmFyLWJyYW5kIGQtc20taW5saW5lLWJsb2NrIGZvbnQtd2VpZ2h0LWJvbGRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCIvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5LYXRlIFNvaG5nPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cIm5hdmJhci10ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGcm9udC1FbmQgRGV2ZWxvcGVyIHwgVVggRGVzaWduZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2YmFyLXRvZ2dsZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PVwiI3RvZ2dsZXJOYXZcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9XCJ0b2dnbGVyTmF2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmF2aWdhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZhIGZhLWJhcnNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwidG9nZ2xlck5hdlwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2YmFyLW5hdiBtbC1hdXRvIGZvbnQtd2VpZ2h0LWJvbGRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPVwiL1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSG9tZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPVwiL2Fib3V0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYm91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5hdi1pdGVtIG5hdi1saW5rXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwOi8va2F0ZXNvaG5nLmNvbS9ibG9nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmxvZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm5hdi1pdGVtIG5hdi1saW5rXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJtYWlsdG86a2hlZXlhN0Bob3RtYWlsLmNvbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29udGFjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L25hdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBJZnJhbWUgZnJvbSAncmVhY3QtaWZyYW1lJ1xyXG5pbXBvcnQge1xyXG4gICAgVGl0bGUsXHJcbiAgICBQYXJhZ3JhcGgsXHJcbiAgICBTZWN0aW9uVGl0bGUsXHJcbiAgICBTZWN0aW9uU3VidGl0bGUsXHJcbiAgICBQcm9qZWN0RGVzY3JpcHRpb25cclxufSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy8nXHJcbmltcG9ydCB7IFJvdywgQ29sLCBJbWFnZSB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgUHJvamVjdFN1bW1hcnkgfSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy9wcm9qZWN0LXN1bW1hcnknXHJcblxyXG5jb25zdCBzdW1tYXJ5RGF0YSA9IFtcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcGVyc29uLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSb2xlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1VYIERlc2lnbmVyJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaW1hZ2VQYXRoOiAnL2ltYWdlcy9pY29uLW1vYmlsZS5wbmcnLFxyXG4gICAgICAgIHRpdGxlOiAnVHlwZScsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdJbnRlcmFjdGl2ZSBJbnN0YWxsYXRpb24nXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1yZXNwb25zaWJpbGl0eS5wbmcnLFxyXG4gICAgICAgIHRpdGxlOiAnUmVzcG9uc2liaWxpdGllcycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdEZXNpZ25pbmcgQW5kcm9pZCBBcnR3b3JrJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tY2xvY2sucG5nJyxcclxuICAgICAgICB0aXRsZTogJ0R1cmF0aW9uJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJzEwIHdlZWtzJ1xyXG4gICAgfVxyXG5dXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBZdXJpVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwgcGItNVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9qZWN0LWRldGFpbC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8VGl0bGUgdGV4dD1cIll1cmlcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXNjcmlwdGlvbi13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9qZWN0RGVzY3JpcHRpb24gdGV4dD1cIklzIHJvYm90IGEgc2xhdmUgb3Igb2JqZWN0IG9mIGh1bWFuP1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIlByb2plY3QgT3ZlcnZpZXdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezd9IG1kPXs3fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIlByb2plY3QgWXVyaSBpcyBtb3RpdmF0ZWQgYnkgTmFtIEp1bmUgUGFpa+KAmXMg4oCcSy00NTbigJ0gdGhhdCBhdHRlbXB0ZWQgdG8gcmVjYWxpYnJhdGUgdGhlIHJhY2UgYW5kIGxlYWQgcGVvcGxlIHRvIHRoaW5rIGFib3V0IHRoZSDigJxodW1hbi9tYWNoaW5lIGJpbmFyeSBhbmQgZGVjb25zdHJ1Y3RpbmcgYmluYXJ5IGxvZ2ljIChSaGVlKeKAnS4gUHJvamVjdCBZdXJpIHRocm93cyB0aGUgbWFpbiBxdWVzdGlvbnMgb2Yg4oCcSXMgcm9ib3QgYSBzbGF2ZSBvciBvYmplY3Qgb2YgaHVtYW4/4oCdIHRvIHRoaW5rIGFib3V0IHRoZSBoaWVyYXJjaGljYWwgcmVsYXRpb25zaGlwIGJldHdlZW4gcm9ib3QgYW5kIGh1bWFuLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs1fSBtZD17NX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdFN1bW1hcnkgc3VtbWFyeURhdGE9e3N1bW1hcnlEYXRhfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJGaW5kaW5nIFByb2JsZW1zXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIkluIGEgaGlzdG9yeSBvZiBvdXIgbWVkaWEsIHJvYm90cyBoYXZlIGJlZW4gb2Z0ZW4gcG9ydHJheWVkIGFzIHNsYXZlcywgc2V4IG9iamVjdHMsIGRlaHVtYW5pemVkIHRoaW5ncywgYW5kIHRoaW5ncyB0aGF0IGNhbiBiZSBkZXN0cm95ZWQgYnkgYSBuZWNlc3NpdHkgb2YgaHVtYW4uIEFzIG1lZGlhIGRlc2lnbmVycywgaXQgaXMgbmVjZXNzYXJ5IHRvIHRoaW5rIGFib3V0IHdoZXRoZXIgdGhpcyBpcyB0aGUgcmlnaHQgcHJvamVjdGlvbiBvZiByb2JvdHMgdG8gcHVibGljIG9yIG5vdC4gRG9lcyB0aGlzIHRlbmRlbmN5IGFnZ3JhdmF0ZSBzdGVyZW90eXBlcyBvZiBjZXJ0YWluIHJhY2UgYW5kIGdlbmRlcj8gSW4gYWRkaXRpb24sIGRvIHRoZSB0eXBpY2FsIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiByb2JvdCBhbmQgaHVtYW4gaW4gb3VyIG1lZGlhIHN0aWxsIGlsbHVzdHJhdGUgdGhlIHNsYXZlcnkgaW4gaHVtYW4gaGlzdG9yeT8gUHJvamVjdCBZdXJpIGlzIGRlc2lnbmVkIHRvIGFuc3dlciB0aG9zZSBxdWVzdGlvbnMuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiUmVzZWFyY2hcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIuKAnE1vc3QgaW1wb3J0YW50bHksIHVuZGVyc3RhbmRpbmcgcmFjZSBhbmQvYXMgdGVjaG5vbG9neSBlbmFibGVzIHVzIHRvIGZyYW1lIHRoZSBkaXNjdXNzaW9uIGFyb3VuZCBldGhpY3MgcmF0aGVyIHRoYW4gb250b2xvZ3ksIG9uIG1vZGVzIG9mIHJlY29nbml0aW9uIGFuZCByZWxhdGlvbiwgcmF0aGVyIHRoYW4gYmVpbmcuIChDaHVuKeKAnVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiTmFtIEp1bmUgUGFpayBmb2N1c2VkIG9uIGh1bWFuaXppbmcgaGlzIHJvYm90IOKAnEstNDU24oCdIGJ5IGxldHRpbmcgaGlzIHJvYm90IGFjdCBsaWtlIGEgaHVtYW4uIFRoZSByb2JvdCB3YWxrcywgdGFsa3MsIGV4Y3JldGVzLCBhbmQgaW50ZXJhY3RzIHdpdGggb3RoZXIgaHVtYW4gYW5kIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgdGhhdCBzYXlzIOKAnGhvdyByYWNlIGNhbiBiZSByZWNhbGlicmF0ZWQgdGhyb3VnaCB0ZWNobm9sb2d5IGluIG9yZGVyIHRvIGRpc2VudGFuZ2xlIHRoZSBib3VuZGFyaWVzIGJldHdlZW4gaHVtYW4gYW5kIG1hY2hpbmUuIChSaGVlKeKAnSBMaWtlIEstNDU2LCBZdXJpIGlzIGEgaHVtYW5pemVkIHJvYm90IHdobyBjYW4gdGFsayBhbmQgaW50ZXJhY3Qgd2l0aCBwZW9wbGUuIEhlciBpbnRlcmFjdGlvbiBpcyBkZXNpZ25lZCB0byBhbnN3ZXIgY2VydGFpbiB0eXBlcyBvZiBxdWVzdGlvbnMgYW5kIGZvY3VzZWQgb24gZXhwcmVzc2luZyBoZXIgZW1vdGlvbnMgdGhhdCBpbmNyZWFzZSB0aGUgY29tcGxldGVuZXNzIG9mIGh1bWFuaXphdGlvbiBvbiByb2JvdHMuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJSb2JvdCBEZXNpZ25cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIkRlc2lnbiBjaG9pY2UgZm9yIGhlciBhcHBlYXJhbmNlIGhhcyBjaGFuZ2VkIGEgbG90IGZyb20gaW5pdGlhbCBwcm9wb3NhbCBkZXNpZ24gb2YgdGhpcyBwcm9qZWN0LiBTaW5jZSBzaGUgaGFzIHRvIGNhcnJ5IGRpZmZlcmVudCB0eXBlcyBvZiBoYXJkd2FyZSBpbiBoZXIgYm9keSB0aGF0IGluY2x1ZGUgYSBwb3J0YWJsZSBjb21wdXRlciwgYSBCbHVldG9vdGggc3BlYWtlciwgY2lyY3VpdHMsIGFuZCBMQ0QsIGV0Yy4gSSBoYWQgdG8gZGVzaWduIGhlciBib2R5IHRvIGhhdmUgYSBib3h5IHNoYXBlIHNvIHRoYXQgc2hlIGNvdWxkIGNvbnRhaW4gZXZlcnl0aGluZywgd2hpY2ggSSB0cmllZCB0byBhdm9pZCBpbiB0aGUgaW5pdGlhbCBkZXNpZ24uIFRodXMsIEkgZGVjb3JhdGVkIGhlciBoZWFkIHBhcnQgd2l0aCBoYWxmIGN5bGluZGVycyB0byByZWR1Y2UgdGhlIHNlbnNlIG9mIGJveHkgb24gaGVyIGFwcGVhcmFuY2UuIEFsc28sIHNoZSBpcyBkZWNvcmF0ZWQgd2l0aCBmbG93ZXJzIG9uIGhlciBib2R5IGFuZCBidXR0ZXJmbGllcyBvbiBoZXIgaGVhZC4gVGhpcyBpcyBhbiBhdHRlbXB0IHRvIHJlZHVjZSBoZXIgYXJ0aWZpY2lhbCBhcHBlYXJhbmNlIGJ5IHVzaW5nIHRoZSBzeW1ib2xzIG9mIG5hdHVyZS4gQXMgSSBhbnRpY2lwYXRlZCwgYXVkaWVuY2VzIHRob3VnaHQgdGhlIGZsb3dlciBkZWNvcmF0aW9uIHdhcyB1c2VkIHRvIGV4cHJlc3MgWXVyaSBhcyBhIGdpcmwuIFl1cmkgaXMgYSBmZW1hbGUgc2luY2Ugc2hlIGlzIHRoZSBvdGhlcm5lc3Mgb2YgS2F0ZSwgYnV0IHNoZSBkb2VzIG5vdCB3YW50IHRvIGJlIGRlZmluZWQgYnkgY2VydGFpbiBzdGVyZW90eXBlcyBvZiBnZW5kZXIuIEluIGFkZGl0aW9uLCBzaGUgYW5zd2VycyDigJxJIGFtIG5vdCBhIHJvYm90LCBidXQgYW4gb3RoZXJuZXNzIG9mIEthdGXigJ0gd2hlbiB0aGUgYXVkaWVuY2UgYXNrcyBpZiBzaGUgaXMgYSByb2JvdC4gQnkgZXhwcmVzc2luZyBoZXIgaWRlbnRpdHkgY2xlYXJseSB0byBwZW9wbGUsIFl1cmkgYXR0ZW1wdGVkIHRvIGVsaW1pbmF0ZSB0aGUgYmluYXJ5IHRoaW5raW5nIGluIGdlbmRlciwgcmFjZSwgYW5kIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHJvYm90IGFuZCBodW1hbi5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgc3JjPVwiL2ltYWdlcy9wcm9qZWN0LXl1cmktMDEuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHNyYz1cIi9pbWFnZXMvcHJvamVjdC15dXJpLTAyLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiRGlnaXRhbCBQZXJmb3JtYW5jZSBpbiBQdWJsaWNcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJZnJhbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybD1cImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1d5NjZiZWR3Y2NBXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiODUwcHhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiNDkwcHhcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb249XCJyZWxhdGl2ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiSW4gdGhlIHBlcmZvcm1hbmNlLCB0aHJlZSBhdWRpZW5jZXMgc3VjY2Vzc2Z1bGx5IGludGVyYWN0ZWQgd2l0aCBZdXJpLiBUbyBnZXQgYSBzdWNjZXNzZnVsIHJlc3VsdCBvZiB0aGUgcGVyZm9ybWFuY2UsIEkgaGFkIHRvIHNlYXJjaCBpbmRvb3IgcHVibGljIHBsYWNlcyBzaW5jZSB0aGUgdm9pY2UgcmVjb2duaXRpb24gdGVjaG5vbG9neSBJIGltcGxlbWVudGVkIGRvZXMgbm90IHdvcmsgcHJvcGVybHkgd2hlbiBhIHBsYWNlIGhhcyBjb250aW51b3VzIG5vaXNlLiBUd28gb2YgYXVkaWVuY2VzIGFtb25nIHRocmVlIGF1ZGllbmNlcyB3aG8gZWZmZWN0aXZlbHkgaW50ZXJhY3RlZCB3aXRoIFl1cmkgc2FpZCBpdCB3YXMgdmVyeSBpbnRlcmVzdGluZyBleHBlcmllbmNlIHRhbGtpbmcgd2l0aCB0aGUgcm9ib3Qgd2hvIHRoaW5rIHNoZSBpcyBub3QgYSByb2JvdC4gSG93ZXZlciwgb25lIHBhcnRpY2lwYW50IGdhdmUgbWUgYSBmZWVkYmFjayB0aGUgbGltaXRlZCByZWFjdGlvbnMgb2YgWXVyaSBtYWRlIGhpbSBjb25zaWRlciBZdXJpIGFzIGEgcm9ib3RpYyBleGlzdGVuY2UuIEluIGFkZGl0aW9uLCBzaW5jZSB0aGV5IHdlcmUgbm90IHByb3ZpZGVkIHdpdGggdGhlIGVudGlyZSBjb250ZXh0IG9mIHRoZSBwcm9qZWN0LCB0aGV5IGdhdmUgbWUgZmVlZGJhY2sgcmVnYXJkaW5nIHRoZSB0ZWNobmljYWwgZXhwZXJpZW5jZXMgbW9yZSB0aGFuIHRoZSBtZWFuaW5nIG9mIHNvY2lhbCBqdXN0aWNlLiBOb25ldGhlbGVzcywgaXQgd2FzIGEgZ3JlYXQgZXhwZXJpZW5jZSB0aGF0IGxlYWRzIG1lIHRvIHRoaW5rIGFib3V0IHRoZSB3YXkvZGlyZWN0aW9uIG9mIG91ciBkZXNpZ24gYW5kIHRlY2hub2xvZ3kgbmVlZCB0byBnby5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIldvcmtjaXRlZFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSaGVlLCBNYXJnYXJldC4g4oCcUmFjaWFsIFJlY2FsaWJyYXRpb24u4oCdIEFzaWFuIERpYXNwb3JpYyBWaXN1YWwgQ3VsdHVyZXMgYW5kIHRoZSBBbWVyaWNhcyAobi5kLik6IDI4NS0zMDkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENodW4sIFdlbmR5IEh1aSBLeW9uZy4g4oCcUmFjZSBhbmQvYXMgVGVjaG5vbG9neSBvciBIb3cgdG8gZG8gVGhpbmdzIFdpdGggUmFjZS7igJ0gTmFrYW11cmEsIExpc2EgYW5kIFBldGVyIENob3cuIFJhY2UgQWZ0ZXIgdGhlIEludGVybmV0LiBUYXlsb3IgYW5kIEZyYW5jaXMsIDIwMTMuIDM1My5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9tYWluPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFl1cmlWaWV3IGZyb20gXCIuLi9wcm9qZWN0LWRldGFpbC95dXJpXCI7XHJcbmltcG9ydCBTZXBhcmF0b3JDb250YWN0IGZyb20gJy4uL3NoYXJlZC1jb21wb25lbnRzL3NlcGFyYXRvci1jb250YWN0J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWXVyaVBhZ2VWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxZdXJpVmlldyAvPlxyXG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvckNvbnRhY3QgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge1xyXG4gICAgVGl0bGUsXHJcbiAgICBQYXJhZ3JhcGgsXHJcbiAgICBTZWN0aW9uVGl0bGUsXHJcbiAgICBTZWN0aW9uU3VidGl0bGUsXHJcbiAgICBQcm9qZWN0RGVzY3JpcHRpb25cclxufSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy8nXHJcbmltcG9ydCB7IFJvdywgQ29sLCBJbWFnZSB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgUHJvamVjdFN1bW1hcnkgfSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy9wcm9qZWN0LXN1bW1hcnknXHJcblxyXG5jb25zdCBzdW1tYXJ5RGF0YSA9IFtcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcGVyc29uLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSb2xlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1VYIERlc2lnbmVyIHwgRnJvbnQtZW5kIERldmVsb3BlcicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1tb2JpbGUucG5nJyxcclxuICAgICAgICB0aXRsZTogJ1R5cGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnR3JvdXAgcHJvamVjdCdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaW1hZ2VQYXRoOiAnL2ltYWdlcy9pY29uLXJlc3BvbnNpYmlsaXR5LnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSZXNwb25zaWJpbGl0aWVzJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0RlZmluaW5nIHByb2JsZW1zICBEZXNpZ24gQnJpZWYgfCBCcmFuZGluZyB8IFByb3RvdHlwaW5nJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tY2xvY2sucG5nJyxcclxuICAgICAgICB0aXRsZTogJ0R1cmF0aW9uJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJzQgd2Vla3MnXHJcbiAgICB9XHJcbl1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvY2tldFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInByb2plY3QtZGV0YWlsIHBiLTVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRpdGxlIHRleHQ9XCJQT0NLRVRcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXNjcmlwdGlvbi13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9qZWN0RGVzY3JpcHRpb24gdGV4dD1cIlRoZSBjb21wbGV0ZSBzb2x1dGlvbiBmb3IgeW91ciBhY2NvdW50IHByb2JsZW1zLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIlByb2plY3QgT3ZlcnZpZXdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3cgY2xhc3NOYW1lPVwibWItMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs3fSBtZD17N30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJQT0NLRVQgaXMgYW4gYXBwbGljYXRpb24gdGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBtYW5hZ2UgYWxsIG9mIHVzZXJzIGFjY291bnRzIGluIG9uZSBwbGFjZS4gVGhyb3VnaCB0aGlzIHRlYW0gcHJvamVjdCwgSSBmb3VuZCBvdXQgaG93IHRvIGRlZmluZSB0aGUgZGVzaWduIHByb2JsZW0sIHRhcmdldCBhdWRpZW5jZSwgcG90ZW50aWFsIHNvbHV0aW9uLCBjb21wZXRpdG9ycywgYW5kIGRvY3VtZW50ZWQgdGhlbSBpbnRvIGEgZm9ybSBvZiB0aGUgZGVzaWduIGJyaWVmLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs1fSBtZD17NX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdFN1bW1hcnkgc3VtbWFyeURhdGE9e3N1bW1hcnlEYXRhfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJGaW5kaW5nIFByb2JsZW1zXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJUaGUgbWFqb3JpdHkgb2YgcGVvcGxlIHdobyBsaXZlIHRoZXNlIGRheXMgb3duIG1hbnkgZGlmZmVyZW50IGFjY291bnRzIGFuZCBwYXNzd29yZHMuIEluIGFkZGl0aW9uLCBpdCBpcyB1bmF2b2lkYWJsZSB0byBjcmVhdGUgZGlmZmVyZW50IHR5cGVzIG9mIHBhc3N3b3JkcyBiZWNhdXNlIG9mIHNlY3VyaXR5IGlzc3Vlcy4gV2Ugb2Z0ZW4gZm9yZ2V0IHBhc3N3b3JkcyBhdCBpbXBvcnRhbnQgbW9tZW50cyB0aGF0IGRpc3RyYWN0IG91ciBwcm9kdWN0aXZpdHkuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJSZXNlYXJjaFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiU3Rvcnlib2FyZFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9wb2NrZXQtc3Rvcnlib2FyZC0wMS5qcGdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9wb2NrZXQtc3Rvcnlib2FyZC0wMi5qcGdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblN1YnRpdGxlIHRleHQ9XCJTdXJ2ZXlcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxlbWJlZCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCI3MDBweFwiIHNyYz1cIi9hc3NldHMvc3VydmV5LXJlc3VsdC5wZGZcIiB0eXBlPVwiYXBwbGljYXRpb24vcGRmXCI+PC9lbWJlZD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblN1YnRpdGxlIHRleHQ9XCJXb3JkIENsb3VkOiBXaGF0IFBPQ0tFVCB3b3VsZCBsaWtlIHRvIGNvbnZleSB0byB1c2Vycz9cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9wb2NrZXQtd29yZC1jbG91ZC5wbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiU29sdXRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJPcmdhbml6ZSBhbmQgbWFuYWdlIHlvdXIgYWNjb3VudHMgaW50byBvbmUgZGFzaGJvYXJkLCBhbmQgaW5jcmVhc2Ugd29yayBmbG93LCB3aGlsZSBtaW5pbWl6aW5nIHRpbWUgc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHBsYXRmb3Jtcy5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvaW1hZ2VzL3BvY2tldC11c2VyZmxvd21hcC5wbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uU3VidGl0bGUgdGV4dD1cIkxpbmsgYW5kIG1hbmFnZSBhbGwgeW91ciBhY2NvdW50cyBpbiBvbmUgcGxhY2VcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17M30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9hY2NvdW50LTAxLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezl9IGNsYXNzTmFtZT1cInZlcnRpY2FsLWFsaWduIHBsLTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlNlbGVjdCBwb3B1bGFyIGFwcHMgZnJvbSB0aGUgbGlzdCwgb3IgdXNlIHRoZSBzZWFyY2ggYmFyIHRvIGZpbmQgb3RoZXJzLiBOZXh0LCBzaWduIGluIHRvIGVhY2ggYXBwIHRocm91Z2ggUE9DS0VULiBZb3UgY2FuIG5vdyBhY2Nlc3MgYWxsIHlvdXIgbGlua2VkIGFjY291bnRzIGF0IG9uY2UuIE5vIG1vcmUgZm9yZ2V0dGluZyBwYXNzd29yZHMsIG1peGluZyB1cCB1c2VyIG5hbWVzLCBvciBoYXZpbmcgdG8gbG9nIGluIGF0IHRoZSBzdGFydCBvZiBlYWNoIG5ldyBzZXNzaW9uLiBQT0NLRVQgd2lsbCBzdG9yZSBhbGwgeW91ciBjdXJyZW50IGNyZWRlbnRpYWxzIGFuZCBnaXZlIHlvdSBhY2Nlc3MgdG8gZXZlcnl0aGluZyB5b3UgbmVlZCBpbiBvbmUgZWFzeS10by11c2UgYXBwLjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiQSBQbGFjZSBmb3IgRXZlcnl0aGluZyBhbmQgRXZlcnl0aGluZyBpbiBJdHMgUGxhY2VcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17M30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9hY2NvdW50LTAyLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezl9IGNsYXNzTmFtZT1cInZlcnRpY2FsLWFsaWduIHBsLTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBPQ0tFVCB3aWxsIG9yZ2FuaXplIHlvdXIgYWNjb3VudHMgaW50byBlYXNpbHkgY3VzdG9taXphYmxlIGZvbGRlcnMuIFVzZSB0aGUgZGVmYXVsdCBmb2xkZXJzLCBvciBjcmVhdGUgeW91ciBvd24gdG8gZ3JvdXAgYWNjb3VudHMgaW50byBjYXRlZ29yaWVzIGxpa2Ugd29yayBvciBzY2hvb2wuIEVhc2lseSB2aWV3IGFuZCBpbnRlcmFjdCB3aXRoIGFsbCB0aGUgYXBwcyBpbiBhIGZvbGRlciBhdCBvbmNlLCBhbmQgeW91IGNhbiBldmVuIGtlZXAgdGhlIHNhbWUgYWNjb3VudCBpbiBtdWx0aXBsZSBmb2xkZXJzLiBDdXN0b21pemUgeW91ciBmb2xkZXJzIHZpZXcgYnkgZGVsZXRpbmcgb25lcyB5b3UgZG9u4oCZdCBuZWVkLCBvciB0YXAgYW5kIGhvbGQgdG8gZHJhZyBhbmQgcmVhcnJhbmdlIHRoZW0gaG93ZXZlciB5b3UgbGlrZS48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uU3VidGl0bGUgdGV4dD1cIkFsbCB5b3VyIGVtYWlscyBpbiBvbmUgcGxhY2VcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17M30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9hY2NvdW50LTAzLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezl9IGNsYXNzTmFtZT1cInZlcnRpY2FsLWFsaWduIHBsLTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBPQ0tFVCB3aWxsIG9yZ2FuaXplIHlvdXIgYWNjb3VudHMgaW50byBlYXNpbHkgY3VzdG9taXphYmxlIGZvbGRlcnMuIFVzZSB0aGUgZGVmYXVsdCBmb2xkZXJzLCBvciBjcmVhdGUgeW91ciBvd24gdG8gZ3JvdXAgYWNjb3VudHMgaW50byBjYXRlZ29yaWVzIGxpa2Ugd29yayBvciBzY2hvb2wuIEVhc2lseSB2aWV3IGFuZCBpbnRlcmFjdCB3aXRoIGFsbCB0aGUgYXBwcyBpbiBhIGZvbGRlciBhdCBvbmNlLCBhbmQgeW91IGNhbiBldmVuIGtlZXAgdGhlIHNhbWUgYWNjb3VudCBpbiBtdWx0aXBsZSBmb2xkZXJzLiBDdXN0b21pemUgeW91ciBmb2xkZXJzIHZpZXcgYnkgZGVsZXRpbmcgb25lcyB5b3UgZG9u4oCZdCBuZWVkLCBvciB0YXAgYW5kIGhvbGQgdG8gZHJhZyBhbmQgcmVhcnJhbmdlIHRoZW0gaG93ZXZlciB5b3UgbGlrZS48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIkFydGlmYWN0c1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+RXh0ZXJuYWwgTGlua3MgdG8gdGhlIFBPQ0tFVCBwcmVzZW50YXRpb24gd2Vic2l0ZTwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3LmthdGVzb2huZy5jb20vcG9ja2V0YXBwL1wiIHRhcmdldD1cIl9ibGFua1wiPuKcuyBQT0NLRVQgUHJlc2VudGF0aW9uIFdlYnNpdGUg4py7PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L21haW4gPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBQb2NrZXRWaWV3IGZyb20gXCIuLi9wcm9qZWN0LWRldGFpbC9wb2NrZXRcIjtcclxuaW1wb3J0IFNlcGFyYXRvckNvbnRhY3QgZnJvbSAnLi4vc2hhcmVkLWNvbXBvbmVudHMvc2VwYXJhdG9yLWNvbnRhY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2NrZXRQYWdlVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8UG9ja2V0VmlldyAvPlxyXG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvckNvbnRhY3QgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge1xyXG4gICAgVGl0bGUsXHJcbiAgICBQYXJhZ3JhcGgsXHJcbiAgICBTZWN0aW9uVGl0bGUsXHJcbiAgICBTZWN0aW9uU3VidGl0bGUsXHJcbiAgICBQcm9qZWN0RGVzY3JpcHRpb25cclxufSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy8nXHJcbmltcG9ydCB7IFJvdywgQ29sLCBJbWFnZSB9IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgUHJvamVjdFN1bW1hcnkgfSBmcm9tICcuLi8uLi9zaGFyZWQtY29tcG9uZW50cy9wcm9qZWN0LXN1bW1hcnknXHJcblxyXG5jb25zdCBzdW1tYXJ5RGF0YSA9IFtcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcGVyc29uLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSb2xlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Jlc2VhcmNoIEFzc2lzdGFudCAgVUkvR3JhcGhpYyBEZXNpZ25lcicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1tb2JpbGUucG5nJyxcclxuICAgICAgICB0aXRsZTogJ1R5cGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSW50ZXJuc2hpcCdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaW1hZ2VQYXRoOiAnL2ltYWdlcy9pY29uLXJlc3BvbnNpYmlsaXR5LnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSZXNwb25zaWJpbGl0aWVzJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0RlZmluaW5nIHByb2JsZW1zIHwgVUkgRGVzaWduJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tY2xvY2sucG5nJyxcclxuICAgICAgICB0aXRsZTogJ0R1cmF0aW9uJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJzEwIHdlZWtzJ1xyXG4gICAgfVxyXG5dXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJvbmdlclZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInByb2plY3QtZGV0YWlsIHBiLTVcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRpdGxlIHRleHQ9XCIjU3Ryb25nZXJcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXNjcmlwdGlvbi13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9qZWN0RGVzY3JpcHRpb24gdGV4dD1cIkEgZGVjb2xvbmlhbCB2aXNpb24gb2YgZnV0dXJlcyBvZiBoZWFsdGggYW5kIGZpdG5lc3MuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9qZWN0LWRldGFpbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiUHJvamVjdCBPdmVydmlld1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17N30gbWQ9ezd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiI1N0cm9uZ2VyIGlzIGEgcHJvamVjdCB0aGF0IHB1cnN1ZXMgYSDigJxkZWNvbG9uaWFsIHZpc2lvbiBvZiBmdXR1cmVzIG9mIGhlYWx0aCBhbmQgZml0bmVzc+KAnSAoY8OhcmRlbmFzKSBmb3IgdGhlIHRyYW5zZ2VuZGVyIGFuZCBnZW5kZXIgbm9uLWNvbmZvcm1pbmcgcGVvcGxlLiBUaGUgd29ybGQgb2Ygc3BvcnRzIHdlIGVuY291bnRlciBldmVyeWRheSBzdGlsbCBjcmVhdGVzIG91dGRhdGVkIGFuZCBiaWFzZWQgaW1hZ2VzIG9mIGZpdG5lc3MgYW5kIGhlYWx0aCB0aGF0IGRvIG5vdCBjb25zaWRlciBhIGxvdHMgb2YgcGVvcGxlIHN1Y2ggYXMgTEdCVFFJIHBlb3BsZS5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17NX0gbWQ9ezV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByb2plY3RTdW1tYXJ5IHN1bW1hcnlEYXRhPXtzdW1tYXJ5RGF0YX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiRmluZGluZyBQcm9ibGVtc1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJBcyBhIHBhcnQgb2YgdGhlIHByb2plY3QgI1N0cm9uZ2VyLCB0aGlzIHN1Yi1wcm9qZWN0IG1haW5seSBmb2N1c2VzIG9uIGhvdyB0aGUgZ2VuZGVyIGRpc2NyaW1pbmF0aW9uIGFuZCBiaWFzZWQgaW1hZ2VzIG9uIGhlYWx0aCBhbmQgZml0bmVzcyBhcmUgdGFraW5nIHBsYWNlIGluIHdlYXJhYmxlIGhlYWx0aCBhcHBsaWNhdGlvbnMgZnJvbSBnbG9iYWwgc2NhbGUgY29ycG9yYXRpb25zLiBUaGUgZ29hbCBvZiB0aGlzIHByb2plY3QgaXMgdG8gcHJvbW90ZSBwdWJsaWMgYXdhcmVuZXNzIG9mIGhvdyBzb21lIG9mIHRoZSBpbnRlcmZhY2VzIGRlbGl2ZXIgZGlzY3JpbWluYXRpdmUgbWVzc2FnZXMgdG8gTEdCVFFJIHBlb3BsZSBieSBzaG93aW5nIGV4aXN0aW5nIHVzZXIgaW50ZXJmYWNlcyBhbmQgYnkgc3VnZ2VzdGluZyBkZXNpcmVkIGludGVyZmFjZXMuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiUmVzZWFyY2hcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIlRoZXJlIGFyZSBsb3RzIG9mIHdlYXJhYmxlIGhlYWx0aCBhcHBsaWNhdGlvbnMgYW5kIGRldmljZXMgaW4gdGhlIG1hcmtldC4gVGhleSBleGlzdCB0byBtb3RpdmF0ZSB1c2VycyB0byBtb3ZlIHRoZWlyIGJvZGllcyBhbmQgaGF2ZSBlZmZpY2llbnQgd29ya291dCBzZXNzaW9ucy4gVGhlc2UgYXBwbGljYXRpb25zIGdldCB1c2Vyc+KAmSBpbmZvcm1hdGlvbiBzdWNoIGFzIHRoZWlyIGFnZSwgd2VpZ2h0LCBoZWlnaHQsIGFuZCBnZW5kZXIuIFRoZXNlIHR5cGVzIG9mIGluZm9ybWF0aW9uIGFyZSB1c2VkIHRvIGVzdGltYXRlIG1vcmUgYWNjdXJhdGUgcGh5c2ljYWwgZGF0YSBzdWNoIGFzIHN0cmlkZXMgdGhhdCBhcmUgdXNlZCB0byBjYWxjdWxhdGUgbW92aW5nIGRpc3RhbmNlcyBhbmQgY2Fsb3JpZSBidXJuIHJhdGVzLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvc3Ryb25nZXItaG93LWdlbmRlci1pbmZvLXVzZWQuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPkluZm9ybWF0aW9uIG9uIGhvdyBnZW5kZXIgaW5mb3JtYXRpb24gaXMgdXNlZDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYi01XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD5TY3JlZW4gY2FwdHVyZWQgZnJvbSBGaXRiaXQgd2Vic2l0ZTwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiQmluYXJ5IGdlbmRlciBvcHRpb25zIGluIHRoZSBwcm9maWxlIHNldHRpbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17NH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy93cm9uZy11aS0wMS5qcGdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXs0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIlRoZXNlIGFyZSB0aGUgcHJvZmlsZSBzZXR0aW5nIHBhZ2VzIGZyb20gdHdvIG1ham9yIGNvbXBhbmllcyBpbiB0aGUgd2VhcmFibGUgaGVhbHRoIGFwcGxpY2F0aW9uIG1hcmtldC4gVXNlcnMgcHJvdmlkZSB0aGVpciBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgdGhlaXIgZ2VuZGVycy4gSG93ZXZlciwgdGhlcmUgYXJlIG9ubHkgYmluYXJ5IG9wdGlvbnMgaW4gZ2VuZGVyIHNlbGVjdGlvbiwgd2hpY2ggZG8gbm90IGNvbnNpZGVyIHRoZSBleGlzdGVuY2Ugb2YgZGlmZmVyZW50IGdlbmRlciBpZGVudGl0aWVzLiBUaGVzZSBhcmUgb3V0ZGF0ZWQgYW5kIGluZGlmZmVyZW50IGRlc2lnbnMgdGhhdCBkZWxpdmVyIGdlbmRlciBkaXNjcmltaW5hdGlvbiBhbmQg4oCcTEdCVElRIGludmlzaWJpbGl0eSBhbmQgb3BwcmVzc2lvbiAoY8OhcmRlbmFzKeKAnS5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXs0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvaW1hZ2VzL3dyb25nLXVpLTAyLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIlNvbHV0aW9uc1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiVGhpcyBzdWJwcm9qZWN0IG9mICNTdHJvbmdlciBzdWdnZXN0cyB1c2VyIGV4cGVyaWVuY2UgZGVzaWducyB0aGF0IHJlc3BlY3QgYWxsIGRpZmZlcmVudCBnZW5kZXJzIGFuZCBzZXh1YWwgaWRlbnRpdGllcy5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uU3VidGl0bGUgdGV4dD1cIlN1Z2dlc3RlZCBnZW5kZXIgb3B0aW9ucyBpbiBhIGhlYWx0aCBhcHBsaWNhdGlvbiAjMDFcIiAvPiAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvZ2VuZGVyLW9wdGlvbi0xLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiU3VnZ2VzdGVkIGdlbmRlciBvcHRpb25zIGluIGEgaGVhbHRoIGFwcGxpY2F0aW9uICMwMlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvZ2VuZGVyLW9wdGlvbi0yLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiQ29uY2x1c2lvbiBhbmQgRnVydGhlciBSZXNlYXJjaFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiVGhlcmVmb3JlLCBleGlzdGluZyBhcHBsaWNhdGlvbnMgbmVlZCBuZXcgYWxnb3JpdGhtcyB0aGF0IGNvbnNpZGVyIGFuZCByZXNwZWN0IGFsbCBnZW5kZXIgaWRlbnRpdGllcyB0byBwdXJzdWUgdGhlIGRlc2lnbiB0aGF0IGVsaW1pbmF0ZXMgdGhlIGdlbmRlciBub3JtIGFuZCBkaXNjcmltaW5hdGlvbi4gSG93ZXZlciwgbGFjayBvZiBzdGF0aXN0aWNhbCByZXNvdXJjZXMgb2YgTEdCVElRIHBlb3BsZSBtYWtlcyBpdCBoYXJkIHRvIGRldmVsb3AgbmV3IGFsZ29yaXRobXMgZm9yIExHQlRJUSBwZW9wbGUuIFRoZXJlZm9yZSwgdGhlIGZ1dHVyZSByZXNlYXJjaCBjYW4gcHVyc3VlIHRoZSB3YXkgb2YgZ2F0aGVyaW5nIHRoZSByaWdodCBhbW91bnQgb2Ygc3RhdGlzdGljYWwgcmVzb3VyY2VzIG9mIExHQlRJUSBwZW9wbGUgdG8gYnVpbGQgcHJvcGVyIGFsZ29yaXRobXMgZm9yIGhlYWx0aCBhcHBsaWNhdGlvbnMuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJBcnRpZmFjdHNcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17MTJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPkV4dGVybmFsIExpbmtzIHRvIEthdGUgU29obmcnIGJsb2c8L3NtYWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2thdGVzb2huZy5uZXQvYmxvZy9pbmRleC5waHAvMjAxNi8xMC8yMy9zdWItcHJvamVjdC1zdHJvbmdlci9cIiB0YXJnZXQ9XCJfYmxhbmtcIj7inLsgI1N0cm9uZ2VyIHBvc3RlciBmb3IgdGhlIFVXQiBVbmRlcmdyYWR1YXRlIFJlc2VhcmNoIGFuZCBDcmVhdGl2ZSBQcmFjdGljZSBldmVudCDinLs8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBTdHJvbmdlclZpZXcgZnJvbSBcIi4uL3Byb2plY3QtZGV0YWlsL3N0cm9uZ2VyXCI7XHJcbmltcG9ydCBTZXBhcmF0b3JDb250YWN0IGZyb20gJy4uL3NoYXJlZC1jb21wb25lbnRzL3NlcGFyYXRvci1jb250YWN0J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3Ryb25nZXJQYWdlVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8U3Ryb25nZXJWaWV3IC8+XHJcbiAgICAgICAgICAgICAgICA8U2VwYXJhdG9yQ29udGFjdCAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5lY3MtY2Fyb3VzZWwge1xcbiAgbWF4LXdpZHRoOiA4NjBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbCB7XFxuICBtYXgtaGVpZ2h0OiA3MjBweDtcXG4gIG1pbi1oZWlnaHQ6IDQ5MHB4O1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1pbm5lciB7XFxuICBib3JkZXI6IHNvbGlkIDFweCAjYjFiMWIxO1xcbn1cXG4uZWNzLWNhcm91c2VsIC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUuc2VsZWN0ZWRUb2dnbGVCdXR0b25TdHlsZSB7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzAwQ0M5OTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdW5zZXQ7XFxuICBib3gtc2hhZG93OiB1bnNldDtcXG4gIGNvbG9yOiAjMDBDQzk5O1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbixcXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuLmVjcy1jYXJvdXNlbCAuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBDQzk5O1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1pdGVtLWNvbnRhaW5lciB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxNXB4O1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1pdGVtLWNvbnRhaW5lciAuY2Fyb3VzZWwtdGV4dCB7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG4uZWNzLWNhcm91c2VsIC5jYXJvdXNlbC1pdGVtLWNvbnRhaW5lciAuY2Fyb3VzZWwtaW1hZ2Uge1xcbiAgbWFyZ2luOiAyMHB4IGF1dG8gMjBweCBhdXRvO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZWNzLWNhcm91c2VsLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Vjcy1jYXJvdXNlbC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZWNzLWNhcm91c2VsLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7XHJcbiAgICBDYXJvdXNlbCxcclxuICAgIEltYWdlXHJcbn0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgJy4vZWNzLWNhcm91c2VsLmxlc3MnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFY3NDYXJvdXNlbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3QgPSB0aGlzLmhhbmRsZVNlbGVjdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogMCxcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBudWxsLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlU2VsZWN0KHNlbGVjdGVkSW5kZXgsIGUpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogc2VsZWN0ZWRJbmRleCxcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBlLmRpcmVjdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IGUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgZGlyZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVjcy1jYXJvdXNlbFwiPlxyXG4gICAgICAgICAgICAgICAgPENhcm91c2VsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlSW5kZXg9e3NlbGVjdGVkSW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uPXtkaXJlY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e3RoaXMuaGFuZGxlU2VsZWN0fVxyXG4gICAgICAgICAgICAgICAgICAgIGludGVydmFsPXtudWxsfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0wMS5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy9lY3MtcHJvdG8tMDIuanBnXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvZWNzLXByb3RvLTAzLmpwZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0wNC5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy9lY3MtcHJvdG8tMDUuanBnXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvZWNzLXByb3RvLTA2LmpwZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0wNy5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy9lY3MtcHJvdG8tMDguanBnXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvZWNzLXByb3RvLTA5LmpwZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0xMC5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy9lY3MtcHJvdG8tMTEuanBnXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvZWNzLXByb3RvLTEyLmpwZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0xMy5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy9lY3MtcHJvdG8tMTQuanBnXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvZWNzLXByb3RvLTE1LmpwZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2UgY2xhc3NOYW1lPVwiY2Fyb3VzZWwtaW1hZ2VcIiBzcmM9XCIvaW1hZ2VzL2Vjcy1wcm90by0xNi5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7XHJcbiAgICBUaXRsZSxcclxuICAgIFBhcmFncmFwaCxcclxuICAgIFNlY3Rpb25UaXRsZSxcclxuICAgIFNlY3Rpb25TdWJ0aXRsZSxcclxuICAgIFByb2plY3REZXNjcmlwdGlvblxyXG59IGZyb20gJy4uLy4uL3NoYXJlZC1jb21wb25lbnRzLydcclxuaW1wb3J0IHsgUm93LCBDb2wsIEltYWdlIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgeyBQcm9qZWN0U3VtbWFyeSB9IGZyb20gJy4uLy4uL3NoYXJlZC1jb21wb25lbnRzL3Byb2plY3Qtc3VtbWFyeSdcclxuaW1wb3J0IEVjc0Nhcm91c2VsIGZyb20gJy4uL2Vjcy9lY3MtY2Fyb3VzZWwnXHJcblxyXG5jb25zdCBzdW1tYXJ5RGF0YSA9IFtcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcGVyc29uLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSb2xlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1VYIFJlc2VhcmNoZXIgfCBVSSBEZXNpZ25lcicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1tb2JpbGUucG5nJyxcclxuICAgICAgICB0aXRsZTogJ1R5cGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRW1wYXRoaWMgRGVzaWduIEFwcHJvYWNoIHwgR3JvdXAgUHJvamVjdCAgJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcmVzcG9uc2liaWxpdHkucG5nJyxcclxuICAgICAgICB0aXRsZTogJ1Jlc3BvbnNpYmlsaXRpZXMnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRGVmaW5pbmcgdXNlcnMgJiBwcm9ibGVtcyB8IFVJIERlc2lnbiB8IFJlc2VhcmNoIHRocm91Z2ggRGVzaWduJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tY2xvY2sucG5nJyxcclxuICAgICAgICB0aXRsZTogJ0R1cmF0aW9uJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJzEwIHdlZWtzJ1xyXG4gICAgfVxyXG5dXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFY3NWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJwcm9qZWN0LWRldGFpbCBwYi01XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2plY3QtZGV0YWlsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUaXRsZSB0ZXh0PVwiRUNTXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2plY3QtZGVzY3JpcHRpb24td3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdERlc2NyaXB0aW9uIHRleHQ9XCJFbGVjdHJvbmljIENhdGFsb2cgU3lzdGVtIGZvciB0aGUgVVcgSVQgRGVwYXJ0bWVudFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIlByb2plY3QgT3ZlcnZpZXdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezd9IG1kPXs3fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIk15IHRlYW0gd29ya2VkIHdpdGggYSBncm91cCBvZiBVVyBzdHVkZW50cyB3aG8gd29yayBpbiBJbmZvcm1hdGlvbiBUZWNobm9sb2dpZXMgKElUKSBoZWxwZGVzay4gVGhlIElUIEhlbHBkZXNrIGlzIHRoZSBzaW5nbGUgcG9pbnQgb2YgY29udGFjdCBmb3IgYWxsIElUIHNlcnZpY2VzIGZvciBVVyBzdHVkZW50cy4gSW4gdGhpcyBwcm9qZWN0LCB3ZSBkaXNjb3ZlcmVkIGEgbmVlZCBvZiBzdGFmZnMgb2YgdGhlIElUIEhlbHBkZXNrIHRocm91Z2ggZGlmZmVyZW50IHJlc2VhcmNoIG1ldGhvZHMgb2YgaHVtYW4tY2VudGVyZWQgZGVzaWduLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs1fSBtZD17NX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdFN1bW1hcnkgc3VtbWFyeURhdGE9e3N1bW1hcnlEYXRhfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJGaW5kaW5nIFByb2JsZW1zXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIlRoZSBwcm9ibGVtIHdpdGhpbiB0aGUgVVdCIElUIERlcGFydG1lbnQgcmV2b2x2ZXMgYXJvdW5kIHJlcGV0aXRpdmUgYW5kIHRlZGlvdXMgdGFza3MgdGhhdCB0aGUgd29ya2VycyBoYXZlIHRvIGRvLiBTb21lIG9mIHRoZSBzcGVjaWZpYyBpc3N1ZXMgd2UgZm91bmQgd2VyZSB0aGUgYmx1ZSBjYXJkcyBhbmQgdGhlIGludmVudG9yeSBjaGFydC4gVGhlIGJsdWUgY2FyZCwgdXNlZCBmb3IgZXF1aXBtZW50IGNoZWNrb3V0LCBpcyB2ZXJ5IGNsdXR0ZXJlZCBhbmQgdW5vcmdhbml6ZWQuIFRoZSBJVCB3b3JrZXIgaGFzIHRvIGZpbGwgb3V0IHRoZSBlbnRpcmUgY2FyZCBldmVyeSBzaW5nbGUgdGltZSBzb21lb25lIGNoZWNrcyBvdXQgZXF1aXBtZW50LiBUaGV5IHRoZW4gaGF2ZSB0byBlbnRlciB0aGUgaW5mb3JtYXRpb24gaW50byB0aGUgSVQgZGF0YWJhc2UuIFRoZSBpbnZlbnRvcnkgY2hhcnQgaXMgYSBwaHlzaWNhbCBjaGFydCBvbiB0aGUgd2FsbCB0aGF0IHNob3dzIHRoZSBjaXJjdWxhdGluZyBlcXVpcG1lbnQgZGVtYW5kLiBUaGUgSVQgd29ya2VycyBtdXN0IG1hbnVhbGx5IGNoYW5nZSB0aGF0IGV2ZXJ5IGRheS5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs2fSBtZD17Nn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9ibHVlX2NhcmQuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezZ9IG1kPXs2fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvaW1hZ2VzL2l0X2NpcmN1bGF0aW5nX2VxdWlwbWVudF9kZW1hbmQuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17Nn0gbWQ9ezZ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiUGF0cm9ucyBoYXZlIHRvIGZpbGwgYWxsIHRoZWlyIGluZm9ybWF0aW9uIGluIHRoZSBibHVlIGNhcmQgYW5kIHRoZW4gdGhlIHN0YWZmIGhhcyB0byBlbnRlciB0aGUgaW5mb3JtYXRpb24gaW50byB0aGVpciBkYXRhYmFzZS5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17Nn0gbWQ9ezZ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiQWxzbywgc3RhZmZzIGhhdmUgdG8gdXBkYXRlIHRoaXMgQ2lyY3VsYXRpbmcgRXF1aXBtZW50IERlbWFuZCBsaXN0IG1hbnVhbGx5LlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uVGl0bGUgdGV4dD1cIlJlc2VhcmNoXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblN1YnRpdGxlIHRleHQ9XCJDdWx0dXJhbCBQcm9iZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiTXkgdGVhbSB1c2VkIGN1bHR1cmFsIHByb2JlcyB0byBhcm91c2UgZGVzaWduIGluc3BpcmF0aW9ucyBhbmQgY29sbGVjdCByZXNwb25zZXMgZnJvbSBwYXJ0aWNpcGFudHMuIFdlIGNvbGxlY3RlZCBjYXN1YWwsIGluZm9ybWFsLCBlbnRodXNpYXN0aWMgYW5kIHBlcnNvbmFsIGRhdGEgZnJvbSBwYXJ0aWNpcGFudHMuIFRocm91Z2ggdGhpcyByZXNlYXJjaCwgSSBwZXJzb25hbGx5IHRyaWVkIHRvIGdldCBhIHJlYWwgZW1vdGlvbmFsIHVuZGVyc3RhbmRpbmcgb2Ygb3VyIHVzZXJzLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvY3VsdHVyYWwtcHJvcHMuanBnXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVjcy11bFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhleSBtb3N0bHkgbG92ZSB0aGVpciBqb2IsIHRoZXkgYXJlIHBhc3Npb25hdGUgYWJvdXQgaXQuPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGV5IG1vc3RseSBsb3ZlIHZpZGVvIGdhbWVzLCBvbmx5IG9uZSBwZXJzb24gZGlzbGlrZXMgaXQuPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JVCBlbXBsb3llZXMgZ2VuZXJhbGx5IHNwZW5kIGEgbG90IG9mIHRpbWUgb24gY2FtcHVzIGJldHdlZW4gZWF0aW5nIGFuZCBzdHVkeWluZy48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZXkgZ2VuZXJhbGx5IGRvbuKAmXQgcmVjb2duaXplIHF1ZXN0aW9ucyBmcm9tIHBhdHJvbnMgYXMg4oCcZHVtYuKAnSwgbWF5YmUgdGhleSBlbmpveSBoZWxwaW5nIHBlb3BsZS48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1vc3Qgc2VlbSB0byBsaWtlIHRoZWlyIGpvYiBidXQgdGhleSBhcmUgYWxzbyBzdHJlc3NlZC48L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWN0aW9uU3VidGl0bGUgdGV4dD1cIkludGVydmlld1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiVGhlIGdvYWwgd2FzIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIGluZGl2aWR1YWxzIG9uIGEgcGVyc29uYWwgbGV2ZWwsIGxlYXJuIG1vcmUgYWJvdXQgdGhlIGRheSB0byBkYXkgc2NoZWR1bGUgb2YgYW4gSVQgd29ya2VyLCBhbmQgZmlsbCBpbiB0aGUgZ2FwcyBmcm9tIHRoZSBjdWx0dXJhbCBwcm9iZSBraXRzLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXs0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzcmM9XCIvaW1hZ2VzL3Bvc2l0aXZlLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvbmVnYXRpdmUucG5nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17NH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJCYXNlZCBvbiB0aGUgcG9zaXRpdmUgYXR0aXR1ZGVzLCBpdCBzZWVtcyB0aGF0IGFsbCB0aGUgaW50ZXJ2aWV3ZWVzIGVuam95IHRoZWlyIGpvYiBhdCB0aGUgSVQgZGVwYXJ0bWVudCwgYnV0IHRoZXkgZXhwcmVzc2VkIG1peGVkIGZlZWxpbmdzIHRvd2FyZCBzb21lIHRhc2tzLiBXZSBjb2xsZWN0ZWQgYWxsIHRoZSB0ZXJtcyB0aGV5IHVzZWQgdG8gcmVzcG9uZCB0byBxdWVzdGlvbnMgcmVsYXRpbmcgdG8gdGhlaXIgdGFza3MuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiUXVlc3Rpb25uYWlyZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiV2UgbGVhcm5lZCBtb3JlIGRldGFpbHMgYWJvdXQgd2hhdCB0aGV5IHRoaW5rIHRoZWlyIGpvYiBjYW4gYmUgc3RyZXNzZnVsIGF0IHRpbWVzLiBNb3N0IG9mIHRoZSBjb21wbGFpbnRzIHdlcmUgYWJvdXQgdGhlIElUIGNoZWNrb3V0IHN5c3RlbSwgbWlzY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoZW0gYW5kIHBhdHJvbnMsIGFuZCByZXBldGl0aXZlIHRhc2tzLiBUaGUgZnJ1c3RyYXRpb24gb2Yg4oCcYmx1ZSBjYXJkc+KAnSB3YXMgbWVudGlvbmVkIG11bHRpcGxlIHRpbWVzIGZyb20gdGhlIHBhcnRpY2lwYW50cy5cIiAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJTb2x1dGlvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIk91ciBhcHAgaWRlYSBjb21iaW5lcyB0aGUgYmx1ZSBjYXJkIHN5c3RlbSwgdGhlIGludmVudG9yeSBjaGFydCwgYW5kIHRoZSBlcXVpcG1lbnQgY2F0YWxvZyB0aGF0IGlzIGN1cnJlbnRseSBpbiBhIGJpbmRlciBhdCB0aGUgSVQgaGVscGRlc2sgdG8gbWluaW1pemUgcmVwZXRpdGl2ZSB0YXNrcyBhbmQgaW5jcmVhc2UgZWZmaWNpZW5jeS4gSW4gYWRkaXRpb24sIHdlIGFsc28gZm91bmQgb3V0IHRoZSBzdHVkZW50IElEIGlzIGVzc2VudGlhbCB0byBjaGVjayBvdXQgdGhlIGVxdWlwbWVudCwgYW5kIHdlIGRldGVjdGVkIHRoYXQgZW1wbG95ZXJzIGFzayBzdHVkZW50cyB0byBnaXZlIHN0dWRlbnQgSURzIHRvIHRoZW0gYW5kIHN3aXBlIElEcyBldmVyeSB0aW1lIHRvIHByb2NlZWQgd2l0aCB0aGUgY2hlY2tvdXQgcHJvY2Vzcy4gVGh1cywgd2Ugd2lsbCBkZXNpZ24gYSBzb2Z0d2FyZSB0aGF0IHdpbGwgc2ltcGxpZnkgYW5kIHN0cmVhbWxpbmUgYWxsIHRoZXNlIHRhc2tzIHRoYXQgYXJlIGN1cnJlbnRseSBjb250cm9sbGVkIG1hbnVhbGx5IG9yIG5vbi1lbGVjdHJpY2FsbHkgaW50byBvbmUgcGxhY2Ugd2l0aCBhIFBDIHRhYmxldCB3aXRoIGFuIGF0dGFjaGVkIGNhcmQgcmVhZGVyLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiUGFwZXIgUHJvdG90eXBlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy9wYXBlcnByb3RvLWNoZWNrb3V0LWFsbC1pbi0xLmpwZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiSW50ZXJhY3RpdmUgUHJvdG90eXBlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RWNzQ2Fyb3VzZWwgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJDb25jbHVzaW9uXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJUaHJvdWdoIHRoaXMgc3lzdGVtLCB3ZSBwdXJzdWUgdmFsdWVzIG5vdCBvbmx5IGZvciBvdXIgdXNlciBncm91cCBidXQgYWxzbyBmb3IgdGhlIHBhdHJvbnMgb2YgdGhlIElUIGhlbHBkZXNrLiBPdXIgYXBwIGhlbHBzIHRoZSB1c2VyIGdyb3VwIHRvIGhhdmUgbW9yZSBlbmpveWFibGUgd29yayBleHBlcmllbmNlIGJ5IGZ1bGZpbGxpbmcgdGhlaXIgZGVzaXJlcyB0b3dhcmQgcmVkdWNpbmcgcmVwZXRpdGl2ZSB0YXNrcy4gRnVydGhlcm1vcmUsIHRoZSBzeXN0ZW0gd2lsbCByZWR1Y2UgdGhlIHRlZGlvdXMgaGFuZHdyaXRpbmcgdGFzayBvZiB0aGUgYmx1ZSBjYXJkcyBmb3IgcGF0cm9ucyB3aGljaCBuZWVkcyB0byBiZSBkb25lIGV2ZXJ5IHRpbWUuIFBhdHJvbnMgd2lsbCBhbHNvIGJlIHByb3ZpZGVkIHdpdGggYmV0dGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwZXJmb3JtYW5jZSBvZiBlcXVpcG1lbnQgYW5kIHRoZSBjaXJjdWxhdGluZyBlcXVpcG1lbnQgZGVtYW5kIGluIGFuIGludHVpdGl2ZSB3YXkuIFNhdGlzZmllZCBwYXRyb25zIHdpbGwgZ2l2ZSBwb3NpdGl2ZSBmZWVkYmFjayB0byB0aGUgZW1wbG95ZWVzIHdoaWNoIHdpbGwgaW5jcmVhc2UgdGhlIHNhdGlzZmFjdGlvbiBvZiB0aGUgd29ya2luZyBleHBlcmllbmNlIGZvciBJVCBlbXBsb3llZXMsIGVzcGVjaWFsbHkgdGhlIG9uZXMgd2hvIHNlZWsgdGhlIHZhbHVlIG9mIHRoZWlyIHdvcmsgZnJvbSBoZWxwaW5nIG90aGVycy4gVG8gZnVydGhlciBzdHJlYW1saW5lIGFuZCBpbXByb3ZlIHRoZSB0ZWNobm9sb2d5IGNoZWNrLW91dCBwcm9jZXNzLCBvdXIgdGFibGV0IGFwcCB3aWxsIGJlIGFibGUgdG8gc2VuZCByZW1pbmRlciBlbWFpbHMgdG8gc3R1ZGVudHMgd2hvIGhhdmUgY2hlY2tlZCBvdXQgZXF1aXBtZW50LCB3aGljaCBpcyBhIHRhc2sgbm90IHZpYWJsZSB3aXRoIHRoZSBjdXJyZW50IHBhcGVyIHN5c3RlbS4gVGhpcyBjb3VsZCBoZWxwIHNvbHZlIGFub3RoZXIgcHJvYmxlbSB0aGF0IElUIGlkZW50aWZpZWQgY29uc2lzdGVudGx5IHRocm91Z2hvdXQgb3VyIHJlc2VhcmNoOiBjb21tdW5pY2F0aW9uLlwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9tYWluPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEVjc1ZpZXcgZnJvbSBcIi4uL3Byb2plY3QtZGV0YWlsL2Vjc1wiO1xyXG5pbXBvcnQgU2VwYXJhdG9yQ29udGFjdCBmcm9tICcuLi9zaGFyZWQtY29tcG9uZW50cy9zZXBhcmF0b3ItY29udGFjdCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVjc1BhZ2VWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxFY3NWaWV3IC8+XHJcbiAgICAgICAgICAgICAgICA8U2VwYXJhdG9yQ29udGFjdCAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5wcm9qZWN0LWNvbnRlbnQtY2Fyb3VzZWwge1xcbiAgbWF4LXdpZHRoOiA4NjBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4ucHJvamVjdC1jb250ZW50LWNhcm91c2VsIC5jYXJvdXNlbCB7XFxuICBtYXgtaGVpZ2h0OiA3MjBweDtcXG4gIG1pbi1oZWlnaHQ6IDQ5MHB4O1xcbn1cXG4ucHJvamVjdC1jb250ZW50LWNhcm91c2VsIC50b2dnbGVCdXR0b25TdHlsZSB7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxuICBjb2xvcjogIzMzMztcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVuc2V0O1xcbiAgYm94LXNoYWRvdzogdW5zZXQ7XFxufVxcbi5wcm9qZWN0LWNvbnRlbnQtY2Fyb3VzZWwgLmJ0bi1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZS5zZWxlY3RlZFRvZ2dsZUJ1dHRvblN0eWxlIHtcXG4gIGJvcmRlcjogMDtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjMDBDQzk5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1bnNldDtcXG4gIGJveC1zaGFkb3c6IHVuc2V0O1xcbiAgY29sb3I6ICMwMENDOTk7XFxufVxcbi5wcm9qZWN0LWNvbnRlbnQtY2Fyb3VzZWwgLmNhcm91c2VsLWluZGljYXRvcnMgbGkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwQ0M5OTtcXG59XFxuLnByb2plY3QtY29udGVudC1jYXJvdXNlbCAuY2Fyb3VzZWwtaXRlbS1jb250YWluZXIge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMTVweDtcXG59XFxuLnByb2plY3QtY29udGVudC1jYXJvdXNlbCAuY2Fyb3VzZWwtaXRlbS1jb250YWluZXIgLmNhcm91c2VsLXRleHQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLnByb2plY3QtY29udGVudC1jYXJvdXNlbCAuY2Fyb3VzZWwtaXRlbS1jb250YWluZXIgLmNhcm91c2VsLWltYWdlIHtcXG4gIG1hcmdpbjogMjBweCBhdXRvIDIwcHggYXV0bztcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbnRlbnQtY2Fyb3VzZWwubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGVudC1jYXJvdXNlbC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGVudC1jYXJvdXNlbC5sZXNzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQge1xyXG4gICAgQnV0dG9uVG9vbGJhcixcclxuICAgIFRvZ2dsZUJ1dHRvbkdyb3VwLFxyXG4gICAgVG9nZ2xlQnV0dG9uLFxyXG4gICAgQ2Fyb3VzZWwsXHJcbiAgICBJbWFnZSxcclxuICAgIFJvdyxcclxuICAgIENvbFxyXG59IGZyb20gJ3JlYWN0LWJvb3RzdHJhcCdcclxuaW1wb3J0ICcuL2NvbnRlbnQtY2Fyb3VzZWwubGVzcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xsZWRDYXJvdXNlbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3QgPSB0aGlzLmhhbmRsZVNlbGVjdC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogMCxcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBudWxsLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlU2VsZWN0KHNlbGVjdGVkSW5kZXgsIGUpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogc2VsZWN0ZWRJbmRleCxcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBlLmRpcmVjdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNoYW5nZShlKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkSW5kZXg6IGUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRJbmRleCwgZGlyZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2plY3QtY29udGVudC1jYXJvdXNlbFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uVG9vbGJhcj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUJ1dHRvbkdyb3VwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFkaW9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cIm9wdGlvbnNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ID09PSAwID8gXCJzZWxlY3RlZFRvZ2dsZUJ1dHRvblN0eWxlXCIgOiBcInRvZ2dsZUJ1dHRvblN0eWxlXCJ9IHZhbHVlPXswfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQZXJzb25hc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVCdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VG9nZ2xlQnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggPT09IDEgPyBcInNlbGVjdGVkVG9nZ2xlQnV0dG9uU3R5bGVcIiA6IFwidG9nZ2xlQnV0dG9uU3R5bGVcIn0gdmFsdWU9ezF9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVG9nZ2xlQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRvZ2dsZUJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ID09PSAyID8gXCJzZWxlY3RlZFRvZ2dsZUJ1dHRvblN0eWxlXCIgOiBcInRvZ2dsZUJ1dHRvblN0eWxlXCJ9IHZhbHVlPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZmZvcmRhbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RvZ2dsZUJ1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub2dnbGVCdXR0b25Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxDYXJvdXNlbFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4PXtzZWxlY3RlZEluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbj17ZGlyZWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLmhhbmRsZVNlbGVjdH1cclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbD17bnVsbH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdyBjbGFzc05hbWU9XCJjYXJvdXNlbC1pdGVtLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbCBjbGFzc05hbWU9XCJjYXJvdXNlbC10ZXh0XCIgeHM9ezEyfSBtZD17MTJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcmNoZXR5cGUgb2YgdGhpcyBwZXJzb25hIGlzIGFuIGVkdWNhdG9yIGFuZCBzaGUgcmVwcmVzZW50cyBhIGdyb3VwIG9mIHBlb3BsZSB3aG8gY2FyZSB0byBlZHVjYXRlIHBlb3BsZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy91bmlmeS1wZXJzb25hLnBuZ1wiPjwvSW1hZ2U+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9DYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJvdXNlbC5JdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um93IGNsYXNzTmFtZT1cImNhcm91c2VsLWl0ZW0tY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29sIGNsYXNzTmFtZT1cImNhcm91c2VsLXRleHRcIiB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVG8gbWFrZSBhIHN1Y2Nlc3NmdWwgYW5kIGlubm92YXRpdmUgcHJvZHVjdCwgdGhlIGRlc2lnbmVycyBuZWVkIHRvIGRldGVybWluZSB0aGUgcmFuZ2Ugb2YgZGF0YSB0byBzdXBwb3J0IHRoZSBoZXVyaXN0aWMgYXBwcm9hY2ggZm9yIGRlc2lnbiBkZWNpc2lvbnMuIEluIGFkZGl0aW9uLCB0aGUgZGVzaWduZXJzIHNob3VsZCBjb25zaWRlciB0aGUgYWZmb3JkYW5jZSBvZiB0aGUgcHJvZHVjdCB0byBjcmVhdGUgYSBiZXR0ZXIgYW5kIG1vcmUgbmF0dXJhbCB1c2VyIGV4cGVyaWVuY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb2wgeHM9ezEyfSBtZD17MTJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBjbGFzc05hbWU9XCJjYXJvdXNlbC1pbWFnZVwiIHNyYz1cIi9pbWFnZXMvdW5pZnktZGF0YS5qcGdcIj48L0ltYWdlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICA8Q2Fyb3VzZWwuSXRlbT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJvdyBjbGFzc05hbWU9XCJjYXJvdXNlbC1pdGVtLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbCBjbGFzc05hbWU9XCJjYXJvdXNlbC10ZXh0XCIgeHM9ezEyfSBtZD17MTJ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE91ciB0ZWFtIGRlY2lkZWQgdG8gdXNlIHRoZSBjYXJkIGxheW91dCwgd2hpY2ggaXMgdGhlIHR5cGUgb2YgcHJlc2VudGluZyBpbmZvcm1hdGlvbiB3aXRoIGludHVpdGl2ZSBpbWFnZXMuIFdpdGggc29tZSBzZWxmLWV4cGxhbmF0b3J5IGltYWdlcyBhbmQgc2hvcnQgZGVzY3JpcHRpb25zIHdpdGggdGhlIGJ1dHRvbnMsIHRoZSB1c2VycyB3aWxsIGdldCB3aGF0IHRoZXkgd2FudCBtb3JlIGVhc2lseSB3aXRob3V0IGhhdmluZyB0byB0aGluay5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIGNsYXNzTmFtZT1cImNhcm91c2VsLWltYWdlXCIgc3JjPVwiL2ltYWdlcy91bmlmeS13aXJlZnJhbWUtMDIucG5nXCI+PC9JbWFnZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8L0Nhcm91c2VsLkl0ZW0+XHJcbiAgICAgICAgICAgICAgICA8L0Nhcm91c2VsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBSb3csIENvbCwgSW1hZ2UgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcblxyXG5leHBvcnQgY2xhc3MgVW5pZnlIZWFkZXJJbWFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgVW5pZnlIZWFkZXJJbWFnZUJhY2tncm91bmQgPSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJyZ2IoMjUwLCAyNTAsIDI1MClcIixcclxuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCAjZThlOGVhXCIsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IFVuaWZ5SGVhZGVyUm93U3R5bGUgPSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IFwiM2VtXCIsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBcIjEyMDBweFwiLFxyXG4gICAgICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVW5pZnlIZWFkZXJJbWFnZVN0eWxlID0ge1xyXG4gICAgICAgICAgICBtYXhXaWR0aDogXCI3MCVcIixcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVW5pZnlIZWFkZXJDb2xTdHlsZSA9IHtcclxuICAgICAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcclxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBcIjMwMHB4XCIsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e1VuaWZ5SGVhZGVySW1hZ2VCYWNrZ3JvdW5kfT5cclxuICAgICAgICAgICAgICAgIDxSb3cgc3R5bGU9e1VuaWZ5SGVhZGVyUm93U3R5bGV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3R5bGU9e1VuaWZ5SGVhZGVyQ29sU3R5bGV9IHhzPXs0fSBtZD17NH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbWFnZSBzdHlsZT17VW5pZnlIZWFkZXJJbWFnZVN0eWxlfSBzcmM9XCIvaW1hZ2VzL3VuaWZ5LXByb3RvLTAxLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzdHlsZT17VW5pZnlIZWFkZXJDb2xTdHlsZX0geHM9ezR9IG1kPXs0fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHN0eWxlPXtVbmlmeUhlYWRlckltYWdlU3R5bGV9IHNyYz1cIi9pbWFnZXMvdW5pZnktcHJvdG8tMDIucG5nXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHN0eWxlPXtVbmlmeUhlYWRlckNvbFN0eWxlfSB4cz17NH0gbWQ9ezR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3R5bGU9e1VuaWZ5SGVhZGVySW1hZ2VTdHlsZX0gc3JjPVwiL2ltYWdlcy91bmlmeS1wcm90by0wMy5wbmdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvblN1YnRpdGxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzZWN0aW9uLXN1YnRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5TZWN0aW9uU3VidGl0bGUucHJvcFR5cGVzID0ge1xyXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcclxufVxyXG5cclxuU2VjdGlvblN1YnRpdGxlLmRlZmF1bHRQcm9wcyA9IHtcclxuICAgIHRleHQ6ICcnXHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb25UaXRsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGgzXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJzZWN0aW9uLXRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxyXG4gICAgICAgICAgICA8L2gzID5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcblNlY3Rpb25UaXRsZS5wcm9wVHlwZXMgPSB7XHJcbiAgICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxyXG59XHJcblxyXG5TZWN0aW9uVGl0bGUuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgdGV4dDogJydcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3REZXNjcmlwdGlvbihwcm9wcykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8aDQgY2xhc3NOYW1lPVwicHJvamVjdC1kZXNjcmlwdGlvblwiPlxyXG4gICAgICAgICAgICB7cHJvcHMudGV4dH1cclxuICAgICAgICA8L2g0PlxyXG4gICAgKVxyXG59XHJcblxyXG5Qcm9qZWN0RGVzY3JpcHRpb24ucHJvcFR5cGVzID0ge1xyXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcclxufVxyXG5cclxuUHJvamVjdERlc2NyaXB0aW9uLmRlZmF1bHRQcm9wcyA9IHtcclxuICAgIHRleHQ6ICcnLFxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUGFyYWdyYXBoKHByb3BzKSB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8cCBjbGFzc05hbWU9XCJwcm9qZWN0LXBhcmFncmFwaFwiPntwcm9wcy50ZXh0fTwvcD5cclxuICAgIClcclxufVxyXG5cclxuUGFyYWdyYXBoLnByb3BUeXBlcyA9IHtcclxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXHJcbn1cclxuXHJcblBhcmFncmFwaC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICB0ZXh0OiAnJ1xyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaXRsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy50ZXh0fVxyXG4gICAgICAgICAgICA8L2gyPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuVGl0bGUucHJvcFR5cGVzID0ge1xyXG4gICAgdGV4dDogUHJvcFR5cGVzLnN0cmluZyxcclxufVxyXG5cclxuVGl0bGUuZGVmYXVsdFByb3BzID0ge1xyXG4gICAgdGV4dDogJydcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IElmcmFtZSBmcm9tICdyZWFjdC1pZnJhbWUnXHJcbmltcG9ydCB7XHJcbiAgICBUaXRsZSxcclxuICAgIFBhcmFncmFwaCxcclxuICAgIFNlY3Rpb25UaXRsZSxcclxuICAgIFNlY3Rpb25TdWJ0aXRsZSxcclxuICAgIFByb2plY3REZXNjcmlwdGlvblxyXG59IGZyb20gJy4uLy4uL3NoYXJlZC1jb21wb25lbnRzLydcclxuaW1wb3J0IHsgUm93LCBDb2wsIEltYWdlIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgeyBVbmlmeUhlYWRlckltYWdlIH0gZnJvbSAnLi9oZWFkZXItaW1hZ2UnXHJcbmltcG9ydCB7IFByb2plY3RTdW1tYXJ5IH0gZnJvbSAnLi4vLi4vc2hhcmVkLWNvbXBvbmVudHMvcHJvamVjdC1zdW1tYXJ5J1xyXG5pbXBvcnQgQ29udGVudENhcm91c2VsIGZyb20gJy4uLy4uL3NoYXJlZC1jb21wb25lbnRzL2NvbnRlbnQtY2Fyb3VzZWwnXHJcblxyXG5jb25zdCBzdW1tYXJ5RGF0YSA9IFtcclxuICAgIHtcclxuICAgICAgICBpbWFnZVBhdGg6ICcvaW1hZ2VzL2ljb24tcGVyc29uLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdSb2xlJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ1VYIFJlc2VhcmNoZXIgfCBVSSBEZXNpZ25lcicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1tb2JpbGUucG5nJyxcclxuICAgICAgICB0aXRsZTogJ1R5cGUnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnaU9TIE1vYmlsZSBBcHAgfCBHcm91cCBQcm9qZWN0ICAnXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGltYWdlUGF0aDogJy9pbWFnZXMvaWNvbi1yZXNwb25zaWJpbGl0eS5wbmcnLFxyXG4gICAgICAgIHRpdGxlOiAnUmVzcG9uc2liaWxpdGllcycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdEZWZpbmluZyB1c2VycyAmIHByb2JsZW1zIFVJIERlc2lnbidcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaW1hZ2VQYXRoOiAnL2ltYWdlcy9pY29uLWNsb2NrLnBuZycsXHJcbiAgICAgICAgdGl0bGU6ICdEdXJhdGlvbicsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICcxMCB3ZWVrcydcclxuICAgIH1cclxuXVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuaWZ5VmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1kZXRhaWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRpdGxlIHRleHQ9XCJVbmlmeVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9qZWN0LWRlc2NyaXB0aW9uLXdyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFByb2plY3REZXNjcmlwdGlvbiB0ZXh0PVwiSW50ZXJlc3RzLXNoYXJpbmcgbmV0d29yayBmb3IgZXZlcnlvbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UHJvamVjdERlc2NyaXB0aW9uIHRleHQ9XCJ3aG8gd2FudHMgdG8gbWFrZSBmZW1pbmlzdCBpbm5vdmF0aW9uIGFuZCB0ZWNobm9sb2d5XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8VW5pZnlIZWFkZXJJbWFnZSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2plY3QtZGV0YWlsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJQcm9qZWN0IE92ZXJ2aWV3XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs3fSBtZD17N30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJVbmlmeSB0ZWFtIHByZXNlbnRzIHRoZSBoaWdoLWZpZGVsaXR5IHByb3RvdHlwZSBvZiB0aGUgaU9TIGFwcGxpY2F0aW9uIGZvciBGZW1UZWNoTmV0IG1lbWJlcnMgYW5kIHBlb3BsZSB3aG8gd2FudCB0byBzaGFyZSBpbmZvcm1hdGlvbiBhYm91dCB3b21lbiBpbi9hbmQgdGVjaG5vbG9neS4gVGhpcyBhbm5vdGF0ZWQgcG9ydGZvbGlvIHNob3dzIHRoZSBwcm9jZXNzIG9mIHRoZSBhcHBsaWNhdGlvbiBkZXNpZ24gdGhyb3VnaCByZXNlYXJjaCBmcm9tIHRoZSBldGhub2dyYXBoeSBpbnRlcnZpZXcsIGRlZmluaW5nIHByb2JsZW1zLCByZXNlYXJjaCB0aHJvdWdoIGRlc2lnbiwgYW5kIHZpYWJsZSBzb2x1dGlvbnMgd2l0aCBkaWZmZXJlbnQgdHlwZXMgb2YgcHJvdG90eXBlcy5cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17NX0gbWQ9ezV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFByb2plY3RTdW1tYXJ5IHN1bW1hcnlEYXRhPXtzdW1tYXJ5RGF0YX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiRmluZGluZyBQcm9ibGVtc1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17N30gbWQ9ezd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiVGhlIGRlc2lnbiByZXNlYXJjaCBzdGFydGVkIHdpdGggZXRobm9ncmFwaGljIGludGVydmlld3Mgd2l0aCBzdGFrZWhvbGRlcnMgZnJvbSBGZW1UZWNoTmV0LiBCYXNlZCBvbiB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgaW50ZXJ2aWV3cywgb3VyIHRlYW0gbmFycm93ZWQgZG93biB0aGUgbWFpbiBwcm9ibGVtcyBpbnRvIHR3byBpc3N1ZXM6IGhhdmluZyB0b28gbWFueSBkaWZmZXJlbnQgY29tbXVuaWNhdGlvbiBwbGF0Zm9ybXMgYW5kIGRpZmZpY3VsdGllcyBvZiBtYWludGFpbmluZyB0aGUgbG9uZy10ZXJtIGludm9sdmVtZW50IG9mIHN0dWRlbnRzIGluIHRoZSBuZXR3b3JrLlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs1fSBtZD17NX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW1hZ2Ugc3JjPVwiL2ltYWdlcy91bmlmeS1jbG91ZC5qcGdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8U2VjdGlvblRpdGxlIHRleHQ9XCJSZXNlYXJjaFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiSHVudCBTdGF0ZW1lbnRcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQYXJhZ3JhcGggdGV4dD1cIldlIGFyZSBnb2luZyB0byBmaWd1cmUgb3V0IGhvdyBhbGwgdGhlIGNvbW11bml0aWVzIG9mIEZlbVRlY2hOZXQgY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyIHNvIHRoYXQgd2UgY2FuIGlkZW50aWZ5IHRoZSBrZXkgZmFjdG9ycyB0aGF0IGVuaGFuY2Ugb3IgaGluZGVyIHRoZSBpbnRlcmFjdGlvbiB3aXRoaW4gY29tbXVuaXRpZXMuXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Q29udGVudENhcm91c2VsIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiU29sdXRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJVbmlmeSB0ZWFtIHN1Z2dlc3RzIHR3byB0eXBlcyBvZiBzb2x1dGlvbnMgYXMgdGhlIHRlYW0gaGF2ZSBkZXZlbG9wZWQgYm90aCBhcHByb2FjaGVzIHRvIGhhdmUgbW9yZSBjaGFuY2VzIGZvciB0aGUgaWRlYWwgc29sdXRpb24uXCIgLz4gICAgICAgICAgICA8U2VjdGlvblN1YnRpdGxlIHRleHQ9XCJJbnRlZ3JhdGluZyBDb21tdW5pY2F0aW9uIFNlcnZpY2VzIHRvIFJlZHVjZSB0aGUgQ29tcGxleGl0eVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17Nn0gbWQ9ezZ9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEltYWdlIHNyYz1cIi9pbWFnZXMvdW5pZnktd2lyZWZyYW1lLTAxLnBuZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXs2fSBtZD17Nn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJXaXRoIHRoaXMgc29sdXRpb24sIHRoZSB0ZWFtIGhhcyB0cmllZCB0byBzb2x2ZSBvbmUgb2YgdGhlIG1haW4gcHJvYmxlbXMgdGhhdCBhcmUgcmVsYXRlZCB0byBvcmdhbml6YXRpb25hbCBpbnRlcm5hbCB0YXNrcy4gQnkgaW50ZWdyYXRpbmcgYWxsIHRoZSBjb21tdW5pY2F0aW9uIHBsYXRmb3JtcywgdGhlIHN0YWtlaG9sZGVyJ3MgdXNpbmcsIHRoZSBkZXNpZ24gdHJpZWQgdG8gcmVzb2x2ZSB0aGUgZGlmZmljdWx0aWVzIGFuZCBjb21wbGV4aXR5IG9mIGNvbW11bmljYXRpb24uXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25TdWJ0aXRsZSB0ZXh0PVwiQ3JlYXRpbmcgQ29ubmVjdGlvbnMgd2l0aG91dCBIYXZpbmcgdGhlIENlbnRyYWwgSHViIChEZWNlbnRyYWxpemVkIE5ldHdvcmspXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBhcmFncmFwaCB0ZXh0PVwiVGhpcyBwcm90b3R5cGUgaGFzIGEgcHJpb3JpdHkgb24gbWFraW5nIHN0cm9uZ2VyIG5ldHdvcmtzIGFtb25nIG1lbWJlcnMgYnkgbWF0Y2hpbmcgdXNlcnMnIHNpbWlsYXIgaW50ZXJlc3RzIGFuZCBwcm9maWxlcy4gU28gdGhhdCBlYWNoIG1lbWJlciBhbmQgZ3JvdXAgaGF2ZSB0aGVpciBvd24gbmV0d29ya3MgdG8gb3RoZXIgbWVtYmVycyBhbmQgZ3JvdXBzIHdpdGhvdXQgcGFzc2luZyB0aGUgY2VudGVyIGh1YiBvZiB0aGUgY29tbXVuaXR5LlwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFyYWdyYXBoIHRleHQ9XCJUaGUga2V5IGZlYXR1cmVzIG9mIHVzaW5nIHRoZXNlIGRhdGEgYXJlIGluIHRoZSBjb21tdW5pdHkgc2VjdGlvbi4gQWZ0ZXIgdGhlIHVzZXIgc2lnbnMgdXAgZm9yIHRoZSBhcHBsaWNhdGlvbiwgdGhleSB3aWxsIHNlZSB0aGVzZSBzdWdnZXN0aW9ucyB0aGF0IGFyZSBzb3J0ZWQgYnkgdGhlaXIgaW50ZXJlc3RzIGFuZCBwcm9maWxlcy4gT25jZSB0aGV5IGpvaW4gaW4gc2V2ZXJhbCBjb21tdW5pdGllcywgbm93IHRoZXkgY2FuIHNlZSB0aGUgbGlzdCBvZiB0aGVpciBncm91cHMuIEFsc28sIHRoZXkgY2FuIHNlZSB0aGUgbGlzdCBvZiBmcmllbmRzIG9uIHRoZSBmcmllbmTigJlzIHRhYi4gTm90IG9ubHkgdGhhdCwgdGhleSBjYW4gYWxzbyBzZWUgYSBsaXN0IG9mIHBlb3BsZSB3aG8gaGF2ZSBzaW1pbGFyIGludGVyZXN0cy4gVGhleSBjYW4gaW5pdGlhdGUgdGhlIGNoYXQgZ3JvdXAgKG9yIGNoYW5uZWwpIGFuZCBjYW4gaW52aXRlIHRoZXNlIHBlb3BsZSB3aG8gaGF2ZSBzaW1pbGFyIGludGVyZXN0cyBhbmQgcGFzc2lvbnMgb24gdGhlIHRvcGljLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXs1fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJZnJhbWUgdXJsPVwiaHR0cHM6Ly9pbnZpcy5pby9CTUVOSkhHNUNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVwiNDM4XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XCI4NzBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwicmVsYXRpdmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcz17eyB0cmFuc2Zvcm06IFwic2NhbGUoMC42NSlcIiwgdHJhbnNmb3JtT3JpZ2luOiBcInRvcCBjZW50ZXJcIiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNlY3Rpb25UaXRsZSB0ZXh0PVwiQXJ0aWZhY3RzXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sIHhzPXsxMn0gbWQ9ezEyfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFeHRlcm5hbCBMaW5rcyB0byBLYXRlIFNvaG5nJyBibG9nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2thdGVzb2huZy5jb20vYmxvZy9pbmRleC5waHAvaW9zLWRldmVsb3BtZW50L1wiIHRhcmdldD1cIl9ibGFua1wiPuKcuyBUaGUgUHJvY2VzcyBvZiBpT1MgRGV2ZWxvcG1lbnQg4py7PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2thdGVzb2huZy5jb20vYmxvZy9pbmRleC5waHAvMjAxNy8xMC8zMC9wcmZhcS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj7inLsgUFJGQVEg4py7PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbCB4cz17MTJ9IG1kPXsxMn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2thdGVzb2huZy5jb20vYmxvZy9pbmRleC5waHAvMjAxNy8xMS8yMS9kYXRhLWFuZC1hZmZvcmRhbmNlcy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj7inLsgRGF0YSBhbmQgQWZmb3JkYW5jZSDinLs8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFVuaWZ5VmlldyBmcm9tIFwiLi4vcHJvamVjdC1kZXRhaWwvdW5pZnlcIjtcclxuaW1wb3J0IFNlcGFyYXRvckNvbnRhY3QgZnJvbSAnLi4vc2hhcmVkLWNvbXBvbmVudHMvc2VwYXJhdG9yLWNvbnRhY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbmlmeVBhZ2VWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxVbmlmeVZpZXcgLz5cclxuICAgICAgICAgICAgICAgIDxTZXBhcmF0b3JDb250YWN0IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFNlcGFyYXRvciBmcm9tICcuL3NlcGFyYXRvcidcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZXBhcmF0b3JBYm91dCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxTZXBhcmF0b3I+XHJcbiAgICAgICAgICAgICAgICA8TGluayB0bz1cIi9hYm91dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIEFib3V0IEthdGUgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtcmlnaHRcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgIDwvU2VwYXJhdG9yPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2l0aG1lVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIndpdGhtZS12aWV3LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWx0ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8Q29udGFpbmVyIGZsdWlkIGNsYXNzTmFtZT1cIndpdGhtZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpdGhtZS13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+RG8geW91IHdhbnQgdG8gd29yayB3aXRoIG1lPzwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxpbmUtc2VwYXJhdG9yXCI+4py7PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5JIGFtIGxvb2tpbmcgZm9yIGEgVVgvVUkgZGVzaWduZXIgYW5kIGRldmVsb3BlciBwb3NpdGlvbi48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgY29udGFjdCBtZSBpZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGEgcGVyc29uIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB3aG8gcHJhY3RpY2VkIGh1bWFuLWNlbnRlcmVkIGRlc2lnbiBhbmQgZnJvbnQtZW5kIGRldmVsb3BtZW50IHNraWxscy48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOmtoZWV5YTdAaG90bWFpbC5jb21cIiBjbGFzc05hbWU9XCJidG4gYnRuLWluZm8gdGV4dC1jZW50ZXIgdGV4dC11cHBlcmNhc2VcIj5Db250YWN0IEthdGU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQ29udGFpbmVyLCBSb3csIENvbCwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0IHsgY2xlYXJJbnRlcnZhbCB9IGZyb20gJ3RpbWVycyc7XHJcblxyXG5jb25zdCBza2lsbHMgPSBbXHJcbiAgICB7XHJcbiAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgdGl0bGU6ICdEZXZlbG9wbWVudCcsXHJcbiAgICAgICAgZGVzY3JpcHRpb246ICdGcm9udC1FbmQgZGV2ZWxvcG1lbnQgaXMgbm90IG9ubHkgb25lIG9mIG15IHNraWxscyBidXQgYWxzbyBteSBmYXZvcml0ZSBob2JieS4gV3JpdGluZyBjb2RlcyBmb3IgbXkgd2ViIGRlc2lnbiBhbmQgVVggZGVzaWduIGlzIHNvIHJld2FyZGluZywgc28gSSBoYXZlIHRyYWluZWQgbXlzZWxmIGZvciB5ZWFycyB0byBrZWVwIG15IGNvZGluZyBza2lsbCBzaGFycC4gTXkgaW50ZXJlc3QgaW4gdGhlIGZpZWxkIGtlZXBzIG1lIGV4cGxvcmluZyBhbmQgc3R1ZHlpbmcgbW9yZSBmb3IgdXBjb21pbmcgdGVjaG5vbG9naWVzLicsXHJcbiAgICAgICAgaW1hZ2U6ICcuL2ltYWdlcy9jYXJkLXVuaWZ5LWlvcy5wbmcnLFxyXG4gICAgICAgIHJlbGF0ZWRQcm9qZWN0czogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnVW5pZnkgfCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcHJvamVjdC1kZXRhaWwvdW5pZnknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUG9ja2V0JyxcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9qZWN0LWRldGFpbC9wb2NrZXQnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBpZDogMSxcclxuICAgICAgICB0aXRsZTogJ0dyYXBoaWMgRGVzaWduJyxcclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0kgc3RhcnRlZCBidWlsZGluZyBteSBjYXJlZXIgaW4gdGhlIGZpZWxkIGFzIGEgZ3JhcGhpYyBkZXNpZ25lciBhbmQgd2ViIGRlc2lnbmVyLiBJIGFtIGNvbWZvcnRhYmxlIHVzaW5nIFBob3Rvc2hvcCwgSWxsdXN0cmF0b3IsIGFuZCBTa2V0Y2ggYW5kIHRha2UgZGVzaWducyBmcm9tIG1vY2stdXAgdG8gaW1wbGVtZW50YXRpb24uJyxcclxuICAgICAgICBpbWFnZTogJy4vaW1hZ2VzL2NhcmQtc3Ryb25nZXIucG5nJyxcclxuICAgICAgICByZWxhdGVkUHJvamVjdHM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJyNzdHJvbmdlcicsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcHJvamVjdC1kZXRhaWwvc3Ryb25nZXInLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGlkOiAyLFxyXG4gICAgICAgIHRpdGxlOiAnVVggfCBVSSBEZXNpZ24nLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSSBiZWxpZXZlIGl0IGlzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIGJvdGggZGVzaWduIGFuZCBkZXZlbG9wbWVudCBhcyBhIGZyb250LWVuZCBkZXZlbG9wZXIgdG8gY3JlYXRlIGEgbW9yZSBzdWNjZXNzZnVsIHVzZXItY2VudGVyZWQgZGVzaWduLiBJIGhhdmUgc3R1ZGllZCBob3cgdG8gY29uZHVjdCByZXNlYXJjaC1iYXNlZCBVWCBkZXNpZ24gY29uc2lkZXJpbmcgdXNhYmlsaXR5IGhldXJpc3RpY3MgYW5kIGVtcGF0aHkuJyxcclxuICAgICAgICBpbWFnZTogJy4vaW1hZ2VzL2NhcmQteXVyaS5wbmcnLFxyXG4gICAgICAgIHJlbGF0ZWRQcm9qZWN0czogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUG9ja2V0IHwnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Byb2plY3QtZGV0YWlsL3BvY2tldCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdQcm9qZWN0IFl1cmkgfCcsXHJcbiAgICAgICAgICAgICAgICB1cmw6ICcvcHJvamVjdC1kZXRhaWwveXVyaScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdVbmlmeSB8JyxcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9qZWN0LWRldGFpbC91bmlmeScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdFQ1MnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Byb2plY3QtZGV0YWlsL2VjcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgaWQ6IDMsXHJcbiAgICAgICAgdGl0bGU6ICdQcm9qZWN0IE1hbmFnZW1lbnQnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSSBoYXZlIGV4cGVyaWVuY2VkIHByb2plY3QgbWFuYWdlbWVudCBkdXJpbmcgdGhlIGNvdXJzZSBvZiBzdHVkeSBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uLiBNb3N0IG9mIG15IHBlcnNvbmFsL3RlYW0gcHJvamVjdHMgaGFkIGFwcGxpZWQgbGVhbiBVWCBhcHByb2FjaGVzIGZvciBhZ2lsZSBlbnZpcm9ubWVudHMuJyxcclxuICAgICAgICBpbWFnZTogJy4vaW1hZ2VzL2NhcmQtZWNzLnBuZycsXHJcbiAgICAgICAgcmVsYXRlZFByb2plY3RzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdVbmlmeSB8JyxcclxuICAgICAgICAgICAgICAgIHVybDogJy9wcm9qZWN0LWRldGFpbC91bmlmeScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdFQ1MnLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3Byb2plY3QtZGV0YWlsL2VjcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH0sXHJcbl1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNraWxsc1ZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogMCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm9uU2tpbGxDbGlja2VkID0gdGhpcy5vblNraWxsQ2xpY2tlZC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnNraWxsSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogKHRoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleCArIDEpICUgNCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgNDAwMCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG9uU2tpbGxDbGlja2VkKGUpIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLnNraWxsSW50ZXJ2YWwpO1xyXG4gICAgICAgIGNvbnN0IG5ld1NlbGVjdGVkSUQgPSBOdW1iZXIucGFyc2VJbnQoZS5jdXJyZW50VGFyZ2V0LmlkLCAxMCk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXg6IG5ld1NlbGVjdGVkSUQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHNob3dTZWxlY3RlZFNraWxsRGVzY3JpcHRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGxzW3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF0udGl0bGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJza2lsbC1kZXNjcmlwdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbHNbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XS5kZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9qZWN0LWxpbmstd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbHNbdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4XS5yZWxhdGVkUHJvamVjdHMubWFwKChyZWxhdGVkUHJvamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cInByb2plY3QtbGlua1wiIHRvPXtyZWxhdGVkUHJvamVjdC51cmx9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRQcm9qZWN0Lm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNob3dTZWxlY3RlZFNraWxsSW1hZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtza2lsbHNbMF0uaW1hZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtza2lsbHNbMV0uaW1hZ2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3NraWxsc1syXS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17c2tpbGxzWzNdLmltYWdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInBiLTBcIj5cclxuICAgICAgICAgICAgICAgIDxDb250YWluZXIgY2xhc3NOYW1lPVwic2tpbGxzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5Ta2lsbHM8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+SSBidWlsZCB3ZWJzaXRlcywgYW5kIEkgbG92ZSBjcmVhdGluZyBkaWdpdGFsIHByb2R1Y3Rpb24gZm9yIHRoZSB3ZWIuIEhlcmUgaXMgbXkgc2tpbGxzZXQgSSBhbSBnb29kIGF0IGFuZCBwYXNzaW9uYXRlIGFib3V0LjwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdyBjbGFzc05hbWU9XCJtYi14cy02MCBtYi1tZC04MCBza2lsbHMtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhsPVwiMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbT1cIjEyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kPVwiMTJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2tpbGwtdGFicy1ob3JcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgZGF0YS1kYXRhLWNvbXBvbmVudD1cInNraWxsc0xpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxscy5tYXAoKHNraWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3NraWxsLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NraWxsLmlkID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXggPyAnc2VsZWN0ZWQtU2tpbGwnIDogJyd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25Ta2lsbENsaWNrZWR9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPntza2lsbC50aXRsZX08L2gzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9XCIxMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbT1cIjEyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kPVwiNlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsPVwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhsPVwiNVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtYi14cy04MCBtYi1tZC0wIHNraWxsLWxlZnQtcGFuZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWRTa2lsbERlc2NyaXB0aW9uKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJvamVjdC1pY29uc1wiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9XCIxMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbT1cIjEyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1kPVwiNlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bD1cIjVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2tpbGwtcmlnaHQtcGFuZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93U2VsZWN0ZWRTa2lsbEltYWdlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bD1cIjJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc209XCIxMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD1cIjEyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInNraWxsLXRhYnMtdmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtZGF0YS1jb21wb25lbnQ9XCJza2lsbHNMaXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbHMubWFwKChza2lsbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtza2lsbC5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtza2lsbC5pZCA9PT0gdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ID8gJ3NlbGVjdGVkLVNraWxsJyA6ICcnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uU2tpbGxDbGlja2VkfSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz57c2tpbGwudGl0bGV9PC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCB7IENvbnRhaW5lciwgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcbmltcG9ydCBwcm9qZWN0RGF0YSBmcm9tICcuL3Byb2plY3QtZGF0YS5qc29uJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGZvbGlvVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInB0LTBcIj5cclxuICAgICAgICAgICAgICAgIDxDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBmbHVpZFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInBvcnRmb2xpby12aWV3LWNvbnRhaW5lclwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJwb3J0Zm9saW9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwiY29sLXNtLTYgaGlkZGVuXCI+UHJvamVjdHM8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3cgY2xhc3NOYW1lPVwicGItMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0RGF0YS5tYXAoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnNpZGVMaW5rID0gKCkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzc05hbWU9e2RhdGEuYmFja2dyb3VuZENsYXNzICsgXCIgaC0zMDAgaC00MDAgbWItMFwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17ZGF0YS5pbWFnZVVybH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17ZGF0YS50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInByb2plY3QtY2FyZC1pbWdcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJsYXlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57ZGF0YS50aXRsZX08YnIgLz7igJQ8L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2RhdGEucm9sZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieHMtZGlzcGxheVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57ZGF0YS50aXRsZX08YnIgLz48L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhLnJvbGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtkYXRhLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9XCI2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxnPVwiNFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYXJkLWRpc3BsYXlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxpbmtUbyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtkYXRhLmxpbmtUb30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpbnNpZGVMaW5rKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXh0ZXJuYWxMaW5rICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17ZGF0YS5leHRlcm5hbExpbmt9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aW5zaWRlTGluaygpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwZXJpZW5jZVZpZXcgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c2VjdGlvbj5cclxuICAgICAgICAgICAgICAgIDxDb250YWluZXIgY2xhc3NOYW1lPVwiZXhwZXJpZW5jZS12aWV3LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJleHBlcmllbmNlLXRpdGxlIG10LTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4cGVyaWVuY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj5cclxuICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8Um93IGNsYXNzTmFtZT1cIm10LTVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENvbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeHM9ezEyfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc209ezR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZD17NH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImV4cGVyaWVuY2UtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0nLi9pbWFnZXMvcmVzZWFyY2hlci5zdmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdleHBlcmllbmNlLWljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwicmVzZWFyY2hlciBpY29uXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J2V4cGVyaWVuY2Utcm9sZSBtdC0zJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVWCBSZXNlYXJjaGVyICZhbXA7IEludGVybnNoaXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZXhwZXJpZW5jZS1kZXNjcmlwdGlvbic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuc2hpcCBhcyBhIHVzZXIgZXhwZXJpZW5jZSByZXNlYXJjaGVyIGF0IHRoZSBQT0MgbGFiIGF0IHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzPXsxMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtPXs0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJleHBlcmllbmNlLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Jy4vaW1hZ2VzL3dlYi1kZXNpZ25lci5zdmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdleHBlcmllbmNlLWljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwid2ViIGRlc2lnbmVyIGljb25cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT0nZXhwZXJpZW5jZS1yb2xlIG10LTMnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlYiBEZXNpZ25lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdleHBlcmllbmNlLWRlc2NyaXB0aW9uJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWIgZGVzaWduZXIgYXQgYW4gb25saW5lIGUtY29tbWVyY2UgY29tcGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9lbi5rb3JlYWRlcGFydC5jb20vXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwO0FsbEtvcmVhIEluYy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb2xcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzPXsxMn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtPXs0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWQ9ezR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJleHBlcmllbmNlLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Jy4vaW1hZ2VzL2dyYXBoaWMtZGVzaWduZXIuc3ZnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZXhwZXJpZW5jZS1pY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cImdyYXBoaWMgZGVzaWduZXIgaWNvblwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSdleHBlcmllbmNlLXJvbGUgbXQtMyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3JhcGhpYyBEZXNpbmdlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdleHBlcmllbmNlLWRlc2NyaXB0aW9uJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmFwaGljIGRlc2lnbmVyIGF0IGUtY29tbWVyY2UgY29tcGFuaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsInZhciBub3cgPSByZXF1aXJlKCdwZXJmb3JtYW5jZS1ub3cnKVxuICAsIHJvb3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvd1xuICAsIHZlbmRvcnMgPSBbJ21veicsICd3ZWJraXQnXVxuICAsIHN1ZmZpeCA9ICdBbmltYXRpb25GcmFtZSdcbiAgLCByYWYgPSByb290WydyZXF1ZXN0JyArIHN1ZmZpeF1cbiAgLCBjYWYgPSByb290WydjYW5jZWwnICsgc3VmZml4XSB8fCByb290WydjYW5jZWxSZXF1ZXN0JyArIHN1ZmZpeF1cblxuZm9yKHZhciBpID0gMDsgIXJhZiAmJiBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICByYWYgPSByb290W3ZlbmRvcnNbaV0gKyAnUmVxdWVzdCcgKyBzdWZmaXhdXG4gIGNhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdDYW5jZWwnICsgc3VmZml4XVxuICAgICAgfHwgcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxufVxuXG4vLyBTb21lIHZlcnNpb25zIG9mIEZGIGhhdmUgckFGIGJ1dCBub3QgY0FGXG5pZighcmFmIHx8ICFjYWYpIHtcbiAgdmFyIGxhc3QgPSAwXG4gICAgLCBpZCA9IDBcbiAgICAsIHF1ZXVlID0gW11cbiAgICAsIGZyYW1lRHVyYXRpb24gPSAxMDAwIC8gNjBcblxuICByYWYgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIF9ub3cgPSBub3coKVxuICAgICAgICAsIG5leHQgPSBNYXRoLm1heCgwLCBmcmFtZUR1cmF0aW9uIC0gKF9ub3cgLSBsYXN0KSlcbiAgICAgIGxhc3QgPSBuZXh0ICsgX25vd1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNwID0gcXVldWUuc2xpY2UoMClcbiAgICAgICAgLy8gQ2xlYXIgcXVldWUgaGVyZSB0byBwcmV2ZW50XG4gICAgICAgIC8vIGNhbGxiYWNrcyBmcm9tIGFwcGVuZGluZyBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgZnJhbWUncyBxdWV1ZVxuICAgICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmKCFjcFtpXS5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgICAgY3BbaV0uY2FsbGJhY2sobGFzdClcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aHJvdyBlIH0sIDApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCBNYXRoLnJvdW5kKG5leHQpKVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKHtcbiAgICAgIGhhbmRsZTogKytpZCxcbiAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgIGNhbmNlbGxlZDogZmFsc2VcbiAgICB9KVxuICAgIHJldHVybiBpZFxuICB9XG5cbiAgY2FmID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihxdWV1ZVtpXS5oYW5kbGUgPT09IGhhbmRsZSkge1xuICAgICAgICBxdWV1ZVtpXS5jYW5jZWxsZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4pIHtcbiAgLy8gV3JhcCBpbiBhIG5ldyBmdW5jdGlvbiB0byBwcmV2ZW50XG4gIC8vIGBjYW5jZWxgIHBvdGVudGlhbGx5IGJlaW5nIGFzc2lnbmVkXG4gIC8vIHRvIHRoZSBuYXRpdmUgckFGIGZ1bmN0aW9uXG4gIHJldHVybiByYWYuY2FsbChyb290LCBmbilcbn1cbm1vZHVsZS5leHBvcnRzLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICBjYWYuYXBwbHkocm9vdCwgYXJndW1lbnRzKVxufVxubW9kdWxlLmV4cG9ydHMucG9seWZpbGwgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICBvYmplY3QgPSByb290O1xuICB9XG4gIG9iamVjdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByYWZcbiAgb2JqZWN0LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2FmXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmFmID0gcmVxdWlyZSgncmFmJyk7XG5cbnZhciBfcmFmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JhZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgTU9ERV9USU1FT1VUID0gMDtcbnZhciBNT0RFX0lOVEVSVkFMID0gMTtcbnZhciBmblN0YWNrcyA9IG5ldyBNYXAoKTtcbnZhciBydW5BcnJheSA9IG5ldyBTZXQoKTtcbnZhciByYWZTdGFydGVkID0gZmFsc2U7XG52YXIgc3RhcnRJZCA9IDA7XG5cbmZ1bmN0aW9uIGdldFRpbWVTdGFtcCgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufVxuXG5mdW5jdGlvbiBleGVjdXRlRm4odmFsdWUpIHtcbiAgdmFyIGZuID0gdmFsdWUuZm4sXG4gICAgICBhcmdzID0gdmFsdWUuYXJncztcblxuICBmbi5hcHBseSh1bmRlZmluZWQsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkZ1bmN0aW9uKCkge1xuICBpZiAocnVuQXJyYXkuc2l6ZSA9PT0gMCkgcmV0dXJuO1xuICBydW5BcnJheS5mb3JFYWNoKGV4ZWN1dGVGbik7XG4gIHJ1bkFycmF5LmNsZWFyKCk7XG59XG5cbnZhciBjaGVja1RpY2sgPSBmdW5jdGlvbiBjaGVja1RpY2soY3VycmVudFRpbWVUaWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIGlkKSB7XG4gICAgdmFyIG5leHRUaWNrID0gdmFsdWUubmV4dFRpY2ssXG4gICAgICAgIG1zID0gdmFsdWUubXMsXG4gICAgICAgIG1vZGUgPSB2YWx1ZS5tb2RlO1xuXG4gICAgaWYgKGN1cnJlbnRUaW1lVGljayAtIG5leHRUaWNrID49IDApIHtcbiAgICAgIHJ1bkFycmF5LmFkZCh2YWx1ZSk7XG4gICAgICBpZiAobW9kZSA9PT0gTU9ERV9USU1FT1VUKSB7XG4gICAgICAgIGZuU3RhY2tzLmRlbGV0ZShpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmblN0YWNrcy5zZXQoaWQsIE9iamVjdC5hc3NpZ24oe30sIHZhbHVlLCB7XG4gICAgICAgICAgbmV4dFRpY2s6IG5leHRUaWNrICsgbXNcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGxvb3AoKSB7XG4gIHZhciBjdXJyZW50VGltZVRpY2sgPSBnZXRUaW1lU3RhbXAoKTtcbiAgZm5TdGFja3MuZm9yRWFjaChjaGVja1RpY2soY3VycmVudFRpbWVUaWNrKSk7XG4gIHJ1bkZ1bmN0aW9uKCk7XG4gIGlmIChmblN0YWNrcy5zaXplID09PSAwKSB7XG4gICAgcmFmU3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICAoMCwgX3JhZjIuZGVmYXVsdCkobG9vcCk7XG59XG5cbmZ1bmN0aW9uIGFkZElkKF9yZWYpIHtcbiAgdmFyIGZuID0gX3JlZi5mbixcbiAgICAgIF9yZWYkbXMgPSBfcmVmLm1zLFxuICAgICAgbXMgPSBfcmVmJG1zID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiRtcyxcbiAgICAgIGFyZ3MgPSBfcmVmLmFyZ3MsXG4gICAgICBtb2RlID0gX3JlZi5tb2RlO1xuXG4gIGlmICghZm4pIHJldHVybiBudWxsO1xuICB2YXIgY3VycmVudElkID0gc3RhcnRJZDtcbiAgZm5TdGFja3Muc2V0KGN1cnJlbnRJZCwge1xuICAgIGZuOiBmbixcbiAgICBtczogbXMsXG4gICAgbmV4dFRpY2s6IGdldFRpbWVTdGFtcCgpICsgbXMsXG4gICAgYXJnczogYXJncyxcbiAgICBtb2RlOiBtb2RlXG4gIH0pO1xuICBpZiAoIXJhZlN0YXJ0ZWQpIHtcbiAgICByYWZTdGFydGVkID0gdHJ1ZTtcbiAgICAoMCwgX3JhZjIuZGVmYXVsdCkobG9vcCk7XG4gIH1cbiAgc3RhcnRJZCArPSAxO1xuICByZXR1cm4gY3VycmVudElkO1xufVxuXG5mdW5jdGlvbiByZW1vdmVJZChpZCkge1xuICBpZiAoZm5TdGFja3MuaGFzKGlkKSkge1xuICAgIGZuU3RhY2tzLmRlbGV0ZShpZCk7XG4gIH1cbiAgaWYgKGZuU3RhY2tzLnNpemUgPT09IDApIHtcbiAgICByYWZTdGFydGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBzZXRUaW1lb3V0OiBmdW5jdGlvbiBzZXRUaW1lb3V0KGZuKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgcmV0dXJuIGFkZElkKHsgZm46IGZuLCBtczogbXMsIGFyZ3M6IGFyZ3MsIG1vZGU6IE1PREVfVElNRU9VVCB9KTtcbiAgfSxcbiAgY2xlYXJUaW1lb3V0OiByZW1vdmVJZCxcbiAgc2V0SW50ZXJ2YWw6IGZ1bmN0aW9uIHNldEludGVydmFsKGZuKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgcmV0dXJuIGFkZElkKHsgZm46IGZuLCBtczogbXMsIGFyZ3M6IGFyZ3MsIG1vZGU6IE1PREVfSU5URVJWQUwgfSk7XG4gIH0sXG4gIGNsZWFySW50ZXJ2YWw6IHJlbW92ZUlkXG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2luZGV4JykuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFuaW1hdGVTY3JvbGwgPSB1bmRlZmluZWQ7XG5leHBvcnRzLnVwZGF0ZUhpc3RvcnkgPSB1cGRhdGVIaXN0b3J5O1xuXG52YXIgX3JlcXVlc3RhbmltYXRpb25mcmFtZVRpbWVyID0gcmVxdWlyZSgncmVxdWVzdGFuaW1hdGlvbmZyYW1lLXRpbWVyJyk7XG5cbnZhciBhbmltYXRlU2Nyb2xsID0gZXhwb3J0cy5hbmltYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGltZW91dElkID0gdm9pZCAwO1xuICB2YXIgcmVzb2x2ZVByZXZpb3VzID0gdm9pZCAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBhbmltYXRlU2Nyb2xsKGlkLCB0YXJnZXRJZCwgYW5pbWF0ZSkge1xuICAgIHZhciB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQpO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgLy8gbGlrZSBqUXVlcnkgLT4gJCgnaHRtbCwgYm9keScpLnNjcm9sbFRvcFxuICAgICAgcmV0dXJuIHRhcmdldEVsZW1lbnQgPyB0YXJnZXRFbGVtZW50LnNjcm9sbFRvcCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U2Nyb2xsVG9wKHBvc2l0aW9uKSB7XG4gICAgICBpZiAodGFyZ2V0RWxlbWVudCkge1xuICAgICAgICB0YXJnZXRFbGVtZW50LnNjcm9sbFRvcCA9IHBvc2l0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gcG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gaWQgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgOiBkb2N1bWVudC5ib2R5O1xuXG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICMnICsgaWQpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKCkge1xuICAgICAgICB2YXIgcGFyZW50T2Zmc2V0VG9wID0gdGFyZ2V0RWxlbWVudCA/IHRhcmdldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDogMDtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIC0gcGFyZW50T2Zmc2V0VG9wICsgZ2V0U2Nyb2xsVG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvZmZzZXQgPSBhbmltYXRlLm9mZnNldCxcbiAgICAgICAgICBkdXJhdGlvbiA9IGFuaW1hdGUuZHVyYXRpb24sXG4gICAgICAgICAgZWFzaW5nID0gYW5pbWF0ZS5lYXNpbmc7XG5cbiAgICAgIHZhciBzdGFydCA9IGdldFNjcm9sbFRvcCgpO1xuICAgICAgdmFyIHRvID0gZ2V0T2Zmc2V0VG9wKGVsZW1lbnQpICsgb2Zmc2V0O1xuICAgICAgdmFyIGNoYW5nZSA9IHRvIC0gc3RhcnQ7XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVGbigpIHtcbiAgICAgICAgdmFyIGVsYXBzZWRUaW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gICAgICAgIHZhciBpbmNyZW1lbnQgPSAyMDtcbiAgICAgICAgdmFyIGVsYXBzZWQgPSBlbGFwc2VkVGltZSArIGluY3JlbWVudDtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZWFzaW5nKG51bGwsIGVsYXBzZWQsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKTtcbiAgICAgICAgc2V0U2Nyb2xsVG9wKHBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGVsYXBzZWQgPCBkdXJhdGlvbikge1xuICAgICAgICAgIHRpbWVvdXRJZCA9ICgwLCBfcmVxdWVzdGFuaW1hdGlvbmZyYW1lVGltZXIuc2V0VGltZW91dCkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYW5pbWF0ZUZuKGVsYXBzZWQpO1xuICAgICAgICAgIH0sIGluY3JlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZW91dElkID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGltZW91dElkKSB7XG4gICAgICAgICgwLCBfcmVxdWVzdGFuaW1hdGlvbmZyYW1lVGltZXIuY2xlYXJUaW1lb3V0KSh0aW1lb3V0SWQpO1xuICAgICAgICByZXNvbHZlUHJldmlvdXMoKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmVQcmV2aW91cyA9IHJlc29sdmU7XG4gICAgICBhbmltYXRlRm4oKTtcbiAgICB9KTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gdXBkYXRlSGlzdG9yeShpZCkge1xuICBpZCA9ICcjJyArIGlkO1xuICBpZiAoaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBpZCk7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24uaGFzaCA9IGlkO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNjcm9sbGNob3IgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2Nyb2xsY2hvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsY2hvcihwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxjaG9yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTY3JvbGxjaG9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsY2hvcikpLmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLl9oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc3RhdGUuYmVmb3JlQW5pbWF0ZShldmVudCk7XG4gICAgICBldmVudCAmJiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgKDAsIF9oZWxwZXJzLmFuaW1hdGVTY3JvbGwpKF90aGlzLnN0YXRlLnRvLCBfdGhpcy5zdGF0ZS50YXJnZXQsIF90aGlzLnN0YXRlLmFuaW1hdGUpLnRoZW4oZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgIF90aGlzLnN0YXRlLmRpc2FibGVIaXN0b3J5IHx8ICgwLCBfaGVscGVycy51cGRhdGVIaXN0b3J5KShpZCk7XG4gICAgICAgICAgX3RoaXMuc3RhdGUuYWZ0ZXJBbmltYXRlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0gU2Nyb2xsY2hvci5fc3RhdGVIZWxwZXIocHJvcHMpO1xuICAgIF90aGlzLnNpbXVsYXRlQ2xpY2sgPSBfdGhpcy5faGFuZGxlQ2xpY2s7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFNjcm9sbGNob3IsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMocHJvcHMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoU2Nyb2xsY2hvci5fc3RhdGVIZWxwZXIocHJvcHMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgICB0YXJnZXQgPSBfcHJvcHMudGFyZ2V0LFxuICAgICAgICAgIGFuaW1hdGUgPSBfcHJvcHMuYW5pbWF0ZSxcbiAgICAgICAgICBiZWZvcmVBbmltYXRlID0gX3Byb3BzLmJlZm9yZUFuaW1hdGUsXG4gICAgICAgICAgYWZ0ZXJBbmltYXRlID0gX3Byb3BzLmFmdGVyQW5pbWF0ZSxcbiAgICAgICAgICBkaXNhYmxlSGlzdG9yeSA9IF9wcm9wcy5kaXNhYmxlSGlzdG9yeSxcbiAgICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsndG8nLCAndGFyZ2V0JywgJ2FuaW1hdGUnLCAnYmVmb3JlQW5pbWF0ZScsICdhZnRlckFuaW1hdGUnLCAnZGlzYWJsZUhpc3RvcnknXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgICAgcmV0dXJuICF0aGlzLnByb3BzLmNoaWxkcmVuID8gbnVsbCA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhyZWY6ICcjJyArIHRoaXMuc3RhdGUudG8sIG9uQ2xpY2s6IHRoaXMuX2hhbmRsZUNsaWNrIH0pKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ19ub3JtYWxpemVJZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9ub3JtYWxpemVJZChpZCkge1xuICAgICAgcmV0dXJuIGlkICYmIGlkLnJlcGxhY2UoL14jLywgJycpIHx8ICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zdGF0ZUhlbHBlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGF0ZUhlbHBlcihwcm9wcykge1xuICAgICAgdmFyIF9yZWYgPSBwcm9wcy5hbmltYXRlIHx8IHt9LFxuICAgICAgICAgIF9yZWYkb2Zmc2V0ID0gX3JlZi5vZmZzZXQsXG4gICAgICAgICAgb2Zmc2V0ID0gX3JlZiRvZmZzZXQgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJG9mZnNldCxcbiAgICAgICAgICBfcmVmJGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbixcbiAgICAgICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDQwMCA6IF9yZWYkZHVyYXRpb24sXG4gICAgICAgICAgX3JlZiRlYXNpbmcgPSBfcmVmLmVhc2luZyxcbiAgICAgICAgICBlYXNpbmcgPSBfcmVmJGVhc2luZyA9PT0gdW5kZWZpbmVkID8gZWFzZU91dFF1YWQgOiBfcmVmJGVhc2luZztcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG86IFNjcm9sbGNob3IuX25vcm1hbGl6ZUlkKHByb3BzLnRvKSxcbiAgICAgICAgdGFyZ2V0OiBTY3JvbGxjaG9yLl9ub3JtYWxpemVJZChwcm9wcy50YXJnZXQpLFxuICAgICAgICBhbmltYXRlOiB7IG9mZnNldDogb2Zmc2V0LCBkdXJhdGlvbjogZHVyYXRpb24sIGVhc2luZzogZWFzaW5nIH0sXG4gICAgICAgIGJlZm9yZUFuaW1hdGU6IHByb3BzLmJlZm9yZUFuaW1hdGUgfHwgZnVuY3Rpb24gKCkge30sXG4gICAgICAgIGFmdGVyQW5pbWF0ZTogcHJvcHMuYWZ0ZXJBbmltYXRlIHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICBkaXNhYmxlSGlzdG9yeTogcHJvcHMuZGlzYWJsZUhpc3RvcnlcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICByZXR1cm4gU2Nyb2xsY2hvci5fc3RhdGVIZWxwZXIocHJvcHMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTY3JvbGxjaG9yO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuLy8gRGVmYXVsdCBlYXNpbmcgZnVuY3Rpb25cbi8vIGpRdWVyeSBlYXNpbmcgJ3N3aW5nJ1xuXG5cblNjcm9sbGNob3IucHJvcFR5cGVzID0ge1xuICB0bzogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgdGFyZ2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYW5pbWF0ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgb2Zmc2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBkdXJhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgZWFzaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbiAgfSksXG4gIGJlZm9yZUFuaW1hdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgYWZ0ZXJBbmltYXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGRpc2FibGVIaXN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBTY3JvbGxjaG9yO1xuZnVuY3Rpb24gZWFzZU91dFF1YWQoeCwgdCwgYiwgYywgZCkge1xuICByZXR1cm4gLWMgKiAodCAvPSBkKSAqICh0IC0gMikgKyBiO1xufVxuXG4vLyBTZXR1cCBmb3IgUmVhY3QgdmVyc2lvbiAxNi4zLnggYW5kIGJleW9uZFxudmFyIHJlU2VtdmVyID0gL152PygoXFxkKylcXC4oXFxkKylcXC4oXFxkKykpKD86LShbXFxkQS1aYS16XFwtXSsoPzpcXC5bXFxkQS1aYS16XFwtXSspKikpPyg/OlxcKyhbXFxkQS1aYS16XFwtXSsoPzpcXC5bXFxkQS1aYS16XFwtXSspKikpPyQvOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cbnZhciBfcmVTZW12ZXIkZXhlYyA9IHJlU2VtdmVyLmV4ZWMoX3JlYWN0Mi5kZWZhdWx0LnZlcnNpb24pLFxuICAgIF9yZVNlbXZlciRleGVjMiA9IF9zbGljZWRUb0FycmF5KF9yZVNlbXZlciRleGVjLCA0KSxcbiAgICBtYWpvciA9IF9yZVNlbXZlciRleGVjMlsyXSxcbiAgICBtaW5vciA9IF9yZVNlbXZlciRleGVjMlszXTtcblxubWFqb3IgPj0gMTYgJiYgbWlub3IgPj0gMyAmJiBkZWxldGUgU2Nyb2xsY2hvci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IENvbnRhaW5lciwgUm93LCBDb2wgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXHJcbmltcG9ydCBTY3JvbGxjaG9yIGZyb20gJ3JlYWN0LXNjcm9sbGNob3InXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXJWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPENvbnRhaW5lciBmbHVpZCBjbGFzc05hbWU9XCJoZWFkZXItdmlldy1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxSb3cgY2xhc3NOYW1lPVwiaW50cm9cIj5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIGNsYXNzTmFtZT1cImFsaWduLXNlbGYtY2VudGVyIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz1cImltYWdlcy9rYXRlLWxvZ28tYmxhY2stMjAxOS5zdmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiS2F0ZSBzb2huZyBsb2dvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImthdGUtbG9nb1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMT5Gcm9udC1FbmQgRGV2ZWxvcGVyPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVWCBEZXNpZ25lciBpbiBTZWF0dGxlPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+UHJvZHVjaW5nIHJlc3BvbnNpdmUsIGFjY2Vzc2liaWxlIHJpY2ggd2Vic2l0ZXMgZm9yIGV4Y2VwdGlvbmFsIHVzZXIgZXhwZXJpZW5jZTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFNjcm9sbGNob3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPVwiI3BvcnRmb2xpb1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWluZm8gdGV4dC1jZW50ZXIgdGV4dC11cHBlcmNhc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgUHJvamVjdHMgy4VcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TY3JvbGxjaG9yPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IEhlYWRlclZpZXcgZnJvbSAnLi4vaGVhZGVyJ1xyXG5pbXBvcnQgRXhwZXJpZW5jZVZpZXcgZnJvbSAnLi4vZXhwZXJpZW5jZSdcclxuaW1wb3J0IFBvcnRmb2xpb1ZpZXcgZnJvbSAnLi4vcG9ydGZvbGlvJ1xyXG5pbXBvcnQgU2tpbGxzVmlldyBmcm9tICcuLi9za2lsbHMnXHJcbmltcG9ydCBXaXRobWVWaWV3IGZyb20gJy4uL3dpdGhtZSdcclxuaW1wb3J0IFNlcGFyYXRvckFib3V0IGZyb20gJy4uL3NoYXJlZC1jb21wb25lbnRzL3NlcGFyYXRvci1hYm91dCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhvbWVQYWdlVmlldyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgPlxyXG4gICAgICAgICAgICAgICAgPEhlYWRlclZpZXcgLz5cclxuICAgICAgICAgICAgICAgIDxQb3J0Zm9saW9WaWV3IC8+XHJcbiAgICAgICAgICAgICAgICA8RXhwZXJpZW5jZVZpZXcgLz5cclxuICAgICAgICAgICAgICAgIDxTa2lsbHNWaWV3IC8+XHJcbiAgICAgICAgICAgICAgICA8V2l0aG1lVmlldyAvPlxyXG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvckFib3V0IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjI2YTViYWZjMThiNWI5ZTVmYTM5MTU1NzgxNzQzNzU4LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjE2OGUzNjI3Y2MyNGUwMDdjOTJiMGI5ZTg5YmI0NWUwLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImM3NDc1N2M3ZGE1ZmRjNTM2ZjdlMGUyNmY1YzMyZjU2LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjYzOWE4OTQyMzhlZWMxOWJmMzMwZDY5ZThjYjY3MTc1LmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjQ4ZDBkNTFiZTMwNWMyNzE1OWMxZGRmMmE5NzY4NDNiLmpwZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImUxZmIwNmEyNTc5ZmFiN2Q1NDEzODA2OWM0MGRjMzFlLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdlNzE0ZGI5NzdiZjM5MDkzYjRkZDY2MWRmZGVmNzM1LnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhiZGJjODVlNjk5ZDc0NjBjOTM5ZDBhMDdkZDk4MTUwLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRhZWUzMzc2YmViMWZkZDdiMTMzMWYyMmVjZjIyYzk4LnBuZ1wiOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFsbDtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXInKTtcblxudmFyIF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGFsbCgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbGlkYXRvcnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICB2YWxpZGF0b3JzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gYWxsUHJvcFR5cGVzKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIHZhbGlkYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdG9yKSB7XG4gICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0b3IuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICBlcnJvciA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2NyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyMi5kZWZhdWx0KShhbGxQcm9wVHlwZXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmFyaWFIaWRkZW4gPSBhcmlhSGlkZGVuO1xuZXhwb3J0cy5oaWRlU2libGluZ3MgPSBoaWRlU2libGluZ3M7XG5leHBvcnRzLnNob3dTaWJsaW5ncyA9IHNob3dTaWJsaW5ncztcbnZhciBCTEFDS0xJU1QgPSBbJ3RlbXBsYXRlJywgJ3NjcmlwdCcsICdzdHlsZSddO1xuXG52YXIgaXNIaWRhYmxlID0gZnVuY3Rpb24gaXNIaWRhYmxlKF9yZWYpIHtcbiAgdmFyIG5vZGVUeXBlID0gX3JlZi5ub2RlVHlwZSxcbiAgICAgIHRhZ05hbWUgPSBfcmVmLnRhZ05hbWU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gMSAmJiBCTEFDS0xJU1QuaW5kZXhPZih0YWdOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMTtcbn07XG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uIHNpYmxpbmdzKGNvbnRhaW5lciwgZXhjbHVkZSwgY2IpIHtcbiAgZXhjbHVkZSA9IFtdLmNvbmNhdChleGNsdWRlKTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAoZXhjbHVkZS5pbmRleE9mKG5vZGUpID09PSAtMSAmJiBpc0hpZGFibGUobm9kZSkpIHtcbiAgICAgIGNiKG5vZGUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBhcmlhSGlkZGVuKHNob3csIG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm47XG5cbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVTaWJsaW5ncyhjb250YWluZXIsIF9yZWYyKSB7XG4gIHZhciByb290ID0gX3JlZjIucm9vdCxcbiAgICAgIGJhY2tkcm9wID0gX3JlZjIuYmFja2Ryb3A7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgW3Jvb3QsIGJhY2tkcm9wXSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbih0cnVlLCBub2RlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNob3dTaWJsaW5ncyhjb250YWluZXIsIF9yZWYzKSB7XG4gIHZhciByb290ID0gX3JlZjMucm9vdCxcbiAgICAgIGJhY2tkcm9wID0gX3JlZjMuYmFja2Ryb3A7XG4gIHNpYmxpbmdzKGNvbnRhaW5lciwgW3Jvb3QsIGJhY2tkcm9wXSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gYXJpYUhpZGRlbihmYWxzZSwgbm9kZSk7XG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0V2luZG93O1xuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICByZXR1cm4gbm9kZSA9PT0gbm9kZS53aW5kb3cgPyBub2RlIDogbm9kZS5ub2RlVHlwZSA9PT0gOSA/IG5vZGUuZGVmYXVsdFZpZXcgfHwgbm9kZS5wYXJlbnRXaW5kb3cgOiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT3ZlcmZsb3dpbmc7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9pc1dpbmRvd1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufVxuXG5mdW5jdGlvbiBib2R5SXNPdmVyZmxvd2luZyhub2RlKSB7XG4gIHZhciBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobm9kZSk7XG4gIHZhciB3aW4gPSAoMCwgX2lzV2luZG93LmRlZmF1bHQpKGRvYyk7XG4gIHJldHVybiBkb2MuYm9keS5jbGllbnRXaWR0aCA8IHdpbi5pbm5lcldpZHRoO1xufVxuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgd2luID0gKDAsIF9pc1dpbmRvdy5kZWZhdWx0KShjb250YWluZXIpO1xuICByZXR1cm4gd2luIHx8IGlzQm9keShjb250YWluZXIpID8gYm9keUlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSA6IGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVwbGFjZUNsYXNzTmFtZShvcmlnQ2xhc3MsIGNsYXNzVG9SZW1vdmUpIHtcbiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc1RvUmVtb3ZlICsgJyg/OlxcXFxzfCQpJywgJ2cnKSwgJyQxJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoL15cXHMqfFxccyokL2csICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IHJlcGxhY2VDbGFzc05hbWUoZWxlbWVudC5jbGFzc05hbWUsIGNsYXNzTmFtZSk7ZWxzZSBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycsIGNsYXNzTmFtZSkpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcblxudmFyIF9oYXNDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaGFzQ2xhc3NcIikpO1xuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtlbHNlIGlmICghKDAsIF9oYXNDbGFzcy5kZWZhdWx0KShlbGVtZW50LCBjbGFzc05hbWUpKSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZSArICcgJyArIGNsYXNzTmFtZTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnKSArICcgJyArIGNsYXNzTmFtZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2FkZENsYXNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hZGRDbGFzc1wiKSk7XG5cbmV4cG9ydHMuYWRkQ2xhc3MgPSBfYWRkQ2xhc3MuZGVmYXVsdDtcblxudmFyIF9yZW1vdmVDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVtb3ZlQ2xhc3NcIikpO1xuXG5leHBvcnRzLnJlbW92ZUNsYXNzID0gX3JlbW92ZUNsYXNzLmRlZmF1bHQ7XG5cbnZhciBfaGFzQ2xhc3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hhc0NsYXNzXCIpKTtcblxuZXhwb3J0cy5oYXNDbGFzcyA9IF9oYXNDbGFzcy5kZWZhdWx0O1xudmFyIF9kZWZhdWx0ID0ge1xuICBhZGRDbGFzczogX2FkZENsYXNzLmRlZmF1bHQsXG4gIHJlbW92ZUNsYXNzOiBfcmVtb3ZlQ2xhc3MuZGVmYXVsdCxcbiAgaGFzQ2xhc3M6IF9oYXNDbGFzcy5kZWZhdWx0XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTY7ZnVuY3Rpb24gdChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHI6Y2FzZSBxOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHYoYSl7cmV0dXJuIHQoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO1xuZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT1yO2V4cG9ydHMuTWVtbz1xO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW4pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpfHx0KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXY7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWt9O1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09cn07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1xfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcbmV4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PXB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmVFbGVtZW50O1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL293bmVyRG9jdW1lbnRcIikpO1xuXG5mdW5jdGlvbiBhY3RpdmVFbGVtZW50KGRvYykge1xuICBpZiAoZG9jID09PSB2b2lkIDApIHtcbiAgICBkb2MgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLyogaWUgdGhyb3dzIGlmIG5vIGFjdGl2ZSBlbGVtZW50ICovXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBmaWx0ZXJFdmVudHM7XG5cbnZhciBfY29udGFpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9xdWVyeS9jb250YWluc1wiKSk7XG5cbnZhciBfcXVlcnlTZWxlY3RvckFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3F1ZXJ5L3F1ZXJ5U2VsZWN0b3JBbGxcIikpO1xuXG5mdW5jdGlvbiBmaWx0ZXJFdmVudHMoc2VsZWN0b3IsIGhhbmRsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpbHRlckhhbmRsZXIoZSkge1xuICAgIHZhciB0b3AgPSBlLmN1cnJlbnRUYXJnZXQsXG4gICAgICAgIHRhcmdldCA9IGUudGFyZ2V0LFxuICAgICAgICBtYXRjaGVzID0gKDAsIF9xdWVyeVNlbGVjdG9yQWxsLmRlZmF1bHQpKHRvcCwgc2VsZWN0b3IpO1xuICAgIGlmIChtYXRjaGVzLnNvbWUoZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gKDAsIF9jb250YWlucy5kZWZhdWx0KShtYXRjaCwgdGFyZ2V0KTtcbiAgICB9KSkgaGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBlbXB0eUZ1bmN0aW9uO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uIHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgcmV0dXJuOyAvLyBJZ25vcmUgQ29tcG9zaXRlQ29tcG9uZW50IHByb3B0eXBlIGNoZWNrLlxuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7IiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2d1ZCA9IHJlcXVpcmUoJ2d1ZCcpO1xuXG52YXIgX2d1ZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ndWQpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuLy8gSW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArICgwLCBfZ3VkMi5kZWZhdWx0KSgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm92aWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cyA9IHZvaWQgMDtcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDsgLy8gTm8gY2hhbmdlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGVtcDIsIF90aGlzMiwgX3JldDI7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25zdW1lcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQyID0gKF90ZW1wMiA9IChfdGhpczIgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50Mi5jYWxsLmFwcGx5KF9Db21wb25lbnQyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzMiksIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9LCBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIF90ZW1wMiksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzMiwgX3JldDIpO1xuICAgIH1cblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuXG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCAvLyBTdWJzY3JpYmUgdG8gYWxsIGNoYW5nZXMgYnkgZGVmYXVsdFxuICAgICAgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIENvbnN1bWVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcblxuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgLy8gU3Vic2NyaWJlIHRvIGFsbCBjaGFuZ2VzIGJ5IGRlZmF1bHRcbiAgICAgIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBDb25zdW1lci5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29uc3VtZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcblxuXG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVSZWFjdENvbnRleHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBtYXRjaGVzO1xuXG52YXIgX2luRE9NID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbC9pbkRPTVwiKSk7XG5cbnZhciBfcXVlcnlTZWxlY3RvckFsbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcXVlcnlTZWxlY3RvckFsbFwiKSk7XG5cbnZhciBtYXRjaGVzQ2FjaGU7XG5cbmZ1bmN0aW9uIG1hdGNoZXMobm9kZSwgc2VsZWN0b3IpIHtcbiAgaWYgKCFtYXRjaGVzQ2FjaGUgJiYgX2luRE9NLmRlZmF1bHQpIHtcbiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIG5hdGl2ZU1hdGNoID0gYm9keS5tYXRjaGVzIHx8IGJvZHkubWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGJvZHkubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgbWF0Y2hlc0NhY2hlID0gbmF0aXZlTWF0Y2ggPyBmdW5jdGlvbiAobm9kZSwgc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBuYXRpdmVNYXRjaC5jYWxsKG5vZGUsIHNlbGVjdG9yKTtcbiAgICB9IDogaWU4TWF0Y2hlc1NlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXNDYWNoZSA/IG1hdGNoZXNDYWNoZShub2RlLCBzZWxlY3RvcikgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBpZThNYXRjaGVzU2VsZWN0b3Iobm9kZSwgc2VsZWN0b3IpIHtcbiAgdmFyIG1hdGNoZXMgPSAoMCwgX3F1ZXJ5U2VsZWN0b3JBbGwuZGVmYXVsdCkobm9kZS5kb2N1bWVudCB8fCBub2RlLm93bmVyRG9jdW1lbnQsIHNlbGVjdG9yKSxcbiAgICAgIGkgPSAwO1xuXG4gIHdoaWxlIChtYXRjaGVzW2ldICYmIG1hdGNoZXNbaV0gIT09IG5vZGUpIHtcbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gISFtYXRjaGVzW2ldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNUcmFuc2Zvcm07XG52YXIgc3VwcG9ydGVkVHJhbnNmb3JtcyA9IC9eKCh0cmFuc2xhdGV8cm90YXRlfHNjYWxlKShYfFl8WnwzZCk/fG1hdHJpeCgzZCk/fHBlcnNwZWN0aXZlfHNrZXcoWHxZKT8pJC9pO1xuXG5mdW5jdGlvbiBpc1RyYW5zZm9ybShwcm9wZXJ0eSkge1xuICByZXR1cm4gISEocHJvcGVydHkgJiYgc3VwcG9ydGVkVHJhbnNmb3Jtcy50ZXN0KHByb3BlcnR5KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSByZW1vdmVTdHlsZTtcblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGUobm9kZSwga2V5KSB7XG4gIHJldHVybiAncmVtb3ZlUHJvcGVydHknIGluIG5vZGUuc3R5bGUgPyBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSkgOiBub2RlLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRDb21wdXRlZFN0eWxlO1xuXG52YXIgX2NhbWVsaXplU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2NhbWVsaXplU3R5bGVcIikpO1xuXG52YXIgcnBvc2l0aW9uID0gL14odG9wfHJpZ2h0fGJvdHRvbXxsZWZ0KSQvO1xudmFyIHJudW1ub25weCA9IC9eKFsrLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KSkoPyFweClbYS16JV0rJC9pO1xuXG5mdW5jdGlvbiBfZ2V0Q29tcHV0ZWRTdHlsZShub2RlKSB7XG4gIGlmICghbm9kZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gRWxlbWVudCBwYXNzZWQgdG8gYGdldENvbXB1dGVkU3R5bGUoKWAnKTtcbiAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuICdkZWZhdWx0VmlldycgaW4gZG9jID8gZG9jLmRlZmF1bHRWaWV3Lm9wZW5lciA/IG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpIDogd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB7XG4gICAgLy9pZSA4IFwibWFnaWNcIiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzEuMTEtc3RhYmxlL3NyYy9jc3MvY3VyQ1NTLmpzI0w3MlxuICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUocHJvcCkge1xuICAgICAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgICAgIHByb3AgPSAoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcCk7XG4gICAgICBpZiAocHJvcCA9PSAnZmxvYXQnKSBwcm9wID0gJ3N0eWxlRmxvYXQnO1xuICAgICAgdmFyIGN1cnJlbnQgPSBub2RlLmN1cnJlbnRTdHlsZVtwcm9wXSB8fCBudWxsO1xuICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCAmJiBzdHlsZSAmJiBzdHlsZVtwcm9wXSkgY3VycmVudCA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocm51bW5vbnB4LnRlc3QoY3VycmVudCkgJiYgIXJwb3NpdGlvbi50ZXN0KHByb3ApKSB7XG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgdmFyIGxlZnQgPSBzdHlsZS5sZWZ0O1xuICAgICAgICB2YXIgcnVuU3R5bGUgPSBub2RlLnJ1bnRpbWVTdHlsZTtcbiAgICAgICAgdmFyIHJzTGVmdCA9IHJ1blN0eWxlICYmIHJ1blN0eWxlLmxlZnQ7IC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblxuICAgICAgICBpZiAocnNMZWZ0KSBydW5TdHlsZS5sZWZ0ID0gbm9kZS5jdXJyZW50U3R5bGUubGVmdDtcbiAgICAgICAgc3R5bGUubGVmdCA9IHByb3AgPT09ICdmb250U2l6ZScgPyAnMWVtJyA6IGN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQgPSBzdHlsZS5waXhlbExlZnQgKyAncHgnOyAvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cbiAgICAgICAgc3R5bGUubGVmdCA9IGxlZnQ7XG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSByc0xlZnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZTtcbnZhciByVXBwZXIgPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShyVXBwZXIsICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIF9oeXBoZW5hdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2h5cGhlbmF0ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTMtMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbiAqL1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGUuZGVmYXVsdCkoc3RyaW5nKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdGltZW91dHNTaGFwZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pIDogbnVsbDtcbmV4cG9ydHMudGltZW91dHNTaGFwZSA9IHRpbWVvdXRzU2hhcGU7XG52YXIgY2xhc3NOYW1lc1NoYXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZW50ZXJEb25lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdERvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRBY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmdcbn0pXSkgOiBudWxsO1xuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBjbGFzc05hbWVzU2hhcGU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLlxuICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyh0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgaWYgKHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy5cbiAgZnVuY3Rpb24gdXBkYXRlcihwcmV2U3RhdGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLmNvbnN0cnVjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7XG4gIH1cbiAgLy8gQmluZGluZyBcInRoaXNcIiBpcyBpbXBvcnRhbnQgZm9yIHNoYWxsb3cgcmVuZGVyZXIgc3VwcG9ydC5cbiAgdGhpcy5zZXRTdGF0ZSh1cGRhdGVyLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlO1xuICAgIHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnID0gdHJ1ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgdGhpcy5wcm9wcyA9IHByZXZQcm9wcztcbiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlO1xuICB9XG59XG5cbi8vIFJlYWN0IG1heSB3YXJuIGFib3V0IGNXTS9jV1JQL2NXVSBtZXRob2RzIGJlaW5nIGRlcHJlY2F0ZWQuXG4vLyBBZGQgYSBmbGFnIHRvIHN1cHByZXNzIHRoZXNlIHdhcm5pbmdzIGZvciB0aGlzIHNwZWNpYWwgY2FzZS5cbmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcbmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuXG5mdW5jdGlvbiBwb2x5ZmlsbChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5cbiAgaWYgKCFwcm90b3R5cGUgfHwgIXByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSBwb2x5ZmlsbCBjbGFzcyBjb21wb25lbnRzJyk7XG4gIH1cblxuICBpZiAoXG4gICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LFxuICAvLyBCZWNhdXNlIHRoZXkgd291bGQgd29yayBkaWZmZXJlbnRseSBiZXR3ZWVuIG9sZGVyIGFuZCBuZXdlciAoMTYuMyspIHZlcnNpb25zIG9mIFJlYWN0LlxuICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsO1xuICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JztcbiAgfVxuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9XG4gIGlmIChcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHxcbiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbFxuICApIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZTtcbiAgICB2YXIgbmV3QXBpTmFtZSA9XG4gICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/ICdnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSdcbiAgICAgICAgOiAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSc7XG5cbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICtcbiAgICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgbmV3QXBpTmFtZSArXG4gICAgICAgICcgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczonICtcbiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbFxuICAgICAgICAgID8gJ1xcbiAgJyArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWVcbiAgICAgICAgICA6ICcnKSArXG4gICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xcbiAgJyArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJykgK1xuICAgICAgICAnXFxuXFxuVGhlIGFib3ZlIGxpZmVjeWNsZXMgc2hvdWxkIGJlIHJlbW92ZWQuIExlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6XFxuJyArXG4gICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnXG4gICAgKTtcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV00gYW5kIGNXUlAgdG8gaW52b2tlIHRoZSBuZXcgc3RhdGljIGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBjb21wb25lbnRXaWxsTW91bnQ7XG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzO1xuICB9XG5cbiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLlxuICAvLyBBcyBhIHdvcmthcm91bmQsIHVzZSBjV1UgdG8gaW52b2tlIHRoZSBuZXcgbGlmZWN5Y2xlLlxuICAvLyBOZXdlciB2ZXJzaW9ucyBvZiBSZWFjdCB3aWxsIGlnbm9yZSB0aGF0IGxpZmVjeWNsZSBpZiBnU0JVIGV4aXN0cy5cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGNvbXBvbmVudFdpbGxVcGRhdGU7XG5cbiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTtcblxuICAgIHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGVQb2x5ZmlsbChcbiAgICAgIHByZXZQcm9wcyxcbiAgICAgIHByZXZTdGF0ZSxcbiAgICAgIG1heWJlU25hcHNob3RcbiAgICApIHtcbiAgICAgIC8vIDE2LjMrIHdpbGwgbm90IGV4ZWN1dGUgb3VyIHdpbGwtdXBkYXRlIG1ldGhvZDtcbiAgICAgIC8vIEl0IHdpbGwgcGFzcyBhIHNuYXBzaG90IHZhbHVlIHRvIGRpZC11cGRhdGUgdGhvdWdoLlxuICAgICAgLy8gT2xkZXIgdmVyc2lvbnMgd2lsbCByZXF1aXJlIG91ciBwb2x5ZmlsbGVkIHdpbGwtdXBkYXRlIHZhbHVlLlxuICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiBcIm1heWJlU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhIFwicHJldkNvbnRleHRcIiBvYmplY3QuXG4gICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgXCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFwiLFxuICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgdmFsdWUuXG4gICAgICAvLyBTbyBjaGVjayBmb3IgdGhlIGV4cGxpY2l0IF9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyBmbGFnIHRvIGRldGVybWluZSBiZWhhdmlvci5cbiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnXG4gICAgICAgID8gdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdFxuICAgICAgICA6IG1heWJlU25hcHNob3Q7XG5cbiAgICAgIGNvbXBvbmVudERpZFVwZGF0ZS5jYWxsKHRoaXMsIHByZXZQcm9wcywgcHJldlN0YXRlLCBzbmFwc2hvdCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCB7IHBvbHlmaWxsIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMudW5jb250cm9sbGVkUHJvcFR5cGVzID0gdW5jb250cm9sbGVkUHJvcFR5cGVzO1xuZXhwb3J0cy5pc1Byb3AgPSBpc1Byb3A7XG5leHBvcnRzLmRlZmF1bHRLZXkgPSBkZWZhdWx0S2V5O1xuZXhwb3J0cy5jYW5BY2NlcHRSZWYgPSBjYW5BY2NlcHRSZWY7XG5cbnZhciBfaW52YXJpYW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaW52YXJpYW50XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbmZ1bmN0aW9uIHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSkge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCFwcm9wc1toYW5kbGVyXSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiWW91IGhhdmUgcHJvdmlkZWQgYSBgXCIgKyBwcm9wTmFtZSArIFwiYCBwcm9wIHRvIGBcIiArIG5hbWUgKyBcImAgXCIgKyAoXCJ3aXRob3V0IGFuIGBcIiArIGhhbmRsZXIgKyBcImAgaGFuZGxlciBwcm9wLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBcIikgKyAoXCJJZiB0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBcIiArIGRlZmF1bHRLZXkocHJvcE5hbWUpICsgXCJgLiBcIikgKyAoXCJPdGhlcndpc2UsIHNldCBgXCIgKyBoYW5kbGVyICsgXCJgLlwiKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1bmNvbnRyb2xsZWRQcm9wVHlwZXMoY29udHJvbGxlZFZhbHVlcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHByb3BUeXBlcyA9IHt9O1xuICBPYmplY3Qua2V5cyhjb250cm9sbGVkVmFsdWVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgLy8gYWRkIGRlZmF1bHQgcHJvcFR5cGVzIGZvciBmb2xrcyB0aGF0IHVzZSBydW50aW1lIGNoZWNrc1xuICAgIHByb3BUeXBlc1tkZWZhdWx0S2V5KHByb3ApXSA9IG5vb3A7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGhhbmRsZXIgPSBjb250cm9sbGVkVmFsdWVzW3Byb3BdO1xuICAgICAgISh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycgJiYgaGFuZGxlci50cmltKCkubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfaW52YXJpYW50LmRlZmF1bHQpKGZhbHNlLCAnVW5jb250cm9sbGFibGUgLSBbJXNdOiB0aGUgcHJvcCBgJXNgIG5lZWRzIGEgdmFsaWQgaGFuZGxlciBrZXkgbmFtZSBpbiBvcmRlciB0byBtYWtlIGl0IHVuY29udHJvbGxhYmxlJywgZGlzcGxheU5hbWUsIHByb3ApIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHByb3BUeXBlc1twcm9wXSA9IHJlYWRPbmx5UHJvcFR5cGUoaGFuZGxlciwgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9wVHlwZXM7XG59XG5cbmZ1bmN0aW9uIGlzUHJvcChwcm9wcywgcHJvcCkge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEtleShrZXkpIHtcbiAgcmV0dXJuICdkZWZhdWx0JyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHIoMSk7XG59XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjYW5BY2NlcHRSZWYoY29tcG9uZW50KSB7XG4gIHJldHVybiAhIWNvbXBvbmVudCAmJiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJyB8fCBjb21wb25lbnQucHJvdG90eXBlICYmIGNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBDb250YWluZXIsIFJvdywgQ29sIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xyXG5pbXBvcnQgaHRtbDVMb2dvIGZyb20gJy4uL2Fib3V0L2h0bWw1LnBuZydcclxuaW1wb3J0IGNzczNMb2dvIGZyb20gJy4uL2Fib3V0L2NzczMucG5nJ1xyXG5pbXBvcnQganNMb2dvIGZyb20gJy4uL2Fib3V0L2phdmFzY3JpcHQucG5nJ1xyXG5pbXBvcnQgZ2l0TG9nbyBmcm9tICcuLi9hYm91dC9naXQucG5nJ1xyXG5pbXBvcnQgaWxsdXN0cmF0b3JMb2dvIGZyb20gJy4uL2Fib3V0L2lsbHVzdHJhdG9yLmpwZydcclxuaW1wb3J0IHNrZXRjaExvZ28gZnJvbSAnLi4vYWJvdXQvc2tldGNoLmpwZydcclxuaW1wb3J0IHBob3Rvc2hvcExvZ28gZnJvbSAnLi4vYWJvdXQvcGhvdG9zaG9wLnBuZydcclxuaW1wb3J0IGludmlzaW9uTG9nbyBmcm9tICcuLi9hYm91dC9pbnZpc2lvbi5wbmcnXHJcbmltcG9ydCBwcm9maWxlUGhvdG8gZnJvbSAnLi4vLi4vYXNzZXRzL2thdGUtc29obmcuanBnJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWJvdXRWaWV3IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYm91dC12aWV3LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgPENvbnRhaW5lciBmbHVpZCBjbGFzc05hbWU9XCJhYm91dC13cmFwcGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdyBjbGFzc05hbWU9XCJhYm91dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2w9XCIxMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhbGlnbi1zZWxmLWNlbnRlciB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkFib3V0IEthdGUgU29obmc8L2gxPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+UHJvZHVjaW5nIHJlcG9uc2l2ZSwgYWNjZXNzaWJsZSByaWNoIHdlYnNpdGVzIGZvciBleGNlcHRpb25hbCB1c2VyIGV4cGVyaWVuY2U8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgPC9Db250YWluZXI+XHJcbiAgICAgICAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9XCJhYm91dC1tYWluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbnRhaW5lciBjbGFzc05hbWU9XCJwcm9maWxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy0yIG9mZnNldC1sZy0yIGNvbC0xMlwiPjxpbWcgd2lkdGg9ezE1MH0gYWx0PVwiYSBwaG90byBvZiBLYXRlIFNvaG5nXCIgc3JjPXtwcm9maWxlUGhvdG99IC8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC1sZy02IGNvbC0xMiB0ZXh0XCI+SSBhbSBhIGZyb250LWVuZCBkZXZlbG9wZXIsIGEgZ3JhZHVhdGUgZnJvbSBJbnRlcmFjdGl2ZSBNZWRpYSBEZXNpZ24gb2YgdGhlIFVuaXZlcnNpdHkgb2YgV2FzaGluZ3Rvbi4gSSBoYXZlIDIgeWVhcnMgY29tbWVyY2lhbCBleHBlcmllbmNlIHByb3ZpZGluZyBncmFwaGljIGRlc2lnbiBhbmQgZnJvbnQtZW5kIGRldmVsb3BtZW50IGluIFNvdXRoIEtvcmVhLiBTaW5jZSB0aGVuLCBJIGhhdmUgYmVlbiBmb2N1c2luZyBvbiBwcm9kdWNpbmcgaGlnaC1xdWFsaXR5IHJlc3BvbnNpdmUgd2Vic2l0ZXMgYW5kIGV4Y2VwdGlvbmFsIHVzZXIgZXhwZXJpZW5jZS48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29sIGxnPVwiOFwiIGNsYXNzTmFtZT1cIm9mZnNldC1sZy0yIHRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5QbGVhc2UgYXBwcm9hY2ggbWUgd2hlbiB5b3UgbmVlZCBhIGRldmVsb3BlciB3aG8gY2FuIHByb3ZpZGU6PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nb1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHdpZHRoPXs1M30gYWx0PVwiSFRNTDUgbG9nb1wiIHNyYz17aHRtbDVMb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHdpZHRoPXs1M30gYWx0PVwiQ1NTMyBsb2dvXCIgc3JjPXtjc3MzTG9nb30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyB3aWR0aD17NTN9IGFsdD1cIkphdmFTY3JpcHQgbG9nb1wiIHNyYz17anNMb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHdpZHRoPXs1M30gYWx0PVwiR2l0IGxvZ29cIiBzcmM9e2dpdExvZ299IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmVzcG9uc2l2ZSBIVE1MNS9DU1MzIChCb290c3RyYXApPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdmFTY3JpcHQgKEVTNiwgUmVhY3QsIE5QTSk8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmVyc2lvbiBDb250cm9sKEdpdCk8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+QWxzbywgSSBoYXZlIGV4cGVyaWVuY2VkIGFzIGEgVVggcmVzZWFyY2hlciBhbmQgZGVzaWduZXIgZnJvbSB0aGUgSW50ZXJhY3RpdmUgTWVkaWEgRGVzaWduIHByb2dyYW0gZnJvbSB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uLiBGdXJ0aGVybW9yZSwgSSBoYWQgdGhlIGhhbGYteWVhciBvZiBpbnRlcm5zaGlwIGZyb20gdGhlIFBPQyBsYWJvcmF0b3J5IG9mIHRoZSBVbml2ZXJzaXR5IG9mIFdhc2hpbmd0b24uPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVYIFJlc2VhcmNoIGFuZCBEZXNpZ248L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW50ZXJhY3Rpb24gYW5kIEludGVyZmFjZSBEZXNpZ248L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2lyZWZyYW1pbmcgYW5kIFByb3RvdHlwaW5nPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbCBsZz1cIjhcIiBjbGFzc05hbWU9XCJvZmZzZXQtbGctMiB0ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+SSBiZWxpZXZlIGl0IGlzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIGJvdGggZGVzaWduIGFuZCBkZXZlbG9wbWVudCBhcyBhIGZyb250LWVuZCBkZXZlbG9wZXIgdG8gY3JlYXRlIGEgbW9yZSBzdWNjZXNzZnVsIHVzZXItY2VudGVyZWQgZGVzaWduLiBJIGhhdmUgd29ya2VkIGFzIGEgZ3JhcGhpYyBkZXNpZ25lciBhdCBhbiBlLWNvbW1lcmNlIGNvbXBhbnkgaW4gU291dGggS29yZWEgZm9yIGEgeWVhciwgYW5kIEkgaGF2ZSB0YWtlbiBkZXNpZ25zIGZyb20gbW9ja3VwcyB0byBpbXBsZW1lbnQgZHVyaW5nIHRoZSBjb3Vyc2Ugb2Ygc3R1ZHkgYXQgdGhlIEludGVyYWN0aXZlIE1lZGlhIERlc2lnbi48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2dvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgd2lkdGg9ezUzfSBhbHQ9XCJwaG90b3Nob3AgbG9nb1wiIHNyYz17cGhvdG9zaG9wTG9nb30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyB3aWR0aD17NTN9IGFsdD1cImlsbHVzdHJhdG9yIGxvZ29cIiBzcmM9e2lsbHVzdHJhdG9yTG9nb30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyB3aWR0aD17NTN9IGFsdD1cInNrZXRjaCBsb2dvXCIgc3JjPXtza2V0Y2hMb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHdpZHRoPXs1M30gYWx0PVwiaW52aXNpb24gbG9nb1wiIHNyYz17aW52aXNpb25Mb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBob3Rvc2hvcDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbGx1c3RyYXRvcjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ta2V0Y2g8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW52aXNpb248L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHlvdSB3b3VsZCBsaWtlIHRvIGtub3cgbW9yZSBhYm91dCBteSBwcm9qZWN0cyBhbmQgdGhlIHdvcmsgcHJvY2VzcywgcGxlYXNlIHZpc2l0IG15IDxhIGhyZWY9XCJodHRwOi8va2F0ZXNvaG5nLmNvbS9ibG9nL1wiIHRhcmdldD1cIl9ibGFua1wiPmJsb2c8L2E+LCBvciBzZW5kIGFuIGVtYWlsIHRvIDxhIGhyZWY9XCJtYWlsdG86a2hlZXlhN0Bob3RtYWlsLmNvbVwiPkthdGUgU29obmc8L2E+LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICAgICAgICA8L0NvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgQWJvdXRWaWV3IGZyb20gJy4uL2Fib3V0J1xyXG5pbXBvcnQgU2VwYXJhdG9yQ29udGFjdCBmcm9tICcuLi9zaGFyZWQtY29tcG9uZW50cy9zZXBhcmF0b3ItY29udGFjdCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3V0UGFnZVZpZXcgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPEFib3V0VmlldyAvPlxyXG4gICAgICAgICAgICAgICAgPFNlcGFyYXRvckNvbnRhY3QgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBSb3V0ZSwgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCBBYm91dFBhZ2VWaWV3IGZyb20gJy4vcm91dGVyL2Fib3V0J1xyXG5pbXBvcnQgSG9tZVBhZ2VWaWV3IGZyb20gJy4vcm91dGVyL2hvbWUnXHJcbmltcG9ydCBVbmlmeVBhZ2VWaWV3IGZyb20gJy4vcm91dGVyL3VuaWZ5J1xyXG5pbXBvcnQgRWNzUGFnZVZpZXcgZnJvbSAnLi9yb3V0ZXIvZWNzJ1xyXG5pbXBvcnQgU3Ryb25nZXJQYWdlVmlldyBmcm9tICcuL3JvdXRlci9zdHJvbmdlcidcclxuaW1wb3J0IFBvY2tldFBhZ2VWaWV3IGZyb20gJy4vcm91dGVyL3BvY2tldCdcclxuaW1wb3J0IFl1cmlQYWdlVmlldyBmcm9tICcuL3JvdXRlci95dXJpJ1xyXG5pbXBvcnQgTmF2VmlldyBmcm9tICcuLi9zcmMvbmF2aWdhdGlvbidcclxuaW1wb3J0IEZvb3RlclZpZXcgZnJvbSAnLi4vc3JjL2Zvb3RlcidcclxuXHJcbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubG9jYXRpb24ucGF0aG5hbWUgIT09IHByZXZQcm9wcy5sb2NhdGlvbi5wYXRobmFtZSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UgYmctbWFpblwiPlxyXG4gICAgICAgICAgICAgICAgPE5hdlZpZXcgLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGV4YWN0PXt0cnVlfSBjb21wb25lbnQ9e0hvbWVQYWdlVmlld30gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Fib3V0XCIgZXhhY3Q9e3RydWV9IGNvbXBvbmVudD17QWJvdXRQYWdlVmlld30gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3Byb2plY3QtZGV0YWlsL3VuaWZ5XCIgZXhhY3Q9e3RydWV9IGNvbXBvbmVudD17VW5pZnlQYWdlVmlld30gLz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3Byb2plY3QtZGV0YWlsL2Vjc1wiIGV4YWN0PXt0cnVlfSBjb21wb25lbnQ9e0Vjc1BhZ2VWaWV3fSAvPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcHJvamVjdC1kZXRhaWwvc3Ryb25nZXJcIiBleGFjdD17dHJ1ZX0gY29tcG9uZW50PXtTdHJvbmdlclBhZ2VWaWV3fSAvPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcHJvamVjdC1kZXRhaWwvcG9ja2V0XCIgZXhhY3Q9e3RydWV9IGNvbXBvbmVudD17UG9ja2V0UGFnZVZpZXd9IC8+XHJcbiAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9wcm9qZWN0LWRldGFpbC95dXJpXCIgZXhhY3Q9e3RydWV9IGNvbXBvbmVudD17WXVyaVBhZ2VWaWV3fSAvPlxyXG4gICAgICAgICAgICAgICAgPEZvb3RlclZpZXcgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKEFwcCkiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxudmFyIGlzVGV4dE5vZGUgPSByZXF1aXJlKCcuL2lzVGV4dE5vZGUnKTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgZ2l2ZW4gRE9NIG5vZGUgY29udGFpbnMgb3IgaXMgYW5vdGhlciBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIGlmICghb3V0ZXJOb2RlIHx8ICFpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKG91dGVyTm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShpbm5lck5vZGUpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKTtcbiAgfSBlbHNlIGlmICgnY29udGFpbnMnIGluIG91dGVyTm9kZSkge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy90eXBlb2YtdW5kZWZpbmVkICovXG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9ET01Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudH1cbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIC8qP0RPTUVsZW1lbnQqL3tcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLyoqXG4gKiBTaW1wbGUsIGxpZ2h0d2VpZ2h0IG1vZHVsZSBhc3Npc3Rpbmcgd2l0aCB0aGUgZGV0ZWN0aW9uIGFuZCBjb250ZXh0IG9mXG4gKiBXb3JrZXIuIEhlbHBzIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhbmQgYWxsb3dzIGNvZGUgdG8gcmVhc29uIGFib3V0XG4gKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSBpbiBhIFdvcmtlciwgZXZlbiBpZiB0aGV5IG5ldmVyIGluY2x1ZGUgdGhlIG1haW5cbiAqIGBSZWFjdFdvcmtlcmAgZGVwZW5kZW5jeS5cbiAqL1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0ge1xuXG4gIGNhblVzZURPTTogY2FuVXNlRE9NLFxuXG4gIGNhblVzZVdvcmtlcnM6IHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnLFxuXG4gIGNhblVzZUV2ZW50TGlzdGVuZXJzOiBjYW5Vc2VET00gJiYgISEod2luZG93LmFkZEV2ZW50TGlzdGVuZXIgfHwgd2luZG93LmF0dGFjaEV2ZW50KSxcblxuICBjYW5Vc2VWaWV3cG9ydDogY2FuVXNlRE9NICYmICEhd2luZG93LnNjcmVlbixcblxuICBpc0luV29ya2VyOiAhY2FuVXNlRE9NIC8vIEZvciBub3csIHRoaXMgaXMgdHJ1ZSAtIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlLlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50OyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIikscD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSx2PXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGRhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksZmE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YWEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1iYT92b2lkIDA6QShcIjIyN1wiKTtcbmZ1bmN0aW9uIGlhKGEsYixjLGQsZSxmLGcsaCxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLG4pfWNhdGNoKHIpe3RoaXMuX2NhdWdodEVycm9yPXIsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEI9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe2lhLmFwcGx5KEIsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtCLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoQi5oYXNDYXVnaHRFcnJvcigpKXt2YXIgbj1CLmNsZWFyQ2F1Z2h0RXJyb3IoKTtCLl9oYXNSZXRocm93RXJyb3J8fChCLl9oYXNSZXRocm93RXJyb3I9ITAsQi5fcmV0aHJvd0Vycm9yPW4pfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIGthLmFwcGx5KEIsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gQi5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihCLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5CLl9jYXVnaHRFcnJvcjtCLl9jYXVnaHRFcnJvcj1udWxsO0IuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUEoXCIxOThcIil9fTtmdW5jdGlvbiBrYSgpe2lmKEIuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9Qi5fcmV0aHJvd0Vycm9yO0IuX3JldGhyb3dFcnJvcj1udWxsO0IuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkEoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpBKFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP0EoXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZxYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpBKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP0EoXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fTtmdW5jdGlvbiB0YShhKXtsYT9BKFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfWZ1bmN0aW9uIHVhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO21hLmhhc093blByb3BlcnR5KGMpJiZtYVtjXT09PWR8fChtYVtjXT9BKFwiMTAyXCIsYyk6dm9pZCAwLG1hW2NdPWQsYj0hMCl9YiYmbmEoKX1cbnZhciB2YT17cGx1Z2luczpvYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cGEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6cmEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczpzYSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp0YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6dWF9LHdhPW51bGwseGE9bnVsbCx5YT1udWxsO2Z1bmN0aW9uIHphKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9eWEoZCk7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEFhKGEsYil7bnVsbD09Yj9BKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBCYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgQ2E9bnVsbDtcbmZ1bmN0aW9uIERhKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKXphKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmemEoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gRWEoYSl7cmV0dXJuIERhKGEsITApfWZ1bmN0aW9uIEZhKGEpe3JldHVybiBEYShhLCExKX12YXIgR2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfTtcbmZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9d2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIElhKGEsYil7bnVsbCE9PWEmJihDYT1BYShDYSxhKSk7YT1DYTtDYT1udWxsO2EmJihiP0JhKGEsRWEpOkJhKGEsRmEpLENhP0EoXCI5NVwiKTp2b2lkIDAsQi5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gSmEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8b2EubGVuZ3RoO2YrKyl7dmFyIGc9b2FbZl07ZyYmKGc9Zy5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9QWEoZSxnKSl9SWEoZSwhMSl9dmFyIEthPXtpbmplY3Rpb246R2EsZ2V0TGlzdGVuZXI6SGEscnVuRXZlbnRzSW5CYXRjaDpJYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOkphfSxMYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxDPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGEsTWE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMYTtcbmZ1bmN0aW9uIE5hKGEpe2lmKGFbQ10pcmV0dXJuIGFbQ107Zm9yKDshYVtDXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0NdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gT2EoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0EoXCIzM1wiKX1mdW5jdGlvbiBQYShhKXtyZXR1cm4gYVtNYV18fG51bGx9dmFyIFFhPXtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbQ109YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6TmEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbQ107cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpPYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlBhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW01hXT1ifX07XG5mdW5jdGlvbiBGKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gUmEoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1GKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIFNhKGEsYixjKXtpZihiPUhhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmUmEoYS5fdGFyZ2V0SW5zdCxTYSxhKX1cbmZ1bmN0aW9uIFVhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0YoYik6bnVsbDtSYShiLFNhLGEpfX1mdW5jdGlvbiBWYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9QWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9QWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFhhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmEoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFlhKGEpe0JhKGEsVGEpfVxuZnVuY3Rpb24gWmEoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGc9MCxoPWU7aDtoPUYoaCkpZysrO2g9MDtmb3IodmFyIGs9ZjtrO2s9RihrKSloKys7Zm9yKDswPGctaDspZT1GKGUpLGctLTtmb3IoOzA8aC1nOylmPUYoZiksaC0tO2Zvcig7Zy0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9RihlKTtmPUYoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2c9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1mKWJyZWFrO2UucHVzaChjKTtjPUYoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztjLnB1c2goZCk7ZD1GKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspVmEoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspVmEoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgJGE9e2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6WWEsYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6ZnVuY3Rpb24oYSl7QmEoYSxVYSl9LGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczpaYSxhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczpmdW5jdGlvbihhKXtCYShhLFhhKX19O2Z1bmN0aW9uIGFiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmI9e2FuaW1hdGlvbmVuZDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2I9e30sZGI9e307bS5jYW5Vc2VET00mJihkYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWIoYSl7aWYoY2JbYV0pcmV0dXJuIGNiW2FdO2lmKCFiYlthXSlyZXR1cm4gYTt2YXIgYj1iYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkYilyZXR1cm4gY2JbYV09YltjXTtyZXR1cm4gYX12YXIgZmI9ZWIoXCJhbmltYXRpb25lbmRcIiksZ2I9ZWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksaGI9ZWIoXCJhbmltYXRpb25zdGFydFwiKSxpYj1lYihcInRyYW5zaXRpb25lbmRcIiksamI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGtiPW51bGw7XG5mdW5jdGlvbiBsYigpeyFrYiYmbS5jYW5Vc2VET00mJihrYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBrYn12YXIgRz17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtmdW5jdGlvbiBtYigpe2lmKEcuX2ZhbGxiYWNrVGV4dClyZXR1cm4gRy5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9Ry5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtHLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gRy5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gRy5fcm9vdD9HLl9yb290LnZhbHVlOkcuX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6di50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIEgoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP3YudGhhdFJldHVybnNUcnVlOnYudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXYudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbnAoSC5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD12LnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OnYudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7SC5JbnRlcmZhY2U9cGI7SC5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7cChlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9cCh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoSCk7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6QShcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1ILmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxDYj0hMTtcbmZ1bmN0aW9uIERiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBFYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBGYj0hMTtmdW5jdGlvbiBHYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gRWIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0NiPSEwO3JldHVybiBBYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmQ2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gSGIoYSxiKXtpZihGYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhd2ImJkRiKGEsYik/KGE9bWIoKSxHLl9yb290PW51bGwsRy5fc3RhcnRUZXh0PW51bGwsRy5fZmFsbGJhY2tUZXh0PW51bGwsRmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEliPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgRmI/RGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKEZifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJkZiJiYoZj1tYigpKTooRy5fcm9vdD1kLEcuX3N0YXJ0VGV4dD1uYigpLEZiPSEwKSksZT10Yi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9XG5mOihmPUViKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxZYShlKSxmPWUpOmY9bnVsbDsoYT15Yj9HYihhLGMpOkhiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sSmI9bnVsbCxLYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtKYj1hfX0sTGI9bnVsbCxNYj1udWxsO2Z1bmN0aW9uIE5iKGEpe2lmKGE9eGEoYSkpe0piJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgSmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6QShcIjE5NFwiKTt2YXIgYj13YShhLnN0YXRlTm9kZSk7SmIucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIE9iKGEpe0xiP01iP01iLnB1c2goYSk6TWI9W2FdOkxiPWF9XG5mdW5jdGlvbiBQYigpe3JldHVybiBudWxsIT09TGJ8fG51bGwhPT1NYn1mdW5jdGlvbiBRYigpe2lmKExiKXt2YXIgYT1MYixiPU1iO01iPUxiPW51bGw7TmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKU5iKGJbYV0pfX12YXIgUmI9e2luamVjdGlvbjpLYixlbnF1ZXVlU3RhdGVSZXN0b3JlOk9iLG5lZWRzU3RhdGVSZXN0b3JlOlBiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOlFifTtmdW5jdGlvbiBTYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIFRiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIFViKCl7fXZhciBWYj0hMTtmdW5jdGlvbiBXYihhLGIpe2lmKFZiKXJldHVybiBhKGIpO1ZiPSEwO3RyeXtyZXR1cm4gU2IoYSxiKX1maW5hbGx5e1ZiPSExLFBiKCkmJihVYigpLFFiKCkpfX1cbnZhciBYYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBZYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIVhiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBaYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiAkYihhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGFjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gY2MoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWJjKGEpKX1mdW5jdGlvbiBkYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9YWMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBlYz1iYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixmYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGdjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGhjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsaWM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGpjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxrYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsbGM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LG1jPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHBjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLHFjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixyYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTpcbjYwMTEzLHNjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB0YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9c2MmJmFbc2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiB1YyhhKXt2YXIgYj1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGI7c3dpdGNoKGIpe2Nhc2UgcGM6cmV0dXJuXCJBc3luY01vZGVcIjtjYXNlIG1jOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgaWM6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSBoYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBrYzpyZXR1cm5cIlByb2ZpbGVyKFwiK2EucGVuZGluZ1Byb3BzLmlkK1wiKVwiO2Nhc2UgbGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBqYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIHJjOnJldHVyblwiVGltZW91dFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpc3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgcWM6cmV0dXJuIGE9Yi5yZW5kZXIuZGlzcGxheU5hbWV8fGIucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK1xuYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2YyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXVjKGEpO3ZhciBmPW51bGw7YyYmKGY9dWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxudmFyIHdjPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyx4Yz17fSx6Yz17fTtmdW5jdGlvbiBBYyhhKXtpZih6Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMDtpZih4Yy5oYXNPd25Qcm9wZXJ0eShhKSlyZXR1cm4hMTtpZih3Yy50ZXN0KGEpKXJldHVybiB6Y1thXT0hMDt4Y1thXT0hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIEJjKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIENjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEJjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBJKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgSj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtKW2JdPW5ldyBJKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIERjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gRWMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsXG5FYyk7SltiXT1uZXcgSShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoRGMsRWMpO0pbYl09bmV3IEkoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtKLnRhYkluZGV4PW5ldyBJKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIEZjKGEsYixjLGQpe3ZhciBlPUouaGFzT3duUHJvcGVydHkoYik/SltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KENjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9BYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gR2MoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIHAoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIEhjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPUljKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gSmMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZGYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gS2MoYSxiKXtKYyhhLGIpO3ZhciBjPUljKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/TGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmTGMoYSxiLnR5cGUsSWMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBNYyhhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTt2YXIgZD1hLnZhbHVlO2N8fGI9PT1kfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1mdW5jdGlvbiBMYyhhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9XG5mdW5jdGlvbiBJYyhhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19dmFyIE5jPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIE9jKGEsYixjKXthPUguZ2V0UG9vbGVkKE5jLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7T2IoYyk7WWEoYSk7cmV0dXJuIGF9dmFyIFBjPW51bGwsUWM9bnVsbDtmdW5jdGlvbiBSYyhhKXtJYShhLCExKX1mdW5jdGlvbiBTYyhhKXt2YXIgYj1PYShhKTtpZihkYyhiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIFRjKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIFVjPSExO20uY2FuVXNlRE9NJiYoVWM9JGIoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7ZnVuY3Rpb24gVmMoKXtQYyYmKFBjLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSxRYz1QYz1udWxsKX1mdW5jdGlvbiBXYyhhKXtcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmU2MoUWMpJiYoYT1PYyhRYyxhLFpiKGEpKSxXYihSYyxhKSl9ZnVuY3Rpb24gWGMoYSxiLGMpe1wiZm9jdXNcIj09PWE/KFZjKCksUGM9YixRYz1jLFBjLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLFdjKSk6XCJibHVyXCI9PT1hJiZWYygpfWZ1bmN0aW9uIFljKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIFNjKFFjKX1cbmZ1bmN0aW9uIFpjKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gU2MoYil9ZnVuY3Rpb24gJGMoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gU2MoYil9XG52YXIgYWQ9e2V2ZW50VHlwZXM6TmMsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpVYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/T2EoYik6d2luZG93LGY9dm9pZCAwLGc9dm9pZCAwLGg9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wic2VsZWN0XCI9PT1ofHxcImlucHV0XCI9PT1oJiZcImZpbGVcIj09PWUudHlwZT9mPVRjOlliKGUpP1VjP2Y9JGM6KGY9WWMsZz1YYyk6KGg9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWgudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGY9WmMpO2lmKGYmJihmPWYoYSxiKSkpcmV0dXJuIE9jKGYsYyxkKTtnJiZnKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmTGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sYmQ9SC5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLGNkPXtBbHQ6XCJhbHRLZXlcIixcbkNvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIGRkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9Y2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBlZCgpe3JldHVybiBkZH1cbnZhciBmZD1iZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksZ2Q9ZmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxoZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxcbm1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0saWQ9e2V2ZW50VHlwZXM6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxcbmUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9OYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLG49dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9ZmQsaD1oZC5tb3VzZUxlYXZlLGs9aGQubW91c2VFbnRlcixuPVwibW91c2VcIjtlbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPWdkLGg9aGQucG9pbnRlckxlYXZlLGs9aGQucG9pbnRlckVudGVyLG49XCJwb2ludGVyXCI7YT1udWxsPT1mP2U6T2EoZik7ZT1udWxsPT1iP2U6T2EoYik7aD1nLmdldFBvb2xlZChoLGYsYyxkKTtoLnR5cGU9bitcImxlYXZlXCI7aC50YXJnZXQ9YTtoLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1uK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1hO1phKGgsXG5jLGYsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiBqZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBrZChhKXsyIT09amQoYSk/QShcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBsZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1qZChhKSwzPT09Yj9BKFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBrZChlKSxhO2lmKGc9PT1kKXJldHVybiBrZChlKSxiO2c9Zy5zaWJsaW5nfUEoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDpBKFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/QShcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP0EoXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gbWQoYSl7YT1sZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG5kKGEpe2E9bGQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCYmNCE9PWIudGFnKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH12YXIgb2Q9SC5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHBkPUguZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSkscWQ9YmQuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtcbmZ1bmN0aW9uIHJkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHNkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx0ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sdWQ9YmQuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXNkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXJkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT90ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/cmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/cmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx2ZD1mZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksd2Q9YmQuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6ZWR9KSx4ZD1ILmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx5ZD1mZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHpkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW2ZiLFwiYW5pbWF0aW9uRW5kXCJdLFtnYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbaGIsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFtpYixcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLEFkPXt9LEJkPXt9O2Z1bmN0aW9uIENkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07QWRbYV09YjtCZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxbXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sXG5bXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWZkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgZmI6Y2FzZSBnYjpjYXNlIGhiOmE9b2Q7YnJlYWs7Y2FzZSBpYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPWJkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWdkO2JyZWFrO2RlZmF1bHQ6YT1IfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WWEoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3Q7ZG97aWYoIWIpe2EuYW5jZXN0b3JzLnB1c2goYik7YnJlYWt9dmFyIGM7Zm9yKGM9YjtjLnJldHVybjspYz1jLnJldHVybjtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPU5hKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sSmEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LFpiKGEubmF0aXZlRXZlbnQpKX12YXIgSGQ9ITA7ZnVuY3Rpb24gSWQoYSl7SGQ9ISFhfWZ1bmN0aW9uIEsoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oRWQoYSk/S2Q6TGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1cbmZ1bmN0aW9uIE1kKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0tkOkxkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gS2QoYSxiKXtUYihMZCxhLGIpfWZ1bmN0aW9uIExkKGEsYil7aWYoSGQpe3ZhciBjPVpiKGIpO2M9TmEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1qZChjKXx8KGM9bnVsbCk7aWYoRmQubGVuZ3RoKXt2YXIgZD1GZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtXYihHZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPkZkLmxlbmd0aCYmRmQucHVzaChhKX19fVxudmFyIE5kPXtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gSGR9LHNldEVuYWJsZWQ6SWQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIEhkfSx0cmFwQnViYmxlZEV2ZW50OkssdHJhcENhcHR1cmVkRXZlbnQ6TWQsZGlzcGF0Y2hFdmVudDpMZH0sT2Q9e30sUGQ9MCxRZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7ZnVuY3Rpb24gUmQoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsUWQpfHwoYVtRZF09UGQrKyxPZFthW1FkXV09e30pO3JldHVybiBPZFthW1FkXV19ZnVuY3Rpb24gU2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gVGQoYSxiKXt2YXIgYz1TZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1TZChjKX19ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sWGQ9bnVsbCxZZD1udWxsLFpkPW51bGwsJGQ9ITE7XG5mdW5jdGlvbiBhZShhLGIpe2lmKCRkfHxudWxsPT1YZHx8WGQhPT1kYSgpKXJldHVybiBudWxsO3ZhciBjPVhkO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJlVkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gWmQmJmVhKFpkLGMpP251bGw6KFpkPWMsYT1ILmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxZYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1SZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/T2EoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihZYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6cmV0dXJuICRkPSExLGFlKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFZkKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gYWUoYyxkKX1yZXR1cm4gbnVsbH19O0dhLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7d2E9UWEuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTt4YT1RYS5nZXRJbnN0YW5jZUZyb21Ob2RlO3lhPVFhLmdldE5vZGVGcm9tSW5zdGFuY2U7R2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpEZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46aWQsQ2hhbmdlRXZlbnRQbHVnaW46YWQsU2VsZWN0RXZlbnRQbHVnaW46YmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpJYn0pO1xudmFyIGNlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxkZT1EYXRlLGVlPXNldFRpbWVvdXQsZmU9Y2xlYXJUaW1lb3V0LGdlPXZvaWQgMDtpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgaGU9cGVyZm9ybWFuY2U7Z2U9ZnVuY3Rpb24oKXtyZXR1cm4gaGUubm93KCl9fWVsc2UgZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gZGUubm93KCl9O3ZhciBpZT12b2lkIDAsamU9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00pe3ZhciBrZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2U/Y2U6ZnVuY3Rpb24oKXtBKFwiMjc2XCIpfSxMPW51bGwsbGU9bnVsbCxtZT0tMSxuZT0hMSxvZT0hMSxwZT0wLHFlPTMzLHJlPTMzLHNlPXtkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT1wZS1nZSgpO3JldHVybiAwPGE/YTowfX0sdWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnNjaGVkdWxlZENhbGxiYWNrLGQ9ITE7dHJ5e2MoYiksZD0hMH1maW5hbGx5e2plKGEpLGR8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX19LHRlPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09dGUmJihuZT0hMSxudWxsIT09TCkpe2lmKG51bGwhPT1MKXt2YXIgYj1nZSgpO2lmKCEoLTE9PT1cbm1lfHxtZT5iKSl7YT0tMTtmb3IodmFyIGM9W10sZD1MO251bGwhPT1kOyl7dmFyIGU9ZC50aW1lb3V0VGltZTstMSE9PWUmJmU8PWI/Yy5wdXNoKGQpOi0xIT09ZSYmKC0xPT09YXx8ZTxhKSYmKGE9ZSk7ZD1kLm5leHR9aWYoMDxjLmxlbmd0aClmb3Ioc2UuZGlkVGltZW91dD0hMCxiPTAsZD1jLmxlbmd0aDtiPGQ7YisrKXVlKGNbYl0sc2UpO21lPWF9fWZvcihhPWdlKCk7MDxwZS1hJiZudWxsIT09TDspYT1MLHNlLmRpZFRpbWVvdXQ9ITEsdWUoYSxzZSksYT1nZSgpO251bGw9PT1MfHxvZXx8KG9lPSEwLGtlKHZlKSl9fSwhMSk7dmFyIHZlPWZ1bmN0aW9uKGEpe29lPSExO3ZhciBiPWEtcGUrcmU7YjxyZSYmcWU8cmU/KDg+YiYmKGI9OCkscmU9YjxxZT9xZTpiKTpxZT1iO3BlPWErcmU7bmV8fChuZT0hMCx3aW5kb3cucG9zdE1lc3NhZ2UodGUsXCIqXCIpKX07aWU9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKGM9Z2UoKStcbmIudGltZW91dCk7aWYoLTE9PT1tZXx8LTEhPT1jJiZjPG1lKW1lPWM7YT17c2NoZWR1bGVkQ2FsbGJhY2s6YSx0aW1lb3V0VGltZTpjLHByZXY6bnVsbCxuZXh0Om51bGx9O251bGw9PT1MP0w9YTooYj1hLnByZXY9bGUsbnVsbCE9PWImJihiLm5leHQ9YSkpO2xlPWE7b2V8fChvZT0hMCxrZSh2ZSkpO3JldHVybiBhfTtqZT1mdW5jdGlvbihhKXtpZihudWxsIT09YS5wcmV2fHxMPT09YSl7dmFyIGI9YS5uZXh0LGM9YS5wcmV2O2EubmV4dD1udWxsO2EucHJldj1udWxsO251bGwhPT1iP251bGwhPT1jPyhjLm5leHQ9YixiLnByZXY9Yyk6KGIucHJldj1udWxsLEw9Yik6bnVsbCE9PWM/KGMubmV4dD1udWxsLGxlPWMpOmxlPUw9bnVsbH19fWVsc2V7dmFyIHdlPW5ldyBNYXA7aWU9ZnVuY3Rpb24oYSl7dmFyIGI9e3NjaGVkdWxlZENhbGxiYWNrOmEsdGltZW91dFRpbWU6MCxuZXh0Om51bGwscHJldjpudWxsfSxjPWVlKGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sXG5kaWRUaW1lb3V0OiExfSl9KTt3ZS5zZXQoYSxjKTtyZXR1cm4gYn07amU9ZnVuY3Rpb24oYSl7dmFyIGI9d2UuZ2V0KGEuc2NoZWR1bGVkQ2FsbGJhY2spO3dlLmRlbGV0ZShhKTtmZShiKX19ZnVuY3Rpb24geGUoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIHllKGEsYil7YT1wKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9eGUoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gemUoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEFlKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBCZShhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjkxXCIpOnZvaWQgMDtyZXR1cm4gcCh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBDZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0EoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpBKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBEZShhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBFZShhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgRmU9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gR2UoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBIZShhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/R2UoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgSWU9dm9pZCAwLEplPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PUZlLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle0llPUllfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO0llLmlubmVySFRNTD1cIjxzdmc+XCIrYitcIjwvc3ZnPlwiO2ZvcihiPUllLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIEtlKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgTGU9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sTWU9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKExlKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe01lLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7TGVbYl09TGVbYV19KX0pO1xuZnVuY3Rpb24gTmUoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8TGUuaGFzT3duUHJvcGVydHkoZSkmJkxlW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIE9lPXAoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBQZShhLGIsYyl7YiYmKE9lW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9BKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/QShcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpBKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9BKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBRZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFJlPXYudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiBTZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1SZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpNZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoXCJmb2N1c1wiLGEpO01kKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjokYihlLCEwKSYmTWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09amIuaW5kZXhPZihlKSYmSyhlLGEpfWNbZV09ITB9fX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PUZlLmh0bWwmJihkPUdlKGEpKTtkPT09RmUuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIFVlKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIFZlKGEsYixjLGQpe3ZhciBlPVFlKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SyhcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmPTA7ZjxqYi5sZW5ndGg7ZisrKUsoamJbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpLKFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6SyhcImVycm9yXCIsYSk7SyhcImxvYWRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SyhcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpIYyhhLGMpO2Y9R2MoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj15ZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpBZShhLGMpO2Y9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtcbksoXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkNlKGEsYyk7Zj1CZShhLGMpO0soXCJpbnZhbGlkXCIsYSk7U2UoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVBlKGIsZixSZSk7dmFyIGc9ZixoO2ZvcihoIGluIGcpaWYoZy5oYXNPd25Qcm9wZXJ0eShoKSl7dmFyIGs9Z1toXTtcInN0eWxlXCI9PT1oP05lKGEsayxSZSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZKZShhLGspKTpcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZLZShhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmS2UoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihyYS5oYXNPd25Qcm9wZXJ0eShoKT9udWxsIT1rJiZTZShkLFxuaCk6bnVsbCE9ayYmRmMoYSxoLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/emUoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJnplKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9fVxuZnVuY3Rpb24gV2UoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPUdjKGEsYyk7ZD1HYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9eWUoYSxjKTtkPXllKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1wKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9cCh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9QmUoYSxjKTtkPUJlKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9UGUoYixkLFJlKTtiPWE9dm9pZCAwO3ZhciBnPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgaD1jW2FdO2ZvcihiIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShiKSYmKGd8fFxuKGc9e30pLGdbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJihyYS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtoPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1hKWlmKGgpe2ZvcihiIGluIGgpIWguaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChnfHwoZz17fSksZ1tiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmhbYl0hPT1rW2JdJiYoZ3x8KGc9e30pLGdbYl09a1tiXSl9ZWxzZSBnfHwoZnx8KGY9W10pLGYucHVzaChhLGcpKSxcbmc9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/aD09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJlNlKGUsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9ZyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGcpO3JldHVybiBmfVxuZnVuY3Rpb24gWGUoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmSmMoYSxlKTtRZShjLGQpO2Q9UWUoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBnPWJbZl0saD1iW2YrMV07XCJzdHlsZVwiPT09Zz9OZShhLGgsUmUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/SmUoYSxoKTpcImNoaWxkcmVuXCI9PT1nP0tlKGEsaCk6RmMoYSxnLGgsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOktjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz96ZShhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG56ZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6emUoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gWWUoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpLKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihkPTA7ZDxqYi5sZW5ndGg7ZCsrKUsoamJbZF0sYSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOksoXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOksoXCJlcnJvclwiLGEpO0soXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpLKFwicmVzZXRcIixhKTtLKFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpLKFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6SGMoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6QWUoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1NlKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpDZShhLGMpLEsoXCJpbnZhbGlkXCIsYSksU2UoZSxcIm9uQ2hhbmdlXCIpfVBlKGIsXG5jLFJlKTtkPW51bGw7Zm9yKHZhciBmIGluIGMpaWYoYy5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGc9Y1tmXTtcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgZz9hLnRleHRDb250ZW50IT09ZyYmKGQ9W1wiY2hpbGRyZW5cIixnXSk6XCJudW1iZXJcIj09PXR5cGVvZiBnJiZhLnRleHRDb250ZW50IT09XCJcIitnJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZ10pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1nJiZTZShlLGYpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjYyhhKTtNYyhhLGMsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNjKGEpO0VlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJihhLm9uY2xpY2s9dil9cmV0dXJuIGR9ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyICRlPXtjcmVhdGVFbGVtZW50OlRlLGNyZWF0ZVRleHROb2RlOlVlLHNldEluaXRpYWxQcm9wZXJ0aWVzOlZlLGRpZmZQcm9wZXJ0aWVzOldlLHVwZGF0ZVByb3BlcnRpZXM6WGUsZGlmZkh5ZHJhdGVkUHJvcGVydGllczpZZSxkaWZmSHlkcmF0ZWRUZXh0OlplLHdhcm5Gb3JVbm1hdGNoZWRUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dDpmdW5jdGlvbigpe30scmVzdG9yZUNvbnRyb2xsZWRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOktjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7XG5jPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVBhKGQpO2U/dm9pZCAwOkEoXCI5MFwiKTtkYyhkKTtLYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJnplKGEsISFjLm11bHRpcGxlLGIsITEpfX19LGFmPW51bGwsYmY9bnVsbDtmdW5jdGlvbiBjZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBkZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcInN0cmluZ1wiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBlZj1nZSxmZj1pZSxnZj1qZTtmdW5jdGlvbiBoZihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGpmKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBrZj1bXSxsZj0tMTtmdW5jdGlvbiBtZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIE0oYSl7MD5sZnx8KGEuY3VycmVudD1rZltsZl0sa2ZbbGZdPW51bGwsbGYtLSl9ZnVuY3Rpb24gTihhLGIpe2xmKys7a2ZbbGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgbmY9bWYoaGEpLE89bWYoITEpLG9mPWhhO2Z1bmN0aW9uIHBmKGEpe3JldHVybiBxZihhKT9vZjpuZi5jdXJyZW50fVxuZnVuY3Rpb24gcmYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBoYTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBxZihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gc2YoYSl7cWYoYSkmJihNKE8sYSksTShuZixhKSl9ZnVuY3Rpb24gdGYoYSl7TShPLGEpO00obmYsYSl9XG5mdW5jdGlvbiB1ZihhLGIsYyl7bmYuY3VycmVudCE9PWhhP0EoXCIxNjhcIik6dm9pZCAwO04obmYsYixhKTtOKE8sYyxhKX1mdW5jdGlvbiB2ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpBKFwiMTA4XCIsdWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBwKHt9LGIsYyl9ZnVuY3Rpb24gd2YoYSl7aWYoIXFmKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8aGE7b2Y9bmYuY3VycmVudDtOKG5mLGIsYSk7TihPLE8uY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIHhmKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6QShcIjE2OVwiKTtpZihiKXt2YXIgZD12ZihhLG9mKTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWQ7TShPLGEpO00obmYsYSk7TihuZixkLGEpfWVsc2UgTShPLGEpO04oTyxiLGEpfVxuZnVuY3Rpb24geWYoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1cbmZ1bmN0aW9uIHpmKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtudWxsPT09ZD8oZD1uZXcgeWYoYS50YWcsYixhLmtleSxhLm1vZGUpLGQudHlwZT1hLnR5cGUsZC5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsZC5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1kKTooZC5wZW5kaW5nUHJvcHM9YixkLmVmZmVjdFRhZz0wLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCk7ZC5leHBpcmF0aW9uVGltZT1jO2QuY2hpbGQ9YS5jaGlsZDtkLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2QubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2Quc2libGluZz1hLnNpYmxpbmc7ZC5pbmRleD1hLmluZGV4O2QucmVmPWEucmVmO3JldHVybiBkfVxuZnVuY3Rpb24gQWYoYSxiLGMpe3ZhciBkPWEudHlwZSxlPWEua2V5O2E9YS5wcm9wcztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl2YXIgZj1kLnByb3RvdHlwZSYmZC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD8yOjA7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGQpZj01O2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgaWM6cmV0dXJuIEJmKGEuY2hpbGRyZW4sYixjLGUpO2Nhc2UgcGM6Zj0xMTtifD0zO2JyZWFrO2Nhc2UgamM6Zj0xMTtifD0yO2JyZWFrO2Nhc2Uga2M6cmV0dXJuIGQ9bmV3IHlmKDE1LGEsZSxifDQpLGQudHlwZT1rYyxkLmV4cGlyYXRpb25UaW1lPWMsZDtjYXNlIHJjOmY9MTY7Ynw9MjticmVhaztkZWZhdWx0OmE6e3N3aXRjaChcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kP2QuJCR0eXBlb2Y6bnVsbCl7Y2FzZSBsYzpmPTEzO2JyZWFrIGE7Y2FzZSBtYzpmPTEyO2JyZWFrIGE7Y2FzZSBxYzpmPTE0O2JyZWFrIGE7ZGVmYXVsdDpBKFwiMTMwXCIsbnVsbD09ZD9cbmQ6dHlwZW9mIGQsXCJcIil9Zj12b2lkIDB9fWI9bmV3IHlmKGYsYSxlLGIpO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYn1mdW5jdGlvbiBCZihhLGIsYyxkKXthPW5ldyB5ZigxMCxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIENmKGEsYixjKXthPW5ldyB5Zig2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gRGYoYSxiLGMpe2I9bmV3IHlmKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gRWYoYSxiLGMpe2I9bmV3IHlmKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfXZhciBGZj1udWxsLEdmPW51bGw7ZnVuY3Rpb24gSGYoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIElmKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO0ZmPUhmKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtHZj1IZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfWZ1bmN0aW9uIEpmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZiYmRmYoYSl9ZnVuY3Rpb24gS2YoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEdmJiZHZihhKX12YXIgTGY9ITE7XG5mdW5jdGlvbiBNZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6MCxiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBOZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YS5leHBpcmF0aW9uVGltZSxiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIE9mKGEpe3JldHVybntleHBpcmF0aW9uVGltZTphLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIFBmKGEsYixjKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmMpYS5leHBpcmF0aW9uVGltZT1jfVxuZnVuY3Rpb24gUWYoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1kKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3ZhciBmPW51bGw7bnVsbD09PWUmJihlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBlPWEudXBkYXRlUXVldWUsZj1kLnVwZGF0ZVF1ZXVlLG51bGw9PT1lP251bGw9PT1mPyhlPWEudXBkYXRlUXVldWU9TWYoYS5tZW1vaXplZFN0YXRlKSxmPWQudXBkYXRlUXVldWU9TWYoZC5tZW1vaXplZFN0YXRlKSk6ZT1hLnVwZGF0ZVF1ZXVlPU5mKGYpOm51bGw9PT1mJiYoZj1kLnVwZGF0ZVF1ZXVlPU5mKGUpKTtudWxsPT09Znx8ZT09PWY/UGYoZSxiLGMpOm51bGw9PT1lLmxhc3RVcGRhdGV8fG51bGw9PT1mLmxhc3RVcGRhdGU/KFBmKGUsYixjKSxQZihmLGIsYykpOihQZihlLGIsYyksZi5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gUmYoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7ZD1udWxsPT09ZD9hLnVwZGF0ZVF1ZXVlPU1mKGEubWVtb2l6ZWRTdGF0ZSk6U2YoYSxkKTtudWxsPT09ZC5sYXN0Q2FwdHVyZWRVcGRhdGU/ZC5maXJzdENhcHR1cmVkVXBkYXRlPWQubGFzdENhcHR1cmVkVXBkYXRlPWI6KGQubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixkLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKTtpZigwPT09ZC5leHBpcmF0aW9uVGltZXx8ZC5leHBpcmF0aW9uVGltZT5jKWQuZXhwaXJhdGlvblRpbWU9Y31mdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1OZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBUZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBwKHt9LGQsZSk7Y2FzZSAyOkxmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gVWYoYSxiLGMsZCxlKXtMZj0hMTtpZighKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmUpKXtiPVNmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLG49ZjtudWxsIT09azspe3ZhciByPWsuZXhwaXJhdGlvblRpbWU7aWYocj5lKXtpZihudWxsPT09ZyYmKGc9ayxmPW4pLDA9PT1ofHxoPnIpaD1yfWVsc2Ugbj1UZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSk7az1rLm5leHR9cj1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciB3PWsuZXhwaXJhdGlvblRpbWU7aWYodz5lKXtpZihudWxsPT09ciYmKHI9ayxudWxsPT09XG5nJiYoZj1uKSksMD09PWh8fGg+dyloPXd9ZWxzZSBuPVRmKGEsYixrLG4sYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PXI/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1yJiYoZj1uKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9cjtiLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPW59fVxuZnVuY3Rpb24gVmYoYSxiKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYT9BKFwiMTkxXCIsYSk6dm9pZCAwO2EuY2FsbChiKX1cbmZ1bmN0aW9uIFdmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTthPWIuZmlyc3RFZmZlY3Q7Zm9yKGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7bnVsbCE9PWE7KXt2YXIgZD1hLmNhbGxiYWNrO251bGwhPT1kJiYoYS5jYWxsYmFjaz1udWxsLFZmKGQsYykpO2E9YS5uZXh0RWZmZWN0fWE9Yi5maXJzdENhcHR1cmVkRWZmZWN0O2ZvcihiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbDtudWxsIT09YTspYj1hLmNhbGxiYWNrLG51bGwhPT1iJiYoYS5jYWxsYmFjaz1udWxsLFZmKGIsYykpLGE9YS5uZXh0RWZmZWN0fVxuZnVuY3Rpb24gWGYoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazp2YyhiKX19dmFyIFlmPW1mKG51bGwpLFpmPW1mKG51bGwpLCRmPW1mKDApO2Z1bmN0aW9uIGFnKGEpe3ZhciBiPWEudHlwZS5fY29udGV4dDtOKCRmLGIuX2NoYW5nZWRCaXRzLGEpO04oWmYsYi5fY3VycmVudFZhbHVlLGEpO04oWWYsYSxhKTtiLl9jdXJyZW50VmFsdWU9YS5wZW5kaW5nUHJvcHMudmFsdWU7Yi5fY2hhbmdlZEJpdHM9YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gYmcoYSl7dmFyIGI9JGYuY3VycmVudCxjPVpmLmN1cnJlbnQ7TShZZixhKTtNKFpmLGEpO00oJGYsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn12YXIgY2c9e30sZGc9bWYoY2cpLGVnPW1mKGNnKSxmZz1tZihjZyk7ZnVuY3Rpb24gZ2coYSl7YT09PWNnP0EoXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gaWcoYSxiKXtOKGZnLGIsYSk7TihlZyxhLGEpO04oZGcsY2csYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6SGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPUhlKGIsYyl9TShkZyxhKTtOKGRnLGIsYSl9ZnVuY3Rpb24gamcoYSl7TShkZyxhKTtNKGVnLGEpO00oZmcsYSl9ZnVuY3Rpb24ga2coYSl7ZWcuY3VycmVudD09PWEmJihNKGRnLGEpLE0oZWcsYSkpfWZ1bmN0aW9uIGxnKGEsYixjKXt2YXIgZD1hLm1lbW9pemVkU3RhdGU7Yj1iKGMsZCk7ZD1udWxsPT09Ynx8dm9pZCAwPT09Yj9kOnAoe30sZCxiKTthLm1lbW9pemVkU3RhdGU9ZDthPWEudXBkYXRlUXVldWU7bnVsbCE9PWEmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS5iYXNlU3RhdGU9ZCl9XG52YXIgcGc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1qZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1tZygpO2Q9bmcoZCxhKTt2YXIgZT1PZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7UWYoYSxlLGQpO29nKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPW1nKCk7ZD1uZyhkLGEpO3ZhciBlPU9mKGQpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1FmKGEsZSxkKTtvZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1tZygpO2M9bmcoYyxhKTt2YXIgZD1PZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1FmKGEsZCxjKTtvZyhhLGMpfX07ZnVuY3Rpb24gcWcoYSxiLGMsZCxlLGYpe3ZhciBnPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLnNob3VsZENvbXBvbmVudFVwZGF0ZT9nLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFlYShiLGMpfHwhZWEoZCxlKTohMH1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZwZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5zdGF0ZU5vZGUsZT1hLnBlbmRpbmdQcm9wcyxmPXBmKGEpO2QucHJvcHM9ZTtkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnJlZnM9aGE7ZC5jb250ZXh0PXJmKGEsZik7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoVWYoYSxmLGUsZCxiKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYobGcoYSxmLGUpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsTW91bnR8fChjPWQuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZcbmQuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWQuc3RhdGUmJnBnLmVucXVldWVSZXBsYWNlU3RhdGUoZCxkLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKFVmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgdGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIHVnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9BKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpBKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzPT09aGE/ZC5yZWZzPXt9OmQucmVmcztudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT9BKFwiMTQ4XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6QShcIjI1NFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gdmcoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJkEoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIHdnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9emYoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1DZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj11ZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9QWYoYyxhLm1vZGUsZCk7ZC5yZWY9dWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiByKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDEwIT09Yi50YWcpcmV0dXJuIGI9QmYoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjPUFmKGIsYS5tb2RlLGMpLGMucmVmPXVnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBoYzpyZXR1cm4gYj1EZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYodGcoYil8fHRjKGIpKXJldHVybiBiPUJmKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49XG5hLGI7dmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09aWM/cihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIGhjOnJldHVybiBjLmtleT09PWU/bihhLGIsYyxkKTpudWxsfWlmKHRnKGMpfHx0YyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpyKGEsYixjLGQsbnVsbCk7dmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBuYyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtcbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIGdjOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1pYz9yKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBoYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbihiLGEsZCxlKX1pZih0ZyhkKXx8dGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwscihiLGEsZCxlLG51bGwpO3ZnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSmQoZSxnLGgsayl7Zm9yKHZhciB1PW51bGwseD1udWxsLHQ9ZyxxPWc9MCxuPW51bGw7bnVsbCE9PXQmJnE8aC5sZW5ndGg7cSsrKXt0LmluZGV4PnE/KG49dCx0PW51bGwpOm49dC5zaWJsaW5nO3ZhciBsPVAoZSx0LGhbcV0sayk7aWYobnVsbD09PWwpe251bGw9PT10JiYodD1uKTticmVha31hJiZ0JiZudWxsPT09bC5hbHRlcm5hdGUmJmIoZSxcbnQpO2c9ZihsLGcscSk7bnVsbD09PXg/dT1sOnguc2libGluZz1sO3g9bDt0PW59aWYocT09PWgubGVuZ3RoKXJldHVybiBjKGUsdCksdTtpZihudWxsPT09dCl7Zm9yKDtxPGgubGVuZ3RoO3ErKylpZih0PXcoZSxoW3FdLGspKWc9Zih0LGcscSksbnVsbD09PXg/dT10Onguc2libGluZz10LHg9dDtyZXR1cm4gdX1mb3IodD1kKGUsdCk7cTxoLmxlbmd0aDtxKyspaWYobj1uYyh0LGUscSxoW3FdLGspKWEmJm51bGwhPT1uLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PW4ua2V5P3E6bi5rZXkpLGc9ZihuLGcscSksbnVsbD09PXg/dT1uOnguc2libGluZz1uLHg9bjthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fWZ1bmN0aW9uIEUoZSxnLGgsayl7dmFyIHU9dGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHU/QShcIjE1MFwiKTp2b2lkIDA7aD11LmNhbGwoaCk7bnVsbD09aD9BKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIHQ9dT1udWxsLG49Zyx4PVxuZz0wLHk9bnVsbCxsPWgubmV4dCgpO251bGwhPT1uJiYhbC5kb25lO3grKyxsPWgubmV4dCgpKXtuLmluZGV4Png/KHk9bixuPW51bGwpOnk9bi5zaWJsaW5nO3ZhciByPVAoZSxuLGwudmFsdWUsayk7aWYobnVsbD09PXIpe258fChuPXkpO2JyZWFrfWEmJm4mJm51bGw9PT1yLmFsdGVybmF0ZSYmYihlLG4pO2c9ZihyLGcseCk7bnVsbD09PXQ/dT1yOnQuc2libGluZz1yO3Q9cjtuPXl9aWYobC5kb25lKXJldHVybiBjKGUsbiksdTtpZihudWxsPT09bil7Zm9yKDshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9dyhlLGwudmFsdWUsayksbnVsbCE9PWwmJihnPWYobCxnLHgpLG51bGw9PT10P3U9bDp0LnNpYmxpbmc9bCx0PWwpO3JldHVybiB1fWZvcihuPWQoZSxuKTshbC5kb25lO3grKyxsPWgubmV4dCgpKWw9bmMobixlLHgsbC52YWx1ZSxrKSxudWxsIT09bCYmKGEmJm51bGwhPT1sLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PWwua2V5P3g6bC5rZXkpLGc9ZihsLGcseCksbnVsbD09PVxudD91PWw6dC5zaWJsaW5nPWwsdD1sKTthJiZuLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiB1fXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1pYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBuPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobilzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBnYzphOntuPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PW4paWYoMTA9PT1rLnRhZz9mLnR5cGU9PT1pYzprLnR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PWljP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj11ZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1pYz8oZD1CZihmLnByb3BzLmNoaWxkcmVuLFxuYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1BZihmLGEubW9kZSxoKSxoLnJlZj11ZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgaGM6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1cbmEsYT1kKTooYyhhLGQpLGQ9Q2YoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYodGcoZikpcmV0dXJuIEpkKGEsZCxmLGgpO2lmKHRjKGYpKXJldHVybiBFKGEsZCxmLGgpO24mJnZnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6aD1hLnR5cGUsQShcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIHhnPXdnKCEwKSx5Zz13ZyghMSksemc9bnVsbCxBZz1udWxsLEJnPSExO2Z1bmN0aW9uIENnKGEsYil7dmFyIGM9bmV3IHlmKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gRGcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRWcoYSl7aWYoQmcpe3ZhciBiPUFnO2lmKGIpe3ZhciBjPWI7aWYoIURnKGEsYikpe2I9aGYoYyk7aWYoIWJ8fCFEZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtCZz0hMTt6Zz1hO3JldHVybn1DZyh6ZyxjKX16Zz1hO0FnPWpmKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQmc9ITEsemc9YX19XG5mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47emc9YX1mdW5jdGlvbiBHZyhhKXtpZihhIT09emcpcmV0dXJuITE7aWYoIUJnKXJldHVybiBGZyhhKSxCZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIWRmKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1BZztiOylDZyhhLGIpLGI9aGYoYik7RmcoYSk7QWc9emc/aGYoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtBZz16Zz1udWxsO0JnPSExfWZ1bmN0aW9uIFEoYSxiLGMpe0lnKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIElnKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/eWcoYixudWxsLGMsZCk6eGcoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBKZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIEtnKGEsYixjLGQsZSl7SmcoYSxiKTt2YXIgZj0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighYyYmIWYpcmV0dXJuIGQmJnhmKGIsITEpLFIoYSxiKTtjPWIuc3RhdGVOb2RlO2VjLmN1cnJlbnQ9Yjt2YXIgZz1mP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtmJiYoSWcoYSxiLG51bGwsZSksYi5jaGlsZD1udWxsKTtJZyhhLGIsZyxlKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ4ZihiLCEwKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIExnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/dWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdWYoYSxiLmNvbnRleHQsITEpO2lnKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7bnVsbCE9PWUmJihlLnJldHVybj1hKTtmb3IoO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9ZDtlbHNlIGJyZWFrO2Y9Zi5yZXR1cm59Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1cbmUuY2hpbGR9aWYobnVsbCE9PWYpZi5yZXR1cm49ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtlLnJldHVybj1mLnJldHVybjtmPWU7YnJlYWt9Zj1mLnJldHVybn1lPWZ9fVxuZnVuY3Rpb24gUWcoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzLGc9ITA7aWYoTy5jdXJyZW50KWc9ITE7ZWxzZSBpZihmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7dmFyIGg9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZiloPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpO2g9MH1lbHNle3ZhciBrPWYudmFsdWU7aWYoaz09PWgmJigwIT09a3x8MS9rPT09MS9oKXx8ayE9PWsmJmghPT1oKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmZylyZXR1cm4gYi5zdGF0ZU5vZGU9MCxhZyhiKSxSKGEsYik7aD0wfWVsc2UgaWYoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoayxcbmgpOjEwNzM3NDE4MjMsaHw9MCwwPT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYWcoYiksUihhLGIpfWVsc2UgTWcoYixkLGgsYyl9Yi5zdGF0ZU5vZGU9aDthZyhiKTtRKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0EoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9emYoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gUmcoYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOkxnKGIpO2JyZWFrO2Nhc2UgMjp3ZihiKTticmVhaztjYXNlIDQ6aWcoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOmFnKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0EoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9cGYoYik7Zj1yZihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLGY9Zi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZiYmbGcoYixmLGUpLGU9d2YoYiksZC51cGRhdGVyPXBnLGIuc3RhdGVOb2RlPWQsZC5fcmVhY3RJbnRlcm5hbEZpYmVyPWIsc2coYixjKSxhPUtnKGEsYiwhMCxlLGMpKTooYi50YWc9MSxRKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9cGYoYiksZD1yZihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLFEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDI6ZT13ZihiKTtpZihudWxsPT09YSlpZihudWxsPT09Yi5zdGF0ZU5vZGUpe3ZhciBnPWIucGVuZGluZ1Byb3BzLGg9Yi50eXBlO2Q9cGYoYik7dmFyIGs9Mj09PWIudGFnJiZudWxsIT1iLnR5cGUuY29udGV4dFR5cGVzO2Y9az9yZihiLGQpOmhhO2c9bmV3IGgoZyxmKTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PVxuZy5zdGF0ZSYmdm9pZCAwIT09Zy5zdGF0ZT9nLnN0YXRlOm51bGw7Zy51cGRhdGVyPXBnO2Iuc3RhdGVOb2RlPWc7Zy5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7ayYmKGs9Yi5zdGF0ZU5vZGUsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWQsay5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtzZyhiLGMpO2Q9ITB9ZWxzZXtoPWIudHlwZTtkPWIuc3RhdGVOb2RlO2s9Yi5tZW1vaXplZFByb3BzO2Y9Yi5wZW5kaW5nUHJvcHM7ZC5wcm9wcz1rO3ZhciBuPWQuY29udGV4dDtnPXBmKGIpO2c9cmYoYixnKTt2YXIgcj1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsoaD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oayE9PWZ8fG4hPT1nKSYmcmcoYixkLGYsZyk7TGY9ITE7dmFyIHc9Yi5tZW1vaXplZFN0YXRlO249ZC5zdGF0ZT13O3ZhciBQPWIudXBkYXRlUXVldWU7bnVsbCE9PVAmJihVZihiLFAsZixkLGMpLG49Yi5tZW1vaXplZFN0YXRlKTtrIT09Znx8dyE9PW58fE8uY3VycmVudHx8TGY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYobGcoYixyLGYpLG49Yi5tZW1vaXplZFN0YXRlKSwoaz1MZnx8cWcoYixrLGYsdyxuLGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50JiZkLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCYmXG4oYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWYsYi5tZW1vaXplZFN0YXRlPW4pLGQucHJvcHM9ZixkLnN0YXRlPW4sZC5jb250ZXh0PWcsZD1rKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBoPWIudHlwZSxkPWIuc3RhdGVOb2RlLGY9Yi5tZW1vaXplZFByb3BzLGs9Yi5wZW5kaW5nUHJvcHMsZC5wcm9wcz1mLG49ZC5jb250ZXh0LGc9cGYoYiksZz1yZihiLGcpLHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGYhPT1rfHxuIT09ZykmJnJnKGIsZCxrLGcpLExmPSExLG49Yi5tZW1vaXplZFN0YXRlLHc9ZC5zdGF0ZT1uLFA9Yi51cGRhdGVRdWV1ZSxudWxsIT09UCYmKFVmKGIsUCxrLGQsYyksdz1iLm1lbW9pemVkU3RhdGUpLGYhPT1rfHxuIT09d3x8Ty5jdXJyZW50fHxMZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHImJihsZyhiLHIsayksdz1iLm1lbW9pemVkU3RhdGUpLChyPUxmfHxxZyhiLGYsayxuLHcsZykpPyhofHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGUmJmQuY29tcG9uZW50V2lsbFVwZGF0ZShrLHcsZyksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRVcGRhdGUmJlxuKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWssYi5tZW1vaXplZFN0YXRlPXcpLGQucHJvcHM9ayxkLnN0YXRlPXcsZC5jb250ZXh0PWcsZD1yKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlfHxmPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcbmY9PT1hLm1lbW9pemVkUHJvcHMmJm49PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gS2coYSxiLGQsZSxjKTtjYXNlIDM6TGcoYik7ZT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1lKWlmKGQ9Yi5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWQ/ZC5lbGVtZW50Om51bGwsVWYoYixlLGIucGVuZGluZ1Byb3BzLG51bGwsYyksZT1iLm1lbW9pemVkU3RhdGUuZWxlbWVudCxlPT09ZClIZygpLGE9UihhLGIpO2Vsc2V7ZD1iLnN0YXRlTm9kZTtpZihkPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZkLmh5ZHJhdGUpQWc9amYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksemc9YixkPUJnPSEwO2Q/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9eWcoYixudWxsLGUsYykpOihIZygpLFEoYSxiLGUpKTthPWIuY2hpbGR9ZWxzZSBIZygpLGE9UihhLGIpO3JldHVybiBhO2Nhc2UgNTphOntnZyhmZy5jdXJyZW50KTtlPWdnKGRnLmN1cnJlbnQpO2Q9SGUoZSxcbmIudHlwZSk7ZSE9PWQmJihOKGVnLGIsYiksTihkZyxkLGIpKTtudWxsPT09YSYmRWcoYik7ZT1iLnR5cGU7az1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFPLmN1cnJlbnQmJms9PT1kKXtpZihrPWIubW9kZSYxJiYhIWQuaGlkZGVuKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZigha3x8MTA3Mzc0MTgyMyE9PWMpe2E9UihhLGIpO2JyZWFrIGF9fWs9ZC5jaGlsZHJlbjtkZihlLGQpP2s9bnVsbDpmJiZkZihlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTtKZyhhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmZC5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihRKGEsYixrKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxcbm51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGlnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9eGcoYixudWxsLGUsYyk6UShhLGIsZSksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLnJlbmRlcixjPWIucGVuZGluZ1Byb3BzLGQ9Yi5yZWYsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jfHxkIT09KG51bGwhPT1hP2EucmVmOm51bGwpPyhlPWUoYyxkKSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxPLmN1cnJlbnR8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDExOnJldHVybiBjPVxuYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sTy5jdXJyZW50fHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oUShhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTU6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsYi5tZW1vaXplZFByb3BzPT09Yz9hPVIoYSxiKTooUShhLGIsYy5jaGlsZHJlbiksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKSxhO2Nhc2UgMTM6cmV0dXJuIFFnKGEsYixjKTtjYXNlIDEyOmE6aWYoZD1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxrPWIubWVtb2l6ZWRQcm9wcyxlPWQuX2N1cnJlbnRWYWx1ZSxnPWQuX2NoYW5nZWRCaXRzLE8uY3VycmVudHx8MCE9PWd8fGshPT1mKXtiLm1lbW9pemVkUHJvcHM9ZjtoPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWh8fG51bGw9PT1oKWg9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1oO2lmKDAhPT0oZyZoKSlNZyhiLGQsZyxjKTtlbHNlIGlmKGs9PT1mKXthPVxuUihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtiLmVmZmVjdFRhZ3w9MTtRKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPVIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkEoXCIxNTZcIil9fWZ1bmN0aW9uIFNnKGEpe2EuZWZmZWN0VGFnfD00fXZhciBUZz12b2lkIDAsVWc9dm9pZCAwLFZnPXZvaWQgMDtUZz1mdW5jdGlvbigpe307VWc9ZnVuY3Rpb24oYSxiLGMpeyhiLnVwZGF0ZVF1ZXVlPWMpJiZTZyhiKX07Vmc9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJlNnKGIpfTtcbmZ1bmN0aW9uIFdnKGEsYil7dmFyIGM9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBzZihiKSxudWxsO2Nhc2UgMzpqZyhiKTt0ZihiKTt2YXIgZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYiksYi5lZmZlY3RUYWcmPS0zO1RnKGIpO3JldHVybiBudWxsO2Nhc2UgNTprZyhiKTtkPWdnKGZnLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPWIuc3RhdGVOb2RlLGg9Z2coZGcuY3VycmVudCk7Zz1XZShnLGUsZixjLGQpO1VnKGEsYixnLGUsZixjLGQsaCk7YS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2V7aWYoIWMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9cbkEoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1nZyhkZy5jdXJyZW50KTtpZihHZyhiKSljPWIuc3RhdGVOb2RlLGU9Yi50eXBlLGY9Yi5tZW1vaXplZFByb3BzLGNbQ109YixjW01hXT1mLGQ9WWUoYyxlLGYsYSxkKSxiLnVwZGF0ZVF1ZXVlPWQsbnVsbCE9PWQmJlNnKGIpO2Vsc2V7YT1UZShlLGMsZCxhKTthW0NdPWI7YVtNYV09YzthOmZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXtpZig1PT09Zi50YWd8fDY9PT1mLnRhZylhLmFwcGVuZENoaWxkKGYuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1mLnRhZyYmbnVsbCE9PWYuY2hpbGQpe2YuY2hpbGQucmV0dXJuPWY7Zj1mLmNoaWxkO2NvbnRpbnVlfWlmKGY9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWYuc2libGluZzspe2lmKG51bGw9PT1mLnJldHVybnx8Zi5yZXR1cm49PT1iKWJyZWFrIGE7Zj1mLnJldHVybn1mLnNpYmxpbmcucmV0dXJuPWYucmV0dXJuO2Y9Zi5zaWJsaW5nfVZlKGEsZSxjLGQpO2NmKGUsYykmJlNnKGIpO2Iuc3RhdGVOb2RlPVxuYX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpVmcoYSxiLGEubWVtb2l6ZWRQcm9wcyxjKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYylyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0EoXCIxNjZcIik6dm9pZCAwLG51bGw7ZD1nZyhmZy5jdXJyZW50KTtnZyhkZy5jdXJyZW50KTtHZyhiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW0NdPWIsWmUoZCxjKSYmU2coYikpOihkPVVlKGMsZCksZFtDXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxNjpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSAxNTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGpnKGIpLFRnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYmcoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpBKFwiMTY3XCIpO1xuZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBYZyhhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZudWxsIT09YyYmdmMoYyk7bnVsbCE9PWMmJnVjKGMpO2I9Yi52YWx1ZTtudWxsIT09YSYmMj09PWEudGFnJiZ1YyhhKTt0cnl7YiYmYi5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGIpfWNhdGNoKGQpe2QmJmQuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihkKX19ZnVuY3Rpb24gWWcoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7WmcoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gJGcoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEtmJiZLZihhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpZZyhhKTt2YXIgYj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe1pnKGEsYyl9YnJlYWs7Y2FzZSA1OllnKGEpO2JyZWFrO2Nhc2UgNDphaChhKX19ZnVuY3Rpb24gYmgoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBjaChhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihiaChiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59QShcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkEoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihLZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8YmgoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXtpZig1PT09ZS50YWd8fDY9PT1lLnRhZylpZihjKWlmKGQpe3ZhciBmPWIsZz1lLnN0YXRlTm9kZSxoPWM7OD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLGgpOmYuaW5zZXJ0QmVmb3JlKGcsaCl9ZWxzZSBiLmluc2VydEJlZm9yZShlLnN0YXRlTm9kZSxjKTtlbHNlIGQ/KGY9YixnPWUuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxmKTpmLmFwcGVuZENoaWxkKGcpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PVxuZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBhaChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz9BKFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoJGcoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzokZyhiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBkaChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmKGNbTWFdPWQsWGUoYyxmLGUsYSxkKSl9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDE1OmJyZWFrO2Nhc2UgMTY6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1mdW5jdGlvbiBlaChhLGIsYyl7Yz1PZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtmaChkKTtYZyhhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIGdoKGEsYixjKXtjPU9mKGMpO2MudGFnPTM7dmFyIGQ9YS5zdGF0ZU5vZGU7bnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe251bGw9PT1oaD9oaD1uZXcgU2V0KFt0aGlzXSk6aGguYWRkKHRoaXMpO3ZhciBjPWIudmFsdWUsZD1iLnN0YWNrO1hnKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZD9kOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gaWgoYSxiLGMsZCxlLGYpe2MuZWZmZWN0VGFnfD01MTI7Yy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbDtkPVhmKGQsYyk7YT1iO2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOmEuZWZmZWN0VGFnfD0xMDI0O2Q9ZWgoYSxkLGYpO1JmKGEsZCxmKTtyZXR1cm47Y2FzZSAyOmlmKGI9ZCxjPWEuc3RhdGVOb2RlLDA9PT0oYS5lZmZlY3RUYWcmNjQpJiZudWxsIT09YyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09aGh8fCFoaC5oYXMoYykpKXthLmVmZmVjdFRhZ3w9MTAyNDtkPWdoKGEsYixmKTtSZihhLGQsZik7cmV0dXJufX1hPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKX1cbmZ1bmN0aW9uIGpoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOnNmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGpnKGEpLHRmKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBrZyhhKSxudWxsO2Nhc2UgMTY6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA0OnJldHVybiBqZyhhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGJnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIGtoPWVmKCksbGg9MixtaD1raCxuaD0wLG9oPTAscGg9ITEsUz1udWxsLHFoPW51bGwsVD0wLHJoPS0xLHNoPSExLFU9bnVsbCx0aD0hMSx1aD0hMSxoaD1udWxsO1xuZnVuY3Rpb24gdmgoKXtpZihudWxsIT09Uylmb3IodmFyIGE9Uy5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnNmKGIpO2JyZWFrO2Nhc2UgMzpqZyhiKTt0ZihiKTticmVhaztjYXNlIDU6a2coYik7YnJlYWs7Y2FzZSA0OmpnKGIpO2JyZWFrO2Nhc2UgMTM6YmcoYil9YT1hLnJldHVybn1xaD1udWxsO1Q9MDtyaD0tMTtzaD0hMTtTPW51bGw7dWg9ITF9XG5mdW5jdGlvbiB3aChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyY1MTIpKXtiPVdnKGIsYSxUKTt2YXIgZT1hO2lmKDEwNzM3NDE4MjM9PT1UfHwxMDczNzQxODIzIT09ZS5leHBpcmF0aW9uVGltZSl7dmFyIGY9MDtzd2l0Y2goZS50YWcpe2Nhc2UgMzpjYXNlIDI6dmFyIGc9ZS51cGRhdGVRdWV1ZTtudWxsIT09ZyYmKGY9Zy5leHBpcmF0aW9uVGltZSl9Zm9yKGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9Zy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmXG4obnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7dWg9ITA7YnJlYWt9fWVsc2V7YT1qaChhLHNoLFQpO2lmKG51bGwhPT1hKXJldHVybiBhLmVmZmVjdFRhZyY9NTExLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD01MTIpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPVJnKGEuYWx0ZXJuYXRlLGEsVCk7bnVsbD09PWImJihiPXdoKGEpKTtlYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiB5aChhLGIsYyl7cGg/QShcIjI0M1wiKTp2b2lkIDA7cGg9ITA7aWYoYiE9PVR8fGEhPT1xaHx8bnVsbD09PVMpdmgoKSxxaD1hLFQ9YixyaD0tMSxTPXpmKHFoLmN1cnJlbnQsbnVsbCxUKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO3NoPSFjfHxUPD1saDtkb3t0cnl7aWYoYylmb3IoO251bGwhPT1TJiYhemgoKTspUz14aChTKTtlbHNlIGZvcig7bnVsbCE9PVM7KVM9eGgoUyl9Y2F0Y2goZil7aWYobnVsbD09PVMpZD0hMCxmaChmKTtlbHNle251bGw9PT1TP0EoXCIyNzFcIik6dm9pZCAwO2M9Uzt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSl7ZD0hMDtmaChmKTticmVha31paChhLGUsYyxmLHNoLFQsbWgpO1M9d2goYyl9fWJyZWFrfXdoaWxlKDEpO3BoPSExO2lmKGQpcmV0dXJuIG51bGw7aWYobnVsbD09PVMpe2lmKHVoKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1iLGEuY3VycmVudC5hbHRlcm5hdGU7c2g/QShcIjI2MlwiKTpcbnZvaWQgMDswPD1yaCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBiPWEuY3VycmVudC5leHBpcmF0aW9uVGltZTswIT09YiYmKDA9PT1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lfHxhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPGIpJiZBaChhLGIpfSxyaCk7QmgoYS5jdXJyZW50LmV4cGlyYXRpb25UaW1lKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFpnKGEsYil7dmFyIGM7YTp7cGgmJiF0aD9BKFwiMjYzXCIpOnZvaWQgMDtmb3IoYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAyOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1oaHx8IWhoLmhhcyhkKSkpe2E9WGYoYixhKTthPWdoKGMsYSwxKTtRZihjLGEsMSk7b2coYywxKTtjPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzphPVhmKGIsYSk7YT1laChjLGEsMSk7UWYoYyxhLDEpO29nKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9WGYoYixhKSxjPWVoKGEsYywxKSxRZihhLGMsMSksb2coYSwxKSk7Yz12b2lkIDB9cmV0dXJuIGN9XG5mdW5jdGlvbiBDaCgpe3ZhciBhPTIrMjUqKCgobWcoKS0yKzUwMCkvMjV8MCkrMSk7YTw9bmgmJihhPW5oKzEpO3JldHVybiBuaD1hfWZ1bmN0aW9uIG5nKGEsYil7YT0wIT09b2g/b2g6cGg/dGg/MTpUOmIubW9kZSYxP0RoPzIrMTAqKCgoYS0yKzE1KS8xMHwwKSsxKToyKzI1KigoKGEtMis1MDApLzI1fDApKzEpOjE7RGgmJigwPT09RWh8fGE+RWgpJiYoRWg9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBvZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9YjtudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmIpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWEucmV0dXJuKWlmKDM9PT1hLnRhZyl7dmFyIGM9YS5zdGF0ZU5vZGU7IXBoJiYwIT09VCYmYjxUJiZ2aCgpO3ZhciBkPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTtwaCYmIXRoJiZxaD09PWN8fEFoKGMsZCk7Rmg+R2gmJkEoXCIxODVcIil9ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBtZygpe21oPWVmKCkta2g7cmV0dXJuIGxoPShtaC8xMHwwKSsyfVxuZnVuY3Rpb24gSGgoYSl7dmFyIGI9b2g7b2g9MisyNSooKChtZygpLTIrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e29oPWJ9fWZ1bmN0aW9uIEloKGEsYixjLGQsZSl7dmFyIGY9b2g7b2g9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtvaD1mfX12YXIgSmg9bnVsbCxWPW51bGwsS2g9MCxMaD12b2lkIDAsVz0hMSxYPW51bGwsWT0wLEVoPTAsTWg9ITEsTmg9ITEsT2g9bnVsbCxQaD1udWxsLFo9ITEsUWg9ITEsRGg9ITEsUmg9bnVsbCxHaD0xRTMsRmg9MCxTaD0xO2Z1bmN0aW9uIFRoKGEpe2lmKDAhPT1LaCl7aWYoYT5LaClyZXR1cm47bnVsbCE9PUxoJiZnZihMaCl9dmFyIGI9ZWYoKS1raDtLaD1hO0xoPWZmKFVoLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1cbmZ1bmN0aW9uIEFoKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1WPyhKaD1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1KaCk7ZWxzZXt2YXIgYz1hLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1jfHxiPGMpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifVd8fChaP1FoJiYoWD1hLFk9MSxWaChhLDEsITEpKToxPT09Yj9XaCgpOlRoKGIpKX1cbmZ1bmN0aW9uIFhoKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVYpZm9yKHZhciBjPVYsZD1KaDtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj9BKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7Smg9Vj1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09SmgpSmg9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9Smg7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtpZigwPT09YXx8ZTxhKWE9ZSxiPWQ7aWYoZD09PVYpYnJlYWs7XG5jPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPVg7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GaCsrOkZoPTA7WD1iO1k9YX1mdW5jdGlvbiBVaChhKXtZaCgwLCEwLGEpfWZ1bmN0aW9uIFdoKCl7WWgoMSwhMSxudWxsKX1mdW5jdGlvbiBZaChhLGIsYyl7UGg9YztYaCgpO2lmKGIpZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSkmJighTWh8fG1nKCk+PVkpOyltZygpLFZoKFgsWSwhTWgpLFhoKCk7ZWxzZSBmb3IoO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKTspVmgoWCxZLCExKSxYaCgpO251bGwhPT1QaCYmKEtoPTAsTGg9bnVsbCk7MCE9PVkmJlRoKFkpO1BoPW51bGw7TWg9ITE7WmgoKX1mdW5jdGlvbiAkaChhLGIpe1c/QShcIjI1M1wiKTp2b2lkIDA7WD1hO1k9YjtWaChhLGIsITEpO1doKCk7WmgoKX1cbmZ1bmN0aW9uIFpoKCl7Rmg9MDtpZihudWxsIT09Umgpe3ZhciBhPVJoO1JoPW51bGw7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtOaHx8KE5oPSEwLE9oPWQpfX19aWYoTmgpdGhyb3cgYT1PaCxPaD1udWxsLE5oPSExLGE7fWZ1bmN0aW9uIFZoKGEsYixjKXtXP0EoXCIyNDVcIik6dm9pZCAwO1c9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9haShhLGMsYik6KGM9eWgoYSxiLCEwKSxudWxsIT09YyYmKHpoKCk/YS5maW5pc2hlZFdvcms9YzphaShhLGMsYikpKSk6KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/YWkoYSxjLGIpOihjPXloKGEsYiwhMSksbnVsbCE9PWMmJmFpKGEsYyxiKSkpO1c9ITF9XG5mdW5jdGlvbiBhaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1SaD9SaD1bZF06UmgucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO3RoPXBoPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9BKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0EoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7bWcoKTtlYy5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBlPWIuZmlyc3RFZmZlY3R9ZWxzZSBlPWI7ZWxzZSBlPWIuZmlyc3RFZmZlY3Q7YWY9SGQ7dmFyIGY9ZGEoKTtpZihVZChmKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbmYpdmFyIGc9e3N0YXJ0OmYuc2VsZWN0aW9uU3RhcnQsZW5kOmYuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBoPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtpZihoJiYwIT09aC5yYW5nZUNvdW50KXtnPWguYW5jaG9yTm9kZTt2YXIgaz1oLmFuY2hvck9mZnNldCxuPWguZm9jdXNOb2RlO2g9aC5mb2N1c09mZnNldDt0cnl7Zy5ub2RlVHlwZSxuLm5vZGVUeXBlfWNhdGNoKFdhKXtnPW51bGw7YnJlYWsgYX12YXIgcj0wLHc9LTEsUD0tMSxuYz0wLEpkPTAsRT1mLHQ9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB4Ozspe0UhPT1nfHwwIT09ayYmMyE9PUUubm9kZVR5cGV8fCh3PXIrayk7RSE9PW58fDAhPT1oJiYzIT09RS5ub2RlVHlwZXx8KFA9citoKTszPT09RS5ub2RlVHlwZSYmKHIrPUUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh4PUUuZmlyc3RDaGlsZCkpYnJlYWs7dD1FO0U9eH1mb3IoOzspe2lmKEU9PT1mKWJyZWFrIGI7dD09PWcmJlxuKytuYz09PWsmJih3PXIpO3Q9PT1uJiYrK0pkPT09aCYmKFA9cik7aWYobnVsbCE9PSh4PUUubmV4dFNpYmxpbmcpKWJyZWFrO0U9dDt0PUUucGFyZW50Tm9kZX1FPXh9Zz0tMT09PXd8fC0xPT09UD9udWxsOntzdGFydDp3LGVuZDpQfX1lbHNlIGc9bnVsbH1nPWd8fHtzdGFydDowLGVuZDowfX1lbHNlIGc9bnVsbDtiZj17Zm9jdXNlZEVsZW06ZixzZWxlY3Rpb25SYW5nZTpnfTtJZCghMSk7Zm9yKFU9ZTtudWxsIT09VTspe2Y9ITE7Zz12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXtpZihVLmVmZmVjdFRhZyYyNTYpe3ZhciB1PVUuYWx0ZXJuYXRlO2s9VTtzd2l0Y2goay50YWcpe2Nhc2UgMjppZihrLmVmZmVjdFRhZyYyNTYmJm51bGwhPT11KXt2YXIgeT11Lm1lbW9pemVkUHJvcHMsRD11Lm1lbW9pemVkU3RhdGUsamE9ay5zdGF0ZU5vZGU7amEucHJvcHM9ay5tZW1vaXplZFByb3BzO2phLnN0YXRlPWsubWVtb2l6ZWRTdGF0ZTt2YXIgbWk9amEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxcbkQpO2phLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPW1pfWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkEoXCIxNjNcIil9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7Zj0hMCxnPVdhfWYmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCxaZyhVLGcpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1mb3IoVT1lO251bGwhPT1VOyl7dT0hMTt5PXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09VTspe3ZhciBxPVUuZWZmZWN0VGFnO3EmMTYmJktlKFUuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgej1VLmFsdGVybmF0ZTtpZihudWxsIT09eil7dmFyIGw9ei5yZWY7bnVsbCE9PWwmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbD9sKG51bGwpOmwuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTQpe2Nhc2UgMjpjaChVKTtVLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OmNoKFUpO1UuZWZmZWN0VGFnJj0tMztkaChVLmFsdGVybmF0ZSxcblUpO2JyZWFrO2Nhc2UgNDpkaChVLmFsdGVybmF0ZSxVKTticmVhaztjYXNlIDg6RD1VLGFoKEQpLEQucmV0dXJuPW51bGwsRC5jaGlsZD1udWxsLEQuYWx0ZXJuYXRlJiYoRC5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZS5yZXR1cm49bnVsbCl9VT1VLm5leHRFZmZlY3R9fWNhdGNoKFdhKXt1PSEwLHk9V2F9dSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUseSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWw9YmY7ej1kYSgpO3E9bC5mb2N1c2VkRWxlbTt1PWwuc2VsZWN0aW9uUmFuZ2U7aWYoeiE9PXEmJmZhKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PXUmJlVkKHEpJiYoej11LnN0YXJ0LGw9dS5lbmQsdm9pZCAwPT09bCYmKGw9eiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD16LHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKGwscS52YWx1ZS5sZW5ndGgpKTp3aW5kb3cuZ2V0U2VsZWN0aW9uJiYoej13aW5kb3cuZ2V0U2VsZWN0aW9uKCksXG55PXFbbGIoKV0ubGVuZ3RoLGw9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP2w6TWF0aC5taW4odS5lbmQseSksIXouZXh0ZW5kJiZsPnUmJih5PXUsdT1sLGw9eSkseT1UZChxLGwpLEQ9VGQocSx1KSx5JiZEJiYoMSE9PXoucmFuZ2VDb3VudHx8ei5hbmNob3JOb2RlIT09eS5ub2RlfHx6LmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHx6LmZvY3VzTm9kZSE9PUQubm9kZXx8ei5mb2N1c09mZnNldCE9PUQub2Zmc2V0KSYmKGphPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksamEuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSx6LnJlbW92ZUFsbFJhbmdlcygpLGw+dT8oei5hZGRSYW5nZShqYSksei5leHRlbmQoRC5ub2RlLEQub2Zmc2V0KSk6KGphLnNldEVuZChELm5vZGUsRC5vZmZzZXQpLHouYWRkUmFuZ2UoamEpKSkpKTt6PVtdO2ZvcihsPXE7bD1sLnBhcmVudE5vZGU7KTE9PT1sLm5vZGVUeXBlJiZ6LnB1c2goe2VsZW1lbnQ6bCxsZWZ0Omwuc2Nyb2xsTGVmdCxcbnRvcDpsLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPHoubGVuZ3RoO3ErKylsPXpbcV0sbC5lbGVtZW50LnNjcm9sbExlZnQ9bC5sZWZ0LGwuZWxlbWVudC5zY3JvbGxUb3A9bC50b3B9YmY9bnVsbDtJZChhZik7YWY9bnVsbDtjLmN1cnJlbnQ9Yjtmb3IoVT1lO251bGwhPT1VOyl7ZT0hMTtxPXZvaWQgMDt0cnl7Zm9yKHo9ZDtudWxsIT09VTspe3ZhciBoZz1VLmVmZmVjdFRhZztpZihoZyYzNil7dmFyIG9jPVUuYWx0ZXJuYXRlO2w9VTt1PXo7c3dpdGNoKGwudGFnKXtjYXNlIDI6dmFyIGNhPWwuc3RhdGVOb2RlO2lmKGwuZWZmZWN0VGFnJjQpaWYobnVsbD09PW9jKWNhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxjYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsY2EuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciB3aT1vYy5tZW1vaXplZFByb3BzLHhpPW9jLm1lbW9pemVkU3RhdGU7Y2EucHJvcHM9bC5tZW1vaXplZFByb3BzO1xuY2Euc3RhdGU9bC5tZW1vaXplZFN0YXRlO2NhLmNvbXBvbmVudERpZFVwZGF0ZSh3aSx4aSxjYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIE5nPWwudXBkYXRlUXVldWU7bnVsbCE9PU5nJiYoY2EucHJvcHM9bC5tZW1vaXplZFByb3BzLGNhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxXZihsLE5nLGNhLHUpKTticmVhaztjYXNlIDM6dmFyIE9nPWwudXBkYXRlUXVldWU7aWYobnVsbCE9PU9nKXt5PW51bGw7aWYobnVsbCE9PWwuY2hpbGQpc3dpdGNoKGwuY2hpbGQudGFnKXtjYXNlIDU6eT1sLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDI6eT1sLmNoaWxkLnN0YXRlTm9kZX1XZihsLE9nLHksdSl9YnJlYWs7Y2FzZSA1OnZhciB5aT1sLnN0YXRlTm9kZTtudWxsPT09b2MmJmwuZWZmZWN0VGFnJjQmJmNmKGwudHlwZSxsLm1lbW9pemVkUHJvcHMpJiZ5aS5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO1xuZGVmYXVsdDpBKFwiMTYzXCIpfX1pZihoZyYxMjgpe2w9dm9pZCAwO3ZhciB5Yz1VLnJlZjtpZihudWxsIT09eWMpe3ZhciBQZz1VLnN0YXRlTm9kZTtzd2l0Y2goVS50YWcpe2Nhc2UgNTpsPVBnO2JyZWFrO2RlZmF1bHQ6bD1QZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgeWM/eWMobCk6eWMuY3VycmVudD1sfX12YXIgemk9VS5uZXh0RWZmZWN0O1UubmV4dEVmZmVjdD1udWxsO1U9eml9fWNhdGNoKFdhKXtlPSEwLHE9V2F9ZSYmKG51bGw9PT1VP0EoXCIxNzhcIik6dm9pZCAwLFpnKFUscSksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfXBoPXRoPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZiYmSmYoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoaGg9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIHpoKCl7cmV0dXJuIG51bGw9PT1QaHx8UGgudGltZVJlbWFpbmluZygpPlNoPyExOk1oPSEwfVxuZnVuY3Rpb24gZmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT0wO05ofHwoTmg9ITAsT2g9YSl9ZnVuY3Rpb24gQmgoYSl7bnVsbD09PVg/QShcIjI0NlwiKTp2b2lkIDA7WC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1hfWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxXaCgpfX1mdW5jdGlvbiBjaShhLGIpe2lmKFomJiFRaCl7UWg9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7UWg9ITF9fXJldHVybiBhKGIpfWZ1bmN0aW9uIGRpKGEsYil7Vz9BKFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBJaChhLGIpfWZpbmFsbHl7Wj1jLFdoKCl9fVxuZnVuY3Rpb24gZWkoYSxiLGMpe2lmKERoKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PUVofHwoWWgoRWgsITEsbnVsbCksRWg9MCk7dmFyIGQ9RGgsZT1aO1o9RGg9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtEaD1kLChaPWUpfHxXfHxXaCgpfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1aO1o9ITA7dHJ5e0loKGEpfWZpbmFsbHl7KFo9Yil8fFd8fFloKDEsITEsbnVsbCl9fVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGc7Yjp7Mj09PWpkKGMpJiYyPT09Yy50YWc/dm9pZCAwOkEoXCIxNzBcIik7Zm9yKGc9YzszIT09Zy50YWc7KXtpZihxZihnKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifShnPWcucmV0dXJuKT92b2lkIDA6QShcIjE3MVwiKX1nPWcuc3RhdGVOb2RlLmNvbnRleHR9Yz1xZihjKT92ZihjLGcpOmd9ZWxzZSBjPWhhO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPU9mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtRZihmLGUsZCk7b2coZixkKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0EoXCIxODhcIik6QShcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1tZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX1mdW5jdGlvbiBpaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1tZygpO2U9bmcoZixlKTtyZXR1cm4gZ2koYSxiLGMsZSxkKX1mdW5jdGlvbiBqaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24ga2koYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSWYocCh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPW1kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfVxudmFyIGxpPXt1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lOmdpLGNyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVmKGEsYixjKX0sdXBkYXRlQ29udGFpbmVyOmlpLGZsdXNoUm9vdDokaCxyZXF1ZXN0V29yazpBaCxjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uOkNoLGJhdGNoZWRVcGRhdGVzOmJpLHVuYmF0Y2hlZFVwZGF0ZXM6Y2ksZGVmZXJyZWRVcGRhdGVzOkhoLHN5bmNVcGRhdGVzOkloLGludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1d8fDA9PT1FaHx8KFloKEVoLCExLG51bGwpLEVoPTApfSxmbHVzaENvbnRyb2xsZWQ6ZmksZmx1c2hTeW5jOmRpLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpqaSxmaW5kSG9zdEluc3RhbmNlOmhpLGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGluamVjdEludG9EZXZUb29sczpraX07XG5mdW5jdGlvbiBuaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOmhjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fUtiLmluamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQoJGUpO2Z1bmN0aW9uIG9pKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPUNoKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1cbm9pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOkEoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBwaTtnaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07b2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xub2kucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOkEoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/QShcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTskaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtvaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gcGkoKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1waS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xucGkucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/QShcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07ZnVuY3Rpb24gcWkoYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD1FZihhLGIsYyl9cWkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBwaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7aWkoYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBwaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7aWkobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtxaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgcGk7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO2lpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5xaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgb2kodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiByaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9U2I9bGkuYmF0Y2hlZFVwZGF0ZXM7VGI9bGkuaW50ZXJhY3RpdmVVcGRhdGVzO1ViPWxpLmZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzO1xuZnVuY3Rpb24gc2koYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxaShhLCExLGIpfVxuZnVuY3Rpb24gdGkoYSxiLGMsZCxlKXtyaShjKT92b2lkIDA6QShcIjIwMFwiKTt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWppKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2koYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9amkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fWNpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBqaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gdWkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtyaShiKT92b2lkIDA6QShcIjIwMFwiKTtyZXR1cm4gbmkoYSxiLG51bGwsYyl9XG52YXIgdmk9e2NyZWF0ZVBvcnRhbDp1aSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6aGkoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGkobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9BKFwiMzhcIik6dm9pZCAwO3JldHVybiB0aShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtyaShhKT92b2lkIDA6QShcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGNpKGZ1bmN0aW9uKCl7dGkobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gdWkuYXBwbHkodm9pZCAwLFxuYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6YmksdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOkhoLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczplaSxmbHVzaFN5bmM6ZGksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZpLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpLYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnZhLEV2ZW50UHJvcGFnYXRvcnM6JGEsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlJiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpRYSxSZWFjdERPTUV2ZW50TGlzdGVuZXI6TmR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHFpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07a2koe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOk5hLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuNC4xXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7XG52YXIgQWk9e2RlZmF1bHQ6dml9LEJpPUFpJiZ2aXx8QWk7bW9kdWxlLmV4cG9ydHM9QmkuZGVmYXVsdD9CaS5kZWZhdWx0OkJpO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi40LjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcix0PXI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHg9cj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQseT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx6PXI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsQT1yP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEI9XG5yP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMjtyJiZTeW1ib2wuZm9yKFwicmVhY3QudGltZW91dFwiKTt2YXIgQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX1cbnZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtmdW5jdGlvbiBGKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEcoKXt9XG5HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fEV9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2soSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixlLGMpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUihhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlAubGVuZ3RoJiZQLnB1c2goYSl9XG5mdW5jdGlvbiBTKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitUKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1QoZCxoKTtnKz1TKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVChkLGgrKyksZys9UyhkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBVKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFYoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihOKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBXKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxkKTtudWxsPT1hfHxTKGEsXCJcIixWLGIpO1IoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1RKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFMoYSxcIlwiLFUsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixxLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLHEudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RixQdXJlQ29tcG9uZW50OkgsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnosXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX2NoYW5nZWRCaXRzOjAsX2NoYW5nZWRCaXRzMjowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6eSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpCLHJlbmRlcjphfX0sRnJhZ21lbnQ6dixTdHJpY3RNb2RlOncsdW5zdGFibGVfQXN5bmNNb2RlOkEsdW5zdGFibGVfUHJvZmlsZXI6eCxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1cbmIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi40LjFcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SixcbmFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0P1ouZGVmYXVsdDpaO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiBCYWNrZ3JvdW5kIENvbG9ycyBmb3IgVGlsZXNcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5iZy1tYWluIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcbi5iZy1kYXJrZ3JleSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGQ0ZDRkO1xcbn1cXG4uYmctcGluayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRiZmMzO1xcbn1cXG4uYmctdW5pZnkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2EwZTBlNztcXG59XFxuLmJnLXB1cnBsZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZThiZWU4O1xcbn1cXG4uYmctYmx1ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjVkYWViO1xcbn1cXG4uYmctYmVpZ2Uge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UwZDJjMDtcXG59XFxuLmJnLXllbGxvdyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJkZGExO1xcbn1cXG4vKiBIZWFkZXJWaWV3IFxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLmhlYWRlci12aWV3LWNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjVFN0Q4O1xcbn1cXG4uaGVhZGVyLXZpZXctY29udGFpbmVyIGgxIHtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjhlbTtcXG59XFxuLmhlYWRlci12aWV3LWNvbnRhaW5lciBzbWFsbCB7XFxuICBjb2xvcjogIzgwODA4MDtcXG59XFxuLmhlYWRlci12aWV3LWNvbnRhaW5lciAuaW50cm8ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWluLWhlaWdodDogNzAwcHg7XFxufVxcbi5oZWFkZXItdmlldy1jb250YWluZXIgLmludHJvIC5rYXRlLWxvZ28ge1xcbiAgd2lkdGg6IDRlbTtcXG4gIGhlaWdodDogNGVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMS44ZW07XFxufVxcbi5oZWFkZXItdmlldy1jb250YWluZXIgLmludHJvIHAge1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG59XFxuLmhlYWRlci12aWV3LWNvbnRhaW5lciAuaW50cm86aG92ZXIgLmJ0bi10ZXh0IHtcXG4gIHRyYW5zaXRpb246IDAuM3MgdHJhbnNmb3JtO1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtO1xcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcXG4gIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlO1xcbiAgdHJhbnNpdGlvbi1kZWxheTogMHM7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDAuOSwgMC45KTtcXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7XFxuICAuaGVhZGVyLXZpZXctY29udGFpbmVyIC5pbnRybyAua2F0ZS1sb2dvIHtcXG4gICAgbWF4LXdpZHRoOiAzZW07XFxuICB9XFxuICAuaGVhZGVyLXZpZXctY29udGFpbmVyIC5pbnRybyBwIHtcXG4gICAgZm9udC1zaXplOiAxZW07XFxuICB9XFxufVxcbi8qIE5hdmlnYXRpb25cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5iYWNrZ3JvdW5kIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGNUU3RDg7XFxufVxcbi5uYXYtdmlldy1jb250YWluZXIgLm5hdi13cmFwcGVyIHtcXG4gIHBhZGRpbmctdG9wOiAyNXB4O1xcbn1cXG4ubmF2LXZpZXctY29udGFpbmVyIG5hdiAubG9nbyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxufVxcbi5uYXYtdmlldy1jb250YWluZXIgbmF2IC5sb2dvIGgxIHtcXG4gIGZvbnQtc2l6ZTogMjJweDtcXG4gIGxldHRlci1zcGFjaW5nOiAwLjVweDtcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICBtYXJnaW46IDA7XFxufVxcbi5uYXYtdmlldy1jb250YWluZXIgbmF2IC5sb2dvIGgyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLm5hdi12aWV3LWNvbnRhaW5lciBuYXYgLmxvZ28gaDIge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgZm9udC1zaXplOiAwLjdlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gICAgY29sb3I6ICM4MDgwODA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gIH1cXG59XFxuLyogTWVkaWEgUXVlcmllc1xcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICB3aWR0aDogMTAwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIgLmV4cGVyaWVuY2UtdGl0bGUge1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG59XFxuLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIgLmV4cGVyaWVuY2UtaXRlbSB7XFxuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uZXhwZXJpZW5jZS12aWV3LWNvbnRhaW5lciAuZXhwZXJpZW5jZS1pdGVtIC5leHBlcmllbmNlLWljb24ge1xcbiAgc2l6ZTogNTAlO1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIgLmV4cGVyaWVuY2UtaXRlbSAuZXhwZXJpZW5jZS1pY29uIHtcXG4gICAgc2l6ZTogMTAwJTtcXG4gIH1cXG59XFxuLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIgLmV4cGVyaWVuY2UtaXRlbSAuZXhwZXJpZW5jZS1yb2xlIHtcXG4gIG1hcmdpbjogMTBweCAwIDE1cHggMDtcXG59XFxuLmV4cGVyaWVuY2Utdmlldy1jb250YWluZXIgLmV4cGVyaWVuY2UtaXRlbSAuZXhwZXJpZW5jZS1kZXNjcmlwdGlvbiB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4vKiBQb3J0Zm9saW9cXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5wb3J0Zm9saW8tdmlldy1jb250YWluZXIge1xcbiAgcGFkZGluZzogMDtcXG59XFxuLnBvcnRmb2xpby12aWV3LWNvbnRhaW5lciAuaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5wb3J0Zm9saW8tdmlldy1jb250YWluZXIgLmNhcmQtZGlzcGxheSB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ucG9ydGZvbGlvLXZpZXctY29udGFpbmVyIC5wcm9qZWN0LWNhcmQtaW1nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgbWluLXdpZHRoOiAxMmVtO1xcbn1cXG4ucG9ydGZvbGlvLXZpZXctY29udGFpbmVyIC5jYXJkLWNvbnRhaW5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xcbn1cXG4ucG9ydGZvbGlvLXZpZXctY29udGFpbmVyIC5jYXJkLWNvbnRhaW5lcjpob3ZlciAub3ZlcmxheSB7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG4ucG9ydGZvbGlvLXZpZXctY29udGFpbmVyIC54cy1kaXNwbGF5IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xcbiAgLnBvcnRmb2xpby12aWV3LWNvbnRhaW5lciAuY2FyZC1jb250YWluZXI6aG92ZXIgLm92ZXJsYXkge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcbiAgLnBvcnRmb2xpby12aWV3LWNvbnRhaW5lciAueHMtZGlzcGxheSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBwYWRkaW5nOiAwLjdlbSAxZW07XFxuICB9XFxufVxcbi5wb3J0Zm9saW8tdmlldy1jb250YWluZXIgLm92ZXJsYXkge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG4gIC8qIEJsYWNrIHNlZS10aHJvdWdoICovXFxuICBjb2xvcjogI2YxZjFmMTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyMDBtcyBsaW5lYXI7XFxuICBvcGFjaXR5OiAwO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAxLjFlbTtcXG4gIHBhZGRpbmc6IDFlbTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbi5wb3J0Zm9saW8tdmlldy1jb250YWluZXIgLm92ZXJsYXkgLnByb2plY3Qtc2tpbGwge1xcbiAgYm90dG9tOiAwO1xcbn1cXG4vKiBTa2lsbHNcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5za2lsbHMge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuLnNraWxscyAuc2tpbGxzLWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBtYXJnaW4tYm90dG9tOiAzZW07XFxufVxcbi5za2lsbHMgLnNraWxscy1jb250YWluZXIgLnNraWxsLWxlZnQtcGFuZWwsXFxuLnNraWxscyAuc2tpbGxzLWNvbnRhaW5lciAuc2tpbGwtcmlnaHQtcGFuZWwge1xcbiAgcGFkZGluZzogMS4yZW07XFxufVxcbi5za2lsbHMgLnNraWxscy1jb250YWluZXIgLnNraWxsLWxlZnQtcGFuZWwge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogMTE5OXB4KSB7XFxuICAuc2tpbGxzIC5za2lsbHMtY29udGFpbmVyIC5za2lsbC1sZWZ0LXBhbmVsIHtcXG4gICAgaGVpZ2h0OiAxNGVtO1xcbiAgfVxcbn1cXG4uc2tpbGxzIC5za2lsbHMtY29udGFpbmVyIC5za2lsbC1sZWZ0LXBhbmVsIC5wcm9qZWN0LWxpbmstd3JhcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBtYXJnaW4tdG9wOiAxMGVtO1xcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogNTc2cHgpIHtcXG4gIC5za2lsbHMgLnNraWxscy1jb250YWluZXIgLnNraWxsLWxlZnQtcGFuZWwgLnByb2plY3QtbGluay13cmFwIHtcXG4gICAgbWFyZ2luLXRvcDogLTFlbTtcXG4gIH1cXG59XFxuLnNraWxscyAuc2tpbGxzLWNvbnRhaW5lciAuc2tpbGwtbGVmdC1wYW5lbCAucHJvamVjdC1saW5rLXdyYXAgLnByb2plY3QtbGluayB7XFxuICBjb2xvcjogIzY2NjtcXG4gIG1hcmdpbi1yaWdodDogMC41ZW07XFxuICBmb250LXNpemU6IDAuOWVtO1xcbn1cXG4uc2tpbGxzIC5za2lsbHMtY29udGFpbmVyIC5za2lsbC1sZWZ0LXBhbmVsIC5za2lsbC1kZXNjcmlwdGlvbiB7XFxuICBoZWlnaHQ6IDE4MHB4O1xcbn1cXG4uc2tpbGxzIC5za2lsbHMtY29udGFpbmVyIC5za2lsbC10YWJzLWhvciB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5AbWVkaWEgKG1pbi13aWR0aDogMTE5OXB4KSB7XFxuICAuc2tpbGxzIC5za2lsbHMtY29udGFpbmVyIC5za2lsbC10YWJzLWhvciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxufVxcbi5za2lsbHMgLnNraWxscy1jb250YWluZXIgLnNraWxsLXRhYnMtdmVyIHtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5cHgpIHtcXG4gIC5za2lsbHMgLnNraWxscy1jb250YWluZXIgLnNraWxsLXRhYnMtdmVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG59XFxuLnNraWxscyBwIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNWVtO1xcbn1cXG4uc2tpbGxzIC5zZWxlY3RlZC1Ta2lsbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBDQzk5O1xcbiAgY29sb3I6IHdoaXRlIWltcG9ydGFudDtcXG4gIGZvbnQtc2l6ZTogMC44ZW07XFxufVxcbi5za2lsbHMgYnV0dG9uIHtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDBweDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDBweDtcXG4gIGZvbnQtc2l6ZTogMC43ZW07XFxuICBjb2xvcjogIzU1NSAhaW1wb3J0YW50O1xcbiAgd2lkdGg6IDIwMHB4O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHVuc2V0O1xcbiAgYm9yZGVyOiAwO1xcbiAgY29sb3I6IHVuc2V0O1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogMDtcXG59XFxuLnNraWxscyBidXR0b246aG92ZXIsXFxuLnNraWxscyBidXR0b246Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwQ0M5OTtcXG4gIGNvbG9yOiB3aGl0ZSFpbXBvcnRhbnQ7XFxuICBib3JkZXI6IDA7XFxuICBjb2xvcjogdW5zZXQ7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwO1xcbn1cXG4uc2tpbGxzIGJ1dHRvbjphY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQhaW1wb3J0YW50O1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCFpbXBvcnRhbnQ7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiAxMTk5cHgpIHtcXG4gIC5za2lsbHMgYnV0dG9uIHtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMHB4O1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMHB4O1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgfVxcbn1cXG5AbWVkaWEgKG1heC13aWR0aDogOTkycHgpIHtcXG4gIC5za2lsbHMgYnV0dG9uIHtcXG4gICAgd2lkdGg6IDE3MHB4O1xcbiAgfVxcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiL2ltYWdlcy93b3JrLXdpdGgtbWUuanBlZ1xcXCIpO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xcbiAgcGFkZGluZy1ib3R0b206IDA7XFxufVxcbi53aXRobWUtdmlldy1jb250YWluZXIgLmZpbHRlciB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDUxLCA1MSwgNTEsIDAuNik7XFxuICB6LWluZGV4OiAzO1xcbiAgcGFkZGluZzogMTVlbSAwO1xcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIGRpdixcXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIGgyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIC53aXRobWUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcbi53aXRobWUtdmlldy1jb250YWluZXIgLndpdGhtZSAud2l0aG1lLXdyYXBwZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIC53aXRobWUgLndpdGhtZS13cmFwcGVyIC5saW5lLXNlcGFyYXRvciB7XFxuICBwYWRkaW5nLWJvdHRvbTogMWVtO1xcbiAgbWF4LXdpZHRoOiAyNDBweDtcXG4gIG1hcmdpbjogMCBhdXRvIDIwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi53aXRobWUtdmlldy1jb250YWluZXIgLndpdGhtZSAud2l0aG1lLXdyYXBwZXIgLmxpbmUtc2VwYXJhdG9yOmJlZm9yZSxcXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIC53aXRobWUgLndpdGhtZS13cmFwcGVyIC5saW5lLXNlcGFyYXRvcjphZnRlciB7XFxuICB3aWR0aDogNDAlO1xcbiAgY29udGVudDogXFxcIiBcXFwiO1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmZmY7XFxufVxcbi53aXRobWUtdmlldy1jb250YWluZXIgLndpdGhtZSAud2l0aG1lLXdyYXBwZXIgLmxpbmUtc2VwYXJhdG9yOmJlZm9yZSB7XFxuICBmbG9hdDogbGVmdDtcXG59XFxuLndpdGhtZS12aWV3LWNvbnRhaW5lciAud2l0aG1lIC53aXRobWUtd3JhcHBlciAubGluZS1zZXBhcmF0b3I6YWZ0ZXIge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIC53aXRobWUgLndpdGhtZS13cmFwcGVyIGgyIHtcXG4gIGZvbnQtc2l6ZTogMmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuNWVtO1xcbn1cXG4ud2l0aG1lLXZpZXctY29udGFpbmVyIC53aXRobWUgLndpdGhtZS13cmFwcGVyIHAge1xcbiAgcGFkZGluZzogMDtcXG4gIG1hcmdpbjogMDtcXG59XFxuLyogRm9vdGVyVmlldyBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5mb290ZXItdmlldy1jb250YWluZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZm9vdGVyLXZpZXctY29udGFpbmVyIHVsIGxpIHtcXG4gIHBhZGRpbmc6IDZweCAxMnB4IDZweCAwO1xcbn1cXG4uZm9vdGVyLXZpZXctY29udGFpbmVyIHVsIGEge1xcbiAgcGFkZGluZzogMDtcXG59XFxuLmZvb3Rlci12aWV3LWNvbnRhaW5lciAuZm9vdGVyLXdyYXBwZXIge1xcbiAgcGFkZGluZzogNGVtIDAgM2VtIDA7XFxufVxcbi5mb290ZXItdmlldy1jb250YWluZXIgLmdyb3VwIHtcXG4gIHBhZGRpbmctYm90dG9tOiAzZW07XFxufVxcbi5mb290ZXItdmlldy1jb250YWluZXIgYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG4uZm9vdGVyLXZpZXctY29udGFpbmVyIGE6aG92ZXIge1xcbiAgY29sb3I6ICMwMENDOTk7XFxufVxcbi5mb290ZXItdmlldy1jb250YWluZXIgLmZvb3Rlci1pbnRybyB7XFxuICBtYXJnaW4tYm90dG9tOiAyZW07XFxufVxcbi5mb290ZXItdmlldy1jb250YWluZXIgLmNvcHlyaWdodCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbG9yOiAjY2NjY2NjO1xcbn1cXG4vKiBBYm91dFZpZXcgXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cXG4uYWJvdXQtdmlldy1jb250YWluZXIgaDEge1xcbiAgcGFkZGluZy1ib3R0b206IDAuNWVtO1xcbiAgbWFyZ2luOiAwO1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgcCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC41ZW07XFxuICBtYXJnaW46IDA7XFxufVxcbi5hYm91dC12aWV3LWNvbnRhaW5lciAuYWJvdXQtd3JhcHBlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjVFN0Q4O1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgLmFib3V0LW1haW4ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgLmFib3V0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDIwMHB4O1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgLnByb2ZpbGUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAzLjJlbSAwIDMuMmVtO1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgLnByb2ZpbGUgaW1nIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmFib3V0LXZpZXctY29udGFpbmVyIC5wcm9maWxlIC50ZXh0IHtcXG4gIHBhZGRpbmctdG9wOiAxZW07XFxufVxcbi5hYm91dC12aWV3LWNvbnRhaW5lciAucHJvZmlsZSAubG9nbyB7XFxuICBwYWRkaW5nLWJvdHRvbTogMS4yZW07XFxufVxcbi5hYm91dC12aWV3LWNvbnRhaW5lciAucHJvZmlsZSAubG9nbyBpbWcge1xcbiAgcGFkZGluZy1yaWdodDogMWVtO1xcbn1cXG4uYWJvdXQtdmlldy1jb250YWluZXIgLnByb2ZpbGUgYSB7XFxuICBjb2xvcjogIzAwQ0M5OTtcXG59XFxuLmFib3V0LXZpZXctY29udGFpbmVyIC5wcm9maWxlIGE6aG92ZXIge1xcbiAgY29sb3I6ICMwMDk5NzM7XFxufVxcbi5wcm9qZWN0LWRldGFpbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4ucHJvamVjdC1kZXRhaWwtaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNGNUU3RDg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBjb2xvcjogIzAwMDtcXG59XFxuLnByb2plY3QtZGV0YWlsLWJvZHkge1xcbiAgbWF4LXdpZHRoOiA5OTJweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4ucHJvamVjdC1kZXRhaWwtYm9keSAucm93IHtcXG4gIG1heC13aWR0aDogODUwcHg7XFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcbiAgbWFyZ2luOiAwIGF1dG8gMmVtIGF1dG87XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4ucHJvamVjdC1kZXRhaWwtYm9keSAucm93IGltZyB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcbn1cXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC0yLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtMyxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLTQsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC01LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtNixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLTcsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC04LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtOSxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLTEwLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtMTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC0xMixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtYXV0byxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXNtLTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1zbS0yLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtc20tMyxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXNtLTQsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1zbS01LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtc20tNixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXNtLTcsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1zbS04LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtc20tOSxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXNtLTEwLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtc20tMTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1zbS0xMixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXNtLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtc20tYXV0byxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLW1kLTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1tZC0yLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbWQtMyxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLW1kLTQsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1tZC01LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbWQtNixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLW1kLTcsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1tZC04LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbWQtOSxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLW1kLTEwLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbWQtMTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1tZC0xMixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLW1kLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbWQtYXV0byxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLWxnLTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1sZy0yLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbGctMyxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLWxnLTQsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1sZy01LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbGctNixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLWxnLTcsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1sZy04LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbGctOSxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLWxnLTEwLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbGctMTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC1sZy0xMixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLWxnLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wtbGctYXV0byxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXhsLTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC14bC0yLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wteGwtMyxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXhsLTQsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC14bC01LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wteGwtNixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXhsLTcsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC14bC04LFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wteGwtOSxcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXhsLTEwLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wteGwtMTEsXFxuLnByb2plY3QtZGV0YWlsLWJvZHkgLmNvbC14bC0xMixcXG4ucHJvamVjdC1kZXRhaWwtYm9keSAuY29sLXhsLFxcbi5wcm9qZWN0LWRldGFpbC1ib2R5IC5jb2wteGwtYXV0byB7XFxuICBwYWRkaW5nOiAwIDEwcHggMCAwO1xcbiAgbWF4LWhlaWdodDogNTgwcHg7XFxufVxcbi50aXRsZSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwLjhlbSAwIDAgMDtcXG4gIGZvbnQtc2l6ZTogNThweDtcXG4gIGZvbnQtZmFtaWx5OiBzYXJpZjtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG4ucHJvamVjdC1kZXNjcmlwdGlvbi13cmFwcGVyIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDFlbSAwO1xcbiAgZm9udC1zaXplOiAxLjFlbTtcXG59XFxuLnNlY3Rpb24tdGl0bGUge1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICBsZXR0ZXItc3BhY2luZzogMC4wNmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNnJlbTtcXG4gIGNvbG9yOiAjOGM4ZTk2O1xcbiAgbWFyZ2luLXRvcDogMi41ZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMWVtO1xcbiAgZm9udC1zaXplOiAxLjdlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnNlY3Rpb24tc3VidGl0bGUge1xcbiAgbWF4LXdpZHRoOiA4NTBweDtcXG4gIG1hcmdpbjogMCBhdXRvIDFlbSBhdXRvO1xcbiAgZm9udC1zaXplOiAxLjNlbTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbi5wcm9qZWN0LXBhcmFncmFwaCB7XFxuICBtYXgtd2lkdGg6IDg1MHB4O1xcbiAgbWFyZ2luOiAwIGF1dG8gMWVtIGF1dG87XFxuICBmb250LXNpemU6IDEuMWVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuOGVtO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLnNlcGFyYXRvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjVFN0Q4O1xcbn1cXG4uc2VwYXJhdG9yIC50ZXh0LWNlbnRlciB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiA3cHggMDtcXG59XFxuLnNlcGFyYXRvciBoMiB7XFxuICBjb2xvcjogIzAwMDtcXG59XFxuLnNlcGFyYXRvciBhIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuLnByb2plY3Qtc3VtbWFyeS1pdGVtIHtcXG4gIHBhZGRpbmc6IDEzcHg7XFxuICB3aWR0aDogMTcwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVkYmRkO1xcbiAgbGluZS1oZWlnaHQ6IDEuMmVtO1xcbn1cXG4ucHJvamVjdC1zdW1tYXJ5LWl0ZW0gaW1nIHtcXG4gIGhlaWdodDogMzVweDtcXG59XFxuLnByb2plY3Qtc3VtbWFyeS1pdGVtIC5wcm9qZWN0LXN1bW1hcnktdGl0bGUge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBtYXJnaW46IDVweCAwIDEwcHggMDtcXG59XFxuLnByb2plY3Qtc3VtbWFyeS1pdGVtIC5wcm9qZWN0LXN1bW1hcnktdGV4dCB7XFxuICBmb250LXNpemU6IDAuOGVtO1xcbn1cXG4uZWNzLXVsIHtcXG4gIG1hcmdpbjogMCBhdXRvIDJlbSBhdXRvO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIG1heC13aWR0aDogODUwcHg7XFxufVxcbi5lY3MtdWwgdWwge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBzcXVhcmU7XFxufVxcbi5wcm9qZWN0LWRldGFpbCAudmVydGljYWwtYWxpZ24ge1xcbiAgbWF4LWhlaWdodDogNDAwcHg7XFxuICBsaW5lLWhlaWdodDogNDAwcHg7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG4ucHJvamVjdC1kZXRhaWwgc3BhbiB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG59XFxuLyogVmFyaWFibGVzIFxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuLyogR2xvYmFsIHN0eWxlcyBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbmh0bWwge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuKixcXG4qOmJlZm9yZSxcXG4qOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcbmJvZHkge1xcbiAgbWluLXdpZHRoOiAzNzVweDtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgZm9udC1mYW1pbHk6ICdQb3BwaW5zJywgc2Fucy1zZXJpZiAhaW1wb3J0YW50O1xcbiAgY29sb3I6ICMzMzM7XFxufVxcbi5wYWdlIHtcXG4gIGJvcmRlci10b3A6IDJweCBzb2xpZCAjMDBDQzk5O1xcbn1cXG5oMSB7XFxuICBmb250LXNpemU6IDIuMmVtO1xcbn1cXG5oMiB7XFxuICBmb250LXNpemU6IDEuNGVtO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGZvbnQtZmFtaWx5OiAnQ2FtYm8nLCBzZXJpZiAhaW1wb3J0YW50O1xcbiAgY29sb3I6ICNBOUFCQjA7XFxufVxcbmgzIHtcXG4gIGZvbnQtc2l6ZTogMS4yZW07XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5oNCB7XFxuICBmb250LXNpemU6IDEuMWVtO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxucCB7XFxuICBmb250LXNpemU6IDEuMWVtO1xcbn1cXG5hIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5hOmhvdmVyIHtcXG4gIGNvbG9yOiAjMDBDQzk5O1xcbn1cXG4ucm93IHtcXG4gIHBhZGRpbmctbGVmdDogMWVtO1xcbiAgcGFkZGluZy1yaWdodDogMWVtO1xcbn1cXG5zZWN0aW9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBwYWRkaW5nLWJvdHRvbTogNGVtO1xcbn1cXG4ubm8taG9yLXBhZGRpbmcge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG59XFxuLmgtMzAwIHtcXG4gIGhlaWdodDogMzAwcHg7XFxufVxcbi5wYWQtNSB7XFxuICBwYWRkaW5nOiA1cHg7XFxufVxcbi8qIE92ZXJ3cml0ZSBCb290c3RyYXAgNCBcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xcbi5idG4taW5mbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBDQzk5O1xcbiAgbWFyZ2luLXRvcDogM2VtO1xcbiAgcGFkZGluZzogMWVtIDEuNWVtO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogM2VtO1xcbn1cXG4uYnRuLWluZm86aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwYTM3YTtcXG59XFxuLyogTWVkaWEgUXVlcmllc1xcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXFxuQG1lZGlhIChtaW4td2lkdGg6IDEwMDBweCkge1xcbiAgLmgtNDAwIHtcXG4gICAgaGVpZ2h0OiA0MDBweDtcXG4gIH1cXG59XFxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7XFxuICBoMSB7XFxuICAgIGZvbnQtc2l6ZTogMS44ZW07XFxuICB9XFxuICAuYnRuLWluZm8ge1xcbiAgICBtYXJnaW4tdG9wOiAyZW07XFxuICAgIHBhZGRpbmc6IDAuOGVtIDEuM2VtO1xcbiAgfVxcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyohXFxuICogQm9vdHN0cmFwIHY0LjIuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9yc1xcbiAqIENvcHlyaWdodCAyMDExLTIwMTggVHdpdHRlciwgSW5jLlxcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXFxuICovXFxuOnJvb3Qge1xcbiAgLS1ibHVlOiAjMDA3YmZmO1xcbiAgLS1pbmRpZ286ICM2NjEwZjI7XFxuICAtLXB1cnBsZTogIzZmNDJjMTtcXG4gIC0tcGluazogI2U4M2U4YztcXG4gIC0tcmVkOiAjZGMzNTQ1O1xcbiAgLS1vcmFuZ2U6ICNmZDdlMTQ7XFxuICAtLXllbGxvdzogI2ZmYzEwNztcXG4gIC0tZ3JlZW46ICMyOGE3NDU7XFxuICAtLXRlYWw6ICMyMGM5OTc7XFxuICAtLWN5YW46ICMxN2EyYjg7XFxuICAtLXdoaXRlOiAjZmZmO1xcbiAgLS1ncmF5OiAjNmM3NTdkO1xcbiAgLS1ncmF5LWRhcms6ICMzNDNhNDA7XFxuICAtLXByaW1hcnk6ICMwMDdiZmY7XFxuICAtLXNlY29uZGFyeTogIzZjNzU3ZDtcXG4gIC0tc3VjY2VzczogIzI4YTc0NTtcXG4gIC0taW5mbzogIzE3YTJiODtcXG4gIC0td2FybmluZzogI2ZmYzEwNztcXG4gIC0tZGFuZ2VyOiAjZGMzNTQ1O1xcbiAgLS1saWdodDogI2Y4ZjlmYTtcXG4gIC0tZGFyazogIzM0M2E0MDtcXG4gIC0tYnJlYWtwb2ludC14czogMDtcXG4gIC0tYnJlYWtwb2ludC1zbTogNTc2cHg7XFxuICAtLWJyZWFrcG9pbnQtbWQ6IDc2OHB4O1xcbiAgLS1icmVha3BvaW50LWxnOiA5OTJweDtcXG4gIC0tYnJlYWtwb2ludC14bDogMTIwMHB4O1xcbiAgLS1mb250LWZhbWlseS1zYW5zLXNlcmlmOiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIFxcXCJOb3RvIFNhbnNcXFwiLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgLS1mb250LWZhbWlseS1tb25vc3BhY2U6IFNGTW9uby1SZWd1bGFyLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkxpYmVyYXRpb24gTW9ub1xcXCIsIFxcXCJDb3VyaWVyIE5ld1xcXCIsIG1vbm9zcGFjZTsgfVxcblxcbiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cXG5cXG5odG1sIHtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XFxuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7IH1cXG5cXG5hcnRpY2xlLCBhc2lkZSwgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtYWluLCBuYXYsIHNlY3Rpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIFxcXCJOb3RvIFNhbnNcXFwiLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9XFxuXFxuW3RhYmluZGV4PVxcXCItMVxcXCJdOmZvY3VzIHtcXG4gIG91dGxpbmU6IDAgIWltcG9ydGFudDsgfVxcblxcbmhyIHtcXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbiAgaGVpZ2h0OiAwO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07IH1cXG5cXG5wIHtcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtOyB9XFxuXFxuYWJiclt0aXRsZV0sXFxuYWJicltkYXRhLW9yaWdpbmFsLXRpdGxlXSB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG4gIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkO1xcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XFxuICBjdXJzb3I6IGhlbHA7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbiAgdGV4dC1kZWNvcmF0aW9uLXNraXAtaW5rOiBub25lOyB9XFxuXFxuYWRkcmVzcyB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7IH1cXG5cXG5vbCxcXG51bCxcXG5kbCB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcblxcbm9sIG9sLFxcbnVsIHVsLFxcbm9sIHVsLFxcbnVsIG9sIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7IH1cXG5cXG5kdCB7XFxuICBmb250LXdlaWdodDogNzAwOyB9XFxuXFxuZGQge1xcbiAgbWFyZ2luLWJvdHRvbTogLjVyZW07XFxuICBtYXJnaW4tbGVmdDogMDsgfVxcblxcbmJsb2NrcXVvdGUge1xcbiAgbWFyZ2luOiAwIDAgMXJlbTsgfVxcblxcbmIsXFxuc3Ryb25nIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7IH1cXG5cXG5zbWFsbCB7XFxuICBmb250LXNpemU6IDgwJTsgfVxcblxcbnN1YixcXG5zdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZm9udC1zaXplOiA3NSU7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxcblxcbnN1YiB7XFxuICBib3R0b206IC0uMjVlbTsgfVxcblxcbnN1cCB7XFxuICB0b3A6IC0uNWVtOyB9XFxuXFxuYSB7XFxuICBjb2xvcjogIzAwN2JmZjtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICBhOmhvdmVyIHtcXG4gICAgY29sb3I6ICMwMDU2YjM7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XFxuXFxuYTpub3QoW2hyZWZdKTpub3QoW3RhYmluZGV4XSkge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIGE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmhvdmVyLCBhOm5vdChbaHJlZl0pOm5vdChbdGFiaW5kZXhdKTpmb2N1cyB7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIGE6bm90KFtocmVmXSk6bm90KFt0YWJpbmRleF0pOmZvY3VzIHtcXG4gICAgb3V0bGluZTogMDsgfVxcblxcbnByZSxcXG5jb2RlLFxcbmtiZCxcXG5zYW1wIHtcXG4gIGZvbnQtZmFtaWx5OiBTRk1vbm8tUmVndWxhciwgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7XFxuICBmb250LXNpemU6IDFlbTsgfVxcblxcbnByZSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIG92ZXJmbG93OiBhdXRvOyB9XFxuXFxuZmlndXJlIHtcXG4gIG1hcmdpbjogMCAwIDFyZW07IH1cXG5cXG5pbWcge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxcblxcbnN2ZyB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxcblxcbnRhYmxlIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7IH1cXG5cXG5jYXB0aW9uIHtcXG4gIHBhZGRpbmctdG9wOiAwLjc1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuNzVyZW07XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBjYXB0aW9uLXNpZGU6IGJvdHRvbTsgfVxcblxcbnRoIHtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7IH1cXG5cXG5sYWJlbCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07IH1cXG5cXG5idXR0b24ge1xcbiAgYm9yZGVyLXJhZGl1czogMDsgfVxcblxcbmJ1dHRvbjpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggZG90dGVkO1xcbiAgb3V0bGluZTogNXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yOyB9XFxuXFxuaW5wdXQsXFxuYnV0dG9uLFxcbnNlbGVjdCxcXG5vcHRncm91cCxcXG50ZXh0YXJlYSB7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0OyB9XFxuXFxuYnV0dG9uLFxcbmlucHV0IHtcXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XFxuXFxuYnV0dG9uLFxcbnNlbGVjdCB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgfVxcblxcbmJ1dHRvbixcXG5bdHlwZT1cXFwiYnV0dG9uXFxcIl0sXFxuW3R5cGU9XFxcInJlc2V0XFxcIl0sXFxuW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyB9XFxuXFxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcblt0eXBlPVxcXCJidXR0b25cXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwicmVzZXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcixcXG5bdHlwZT1cXFwic3VibWl0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcGFkZGluZzogMDsgfVxcblxcbmlucHV0W3R5cGU9XFxcImRhdGVcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJ0aW1lXFxcIl0sXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZXRpbWUtbG9jYWxcXFwiXSxcXG5pbnB1dFt0eXBlPVxcXCJtb250aFxcXCJdIHtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbGlzdGJveDsgfVxcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDsgfVxcblxcbmZpZWxkc2V0IHtcXG4gIG1pbi13aWR0aDogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW46IDA7XFxuICBib3JkZXI6IDA7IH1cXG5cXG5sZWdlbmQge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAuNXJlbTtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IH1cXG5cXG5wcm9ncmVzcyB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cXG5cXG5bdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXFxuW3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcXG4gIGhlaWdodDogYXV0bzsgfVxcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXSB7XFxuICBvdXRsaW5lLW9mZnNldDogLTJweDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgfVxcblxcblt0eXBlPVxcXCJzZWFyY2hcXFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cXG5cXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcXG4gIGZvbnQ6IGluaGVyaXQ7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgfVxcblxcbm91dHB1dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG5cXG5zdW1tYXJ5IHtcXG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbnRlbXBsYXRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG5baGlkZGVuXSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXG5cXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LFxcbi5oMSwgLmgyLCAuaDMsIC5oNCwgLmg1LCAuaDYge1xcbiAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuMjtcXG4gIGNvbG9yOiBpbmhlcml0OyB9XFxuXFxuaDEsIC5oMSB7XFxuICBmb250LXNpemU6IDIuNXJlbTsgfVxcblxcbmgyLCAuaDIge1xcbiAgZm9udC1zaXplOiAycmVtOyB9XFxuXFxuaDMsIC5oMyB7XFxuICBmb250LXNpemU6IDEuNzVyZW07IH1cXG5cXG5oNCwgLmg0IHtcXG4gIGZvbnQtc2l6ZTogMS41cmVtOyB9XFxuXFxuaDUsIC5oNSB7XFxuICBmb250LXNpemU6IDEuMjVyZW07IH1cXG5cXG5oNiwgLmg2IHtcXG4gIGZvbnQtc2l6ZTogMXJlbTsgfVxcblxcbi5sZWFkIHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7IH1cXG5cXG4uZGlzcGxheS0xIHtcXG4gIGZvbnQtc2l6ZTogNnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yOyB9XFxuXFxuLmRpc3BsYXktMiB7XFxuICBmb250LXNpemU6IDUuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yOyB9XFxuXFxuLmRpc3BsYXktMyB7XFxuICBmb250LXNpemU6IDQuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yOyB9XFxuXFxuLmRpc3BsYXktNCB7XFxuICBmb250LXNpemU6IDMuNXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBsaW5lLWhlaWdodDogMS4yOyB9XFxuXFxuaHIge1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpOyB9XFxuXFxuc21hbGwsXFxuLnNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogODAlO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDsgfVxcblxcbm1hcmssXFxuLm1hcmsge1xcbiAgcGFkZGluZzogMC4yZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzOyB9XFxuXFxuLmxpc3QtdW5zdHlsZWQge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxcblxcbi5saXN0LWlubGluZSB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBsaXN0LXN0eWxlOiBub25lOyB9XFxuXFxuLmxpc3QtaW5saW5lLWl0ZW0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAubGlzdC1pbmxpbmUtaXRlbTpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07IH1cXG5cXG4uaW5pdGlhbGlzbSB7XFxuICBmb250LXNpemU6IDkwJTtcXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7IH1cXG5cXG4uYmxvY2txdW90ZSB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtOyB9XFxuXFxuLmJsb2NrcXVvdGUtZm9vdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiA4MCU7XFxuICBjb2xvcjogIzZjNzU3ZDsgfVxcbiAgLmJsb2NrcXVvdGUtZm9vdGVyOjpiZWZvcmUge1xcbiAgICBjb250ZW50OiBcXFwiXFxcXDIwMTRcXFxcQTBcXFwiOyB9XFxuXFxuLmltZy1mbHVpZCB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87IH1cXG5cXG4uaW1nLXRodW1ibmFpbCB7XFxuICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBhdXRvOyB9XFxuXFxuLmZpZ3VyZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG5cXG4uZmlndXJlLWltZyB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxuICBsaW5lLWhlaWdodDogMTsgfVxcblxcbi5maWd1cmUtY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDkwJTtcXG4gIGNvbG9yOiAjNmM3NTdkOyB9XFxuXFxuY29kZSB7XFxuICBmb250LXNpemU6IDg3LjUlO1xcbiAgY29sb3I6ICNlODNlOGM7XFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkOyB9XFxuICBhID4gY29kZSB7XFxuICAgIGNvbG9yOiBpbmhlcml0OyB9XFxuXFxua2JkIHtcXG4gIHBhZGRpbmc6IDAuMnJlbSAwLjRyZW07XFxuICBmb250LXNpemU6IDg3LjUlO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyNTI5O1xcbiAgYm9yZGVyLXJhZGl1czogMC4ycmVtOyB9XFxuICBrYmQga2JkIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZm9udC1zaXplOiAxMDAlO1xcbiAgICBmb250LXdlaWdodDogNzAwOyB9XFxuXFxucHJlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgZm9udC1zaXplOiA4Ny41JTtcXG4gIGNvbG9yOiAjMjEyNTI5OyB9XFxuICBwcmUgY29kZSB7XFxuICAgIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gICAgY29sb3I6IGluaGVyaXQ7XFxuICAgIHdvcmQtYnJlYWs6IG5vcm1hbDsgfVxcblxcbi5wcmUtc2Nyb2xsYWJsZSB7XFxuICBtYXgtaGVpZ2h0OiAzNDBweDtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDsgfVxcblxcbi5jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgICAuY29udGFpbmVyIHtcXG4gICAgICBtYXgtd2lkdGg6IDU0MHB4OyB9IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgICAuY29udGFpbmVyIHtcXG4gICAgICBtYXgtd2lkdGg6IDcyMHB4OyB9IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgICAuY29udGFpbmVyIHtcXG4gICAgICBtYXgtd2lkdGg6IDk2MHB4OyB9IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gICAgLmNvbnRhaW5lciB7XFxuICAgICAgbWF4LXdpZHRoOiAxMTQwcHg7IH0gfVxcblxcbi5jb250YWluZXItZmx1aWQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXJpZ2h0OiAxNXB4O1xcbiAgcGFkZGluZy1sZWZ0OiAxNXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87IH1cXG5cXG4ucm93IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBtYXJnaW4tcmlnaHQ6IC0xNXB4O1xcbiAgbWFyZ2luLWxlZnQ6IC0xNXB4OyB9XFxuXFxuLm5vLWd1dHRlcnMge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbiAgbWFyZ2luLWxlZnQ6IDA7IH1cXG4gIC5uby1ndXR0ZXJzID4gLmNvbCxcXG4gIC5uby1ndXR0ZXJzID4gW2NsYXNzKj1cXFwiY29sLVxcXCJdIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuXFxuLmNvbC0xLCAuY29sLTIsIC5jb2wtMywgLmNvbC00LCAuY29sLTUsIC5jb2wtNiwgLmNvbC03LCAuY29sLTgsIC5jb2wtOSwgLmNvbC0xMCwgLmNvbC0xMSwgLmNvbC0xMiwgLmNvbCxcXG4uY29sLWF1dG8sIC5jb2wtc20tMSwgLmNvbC1zbS0yLCAuY29sLXNtLTMsIC5jb2wtc20tNCwgLmNvbC1zbS01LCAuY29sLXNtLTYsIC5jb2wtc20tNywgLmNvbC1zbS04LCAuY29sLXNtLTksIC5jb2wtc20tMTAsIC5jb2wtc20tMTEsIC5jb2wtc20tMTIsIC5jb2wtc20sXFxuLmNvbC1zbS1hdXRvLCAuY29sLW1kLTEsIC5jb2wtbWQtMiwgLmNvbC1tZC0zLCAuY29sLW1kLTQsIC5jb2wtbWQtNSwgLmNvbC1tZC02LCAuY29sLW1kLTcsIC5jb2wtbWQtOCwgLmNvbC1tZC05LCAuY29sLW1kLTEwLCAuY29sLW1kLTExLCAuY29sLW1kLTEyLCAuY29sLW1kLFxcbi5jb2wtbWQtYXV0bywgLmNvbC1sZy0xLCAuY29sLWxnLTIsIC5jb2wtbGctMywgLmNvbC1sZy00LCAuY29sLWxnLTUsIC5jb2wtbGctNiwgLmNvbC1sZy03LCAuY29sLWxnLTgsIC5jb2wtbGctOSwgLmNvbC1sZy0xMCwgLmNvbC1sZy0xMSwgLmNvbC1sZy0xMiwgLmNvbC1sZyxcXG4uY29sLWxnLWF1dG8sIC5jb2wteGwtMSwgLmNvbC14bC0yLCAuY29sLXhsLTMsIC5jb2wteGwtNCwgLmNvbC14bC01LCAuY29sLXhsLTYsIC5jb2wteGwtNywgLmNvbC14bC04LCAuY29sLXhsLTksIC5jb2wteGwtMTAsIC5jb2wteGwtMTEsIC5jb2wteGwtMTIsIC5jb2wteGwsXFxuLmNvbC14bC1hdXRvIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZy1yaWdodDogMTVweDtcXG4gIHBhZGRpbmctbGVmdDogMTVweDsgfVxcblxcbi5jb2wge1xcbiAgZmxleC1iYXNpczogMDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIG1heC13aWR0aDogMTAwJTsgfVxcblxcbi5jb2wtYXV0byB7XFxuICBmbGV4OiAwIDAgYXV0bztcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuXFxuLmNvbC0xIHtcXG4gIGZsZXg6IDAgMCA4LjMzMzMzJTtcXG4gIG1heC13aWR0aDogOC4zMzMzMyU7IH1cXG5cXG4uY29sLTIge1xcbiAgZmxleDogMCAwIDE2LjY2NjY3JTtcXG4gIG1heC13aWR0aDogMTYuNjY2NjclOyB9XFxuXFxuLmNvbC0zIHtcXG4gIGZsZXg6IDAgMCAyNSU7XFxuICBtYXgtd2lkdGg6IDI1JTsgfVxcblxcbi5jb2wtNCB7XFxuICBmbGV4OiAwIDAgMzMuMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiAzMy4zMzMzMyU7IH1cXG5cXG4uY29sLTUge1xcbiAgZmxleDogMCAwIDQxLjY2NjY3JTtcXG4gIG1heC13aWR0aDogNDEuNjY2NjclOyB9XFxuXFxuLmNvbC02IHtcXG4gIGZsZXg6IDAgMCA1MCU7XFxuICBtYXgtd2lkdGg6IDUwJTsgfVxcblxcbi5jb2wtNyB7XFxuICBmbGV4OiAwIDAgNTguMzMzMzMlO1xcbiAgbWF4LXdpZHRoOiA1OC4zMzMzMyU7IH1cXG5cXG4uY29sLTgge1xcbiAgZmxleDogMCAwIDY2LjY2NjY3JTtcXG4gIG1heC13aWR0aDogNjYuNjY2NjclOyB9XFxuXFxuLmNvbC05IHtcXG4gIGZsZXg6IDAgMCA3NSU7XFxuICBtYXgtd2lkdGg6IDc1JTsgfVxcblxcbi5jb2wtMTAge1xcbiAgZmxleDogMCAwIDgzLjMzMzMzJTtcXG4gIG1heC13aWR0aDogODMuMzMzMzMlOyB9XFxuXFxuLmNvbC0xMSB7XFxuICBmbGV4OiAwIDAgOTEuNjY2NjclO1xcbiAgbWF4LXdpZHRoOiA5MS42NjY2NyU7IH1cXG5cXG4uY29sLTEyIHtcXG4gIGZsZXg6IDAgMCAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuXFxuLm9yZGVyLWZpcnN0IHtcXG4gIG9yZGVyOiAtMTsgfVxcblxcbi5vcmRlci1sYXN0IHtcXG4gIG9yZGVyOiAxMzsgfVxcblxcbi5vcmRlci0wIHtcXG4gIG9yZGVyOiAwOyB9XFxuXFxuLm9yZGVyLTEge1xcbiAgb3JkZXI6IDE7IH1cXG5cXG4ub3JkZXItMiB7XFxuICBvcmRlcjogMjsgfVxcblxcbi5vcmRlci0zIHtcXG4gIG9yZGVyOiAzOyB9XFxuXFxuLm9yZGVyLTQge1xcbiAgb3JkZXI6IDQ7IH1cXG5cXG4ub3JkZXItNSB7XFxuICBvcmRlcjogNTsgfVxcblxcbi5vcmRlci02IHtcXG4gIG9yZGVyOiA2OyB9XFxuXFxuLm9yZGVyLTcge1xcbiAgb3JkZXI6IDc7IH1cXG5cXG4ub3JkZXItOCB7XFxuICBvcmRlcjogODsgfVxcblxcbi5vcmRlci05IHtcXG4gIG9yZGVyOiA5OyB9XFxuXFxuLm9yZGVyLTEwIHtcXG4gIG9yZGVyOiAxMDsgfVxcblxcbi5vcmRlci0xMSB7XFxuICBvcmRlcjogMTE7IH1cXG5cXG4ub3JkZXItMTIge1xcbiAgb3JkZXI6IDEyOyB9XFxuXFxuLm9mZnNldC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiA4LjMzMzMzJTsgfVxcblxcbi5vZmZzZXQtMiB7XFxuICBtYXJnaW4tbGVmdDogMTYuNjY2NjclOyB9XFxuXFxuLm9mZnNldC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAyNSU7IH1cXG5cXG4ub2Zmc2V0LTQge1xcbiAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzJTsgfVxcblxcbi5vZmZzZXQtNSB7XFxuICBtYXJnaW4tbGVmdDogNDEuNjY2NjclOyB9XFxuXFxuLm9mZnNldC02IHtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7IH1cXG5cXG4ub2Zmc2V0LTcge1xcbiAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzJTsgfVxcblxcbi5vZmZzZXQtOCB7XFxuICBtYXJnaW4tbGVmdDogNjYuNjY2NjclOyB9XFxuXFxuLm9mZnNldC05IHtcXG4gIG1hcmdpbi1sZWZ0OiA3NSU7IH1cXG5cXG4ub2Zmc2V0LTEwIHtcXG4gIG1hcmdpbi1sZWZ0OiA4My4zMzMzMyU7IH1cXG5cXG4ub2Zmc2V0LTExIHtcXG4gIG1hcmdpbi1sZWZ0OiA5MS42NjY2NyU7IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5jb2wtc20ge1xcbiAgICBmbGV4LWJhc2lzOiAwO1xcbiAgICBmbGV4LWdyb3c6IDE7XFxuICAgIG1heC13aWR0aDogMTAwJTsgfVxcbiAgLmNvbC1zbS1hdXRvIHtcXG4gICAgZmxleDogMCAwIGF1dG87XFxuICAgIHdpZHRoOiBhdXRvO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXG4gIC5jb2wtc20tMSB7XFxuICAgIGZsZXg6IDAgMCA4LjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4LjMzMzMzJTsgfVxcbiAgLmNvbC1zbS0yIHtcXG4gICAgZmxleDogMCAwIDE2LjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiAxNi42NjY2NyU7IH1cXG4gIC5jb2wtc20tMyB7XFxuICAgIGZsZXg6IDAgMCAyNSU7XFxuICAgIG1heC13aWR0aDogMjUlOyB9XFxuICAuY29sLXNtLTQge1xcbiAgICBmbGV4OiAwIDAgMzMuMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDMzLjMzMzMzJTsgfVxcbiAgLmNvbC1zbS01IHtcXG4gICAgZmxleDogMCAwIDQxLjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA0MS42NjY2NyU7IH1cXG4gIC5jb2wtc20tNiB7XFxuICAgIGZsZXg6IDAgMCA1MCU7XFxuICAgIG1heC13aWR0aDogNTAlOyB9XFxuICAuY29sLXNtLTcge1xcbiAgICBmbGV4OiAwIDAgNTguMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDU4LjMzMzMzJTsgfVxcbiAgLmNvbC1zbS04IHtcXG4gICAgZmxleDogMCAwIDY2LjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA2Ni42NjY2NyU7IH1cXG4gIC5jb2wtc20tOSB7XFxuICAgIGZsZXg6IDAgMCA3NSU7XFxuICAgIG1heC13aWR0aDogNzUlOyB9XFxuICAuY29sLXNtLTEwIHtcXG4gICAgZmxleDogMCAwIDgzLjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA4My4zMzMzMyU7IH1cXG4gIC5jb2wtc20tMTEge1xcbiAgICBmbGV4OiAwIDAgOTEuNjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDkxLjY2NjY3JTsgfVxcbiAgLmNvbC1zbS0xMiB7XFxuICAgIGZsZXg6IDAgMCAxMDAlO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXG4gIC5vcmRlci1zbS1maXJzdCB7XFxuICAgIG9yZGVyOiAtMTsgfVxcbiAgLm9yZGVyLXNtLWxhc3Qge1xcbiAgICBvcmRlcjogMTM7IH1cXG4gIC5vcmRlci1zbS0wIHtcXG4gICAgb3JkZXI6IDA7IH1cXG4gIC5vcmRlci1zbS0xIHtcXG4gICAgb3JkZXI6IDE7IH1cXG4gIC5vcmRlci1zbS0yIHtcXG4gICAgb3JkZXI6IDI7IH1cXG4gIC5vcmRlci1zbS0zIHtcXG4gICAgb3JkZXI6IDM7IH1cXG4gIC5vcmRlci1zbS00IHtcXG4gICAgb3JkZXI6IDQ7IH1cXG4gIC5vcmRlci1zbS01IHtcXG4gICAgb3JkZXI6IDU7IH1cXG4gIC5vcmRlci1zbS02IHtcXG4gICAgb3JkZXI6IDY7IH1cXG4gIC5vcmRlci1zbS03IHtcXG4gICAgb3JkZXI6IDc7IH1cXG4gIC5vcmRlci1zbS04IHtcXG4gICAgb3JkZXI6IDg7IH1cXG4gIC5vcmRlci1zbS05IHtcXG4gICAgb3JkZXI6IDk7IH1cXG4gIC5vcmRlci1zbS0xMCB7XFxuICAgIG9yZGVyOiAxMDsgfVxcbiAgLm9yZGVyLXNtLTExIHtcXG4gICAgb3JkZXI6IDExOyB9XFxuICAub3JkZXItc20tMTIge1xcbiAgICBvcmRlcjogMTI7IH1cXG4gIC5vZmZzZXQtc20tMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwOyB9XFxuICAub2Zmc2V0LXNtLTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMyU7IH1cXG4gIC5vZmZzZXQtc20tMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxNi42NjY2NyU7IH1cXG4gIC5vZmZzZXQtc20tMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNSU7IH1cXG4gIC5vZmZzZXQtc20tNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMyU7IH1cXG4gIC5vZmZzZXQtc20tNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA0MS42NjY2NyU7IH1cXG4gIC5vZmZzZXQtc20tNiB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1MCU7IH1cXG4gIC5vZmZzZXQtc20tNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMyU7IH1cXG4gIC5vZmZzZXQtc20tOCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA2Ni42NjY2NyU7IH1cXG4gIC5vZmZzZXQtc20tOSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA3NSU7IH1cXG4gIC5vZmZzZXQtc20tMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMlOyB9XFxuICAub2Zmc2V0LXNtLTExIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDkxLjY2NjY3JTsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuY29sLW1kIHtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXG4gIC5jb2wtbWQtYXV0byB7XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAuY29sLW1kLTEge1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMyU7IH1cXG4gIC5jb2wtbWQtMiB7XFxuICAgIGZsZXg6IDAgMCAxNi42NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjclOyB9XFxuICAuY29sLW1kLTMge1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTsgfVxcbiAgLmNvbC1tZC00IHtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMyU7IH1cXG4gIC5jb2wtbWQtNSB7XFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjclOyB9XFxuICAuY29sLW1kLTYge1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTsgfVxcbiAgLmNvbC1tZC03IHtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMyU7IH1cXG4gIC5jb2wtbWQtOCB7XFxuICAgIGZsZXg6IDAgMCA2Ni42NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjclOyB9XFxuICAuY29sLW1kLTkge1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTsgfVxcbiAgLmNvbC1tZC0xMCB7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMlOyB9XFxuICAuY29sLW1kLTExIHtcXG4gICAgZmxleDogMCAwIDkxLjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NyU7IH1cXG4gIC5jb2wtbWQtMTIge1xcbiAgICBmbGV4OiAwIDAgMTAwJTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAub3JkZXItbWQtZmlyc3Qge1xcbiAgICBvcmRlcjogLTE7IH1cXG4gIC5vcmRlci1tZC1sYXN0IHtcXG4gICAgb3JkZXI6IDEzOyB9XFxuICAub3JkZXItbWQtMCB7XFxuICAgIG9yZGVyOiAwOyB9XFxuICAub3JkZXItbWQtMSB7XFxuICAgIG9yZGVyOiAxOyB9XFxuICAub3JkZXItbWQtMiB7XFxuICAgIG9yZGVyOiAyOyB9XFxuICAub3JkZXItbWQtMyB7XFxuICAgIG9yZGVyOiAzOyB9XFxuICAub3JkZXItbWQtNCB7XFxuICAgIG9yZGVyOiA0OyB9XFxuICAub3JkZXItbWQtNSB7XFxuICAgIG9yZGVyOiA1OyB9XFxuICAub3JkZXItbWQtNiB7XFxuICAgIG9yZGVyOiA2OyB9XFxuICAub3JkZXItbWQtNyB7XFxuICAgIG9yZGVyOiA3OyB9XFxuICAub3JkZXItbWQtOCB7XFxuICAgIG9yZGVyOiA4OyB9XFxuICAub3JkZXItbWQtOSB7XFxuICAgIG9yZGVyOiA5OyB9XFxuICAub3JkZXItbWQtMTAge1xcbiAgICBvcmRlcjogMTA7IH1cXG4gIC5vcmRlci1tZC0xMSB7XFxuICAgIG9yZGVyOiAxMTsgfVxcbiAgLm9yZGVyLW1kLTEyIHtcXG4gICAgb3JkZXI6IDEyOyB9XFxuICAub2Zmc2V0LW1kLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDsgfVxcbiAgLm9mZnNldC1tZC0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMlOyB9XFxuICAub2Zmc2V0LW1kLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjclOyB9XFxuICAub2Zmc2V0LW1kLTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlOyB9XFxuICAub2Zmc2V0LW1kLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMlOyB9XFxuICAub2Zmc2V0LW1kLTUge1xcbiAgICBtYXJnaW4tbGVmdDogNDEuNjY2NjclOyB9XFxuICAub2Zmc2V0LW1kLTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlOyB9XFxuICAub2Zmc2V0LW1kLTcge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMlOyB9XFxuICAub2Zmc2V0LW1kLTgge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NjclOyB9XFxuICAub2Zmc2V0LW1kLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlOyB9XFxuICAub2Zmc2V0LW1kLTEwIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzJTsgfVxcbiAgLm9mZnNldC1tZC0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NyU7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmNvbC1sZyB7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAuY29sLWxnLWF1dG8ge1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgd2lkdGg6IGF1dG87XFxuICAgIG1heC13aWR0aDogMTAwJTsgfVxcbiAgLmNvbC1sZy0xIHtcXG4gICAgZmxleDogMCAwIDguMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDguMzMzMzMlOyB9XFxuICAuY29sLWxnLTIge1xcbiAgICBmbGV4OiAwIDAgMTYuNjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDE2LjY2NjY3JTsgfVxcbiAgLmNvbC1sZy0zIHtcXG4gICAgZmxleDogMCAwIDI1JTtcXG4gICAgbWF4LXdpZHRoOiAyNSU7IH1cXG4gIC5jb2wtbGctNCB7XFxuICAgIGZsZXg6IDAgMCAzMy4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogMzMuMzMzMzMlOyB9XFxuICAuY29sLWxnLTUge1xcbiAgICBmbGV4OiAwIDAgNDEuNjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDQxLjY2NjY3JTsgfVxcbiAgLmNvbC1sZy02IHtcXG4gICAgZmxleDogMCAwIDUwJTtcXG4gICAgbWF4LXdpZHRoOiA1MCU7IH1cXG4gIC5jb2wtbGctNyB7XFxuICAgIGZsZXg6IDAgMCA1OC4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogNTguMzMzMzMlOyB9XFxuICAuY29sLWxnLTgge1xcbiAgICBmbGV4OiAwIDAgNjYuNjY2NjclO1xcbiAgICBtYXgtd2lkdGg6IDY2LjY2NjY3JTsgfVxcbiAgLmNvbC1sZy05IHtcXG4gICAgZmxleDogMCAwIDc1JTtcXG4gICAgbWF4LXdpZHRoOiA3NSU7IH1cXG4gIC5jb2wtbGctMTAge1xcbiAgICBmbGV4OiAwIDAgODMuMzMzMzMlO1xcbiAgICBtYXgtd2lkdGg6IDgzLjMzMzMzJTsgfVxcbiAgLmNvbC1sZy0xMSB7XFxuICAgIGZsZXg6IDAgMCA5MS42NjY2NyU7XFxuICAgIG1heC13aWR0aDogOTEuNjY2NjclOyB9XFxuICAuY29sLWxnLTEyIHtcXG4gICAgZmxleDogMCAwIDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTsgfVxcbiAgLm9yZGVyLWxnLWZpcnN0IHtcXG4gICAgb3JkZXI6IC0xOyB9XFxuICAub3JkZXItbGctbGFzdCB7XFxuICAgIG9yZGVyOiAxMzsgfVxcbiAgLm9yZGVyLWxnLTAge1xcbiAgICBvcmRlcjogMDsgfVxcbiAgLm9yZGVyLWxnLTEge1xcbiAgICBvcmRlcjogMTsgfVxcbiAgLm9yZGVyLWxnLTIge1xcbiAgICBvcmRlcjogMjsgfVxcbiAgLm9yZGVyLWxnLTMge1xcbiAgICBvcmRlcjogMzsgfVxcbiAgLm9yZGVyLWxnLTQge1xcbiAgICBvcmRlcjogNDsgfVxcbiAgLm9yZGVyLWxnLTUge1xcbiAgICBvcmRlcjogNTsgfVxcbiAgLm9yZGVyLWxnLTYge1xcbiAgICBvcmRlcjogNjsgfVxcbiAgLm9yZGVyLWxnLTcge1xcbiAgICBvcmRlcjogNzsgfVxcbiAgLm9yZGVyLWxnLTgge1xcbiAgICBvcmRlcjogODsgfVxcbiAgLm9yZGVyLWxnLTkge1xcbiAgICBvcmRlcjogOTsgfVxcbiAgLm9yZGVyLWxnLTEwIHtcXG4gICAgb3JkZXI6IDEwOyB9XFxuICAub3JkZXItbGctMTEge1xcbiAgICBvcmRlcjogMTE7IH1cXG4gIC5vcmRlci1sZy0xMiB7XFxuICAgIG9yZGVyOiAxMjsgfVxcbiAgLm9mZnNldC1sZy0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7IH1cXG4gIC5vZmZzZXQtbGctMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4LjMzMzMzJTsgfVxcbiAgLm9mZnNldC1sZy0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY3JTsgfVxcbiAgLm9mZnNldC1sZy0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDI1JTsgfVxcbiAgLm9mZnNldC1sZy00IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzJTsgfVxcbiAgLm9mZnNldC1sZy01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY3JTsgfVxcbiAgLm9mZnNldC1sZy02IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDUwJTsgfVxcbiAgLm9mZnNldC1sZy03IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzJTsgfVxcbiAgLm9mZnNldC1sZy04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY3JTsgfVxcbiAgLm9mZnNldC1sZy05IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDc1JTsgfVxcbiAgLm9mZnNldC1sZy0xMCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA4My4zMzMzMyU7IH1cXG4gIC5vZmZzZXQtbGctMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjclOyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuY29sLXhsIHtcXG4gICAgZmxleC1iYXNpczogMDtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgICBtYXgtd2lkdGg6IDEwMCU7IH1cXG4gIC5jb2wteGwtYXV0byB7XFxuICAgIGZsZXg6IDAgMCBhdXRvO1xcbiAgICB3aWR0aDogYXV0bztcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAuY29sLXhsLTEge1xcbiAgICBmbGV4OiAwIDAgOC4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMyU7IH1cXG4gIC5jb2wteGwtMiB7XFxuICAgIGZsZXg6IDAgMCAxNi42NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjclOyB9XFxuICAuY29sLXhsLTMge1xcbiAgICBmbGV4OiAwIDAgMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTsgfVxcbiAgLmNvbC14bC00IHtcXG4gICAgZmxleDogMCAwIDMzLjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMyU7IH1cXG4gIC5jb2wteGwtNSB7XFxuICAgIGZsZXg6IDAgMCA0MS42NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjclOyB9XFxuICAuY29sLXhsLTYge1xcbiAgICBmbGV4OiAwIDAgNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTsgfVxcbiAgLmNvbC14bC03IHtcXG4gICAgZmxleDogMCAwIDU4LjMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMyU7IH1cXG4gIC5jb2wteGwtOCB7XFxuICAgIGZsZXg6IDAgMCA2Ni42NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjclOyB9XFxuICAuY29sLXhsLTkge1xcbiAgICBmbGV4OiAwIDAgNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTsgfVxcbiAgLmNvbC14bC0xMCB7XFxuICAgIGZsZXg6IDAgMCA4My4zMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMlOyB9XFxuICAuY29sLXhsLTExIHtcXG4gICAgZmxleDogMCAwIDkxLjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NyU7IH1cXG4gIC5jb2wteGwtMTIge1xcbiAgICBmbGV4OiAwIDAgMTAwJTtcXG4gICAgbWF4LXdpZHRoOiAxMDAlOyB9XFxuICAub3JkZXIteGwtZmlyc3Qge1xcbiAgICBvcmRlcjogLTE7IH1cXG4gIC5vcmRlci14bC1sYXN0IHtcXG4gICAgb3JkZXI6IDEzOyB9XFxuICAub3JkZXIteGwtMCB7XFxuICAgIG9yZGVyOiAwOyB9XFxuICAub3JkZXIteGwtMSB7XFxuICAgIG9yZGVyOiAxOyB9XFxuICAub3JkZXIteGwtMiB7XFxuICAgIG9yZGVyOiAyOyB9XFxuICAub3JkZXIteGwtMyB7XFxuICAgIG9yZGVyOiAzOyB9XFxuICAub3JkZXIteGwtNCB7XFxuICAgIG9yZGVyOiA0OyB9XFxuICAub3JkZXIteGwtNSB7XFxuICAgIG9yZGVyOiA1OyB9XFxuICAub3JkZXIteGwtNiB7XFxuICAgIG9yZGVyOiA2OyB9XFxuICAub3JkZXIteGwtNyB7XFxuICAgIG9yZGVyOiA3OyB9XFxuICAub3JkZXIteGwtOCB7XFxuICAgIG9yZGVyOiA4OyB9XFxuICAub3JkZXIteGwtOSB7XFxuICAgIG9yZGVyOiA5OyB9XFxuICAub3JkZXIteGwtMTAge1xcbiAgICBvcmRlcjogMTA7IH1cXG4gIC5vcmRlci14bC0xMSB7XFxuICAgIG9yZGVyOiAxMTsgfVxcbiAgLm9yZGVyLXhsLTEyIHtcXG4gICAgb3JkZXI6IDEyOyB9XFxuICAub2Zmc2V0LXhsLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDsgfVxcbiAgLm9mZnNldC14bC0xIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDguMzMzMzMlOyB9XFxuICAub2Zmc2V0LXhsLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMTYuNjY2NjclOyB9XFxuICAub2Zmc2V0LXhsLTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlOyB9XFxuICAub2Zmc2V0LXhsLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMzMuMzMzMzMlOyB9XFxuICAub2Zmc2V0LXhsLTUge1xcbiAgICBtYXJnaW4tbGVmdDogNDEuNjY2NjclOyB9XFxuICAub2Zmc2V0LXhsLTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlOyB9XFxuICAub2Zmc2V0LXhsLTcge1xcbiAgICBtYXJnaW4tbGVmdDogNTguMzMzMzMlOyB9XFxuICAub2Zmc2V0LXhsLTgge1xcbiAgICBtYXJnaW4tbGVmdDogNjYuNjY2NjclOyB9XFxuICAub2Zmc2V0LXhsLTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlOyB9XFxuICAub2Zmc2V0LXhsLTEwIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDgzLjMzMzMzJTsgfVxcbiAgLm9mZnNldC14bC0xMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiA5MS42NjY2NyU7IH0gfVxcblxcbi50YWJsZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgLnRhYmxlIHRoLFxcbiAgLnRhYmxlIHRkIHtcXG4gICAgcGFkZGluZzogMC43NXJlbTtcXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNkZWUyZTY7IH1cXG4gIC50YWJsZSB0aGVhZCB0aCB7XFxuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XFxuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjZGVlMmU2OyB9XFxuICAudGFibGUgdGJvZHkgKyB0Ym9keSB7XFxuICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCAjZGVlMmU2OyB9XFxuICAudGFibGUgLnRhYmxlIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcblxcbi50YWJsZS1zbSB0aCxcXG4udGFibGUtc20gdGQge1xcbiAgcGFkZGluZzogMC4zcmVtOyB9XFxuXFxuLnRhYmxlLWJvcmRlcmVkIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7IH1cXG4gIC50YWJsZS1ib3JkZXJlZCB0aCxcXG4gIC50YWJsZS1ib3JkZXJlZCB0ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTY7IH1cXG4gIC50YWJsZS1ib3JkZXJlZCB0aGVhZCB0aCxcXG4gIC50YWJsZS1ib3JkZXJlZCB0aGVhZCB0ZCB7XFxuICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDJweDsgfVxcblxcbi50YWJsZS1ib3JkZXJsZXNzIHRoLFxcbi50YWJsZS1ib3JkZXJsZXNzIHRkLFxcbi50YWJsZS1ib3JkZXJsZXNzIHRoZWFkIHRoLFxcbi50YWJsZS1ib3JkZXJsZXNzIHRib2R5ICsgdGJvZHkge1xcbiAgYm9yZGVyOiAwOyB9XFxuXFxuLnRhYmxlLXN0cmlwZWQgdGJvZHkgdHI6bnRoLW9mLXR5cGUob2RkKSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDUpOyB9XFxuXFxuLnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNzUpOyB9XFxuXFxuLnRhYmxlLXByaW1hcnksXFxuLnRhYmxlLXByaW1hcnkgPiB0aCxcXG4udGFibGUtcHJpbWFyeSA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiOGRhZmY7IH1cXG5cXG4udGFibGUtcHJpbWFyeSB0aCxcXG4udGFibGUtcHJpbWFyeSB0ZCxcXG4udGFibGUtcHJpbWFyeSB0aGVhZCB0aCxcXG4udGFibGUtcHJpbWFyeSB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogIzdhYmFmZjsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtcHJpbWFyeTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOWZjZGZmOyB9XFxuICAudGFibGUtaG92ZXIgLnRhYmxlLXByaW1hcnk6aG92ZXIgPiB0ZCxcXG4gIC50YWJsZS1ob3ZlciAudGFibGUtcHJpbWFyeTpob3ZlciA+IHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjsgfVxcblxcbi50YWJsZS1zZWNvbmRhcnksXFxuLnRhYmxlLXNlY29uZGFyeSA+IHRoLFxcbi50YWJsZS1zZWNvbmRhcnkgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDZkOGRiOyB9XFxuXFxuLnRhYmxlLXNlY29uZGFyeSB0aCxcXG4udGFibGUtc2Vjb25kYXJ5IHRkLFxcbi50YWJsZS1zZWNvbmRhcnkgdGhlYWQgdGgsXFxuLnRhYmxlLXNlY29uZGFyeSB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogI2IzYjdiYjsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjOGNiY2Y7IH1cXG4gIC50YWJsZS1ob3ZlciAudGFibGUtc2Vjb25kYXJ5OmhvdmVyID4gdGQsXFxuICAudGFibGUtaG92ZXIgLnRhYmxlLXNlY29uZGFyeTpob3ZlciA+IHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2M4Y2JjZjsgfVxcblxcbi50YWJsZS1zdWNjZXNzLFxcbi50YWJsZS1zdWNjZXNzID4gdGgsXFxuLnRhYmxlLXN1Y2Nlc3MgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNlNmNiOyB9XFxuXFxuLnRhYmxlLXN1Y2Nlc3MgdGgsXFxuLnRhYmxlLXN1Y2Nlc3MgdGQsXFxuLnRhYmxlLXN1Y2Nlc3MgdGhlYWQgdGgsXFxuLnRhYmxlLXN1Y2Nlc3MgdGJvZHkgKyB0Ym9keSB7XFxuICBib3JkZXItY29sb3I6ICM4ZmQxOWU7IH1cXG5cXG4udGFibGUtaG92ZXIgLnRhYmxlLXN1Y2Nlc3M6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IxZGZiYjsgfVxcbiAgLnRhYmxlLWhvdmVyIC50YWJsZS1zdWNjZXNzOmhvdmVyID4gdGQsXFxuICAudGFibGUtaG92ZXIgLnRhYmxlLXN1Y2Nlc3M6aG92ZXIgPiB0aCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiMWRmYmI7IH1cXG5cXG4udGFibGUtaW5mbyxcXG4udGFibGUtaW5mbyA+IHRoLFxcbi50YWJsZS1pbmZvID4gdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JlZTVlYjsgfVxcblxcbi50YWJsZS1pbmZvIHRoLFxcbi50YWJsZS1pbmZvIHRkLFxcbi50YWJsZS1pbmZvIHRoZWFkIHRoLFxcbi50YWJsZS1pbmZvIHRib2R5ICsgdGJvZHkge1xcbiAgYm9yZGVyLWNvbG9yOiAjODZjZmRhOyB9XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhYmRkZTU7IH1cXG4gIC50YWJsZS1ob3ZlciAudGFibGUtaW5mbzpob3ZlciA+IHRkLFxcbiAgLnRhYmxlLWhvdmVyIC50YWJsZS1pbmZvOmhvdmVyID4gdGgge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWJkZGU1OyB9XFxuXFxuLnRhYmxlLXdhcm5pbmcsXFxuLnRhYmxlLXdhcm5pbmcgPiB0aCxcXG4udGFibGUtd2FybmluZyA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmVlYmE7IH1cXG5cXG4udGFibGUtd2FybmluZyB0aCxcXG4udGFibGUtd2FybmluZyB0ZCxcXG4udGFibGUtd2FybmluZyB0aGVhZCB0aCxcXG4udGFibGUtd2FybmluZyB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogI2ZmZGY3ZTsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlOGExOyB9XFxuICAudGFibGUtaG92ZXIgLnRhYmxlLXdhcm5pbmc6aG92ZXIgPiB0ZCxcXG4gIC50YWJsZS1ob3ZlciAudGFibGUtd2FybmluZzpob3ZlciA+IHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZThhMTsgfVxcblxcbi50YWJsZS1kYW5nZXIsXFxuLnRhYmxlLWRhbmdlciA+IHRoLFxcbi50YWJsZS1kYW5nZXIgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVjNmNiOyB9XFxuXFxuLnRhYmxlLWRhbmdlciB0aCxcXG4udGFibGUtZGFuZ2VyIHRkLFxcbi50YWJsZS1kYW5nZXIgdGhlYWQgdGgsXFxuLnRhYmxlLWRhbmdlciB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogI2VkOTY5ZTsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtZGFuZ2VyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWIwYjc7IH1cXG4gIC50YWJsZS1ob3ZlciAudGFibGUtZGFuZ2VyOmhvdmVyID4gdGQsXFxuICAudGFibGUtaG92ZXIgLnRhYmxlLWRhbmdlcjpob3ZlciA+IHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxYjBiNzsgfVxcblxcbi50YWJsZS1saWdodCxcXG4udGFibGUtbGlnaHQgPiB0aCxcXG4udGFibGUtbGlnaHQgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRmZGZlOyB9XFxuXFxuLnRhYmxlLWxpZ2h0IHRoLFxcbi50YWJsZS1saWdodCB0ZCxcXG4udGFibGUtbGlnaHQgdGhlYWQgdGgsXFxuLnRhYmxlLWxpZ2h0IHRib2R5ICsgdGJvZHkge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmJmY2ZjOyB9XFxuXFxuLnRhYmxlLWhvdmVyIC50YWJsZS1saWdodDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2Y2OyB9XFxuICAudGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyID4gdGQsXFxuICAudGFibGUtaG92ZXIgLnRhYmxlLWxpZ2h0OmhvdmVyID4gdGgge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWNlY2Y2OyB9XFxuXFxuLnRhYmxlLWRhcmssXFxuLnRhYmxlLWRhcmsgPiB0aCxcXG4udGFibGUtZGFyayA+IHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjNmM4Y2E7IH1cXG5cXG4udGFibGUtZGFyayB0aCxcXG4udGFibGUtZGFyayB0ZCxcXG4udGFibGUtZGFyayB0aGVhZCB0aCxcXG4udGFibGUtZGFyayB0Ym9keSArIHRib2R5IHtcXG4gIGJvcmRlci1jb2xvcjogIzk1OTk5YzsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjliYmJlOyB9XFxuICAudGFibGUtaG92ZXIgLnRhYmxlLWRhcms6aG92ZXIgPiB0ZCxcXG4gIC50YWJsZS1ob3ZlciAudGFibGUtZGFyazpob3ZlciA+IHRoIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I5YmJiZTsgfVxcblxcbi50YWJsZS1hY3RpdmUsXFxuLnRhYmxlLWFjdGl2ZSA+IHRoLFxcbi50YWJsZS1hY3RpdmUgPiB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMDc1KTsgfVxcblxcbi50YWJsZS1ob3ZlciAudGFibGUtYWN0aXZlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNzUpOyB9XFxuICAudGFibGUtaG92ZXIgLnRhYmxlLWFjdGl2ZTpob3ZlciA+IHRkLFxcbiAgLnRhYmxlLWhvdmVyIC50YWJsZS1hY3RpdmU6aG92ZXIgPiB0aCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNzUpOyB9XFxuXFxuLnRhYmxlIC50aGVhZC1kYXJrIHRoIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIxMjUyOTtcXG4gIGJvcmRlci1jb2xvcjogIzMyMzgzZTsgfVxcblxcbi50YWJsZSAudGhlYWQtbGlnaHQgdGgge1xcbiAgY29sb3I6ICM0OTUwNTc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyLWNvbG9yOiAjZGVlMmU2OyB9XFxuXFxuLnRhYmxlLWRhcmsge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjEyNTI5OyB9XFxuICAudGFibGUtZGFyayB0aCxcXG4gIC50YWJsZS1kYXJrIHRkLFxcbiAgLnRhYmxlLWRhcmsgdGhlYWQgdGgge1xcbiAgICBib3JkZXItY29sb3I6ICMzMjM4M2U7IH1cXG4gIC50YWJsZS1kYXJrLnRhYmxlLWJvcmRlcmVkIHtcXG4gICAgYm9yZGVyOiAwOyB9XFxuICAudGFibGUtZGFyay50YWJsZS1zdHJpcGVkIHRib2R5IHRyOm50aC1vZi10eXBlKG9kZCkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpOyB9XFxuICAudGFibGUtZGFyay50YWJsZS1ob3ZlciB0Ym9keSB0cjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNzUpOyB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NS45OHB4KSB7XFxuICAudGFibGUtcmVzcG9uc2l2ZS1zbSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgICAtbXMtb3ZlcmZsb3ctc3R5bGU6IC1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcjsgfVxcbiAgICAudGFibGUtcmVzcG9uc2l2ZS1zbSA+IC50YWJsZS1ib3JkZXJlZCB7XFxuICAgICAgYm9yZGVyOiAwOyB9IH1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogNzY3Ljk4cHgpIHtcXG4gIC50YWJsZS1yZXNwb25zaXZlLW1kIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyOyB9XFxuICAgIC50YWJsZS1yZXNwb25zaXZlLW1kID4gLnRhYmxlLWJvcmRlcmVkIHtcXG4gICAgICBib3JkZXI6IDA7IH0gfVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA5OTEuOThweCkge1xcbiAgLnRhYmxlLXJlc3BvbnNpdmUtbGcge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7IH1cXG4gICAgLnRhYmxlLXJlc3BvbnNpdmUtbGcgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICAgIGJvcmRlcjogMDsgfSB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDExOTkuOThweCkge1xcbiAgLnRhYmxlLXJlc3BvbnNpdmUteGwge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gICAgLW1zLW92ZXJmbG93LXN0eWxlOiAtbXMtYXV0b2hpZGluZy1zY3JvbGxiYXI7IH1cXG4gICAgLnRhYmxlLXJlc3BvbnNpdmUteGwgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICAgIGJvcmRlcjogMDsgfSB9XFxuXFxuLnRhYmxlLXJlc3BvbnNpdmUge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIG92ZXJmbG93LXg6IGF1dG87XFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IC1tcy1hdXRvaGlkaW5nLXNjcm9sbGJhcjsgfVxcbiAgLnRhYmxlLXJlc3BvbnNpdmUgPiAudGFibGUtYm9yZGVyZWQge1xcbiAgICBib3JkZXI6IDA7IH1cXG5cXG4uZm9ybS1jb250cm9sIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICB0cmFuc2l0aW9uOiBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7IH1cXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gICAgLmZvcm0tY29udHJvbCB7XFxuICAgICAgdHJhbnNpdGlvbjogbm9uZTsgfSB9XFxuICAuZm9ybS1jb250cm9sOjotbXMtZXhwYW5kIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMDsgfVxcbiAgLmZvcm0tY29udHJvbDpmb2N1cyB7XFxuICAgIGNvbG9yOiAjNDk1MDU3O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgICBib3JkZXItY29sb3I6ICM4MGJkZmY7XFxuICAgIG91dGxpbmU6IDA7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTsgfVxcbiAgLmZvcm0tY29udHJvbDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICAgIGNvbG9yOiAjNmM3NTdkO1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICAuZm9ybS1jb250cm9sOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7XFxuICAgIGNvbG9yOiAjNmM3NTdkO1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuICAuZm9ybS1jb250cm9sOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xcbiAgICBjb2xvcjogIzZjNzU3ZDtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgLmZvcm0tY29udHJvbDo6cGxhY2Vob2xkZXIge1xcbiAgICBjb2xvcjogIzZjNzU3ZDtcXG4gICAgb3BhY2l0eTogMTsgfVxcbiAgLmZvcm0tY29udHJvbDpkaXNhYmxlZCwgLmZvcm0tY29udHJvbFtyZWFkb25seV0ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgICBvcGFjaXR5OiAxOyB9XFxuXFxuc2VsZWN0LmZvcm0tY29udHJvbDpmb2N1czo6LW1zLXZhbHVlIHtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsgfVxcblxcbi5mb3JtLWNvbnRyb2wtZmlsZSxcXG4uZm9ybS1jb250cm9sLXJhbmdlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4uY29sLWZvcm0tbGFiZWwge1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC4zNzVyZW0gKyAxcHgpO1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMC4zNzVyZW0gKyAxcHgpO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7IH1cXG5cXG4uY29sLWZvcm0tbGFiZWwtbGcge1xcbiAgcGFkZGluZy10b3A6IGNhbGMoMC41cmVtICsgMXB4KTtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDAuNXJlbSArIDFweCk7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41OyB9XFxuXFxuLmNvbC1mb3JtLWxhYmVsLXNtIHtcXG4gIHBhZGRpbmctdG9wOiBjYWxjKDAuMjVyZW0gKyAxcHgpO1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMC4yNXJlbSArIDFweCk7XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTsgfVxcblxcbi5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nLXRvcDogMC4zNzVyZW07XFxuICBwYWRkaW5nLWJvdHRvbTogMC4zNzVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXdpZHRoOiAxcHggMDsgfVxcbiAgLmZvcm0tY29udHJvbC1wbGFpbnRleHQuZm9ybS1jb250cm9sLXNtLCAuZm9ybS1jb250cm9sLXBsYWludGV4dC5mb3JtLWNvbnRyb2wtbGcge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDA7IH1cXG5cXG4uZm9ybS1jb250cm9sLXNtIHtcXG4gIGhlaWdodDogY2FsYygxLjgxMjVyZW0gKyAycHgpO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTsgfVxcblxcbi5mb3JtLWNvbnRyb2wtbGcge1xcbiAgaGVpZ2h0OiBjYWxjKDIuODc1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTsgfVxcblxcbnNlbGVjdC5mb3JtLWNvbnRyb2xbc2l6ZV0sIHNlbGVjdC5mb3JtLWNvbnRyb2xbbXVsdGlwbGVdIHtcXG4gIGhlaWdodDogYXV0bzsgfVxcblxcbnRleHRhcmVhLmZvcm0tY29udHJvbCB7XFxuICBoZWlnaHQ6IGF1dG87IH1cXG5cXG4uZm9ybS1ncm91cCB7XFxuICBtYXJnaW4tYm90dG9tOiAxcmVtOyB9XFxuXFxuLmZvcm0tdGV4dCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07IH1cXG5cXG4uZm9ybS1yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIG1hcmdpbi1yaWdodDogLTVweDtcXG4gIG1hcmdpbi1sZWZ0OiAtNXB4OyB9XFxuICAuZm9ybS1yb3cgPiAuY29sLFxcbiAgLmZvcm0tcm93ID4gW2NsYXNzKj1cXFwiY29sLVxcXCJdIHtcXG4gICAgcGFkZGluZy1yaWdodDogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDsgfVxcblxcbi5mb3JtLWNoZWNrIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjI1cmVtOyB9XFxuXFxuLmZvcm0tY2hlY2staW5wdXQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbWFyZ2luLXRvcDogMC4zcmVtO1xcbiAgbWFyZ2luLWxlZnQ6IC0xLjI1cmVtOyB9XFxuICAuZm9ybS1jaGVjay1pbnB1dDpkaXNhYmxlZCB+IC5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gICAgY29sb3I6ICM2Yzc1N2Q7IH1cXG5cXG4uZm9ybS1jaGVjay1sYWJlbCB7XFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuXFxuLmZvcm0tY2hlY2staW5saW5lIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIG1hcmdpbi1yaWdodDogMC43NXJlbTsgfVxcbiAgLmZvcm0tY2hlY2staW5saW5lIC5mb3JtLWNoZWNrLWlucHV0IHtcXG4gICAgcG9zaXRpb246IHN0YXRpYztcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjMxMjVyZW07XFxuICAgIG1hcmdpbi1sZWZ0OiAwOyB9XFxuXFxuLnZhbGlkLWZlZWRiYWNrIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07XFxuICBmb250LXNpemU6IDgwJTtcXG4gIGNvbG9yOiAjMjhhNzQ1OyB9XFxuXFxuLnZhbGlkLXRvb2x0aXAge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMDAlO1xcbiAgei1pbmRleDogNTtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIG1hcmdpbi10b3A6IC4xcmVtO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNDAsIDE2NywgNjksIDAuOSk7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCwgLmZvcm0tY29udHJvbC5pcy12YWxpZCB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxuICBwYWRkaW5nLXJpZ2h0OiAyLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciByaWdodCBjYWxjKDIuMjVyZW0gLyA0KTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY2FsYygyLjI1cmVtIC8gMikgY2FsYygyLjI1cmVtIC8gMik7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgOCA4JyUzZSUzY3BhdGggZmlsbD0nJTIzMjhhNzQ1JyBkPSdNMi4zIDYuNzNMLjYgNC41M2MtLjQtMS4wNC40Ni0xLjQgMS4xLS44bDEuMSAxLjQgMy40LTMuOGMuNi0uNjMgMS42LS4yNyAxLjIuN2wtNCA0LjZjLS40My41LS44LjQtMS4xLjF6Jy8lM2UlM2Mvc3ZnJTNlXFxcIik7IH1cXG4gIC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQ6Zm9jdXMsIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQ6Zm9jdXMge1xcbiAgICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjI1KTsgfVxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4gIC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4gIC5mb3JtLWNvbnRyb2wuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgdGV4dGFyZWEuZm9ybS1jb250cm9sOnZhbGlkLCB0ZXh0YXJlYS5mb3JtLWNvbnRyb2wuaXMtdmFsaWQge1xcbiAgcGFkZGluZy1yaWdodDogMi4yNXJlbTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCBjYWxjKDIuMjVyZW0gLyA0KSByaWdodCBjYWxjKDIuMjVyZW0gLyA0KTsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tc2VsZWN0OnZhbGlkLCAuY3VzdG9tLXNlbGVjdC5pcy12YWxpZCB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxuICBwYWRkaW5nLXJpZ2h0OiAzLjQzNzVyZW07XFxuICBiYWNrZ3JvdW5kOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgNCA1JyUzZSUzY3BhdGggZmlsbD0nJTIzMzQzYTQwJyBkPSdNMiAwTDAgMmg0em0wIDVMMCAzaDR6Jy8lM2UlM2Mvc3ZnJTNlXFxcIikgbm8tcmVwZWF0IHJpZ2h0IDAuNzVyZW0gY2VudGVyLzhweCAxMHB4LCB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgOCA4JyUzZSUzY3BhdGggZmlsbD0nJTIzMjhhNzQ1JyBkPSdNMi4zIDYuNzNMLjYgNC41M2MtLjQtMS4wNC40Ni0xLjQgMS4xLS44bDEuMSAxLjQgMy40LTMuOGMuNi0uNjMgMS42LS4yNyAxLjIuN2wtNCA0LjZjLS40My41LS44LjQtMS4xLjF6Jy8lM2UlM2Mvc3ZnJTNlXFxcIikgbm8tcmVwZWF0IGNlbnRlciByaWdodCAxLjc1cmVtLzEuMTI1cmVtIDEuMTI1cmVtOyB9XFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDp2YWxpZDpmb2N1cywgLmN1c3RvbS1zZWxlY3QuaXMtdmFsaWQ6Zm9jdXMge1xcbiAgICBib3JkZXItY29sb3I6ICMyOGE3NDU7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjI1KTsgfVxcbiAgLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDp2YWxpZCB+IC52YWxpZC10b29sdGlwLCAuY3VzdG9tLXNlbGVjdC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4gIC5jdXN0b20tc2VsZWN0LmlzLXZhbGlkIH4gLnZhbGlkLXRvb2x0aXAge1xcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTp2YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sLWZpbGU6dmFsaWQgfiAudmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC1maWxlLmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNvbnRyb2wtZmlsZS5pcy12YWxpZCB+IC52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6dmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCwgLmZvcm0tY2hlY2staW5wdXQuaXMtdmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCB7XFxuICBjb2xvcjogIzI4YTc0NTsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OnZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC5mb3JtLWNoZWNrLWlucHV0LmlzLXZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNoZWNrLWlucHV0LmlzLXZhbGlkIH4gLnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICBjb2xvcjogIzI4YTc0NTsgfVxcbiAgLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkIH4gLnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDp2YWxpZCB+IC52YWxpZC10b29sdGlwLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkIH4gLnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtdmFsaWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJvcmRlci1jb2xvcjogIzM0Y2U1NztcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNGNlNTc7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6dmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkOmZvY3VzIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNDAsIDE2NywgNjksIDAuMjUpOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OnZhbGlkOmZvY3VzOm5vdCg6Y2hlY2tlZCkgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLXZhbGlkOmZvY3VzOm5vdCg6Y2hlY2tlZCkgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDU7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6dmFsaWQgfiAudmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OnZhbGlkIH4gLnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy12YWxpZCB+IC52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWZpbGUtaW5wdXQuaXMtdmFsaWQgfiAudmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tZmlsZS1pbnB1dDp2YWxpZDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLXZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjI1KTsgfVxcblxcbi5pbnZhbGlkLWZlZWRiYWNrIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi10b3A6IDAuMjVyZW07XFxuICBmb250LXNpemU6IDgwJTtcXG4gIGNvbG9yOiAjZGMzNTQ1OyB9XFxuXFxuLmludmFsaWQtdG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgbWFyZ2luLXRvcDogLjFyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMjAsIDUzLCA2OSwgMC45KTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuZm9ybS1jb250cm9sOmludmFsaWQsIC5mb3JtLWNvbnRyb2wuaXMtaW52YWxpZCB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XFxuICBwYWRkaW5nLXJpZ2h0OiAyLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciByaWdodCBjYWxjKDIuMjVyZW0gLyA0KTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY2FsYygyLjI1cmVtIC8gMikgY2FsYygyLjI1cmVtIC8gMik7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPSclMjNkYzM1NDUnIHZpZXdCb3g9Jy0yIC0yIDcgNyclM2UlM2NwYXRoIHN0cm9rZT0nJTIzZDk1MzRmJyBkPSdNMCAwbDMgM20wLTNMMCAzJy8lM2UlM2NjaXJjbGUgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeD0nMycgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeT0nMycgcj0nLjUnLyUzZSUzY2NpcmNsZSBjeD0nMycgY3k9JzMnIHI9Jy41Jy8lM2UlM2Mvc3ZnJTNFXFxcIik7IH1cXG4gIC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZDpmb2N1cywgLmZvcm0tY29udHJvbC5pcy1pbnZhbGlkOmZvY3VzIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMjAsIDUzLCA2OSwgMC4yNSk7IH1cXG4gIC53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2w6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbiAgLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmZvcm0tY29udHJvbC5pcy1pbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuICAuZm9ybS1jb250cm9sLmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXG4gICAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCB0ZXh0YXJlYS5mb3JtLWNvbnRyb2w6aW52YWxpZCwgdGV4dGFyZWEuZm9ybS1jb250cm9sLmlzLWludmFsaWQge1xcbiAgcGFkZGluZy1yaWdodDogMi4yNXJlbTtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCBjYWxjKDIuMjVyZW0gLyA0KSByaWdodCBjYWxjKDIuMjVyZW0gLyA0KTsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tc2VsZWN0OmludmFsaWQsIC5jdXN0b20tc2VsZWN0LmlzLWludmFsaWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1O1xcbiAgcGFkZGluZy1yaWdodDogMy40Mzc1cmVtO1xcbiAgYmFja2dyb3VuZDogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDQgNSclM2UlM2NwYXRoIGZpbGw9JyUyMzM0M2E0MCcgZD0nTTIgMEwwIDJoNHptMCA1TDAgM2g0eicvJTNlJTNjL3N2ZyUzZVxcXCIpIG5vLXJlcGVhdCByaWdodCAwLjc1cmVtIGNlbnRlci84cHggMTBweCwgdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nJTIzZGMzNTQ1JyB2aWV3Qm94PSctMiAtMiA3IDcnJTNlJTNjcGF0aCBzdHJva2U9JyUyM2Q5NTM0ZicgZD0nTTAgMGwzIDNtMC0zTDAgMycvJTNlJTNjY2lyY2xlIHI9Jy41Jy8lM2UlM2NjaXJjbGUgY3g9JzMnIHI9Jy41Jy8lM2UlM2NjaXJjbGUgY3k9JzMnIHI9Jy41Jy8lM2UlM2NjaXJjbGUgY3g9JzMnIGN5PSczJyByPScuNScvJTNlJTNjL3N2ZyUzRVxcXCIpIG5vLXJlcGVhdCBjZW50ZXIgcmlnaHQgMS43NXJlbS8xLjEyNXJlbSAxLjEyNXJlbTsgfVxcbiAgLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1zZWxlY3Q6aW52YWxpZDpmb2N1cywgLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZDpmb2N1cyB7XFxuICAgIGJvcmRlci1jb2xvcjogI2RjMzU0NTtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuMjUpOyB9XFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuICAud2FzLXZhbGlkYXRlZCAuY3VzdG9tLXNlbGVjdDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbiAgLmN1c3RvbS1zZWxlY3QuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcbiAgICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNvbnRyb2wtZmlsZTppbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY29udHJvbC1maWxlOmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuZm9ybS1jb250cm9sLWZpbGUuaXMtaW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi5mb3JtLWNvbnRyb2wtZmlsZS5pcy1pbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWQgfiAuZm9ybS1jaGVjay1sYWJlbCwgLmZvcm0tY2hlY2staW5wdXQuaXMtaW52YWxpZCB+IC5mb3JtLWNoZWNrLWxhYmVsIHtcXG4gIGNvbG9yOiAjZGMzNTQ1OyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmZvcm0tY2hlY2staW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5mb3JtLWNoZWNrLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC10b29sdGlwLCAuZm9ybS1jaGVjay1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLmZvcm0tY2hlY2staW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbCwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwge1xcbiAgY29sb3I6ICNkYzM1NDU7IH1cXG4gIC53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLWZlZWRiYWNrLFxcbi53YXMtdmFsaWRhdGVkIC5jdXN0b20tY29udHJvbC1pbnB1dDppbnZhbGlkIH4gLmludmFsaWQtdG9vbHRpcCwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4uY3VzdG9tLWNvbnRyb2wtaW5wdXQuaXMtaW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkOmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItY29sb3I6ICNlNDYwNmQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTQ2MDZkOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1jb250cm9sLWlucHV0OmludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSwgLmN1c3RvbS1jb250cm9sLWlucHV0LmlzLWludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyMjAsIDUzLCA2OSwgMC4yNSk7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6aW52YWxpZDpmb2N1czpub3QoOmNoZWNrZWQpIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUsIC5jdXN0b20tY29udHJvbC1pbnB1dC5pcy1pbnZhbGlkOmZvY3VzOm5vdCg6Y2hlY2tlZCkgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXG5cXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6aW52YWxpZCB+IC5jdXN0b20tZmlsZS1sYWJlbCwgLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQgfiAuaW52YWxpZC1mZWVkYmFjayxcXG4ud2FzLXZhbGlkYXRlZCAuY3VzdG9tLWZpbGUtaW5wdXQ6aW52YWxpZCB+IC5pbnZhbGlkLXRvb2x0aXAsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkIH4gLmludmFsaWQtZmVlZGJhY2ssXFxuLmN1c3RvbS1maWxlLWlucHV0LmlzLWludmFsaWQgfiAuaW52YWxpZC10b29sdGlwIHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLndhcy12YWxpZGF0ZWQgLmN1c3RvbS1maWxlLWlucHV0OmludmFsaWQ6Zm9jdXMgfiAuY3VzdG9tLWZpbGUtbGFiZWwsIC5jdXN0b20tZmlsZS1pbnB1dC5pcy1pbnZhbGlkOmZvY3VzIH4gLmN1c3RvbS1maWxlLWxhYmVsIHtcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NTtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyMCwgNTMsIDY5LCAwLjI1KTsgfVxcblxcbi5mb3JtLWlubGluZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXG4gIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjayB7XFxuICAgIHdpZHRoOiAxMDAlOyB9XFxuICBAbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gICAgLmZvcm0taW5saW5lIGxhYmVsIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcbiAgICAuZm9ybS1pbmxpbmUgLmZvcm0tZ3JvdXAge1xcbiAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgZmxleDogMCAwIGF1dG87XFxuICAgICAgZmxleC1mbG93OiByb3cgd3JhcDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7IH1cXG4gICAgLmZvcm0taW5saW5lIC5mb3JtLWNvbnRyb2wge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgICB3aWR0aDogYXV0bztcXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyB9XFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jb250cm9sLXBsYWludGV4dCB7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC5mb3JtLWlubGluZSAuaW5wdXQtZ3JvdXAsXFxuICAgIC5mb3JtLWlubGluZSAuY3VzdG9tLXNlbGVjdCB7XFxuICAgICAgd2lkdGg6IGF1dG87IH1cXG4gICAgLmZvcm0taW5saW5lIC5mb3JtLWNoZWNrIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgd2lkdGg6IGF1dG87XFxuICAgICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuICAgIC5mb3JtLWlubGluZSAuZm9ybS1jaGVjay1pbnB1dCB7XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgIG1hcmdpbi10b3A6IDA7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xcbiAgICAgIG1hcmdpbi1sZWZ0OiAwOyB9XFxuICAgIC5mb3JtLWlubGluZSAuY3VzdG9tLWNvbnRyb2wge1xcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cXG4gICAgLmZvcm0taW5saW5lIC5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfSB9XFxuXFxuLmJ0biB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY29sb3I6ICMyMTI1Mjk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAwLjc1cmVtO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICB0cmFuc2l0aW9uOiBjb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0OyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAgIC5idG4ge1xcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcbiAgLmJ0bjpob3ZlciB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIC5idG46Zm9jdXMsIC5idG4uZm9jdXMge1xcbiAgICBvdXRsaW5lOiAwO1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC4yNSk7IH1cXG4gIC5idG4uZGlzYWJsZWQsIC5idG46ZGlzYWJsZWQge1xcbiAgICBvcGFjaXR5OiAwLjY1OyB9XFxuICAuYnRuOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuYS5idG4uZGlzYWJsZWQsXFxuZmllbGRzZXQ6ZGlzYWJsZWQgYS5idG4ge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7IH1cXG5cXG4uYnRuLXByaW1hcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOyB9XFxuICAuYnRuLXByaW1hcnk6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjlkOTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA2MmNjOyB9XFxuICAuYnRuLXByaW1hcnk6Zm9jdXMsIC5idG4tcHJpbWFyeS5mb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDM4LCAxNDMsIDI1NSwgMC41KTsgfVxcbiAgLmJ0bi1wcmltYXJ5LmRpc2FibGVkLCAuYnRuLXByaW1hcnk6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOyB9XFxuICAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbiAgLnNob3cgPiAuYnRuLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDYyY2M7XFxuICAgIGJvcmRlci1jb2xvcjogIzAwNWNiZjsgfVxcbiAgICAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLXByaW1hcnk6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbiAgICAuc2hvdyA+IC5idG4tcHJpbWFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDM4LCAxNDMsIDI1NSwgMC41KTsgfVxcblxcbi5idG4tc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZjNzU3ZDtcXG4gIGJvcmRlci1jb2xvcjogIzZjNzU3ZDsgfVxcbiAgLmJ0bi1zZWNvbmRhcnk6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzVhNjI2ODtcXG4gICAgYm9yZGVyLWNvbG9yOiAjNTQ1YjYyOyB9XFxuICAuYnRuLXNlY29uZGFyeTpmb2N1cywgLmJ0bi1zZWNvbmRhcnkuZm9jdXMge1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMzAsIDEzOCwgMTQ1LCAwLjUpOyB9XFxuICAuYnRuLXNlY29uZGFyeS5kaXNhYmxlZCwgLmJ0bi1zZWNvbmRhcnk6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZjNzU3ZDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjNmM3NTdkOyB9XFxuICAuYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1zZWNvbmRhcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM1NDViNjI7XFxuICAgIGJvcmRlci1jb2xvcjogIzRlNTU1YjsgfVxcbiAgICAuYnRuLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEzMCwgMTM4LCAxNDUsIDAuNSk7IH1cXG5cXG4uYnRuLXN1Y2Nlc3Mge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxuICAuYnRuLXN1Y2Nlc3M6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIxODgzODtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMWU3ZTM0OyB9XFxuICAuYnRuLXN1Y2Nlc3M6Zm9jdXMsIC5idG4tc3VjY2Vzcy5mb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDcyLCAxODAsIDk3LCAwLjUpOyB9XFxuICAuYnRuLXN1Y2Nlc3MuZGlzYWJsZWQsIC5idG4tc3VjY2VzczpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xcbiAgICBib3JkZXItY29sb3I6ICMyOGE3NDU7IH1cXG4gIC5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4tc3VjY2Vzcy5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlN2UzNDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMWM3NDMwOyB9XFxuICAgIC5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi1zdWNjZXNzLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoNzIsIDE4MCwgOTcsIDAuNSk7IH1cXG5cXG4uYnRuLWluZm8ge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTdhMmI4O1xcbiAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4OyB9XFxuICAuYnRuLWluZm86aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzEzODQ5NjtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMTE3YThiOyB9XFxuICAuYnRuLWluZm86Zm9jdXMsIC5idG4taW5mby5mb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDU4LCAxNzYsIDE5NSwgMC41KTsgfVxcbiAgLmJ0bi1pbmZvLmRpc2FibGVkLCAuYnRuLWluZm86ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4OyB9XFxuICAuYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbiAgLnNob3cgPiAuYnRuLWluZm8uZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxMTdhOGI7XFxuICAgIGJvcmRlci1jb2xvcjogIzEwNzA3ZjsgfVxcbiAgICAuYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbiAgICAuc2hvdyA+IC5idG4taW5mby5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDU4LCAxNzYsIDE5NSwgMC41KTsgfVxcblxcbi5idG4td2FybmluZyB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxuICBib3JkZXItY29sb3I6ICNmZmMxMDc7IH1cXG4gIC5idG4td2FybmluZzpob3ZlciB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBhODAwO1xcbiAgICBib3JkZXItY29sb3I6ICNkMzllMDA7IH1cXG4gIC5idG4td2FybmluZzpmb2N1cywgLmJ0bi13YXJuaW5nLmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIyLCAxNzAsIDEyLCAwLjUpOyB9XFxuICAuYnRuLXdhcm5pbmcuZGlzYWJsZWQsIC5idG4td2FybmluZzpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgICBib3JkZXItY29sb3I6ICNmZmMxMDc7IH1cXG4gIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4td2FybmluZy5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUwMDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjYzY5NTAwOyB9XFxuICAgIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4td2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi13YXJuaW5nLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIyLCAxNzAsIDEyLCAwLjUpOyB9XFxuXFxuLmJ0bi1kYW5nZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1O1xcbiAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxuICAuYnRuLWRhbmdlcjpob3ZlciB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzgyMzMzO1xcbiAgICBib3JkZXItY29sb3I6ICNiZDIxMzA7IH1cXG4gIC5idG4tZGFuZ2VyOmZvY3VzLCAuYnRuLWRhbmdlci5mb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyNSwgODMsIDk3LCAwLjUpOyB9XFxuICAuYnRuLWRhbmdlci5kaXNhYmxlZCwgLmJ0bi1kYW5nZXI6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxuICAuYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1kYW5nZXIuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiZDIxMzA7XFxuICAgIGJvcmRlci1jb2xvcjogI2IyMWYyZDsgfVxcbiAgICAuYnRuLWRhbmdlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLWRhbmdlci5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDIyNSwgODMsIDk3LCAwLjUpOyB9XFxuXFxuLmJ0bi1saWdodCB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmE7IH1cXG4gIC5idG4tbGlnaHQ6aG92ZXIge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2UyZTZlYTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGFlMGU1OyB9XFxuICAuYnRuLWxpZ2h0OmZvY3VzLCAuYnRuLWxpZ2h0LmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjE2LCAyMTcsIDIxOSwgMC41KTsgfVxcbiAgLmJ0bi1saWdodC5kaXNhYmxlZCwgLmJ0bi1saWdodDpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgICBib3JkZXItY29sb3I6ICNmOGY5ZmE7IH1cXG4gIC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1saWdodC5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZDNkOWRmOyB9XFxuICAgIC5idG4tbGlnaHQ6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLWxpZ2h0Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLWxpZ2h0LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjE2LCAyMTcsIDIxOSwgMC41KTsgfVxcblxcbi5idG4tZGFyayB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMzNDNhNDA7XFxuICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXG4gIC5idG4tZGFyazpob3ZlciB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyNzJiO1xcbiAgICBib3JkZXItY29sb3I6ICMxZDIxMjQ7IH1cXG4gIC5idG4tZGFyazpmb2N1cywgLmJ0bi1kYXJrLmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoODIsIDg4LCA5MywgMC41KTsgfVxcbiAgLmJ0bi1kYXJrLmRpc2FibGVkLCAuYnRuLWRhcms6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwOyB9XFxuICAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbiAgLnNob3cgPiAuYnRuLWRhcmsuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZDIxMjQ7XFxuICAgIGJvcmRlci1jb2xvcjogIzE3MWExZDsgfVxcbiAgICAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbiAgICAuc2hvdyA+IC5idG4tZGFyay5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDgyLCA4OCwgOTMsIDAuNSk7IH1cXG5cXG4uYnRuLW91dGxpbmUtcHJpbWFyeSB7XFxuICBjb2xvcjogIzAwN2JmZjtcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjsgfVxcbiAgLmJ0bi1vdXRsaW5lLXByaW1hcnk6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmOyB9XFxuICAuYnRuLW91dGxpbmUtcHJpbWFyeTpmb2N1cywgLmJ0bi1vdXRsaW5lLXByaW1hcnkuZm9jdXMge1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgwLCAxMjMsIDI1NSwgMC41KTsgfVxcbiAgLmJ0bi1vdXRsaW5lLXByaW1hcnkuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1wcmltYXJ5OmRpc2FibGVkIHtcXG4gICAgY29sb3I6ICMwMDdiZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICAuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1vdXRsaW5lLXByaW1hcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICAgIGJvcmRlci1jb2xvcjogIzAwN2JmZjsgfVxcbiAgICAuYnRuLW91dGxpbmUtcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1wcmltYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLW91dGxpbmUtcHJpbWFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjUpOyB9XFxuXFxuLmJ0bi1vdXRsaW5lLXNlY29uZGFyeSB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJvcmRlci1jb2xvcjogIzZjNzU3ZDsgfVxcbiAgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpob3ZlciB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xcbiAgICBib3JkZXItY29sb3I6ICM2Yzc1N2Q7IH1cXG4gIC5idG4tb3V0bGluZS1zZWNvbmRhcnk6Zm9jdXMsIC5idG4tb3V0bGluZS1zZWNvbmRhcnkuZm9jdXMge1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMDgsIDExNywgMTI1LCAwLjUpOyB9XFxuICAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5LmRpc2FibGVkLCAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5OmRpc2FibGVkIHtcXG4gICAgY29sb3I6ICM2Yzc1N2Q7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4tb3V0bGluZS1zZWNvbmRhcnkuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2Q7XFxuICAgIGJvcmRlci1jb2xvcjogIzZjNzU3ZDsgfVxcbiAgICAuYnRuLW91dGxpbmUtc2Vjb25kYXJ5Om5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLXNlY29uZGFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi1vdXRsaW5lLXNlY29uZGFyeS5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDEwOCwgMTE3LCAxMjUsIDAuNSk7IH1cXG5cXG4uYnRuLW91dGxpbmUtc3VjY2VzcyB7XFxuICBjb2xvcjogIzI4YTc0NTtcXG4gIGJvcmRlci1jb2xvcjogIzI4YTc0NTsgfVxcbiAgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3M6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMjhhNzQ1OyB9XFxuICAuYnRuLW91dGxpbmUtc3VjY2Vzczpmb2N1cywgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZm9jdXMge1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSg0MCwgMTY3LCA2OSwgMC41KTsgfVxcbiAgLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1zdWNjZXNzOmRpc2FibGVkIHtcXG4gICAgY29sb3I6ICMyOGE3NDU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuICAuYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1vdXRsaW5lLXN1Y2Nlc3MuZHJvcGRvd24tdG9nZ2xlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XFxuICAgIGJvcmRlci1jb2xvcjogIzI4YTc0NTsgfVxcbiAgICAuYnRuLW91dGxpbmUtc3VjY2Vzczpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1zdWNjZXNzOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLW91dGxpbmUtc3VjY2Vzcy5kcm9wZG93bi10b2dnbGU6Zm9jdXMge1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDQwLCAxNjcsIDY5LCAwLjUpOyB9XFxuXFxuLmJ0bi1vdXRsaW5lLWluZm8ge1xcbiAgY29sb3I6ICMxN2EyYjg7XFxuICBib3JkZXItY29sb3I6ICMxN2EyYjg7IH1cXG4gIC5idG4tb3V0bGluZS1pbmZvOmhvdmVyIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxN2EyYjg7XFxuICAgIGJvcmRlci1jb2xvcjogIzE3YTJiODsgfVxcbiAgLmJ0bi1vdXRsaW5lLWluZm86Zm9jdXMsIC5idG4tb3V0bGluZS1pbmZvLmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpOyB9XFxuICAuYnRuLW91dGxpbmUtaW5mby5kaXNhYmxlZCwgLmJ0bi1vdXRsaW5lLWluZm86ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogIzE3YTJiODtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG4gIC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZSwgLmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlLFxcbiAgLnNob3cgPiAuYnRuLW91dGxpbmUtaW5mby5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMTdhMmI4OyB9XFxuICAgIC5idG4tb3V0bGluZS1pbmZvOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZTpmb2N1cywgLmJ0bi1vdXRsaW5lLWluZm86bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCkuYWN0aXZlOmZvY3VzLFxcbiAgICAuc2hvdyA+IC5idG4tb3V0bGluZS1pbmZvLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjMsIDE2MiwgMTg0LCAwLjUpOyB9XFxuXFxuLmJ0bi1vdXRsaW5lLXdhcm5pbmcge1xcbiAgY29sb3I6ICNmZmMxMDc7XFxuICBib3JkZXItY29sb3I6ICNmZmMxMDc7IH1cXG4gIC5idG4tb3V0bGluZS13YXJuaW5nOmhvdmVyIHtcXG4gICAgY29sb3I6ICMyMTI1Mjk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmMxMDc7XFxuICAgIGJvcmRlci1jb2xvcjogI2ZmYzEwNzsgfVxcbiAgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6Zm9jdXMsIC5idG4tb3V0bGluZS13YXJuaW5nLmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjU1LCAxOTMsIDcsIDAuNSk7IH1cXG4gIC5idG4tb3V0bGluZS13YXJuaW5nLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtd2FybmluZzpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjZmZjMTA3O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4tb3V0bGluZS13YXJuaW5nLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xcbiAgICBib3JkZXItY29sb3I6ICNmZmMxMDc7IH1cXG4gICAgLmJ0bi1vdXRsaW5lLXdhcm5pbmc6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtd2FybmluZzpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi1vdXRsaW5lLXdhcm5pbmcuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgyNTUsIDE5MywgNywgMC41KTsgfVxcblxcbi5idG4tb3V0bGluZS1kYW5nZXIge1xcbiAgY29sb3I6ICNkYzM1NDU7XFxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7IH1cXG4gIC5idG4tb3V0bGluZS1kYW5nZXI6aG92ZXIge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxuICAuYnRuLW91dGxpbmUtZGFuZ2VyOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFuZ2VyLmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuNSk7IH1cXG4gIC5idG4tb3V0bGluZS1kYW5nZXIuZGlzYWJsZWQsIC5idG4tb3V0bGluZS1kYW5nZXI6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2RjMzU0NTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG4gIC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZSxcXG4gIC5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhbmdlci5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZGMzNTQ1OyB9XFxuICAgIC5idG4tb3V0bGluZS1kYW5nZXI6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFuZ2VyOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpLmFjdGl2ZTpmb2N1cyxcXG4gICAgLnNob3cgPiAuYnRuLW91dGxpbmUtZGFuZ2VyLmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjIwLCA1MywgNjksIDAuNSk7IH1cXG5cXG4uYnRuLW91dGxpbmUtbGlnaHQge1xcbiAgY29sb3I6ICNmOGY5ZmE7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmE7IH1cXG4gIC5idG4tb3V0bGluZS1saWdodDpob3ZlciB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xcbiAgICBib3JkZXItY29sb3I6ICNmOGY5ZmE7IH1cXG4gIC5idG4tb3V0bGluZS1saWdodDpmb2N1cywgLmJ0bi1vdXRsaW5lLWxpZ2h0LmZvY3VzIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTsgfVxcbiAgLmJ0bi1vdXRsaW5lLWxpZ2h0LmRpc2FibGVkLCAuYnRuLW91dGxpbmUtbGlnaHQ6ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogI2Y4ZjlmYTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG4gIC5idG4tb3V0bGluZS1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsIC5idG4tb3V0bGluZS1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4tb3V0bGluZS1saWdodC5kcm9wZG93bi10b2dnbGUge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZjhmOWZhOyB9XFxuICAgIC5idG4tb3V0bGluZS1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmU6Zm9jdXMsIC5idG4tb3V0bGluZS1saWdodDpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi1vdXRsaW5lLWxpZ2h0LmRyb3Bkb3duLXRvZ2dsZTpmb2N1cyB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMjQ4LCAyNDksIDI1MCwgMC41KTsgfVxcblxcbi5idG4tb3V0bGluZS1kYXJrIHtcXG4gIGNvbG9yOiAjMzQzYTQwO1xcbiAgYm9yZGVyLWNvbG9yOiAjMzQzYTQwOyB9XFxuICAuYnRuLW91dGxpbmUtZGFyazpob3ZlciB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXG4gIC5idG4tb3V0bGluZS1kYXJrOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFyay5mb2N1cyB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDUyLCA1OCwgNjQsIDAuNSk7IH1cXG4gIC5idG4tb3V0bGluZS1kYXJrLmRpc2FibGVkLCAuYnRuLW91dGxpbmUtZGFyazpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjMzQzYTQwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlLCAuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsXFxuICAuc2hvdyA+IC5idG4tb3V0bGluZS1kYXJrLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzYTQwO1xcbiAgICBib3JkZXItY29sb3I6ICMzNDNhNDA7IH1cXG4gICAgLmJ0bi1vdXRsaW5lLWRhcms6bm90KDpkaXNhYmxlZCk6bm90KC5kaXNhYmxlZCk6YWN0aXZlOmZvY3VzLCAuYnRuLW91dGxpbmUtZGFyazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmU6Zm9jdXMsXFxuICAgIC5zaG93ID4gLmJ0bi1vdXRsaW5lLWRhcmsuZHJvcGRvd24tdG9nZ2xlOmZvY3VzIHtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSg1MiwgNTgsIDY0LCAwLjUpOyB9XFxuXFxuLmJ0bi1saW5rIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjb2xvcjogIzAwN2JmZjsgfVxcbiAgLmJ0bi1saW5rOmhvdmVyIHtcXG4gICAgY29sb3I6ICMwMDU2YjM7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XFxuICAuYnRuLWxpbms6Zm9jdXMsIC5idG4tbGluay5mb2N1cyB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xcbiAgICBib3gtc2hhZG93OiBub25lOyB9XFxuICAuYnRuLWxpbms6ZGlzYWJsZWQsIC5idG4tbGluay5kaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjNmM3NTdkO1xcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxcblxcbi5idG4tbGcsIC5idG4tZ3JvdXAtbGcgPiAuYnRuIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTsgfVxcblxcbi5idG4tc20sIC5idG4tZ3JvdXAtc20gPiAuYnRuIHtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gMC41cmVtO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAwLjJyZW07IH1cXG5cXG4uYnRuLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7IH1cXG4gIC5idG4tYmxvY2sgKyAuYnRuLWJsb2NrIHtcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtOyB9XFxuXFxuaW5wdXRbdHlwZT1cXFwic3VibWl0XFxcIl0uYnRuLWJsb2NrLFxcbmlucHV0W3R5cGU9XFxcInJlc2V0XFxcIl0uYnRuLWJsb2NrLFxcbmlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLmJ0bi1ibG9jayB7XFxuICB3aWR0aDogMTAwJTsgfVxcblxcbi5mYWRlIHtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4xNXMgbGluZWFyOyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAgIC5mYWRlIHtcXG4gICAgICB0cmFuc2l0aW9uOiBub25lOyB9IH1cXG4gIC5mYWRlOm5vdCguc2hvdykge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuXFxuLmNvbGxhcHNlOm5vdCguc2hvdykge1xcbiAgZGlzcGxheTogbm9uZTsgfVxcblxcbi5jb2xsYXBzaW5nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0cmFuc2l0aW9uOiBoZWlnaHQgMC4zNXMgZWFzZTsgfVxcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgICAuY29sbGFwc2luZyB7XFxuICAgICAgdHJhbnNpdGlvbjogbm9uZTsgfSB9XFxuXFxuLmRyb3B1cCxcXG4uZHJvcHJpZ2h0LFxcbi5kcm9wZG93bixcXG4uZHJvcGxlZnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuXFxuLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQ7XFxuICBib3JkZXItcmlnaHQ6IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWJvdHRvbTogMDtcXG4gIGJvcmRlci1sZWZ0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDsgfVxcblxcbi5kcm9wZG93bi10b2dnbGU6ZW1wdHk6OmFmdGVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAwOyB9XFxuXFxuLmRyb3Bkb3duLW1lbnUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDEwMDA7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBtaW4td2lkdGg6IDEwcmVtO1xcbiAgcGFkZGluZzogMC41cmVtIDA7XFxuICBtYXJnaW46IDAuMTI1cmVtIDAgMDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxuXFxuLmRyb3Bkb3duLW1lbnUtcmlnaHQge1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiBhdXRvOyB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuZHJvcGRvd24tbWVudS1zbS1yaWdodCB7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBsZWZ0OiBhdXRvOyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5kcm9wZG93bi1tZW51LW1kLXJpZ2h0IHtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGxlZnQ6IGF1dG87IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmRyb3Bkb3duLW1lbnUtbGctcmlnaHQge1xcbiAgICByaWdodDogMDtcXG4gICAgbGVmdDogYXV0bzsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmRyb3Bkb3duLW1lbnUteGwtcmlnaHQge1xcbiAgICByaWdodDogMDtcXG4gICAgbGVmdDogYXV0bzsgfSB9XFxuXFxuLmRyb3Bkb3duLW1lbnUtbGVmdCB7XFxuICByaWdodDogYXV0bztcXG4gIGxlZnQ6IDA7IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5kcm9wZG93bi1tZW51LXNtLWxlZnQge1xcbiAgICByaWdodDogYXV0bztcXG4gICAgbGVmdDogMDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuZHJvcGRvd24tbWVudS1tZC1sZWZ0IHtcXG4gICAgcmlnaHQ6IGF1dG87XFxuICAgIGxlZnQ6IDA7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmRyb3Bkb3duLW1lbnUtbGctbGVmdCB7XFxuICAgIHJpZ2h0OiBhdXRvO1xcbiAgICBsZWZ0OiAwOyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZHJvcGRvd24tbWVudS14bC1sZWZ0IHtcXG4gICAgcmlnaHQ6IGF1dG87XFxuICAgIGxlZnQ6IDA7IH0gfVxcblxcbi5kcm9wdXAgLmRyb3Bkb3duLW1lbnUge1xcbiAgdG9wOiBhdXRvO1xcbiAgYm90dG9tOiAxMDAlO1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1ib3R0b206IDAuMTI1cmVtOyB9XFxuXFxuLmRyb3B1cCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tbGVmdDogMC4yNTVlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiAwLjI1NWVtO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBib3JkZXItdG9wOiAwO1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWxlZnQ6IDAuM2VtIHNvbGlkIHRyYW5zcGFyZW50OyB9XFxuXFxuLmRyb3B1cCAuZHJvcGRvd24tdG9nZ2xlOmVtcHR5OjphZnRlciB7XFxuICBtYXJnaW4tbGVmdDogMDsgfVxcblxcbi5kcm9wcmlnaHQgLmRyb3Bkb3duLW1lbnUge1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IGF1dG87XFxuICBsZWZ0OiAxMDAlO1xcbiAgbWFyZ2luLXRvcDogMDtcXG4gIG1hcmdpbi1sZWZ0OiAwLjEyNXJlbTsgfVxcblxcbi5kcm9wcmlnaHQgLmRyb3Bkb3duLXRvZ2dsZTo6YWZ0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLWxlZnQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDA7XFxuICBib3JkZXItYm90dG9tOiAwLjNlbSBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1sZWZ0OiAwLjNlbSBzb2xpZDsgfVxcblxcbi5kcm9wcmlnaHQgLmRyb3Bkb3duLXRvZ2dsZTplbXB0eTo6YWZ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDA7IH1cXG5cXG4uZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwOyB9XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi1tZW51IHtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAxMDAlO1xcbiAgbGVmdDogYXV0bztcXG4gIG1hcmdpbi10b3A6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMTI1cmVtOyB9XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmFmdGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IDAuMjU1ZW07XFxuICBjb250ZW50OiBcXFwiXFxcIjsgfVxcblxcbi5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlOjphZnRlciB7XFxuICBkaXNwbGF5OiBub25lOyB9XFxuXFxuLmRyb3BsZWZ0IC5kcm9wZG93bi10b2dnbGU6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjU1ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogMC4yNTVlbTtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgYm9yZGVyLXRvcDogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDAuM2VtIHNvbGlkO1xcbiAgYm9yZGVyLWJvdHRvbTogMC4zZW0gc29saWQgdHJhbnNwYXJlbnQ7IH1cXG5cXG4uZHJvcGxlZnQgLmRyb3Bkb3duLXRvZ2dsZTplbXB0eTo6YWZ0ZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDA7IH1cXG5cXG4uZHJvcGxlZnQgLmRyb3Bkb3duLXRvZ2dsZTo6YmVmb3JlIHtcXG4gIHZlcnRpY2FsLWFsaWduOiAwOyB9XFxuXFxuLmRyb3Bkb3duLW1lbnVbeC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSwgLmRyb3Bkb3duLW1lbnVbeC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdLCAuZHJvcGRvd24tbWVudVt4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdLCAuZHJvcGRvd24tbWVudVt4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSB7XFxuICByaWdodDogYXV0bztcXG4gIGJvdHRvbTogYXV0bzsgfVxcblxcbi5kcm9wZG93bi1kaXZpZGVyIHtcXG4gIGhlaWdodDogMDtcXG4gIG1hcmdpbjogMC41cmVtIDA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOWVjZWY7IH1cXG5cXG4uZHJvcGRvd24taXRlbSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMC4yNXJlbSAxLjVyZW07XFxuICBjbGVhcjogYm90aDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDA7IH1cXG4gIC5kcm9wZG93bi1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7IH1cXG4gIC5kcm9wZG93bi1pdGVtOmxhc3QtY2hpbGQge1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTsgfVxcbiAgLmRyb3Bkb3duLWl0ZW06aG92ZXIsIC5kcm9wZG93bi1pdGVtOmZvY3VzIHtcXG4gICAgY29sb3I6ICMxNjE4MWI7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTsgfVxcbiAgLmRyb3Bkb3duLWl0ZW0uYWN0aXZlLCAuZHJvcGRvd24taXRlbTphY3RpdmUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmOyB9XFxuICAuZHJvcGRvd24taXRlbS5kaXNhYmxlZCwgLmRyb3Bkb3duLWl0ZW06ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogIzZjNzU3ZDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLmRyb3Bkb3duLW1lbnUuc2hvdyB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5kcm9wZG93bi1oZWFkZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwYWRkaW5nOiAwLjVyZW0gMS41cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7IH1cXG5cXG4uZHJvcGRvd24taXRlbS10ZXh0IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC4yNXJlbSAxLjVyZW07XFxuICBjb2xvcjogIzIxMjUyOTsgfVxcblxcbi5idG4tZ3JvdXAsXFxuLmJ0bi1ncm91cC12ZXJ0aWNhbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cXG4gIC5idG4tZ3JvdXAgPiAuYnRuLFxcbiAgLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4ge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGZsZXg6IDEgMSBhdXRvOyB9XFxuICAgIC5idG4tZ3JvdXAgPiAuYnRuOmhvdmVyLFxcbiAgICAuYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjpob3ZlciB7XFxuICAgICAgei1pbmRleDogMTsgfVxcbiAgICAuYnRuLWdyb3VwID4gLmJ0bjpmb2N1cywgLmJ0bi1ncm91cCA+IC5idG46YWN0aXZlLCAuYnRuLWdyb3VwID4gLmJ0bi5hY3RpdmUsXFxuICAgIC5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOmZvY3VzLFxcbiAgICAuYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bjphY3RpdmUsXFxuICAgIC5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLmFjdGl2ZSB7XFxuICAgICAgei1pbmRleDogMTsgfVxcblxcbi5idG4tdG9vbGJhciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XFxuICAuYnRuLXRvb2xiYXIgLmlucHV0LWdyb3VwIHtcXG4gICAgd2lkdGg6IGF1dG87IH1cXG5cXG4uYnRuLWdyb3VwID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uYnRuLWdyb3VwID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICBtYXJnaW4tbGVmdDogLTFweDsgfVxcblxcbi5idG4tZ3JvdXAgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbi5idG4tZ3JvdXAgPiAuYnRuLWdyb3VwOm5vdCg6bGFzdC1jaGlsZCkgPiAuYnRuIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7IH1cXG5cXG4uYnRuLWdyb3VwID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uYnRuLWdyb3VwID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSA+IC5idG4ge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7IH1cXG5cXG4uZHJvcGRvd24tdG9nZ2xlLXNwbGl0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuNTYyNXJlbTtcXG4gIHBhZGRpbmctbGVmdDogMC41NjI1cmVtOyB9XFxuICAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0OjphZnRlcixcXG4gIC5kcm9wdXAgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdDo6YWZ0ZXIsXFxuICAuZHJvcHJpZ2h0IC5kcm9wZG93bi10b2dnbGUtc3BsaXQ6OmFmdGVyIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDA7IH1cXG4gIC5kcm9wbGVmdCAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0OjpiZWZvcmUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDA7IH1cXG5cXG4uYnRuLXNtICsgLmRyb3Bkb3duLXRvZ2dsZS1zcGxpdCwgLmJ0bi1ncm91cC1zbSA+IC5idG4gKyAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDAuMzc1cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAwLjM3NXJlbTsgfVxcblxcbi5idG4tbGcgKyAuZHJvcGRvd24tdG9nZ2xlLXNwbGl0LCAuYnRuLWdyb3VwLWxnID4gLmJ0biArIC5kcm9wZG93bi10b2dnbGUtc3BsaXQge1xcbiAgcGFkZGluZy1yaWdodDogMC43NXJlbTtcXG4gIHBhZGRpbmctbGVmdDogMC43NXJlbTsgfVxcblxcbi5idG4tZ3JvdXAtdmVydGljYWwge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IH1cXG4gIC5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuLFxcbiAgLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4tZ3JvdXAge1xcbiAgICB3aWR0aDogMTAwJTsgfVxcbiAgLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG46bm90KDpmaXJzdC1jaGlsZCksXFxuICAuYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSB7XFxuICAgIG1hcmdpbi10b3A6IC0xcHg7IH1cXG4gIC5idG4tZ3JvdXAtdmVydGljYWwgPiAuYnRuOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpLFxcbiAgLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG4tZ3JvdXA6bm90KDpsYXN0LWNoaWxkKSA+IC5idG4ge1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDsgfVxcbiAgLmJ0bi1ncm91cC12ZXJ0aWNhbCA+IC5idG46bm90KDpmaXJzdC1jaGlsZCksXFxuICAuYnRuLWdyb3VwLXZlcnRpY2FsID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSA+IC5idG4ge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDsgfVxcblxcbi5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0bixcXG4uYnRuLWdyb3VwLXRvZ2dsZSA+IC5idG4tZ3JvdXAgPiAuYnRuIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7IH1cXG4gIC5idG4tZ3JvdXAtdG9nZ2xlID4gLmJ0biBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLFxcbiAgLmJ0bi1ncm91cC10b2dnbGUgPiAuYnRuIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxuICAuYnRuLWdyb3VwLXRvZ2dsZSA+IC5idG4tZ3JvdXAgPiAuYnRuIGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sXFxuICAuYnRuLWdyb3VwLXRvZ2dsZSA+IC5idG4tZ3JvdXAgPiAuYnRuIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lOyB9XFxuXFxuLmlucHV0LWdyb3VwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sLFxcbiAgLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbC1wbGFpbnRleHQsXFxuICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCxcXG4gIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgZmxleDogMSAxIGF1dG87XFxuICAgIHdpZHRoOiAxJTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sICsgLmZvcm0tY29udHJvbCxcXG4gICAgLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbCArIC5jdXN0b20tc2VsZWN0LFxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sICsgLmN1c3RvbS1maWxlLFxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sLXBsYWludGV4dCArIC5mb3JtLWNvbnRyb2wsXFxuICAgIC5pbnB1dC1ncm91cCA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0ICsgLmN1c3RvbS1zZWxlY3QsXFxuICAgIC5pbnB1dC1ncm91cCA+IC5mb3JtLWNvbnRyb2wtcGxhaW50ZXh0ICsgLmN1c3RvbS1maWxlLFxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdCArIC5mb3JtLWNvbnRyb2wsXFxuICAgIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tc2VsZWN0ICsgLmN1c3RvbS1zZWxlY3QsXFxuICAgIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tc2VsZWN0ICsgLmN1c3RvbS1maWxlLFxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgKyAuZm9ybS1jb250cm9sLFxcbiAgICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUgKyAuY3VzdG9tLXNlbGVjdCxcXG4gICAgLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlICsgLmN1c3RvbS1maWxlIHtcXG4gICAgICBtYXJnaW4tbGVmdDogLTFweDsgfVxcbiAgLmlucHV0LWdyb3VwID4gLmZvcm0tY29udHJvbDpmb2N1cyxcXG4gIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tc2VsZWN0OmZvY3VzLFxcbiAgLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlIC5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICAgIHotaW5kZXg6IDM7IH1cXG4gIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZSAuY3VzdG9tLWZpbGUtaW5wdXQ6Zm9jdXMge1xcbiAgICB6LWluZGV4OiA0OyB9XFxuICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sOm5vdCg6bGFzdC1jaGlsZCksXFxuICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLXNlbGVjdDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOyB9XFxuICAuaW5wdXQtZ3JvdXAgPiAuZm9ybS1jb250cm9sOm5vdCg6Zmlyc3QtY2hpbGQpLFxcbiAgLmlucHV0LWdyb3VwID4gLmN1c3RvbS1zZWxlY3Q6bm90KDpmaXJzdC1jaGlsZCkge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyB9XFxuICAuaW5wdXQtZ3JvdXAgPiAuY3VzdG9tLWZpbGUge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyOyB9XFxuICAgIC5pbnB1dC1ncm91cCA+IC5jdXN0b20tZmlsZTpub3QoOmxhc3QtY2hpbGQpIC5jdXN0b20tZmlsZS1sYWJlbCxcXG4gICAgLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlOm5vdCg6bGFzdC1jaGlsZCkgLmN1c3RvbS1maWxlLWxhYmVsOjphZnRlciB7XFxuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7IH1cXG4gICAgLmlucHV0LWdyb3VwID4gLmN1c3RvbS1maWxlOm5vdCg6Zmlyc3QtY2hpbGQpIC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyB9XFxuXFxuLmlucHV0LWdyb3VwLXByZXBlbmQsXFxuLmlucHV0LWdyb3VwLWFwcGVuZCB7XFxuICBkaXNwbGF5OiBmbGV4OyB9XFxuICAuaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuLFxcbiAgLmlucHV0LWdyb3VwLWFwcGVuZCAuYnRuIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB6LWluZGV4OiAyOyB9XFxuICAgIC5pbnB1dC1ncm91cC1wcmVwZW5kIC5idG46Zm9jdXMsXFxuICAgIC5pbnB1dC1ncm91cC1hcHBlbmQgLmJ0bjpmb2N1cyB7XFxuICAgICAgei1pbmRleDogMzsgfVxcbiAgLmlucHV0LWdyb3VwLXByZXBlbmQgLmJ0biArIC5idG4sXFxuICAuaW5wdXQtZ3JvdXAtcHJlcGVuZCAuYnRuICsgLmlucHV0LWdyb3VwLXRleHQsXFxuICAuaW5wdXQtZ3JvdXAtcHJlcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5pbnB1dC1ncm91cC10ZXh0LFxcbiAgLmlucHV0LWdyb3VwLXByZXBlbmQgLmlucHV0LWdyb3VwLXRleHQgKyAuYnRuLFxcbiAgLmlucHV0LWdyb3VwLWFwcGVuZCAuYnRuICsgLmJ0bixcXG4gIC5pbnB1dC1ncm91cC1hcHBlbmQgLmJ0biArIC5pbnB1dC1ncm91cC10ZXh0LFxcbiAgLmlucHV0LWdyb3VwLWFwcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5pbnB1dC1ncm91cC10ZXh0LFxcbiAgLmlucHV0LWdyb3VwLWFwcGVuZCAuaW5wdXQtZ3JvdXAtdGV4dCArIC5idG4ge1xcbiAgICBtYXJnaW4tbGVmdDogLTFweDsgfVxcblxcbi5pbnB1dC1ncm91cC1wcmVwZW5kIHtcXG4gIG1hcmdpbi1yaWdodDogLTFweDsgfVxcblxcbi5pbnB1dC1ncm91cC1hcHBlbmQge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7IH1cXG5cXG4uaW5wdXQtZ3JvdXAtdGV4dCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG4gIC5pbnB1dC1ncm91cC10ZXh0IGlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sXFxuICAuaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdIHtcXG4gICAgbWFyZ2luLXRvcDogMDsgfVxcblxcbi5pbnB1dC1ncm91cC1sZyA+IC5mb3JtLWNvbnRyb2w6bm90KHRleHRhcmVhKSxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuY3VzdG9tLXNlbGVjdCB7XFxuICBoZWlnaHQ6IGNhbGMoMi44NzVyZW0gKyAycHgpOyB9XFxuXFxuLmlucHV0LWdyb3VwLWxnID4gLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwLWxnID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4ge1xcbiAgcGFkZGluZzogMC41cmVtIDFyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgYm9yZGVyLXJhZGl1czogMC4zcmVtOyB9XFxuXFxuLmlucHV0LWdyb3VwLXNtID4gLmZvcm0tY29udHJvbDpub3QodGV4dGFyZWEpLFxcbi5pbnB1dC1ncm91cC1zbSA+IC5jdXN0b20tc2VsZWN0IHtcXG4gIGhlaWdodDogY2FsYygxLjgxMjVyZW0gKyAycHgpOyB9XFxuXFxuLmlucHV0LWdyb3VwLXNtID4gLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuY3VzdG9tLXNlbGVjdCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cC1zbSA+IC5pbnB1dC1ncm91cC1hcHBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAtc20gPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwLXNtID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4ge1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMnJlbTsgfVxcblxcbi5pbnB1dC1ncm91cC1sZyA+IC5jdXN0b20tc2VsZWN0LFxcbi5pbnB1dC1ncm91cC1zbSA+IC5jdXN0b20tc2VsZWN0IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNzVyZW07IH1cXG5cXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLXByZXBlbmQgPiAuaW5wdXQtZ3JvdXAtdGV4dCxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtYXBwZW5kOm5vdCg6bGFzdC1jaGlsZCkgPiAuYnRuLFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1hcHBlbmQ6bm90KDpsYXN0LWNoaWxkKSA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1hcHBlbmQ6bGFzdC1jaGlsZCA+IC5idG46bm90KDpsYXN0LWNoaWxkKTpub3QoLmRyb3Bkb3duLXRvZ2dsZSksXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZDpsYXN0LWNoaWxkID4gLmlucHV0LWdyb3VwLXRleHQ6bm90KDpsYXN0LWNoaWxkKSB7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOyB9XFxuXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5idG4sXFxuLmlucHV0LWdyb3VwID4gLmlucHV0LWdyb3VwLWFwcGVuZCA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOm5vdCg6Zmlyc3QtY2hpbGQpID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpub3QoOmZpcnN0LWNoaWxkKSA+IC5pbnB1dC1ncm91cC10ZXh0LFxcbi5pbnB1dC1ncm91cCA+IC5pbnB1dC1ncm91cC1wcmVwZW5kOmZpcnN0LWNoaWxkID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4uaW5wdXQtZ3JvdXAgPiAuaW5wdXQtZ3JvdXAtcHJlcGVuZDpmaXJzdC1jaGlsZCA+IC5pbnB1dC1ncm91cC10ZXh0Om5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyB9XFxuXFxuLmN1c3RvbS1jb250cm9sIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWluLWhlaWdodDogMS41cmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW07IH1cXG5cXG4uY3VzdG9tLWNvbnRyb2wtaW5saW5lIHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtOyB9XFxuXFxuLmN1c3RvbS1jb250cm9sLWlucHV0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IC0xO1xcbiAgb3BhY2l0eTogMDsgfVxcbiAgLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBib3JkZXItY29sb3I6ICMwMDdiZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7IH1cXG4gIC5jdXN0b20tY29udHJvbC1pbnB1dDpmb2N1cyB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpOyB9XFxuICAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Zm9jdXM6bm90KDpjaGVja2VkKSB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjODBiZGZmOyB9XFxuICAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6bm90KDpkaXNhYmxlZCk6YWN0aXZlIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2IzZDdmZjtcXG4gICAgYm9yZGVyLWNvbG9yOiAjYjNkN2ZmOyB9XFxuICAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWwge1xcbiAgICBjb2xvcjogIzZjNzU3ZDsgfVxcbiAgICAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjsgfVxcblxcbi5jdXN0b20tY29udHJvbC1sYWJlbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDsgfVxcbiAgLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMC4yNXJlbTtcXG4gICAgbGVmdDogLTEuNXJlbTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxcmVtO1xcbiAgICBoZWlnaHQ6IDFyZW07XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gICAgYm9yZGVyOiAjYWRiNWJkIHNvbGlkIDFweDsgfVxcbiAgLmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwLjI1cmVtO1xcbiAgICBsZWZ0OiAtMS41cmVtO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDFyZW07XFxuICAgIGhlaWdodDogMXJlbTtcXG4gICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogNTAlIDUwJTsgfVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmNoZWNrZWQgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBmaWxsPSclMjNmZmYnIGQ9J002LjU2NC43NWwtMy41OSAzLjYxMi0xLjUzOC0xLjU1TDAgNC4yNiAyLjk3NCA3LjI1IDggMi4xOTN6Jy8lM2UlM2Mvc3ZnJTNlXFxcIik7IH1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDppbmRldGVybWluYXRlIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsgfVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0IDQnJTNlJTNjcGF0aCBzdHJva2U9JyUyM2ZmZicgZD0nTTAgMmg0Jy8lM2UlM2Mvc3ZnJTNlXFxcIik7IH1cXG5cXG4uY3VzdG9tLWNoZWNrYm94IC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAxMjMsIDI1NSwgMC41KTsgfVxcblxcbi5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmRpc2FibGVkOmluZGV0ZXJtaW5hdGUgfiAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyMywgMjU1LCAwLjUpOyB9XFxuXFxuLmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSB7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7IH1cXG5cXG4uY3VzdG9tLXJhZGlvIC5jdXN0b20tY29udHJvbC1pbnB1dDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PSctNCAtNCA4IDgnJTNlJTNjY2lyY2xlIHI9JzMnIGZpbGw9JyUyM2ZmZicvJTNlJTNjL3N2ZyUzZVxcXCIpOyB9XFxuXFxuLmN1c3RvbS1yYWRpbyAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6ZGlzYWJsZWQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTIzLCAyNTUsIDAuNSk7IH1cXG5cXG4uY3VzdG9tLXN3aXRjaCB7XFxuICBwYWRkaW5nLWxlZnQ6IDIuMjVyZW07IH1cXG4gIC5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlIHtcXG4gICAgbGVmdDogLTIuMjVyZW07XFxuICAgIHdpZHRoOiAxLjc1cmVtO1xcbiAgICBwb2ludGVyLWV2ZW50czogYWxsO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07IH1cXG4gIC5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXIge1xcbiAgICB0b3A6IGNhbGMoMC4yNXJlbSArIDJweCk7XFxuICAgIGxlZnQ6IGNhbGMoLTIuMjVyZW0gKyAycHgpO1xcbiAgICB3aWR0aDogY2FsYygxcmVtIC0gNHB4KTtcXG4gICAgaGVpZ2h0OiBjYWxjKDFyZW0gLSA0cHgpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWRiNWJkO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xNXMgZWFzZS1pbi1vdXQ7XFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjE1cyBlYXNlLWluLW91dCwgYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4xNXMgZWFzZS1pbi1vdXQsIGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4xNXMgZWFzZS1pbi1vdXQ7IH1cXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgICAgIC5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXIge1xcbiAgICAgICAgdHJhbnNpdGlvbjogbm9uZTsgfSB9XFxuICAuY3VzdG9tLXN3aXRjaCAuY3VzdG9tLWNvbnRyb2wtaW5wdXQ6Y2hlY2tlZCB+IC5jdXN0b20tY29udHJvbC1sYWJlbDo6YWZ0ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgwLjc1cmVtKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMC43NXJlbSk7IH1cXG4gIC5jdXN0b20tc3dpdGNoIC5jdXN0b20tY29udHJvbC1pbnB1dDpkaXNhYmxlZDpjaGVja2VkIH4gLmN1c3RvbS1jb250cm9sLWxhYmVsOjpiZWZvcmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEyMywgMjU1LCAwLjUpOyB9XFxuXFxuLmN1c3RvbS1zZWxlY3Qge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBwYWRkaW5nOiAwLjM3NXJlbSAxLjc1cmVtIDAuMzc1cmVtIDAuNzVyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIGJhY2tncm91bmQ6IHVybChcXFwiZGF0YTppbWFnZS9zdmcreG1sLCUzY3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0IDUnJTNlJTNjcGF0aCBmaWxsPSclMjMzNDNhNDAnIGQ9J00yIDBMMCAyaDR6bTAgNUwwIDNoNHonLyUzZSUzYy9zdmclM2VcXFwiKSBuby1yZXBlYXQgcmlnaHQgMC43NXJlbSBjZW50ZXIvOHB4IDEwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7IH1cXG4gIC5jdXN0b20tc2VsZWN0OmZvY3VzIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjODBiZGZmO1xcbiAgICBvdXRsaW5lOiAwO1xcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgxMjgsIDE4OSwgMjU1LCAwLjUpOyB9XFxuICAgIC5jdXN0b20tc2VsZWN0OmZvY3VzOjotbXMtdmFsdWUge1xcbiAgICAgIGNvbG9yOiAjNDk1MDU3O1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG4gIC5jdXN0b20tc2VsZWN0W211bHRpcGxlXSwgLmN1c3RvbS1zZWxlY3Rbc2l6ZV06bm90KFtzaXplPVxcXCIxXFxcIl0pIHtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjc1cmVtO1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lOyB9XFxuICAuY3VzdG9tLXNlbGVjdDpkaXNhYmxlZCB7XFxuICAgIGNvbG9yOiAjNmM3NTdkO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOyB9XFxuICAuY3VzdG9tLXNlbGVjdDo6LW1zLWV4cGFuZCB7XFxuICAgIG9wYWNpdHk6IDA7IH1cXG5cXG4uY3VzdG9tLXNlbGVjdC1zbSB7XFxuICBoZWlnaHQ6IGNhbGMoMS44MTI1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuMjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07IH1cXG5cXG4uY3VzdG9tLXNlbGVjdC1sZyB7XFxuICBoZWlnaHQ6IGNhbGMoMi44NzVyZW0gKyAycHgpO1xcbiAgcGFkZGluZy10b3A6IDAuNXJlbTtcXG4gIHBhZGRpbmctYm90dG9tOiAwLjVyZW07XFxuICBwYWRkaW5nLWxlZnQ6IDFyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07IH1cXG5cXG4uY3VzdG9tLWZpbGUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGNhbGMoMi4yNXJlbSArIDJweCk7XFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuXFxuLmN1c3RvbS1maWxlLWlucHV0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHotaW5kZXg6IDI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXG4gIG1hcmdpbjogMDtcXG4gIG9wYWNpdHk6IDA7IH1cXG4gIC5jdXN0b20tZmlsZS1pbnB1dDpmb2N1cyB+IC5jdXN0b20tZmlsZS1sYWJlbCB7XFxuICAgIGJvcmRlci1jb2xvcjogIzgwYmRmZjtcXG4gICAgYm94LXNoYWRvdzogMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpOyB9XFxuICAuY3VzdG9tLWZpbGUtaW5wdXQ6ZGlzYWJsZWQgfiAuY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOyB9XFxuICAuY3VzdG9tLWZpbGUtaW5wdXQ6bGFuZyhlbikgfiAuY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVyIHtcXG4gICAgY29udGVudDogXFxcIkJyb3dzZVxcXCI7IH1cXG4gIC5jdXN0b20tZmlsZS1pbnB1dCB+IC5jdXN0b20tZmlsZS1sYWJlbFtkYXRhLWJyb3dzZV06OmFmdGVyIHtcXG4gICAgY29udGVudDogYXR0cihkYXRhLWJyb3dzZSk7IH1cXG5cXG4uY3VzdG9tLWZpbGUtbGFiZWwge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTtcXG4gIGhlaWdodDogY2FsYygyLjI1cmVtICsgMnB4KTtcXG4gIHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG4gIGNvbG9yOiAjNDk1MDU3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjZWQ0ZGE7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAuY3VzdG9tLWZpbGUtbGFiZWw6OmFmdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIHotaW5kZXg6IDM7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBoZWlnaHQ6IDIuMjVyZW07XFxuICAgIHBhZGRpbmc6IDAuMzc1cmVtIDAuNzVyZW07XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICAgIGNvbG9yOiAjNDk1MDU3O1xcbiAgICBjb250ZW50OiBcXFwiQnJvd3NlXFxcIjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gICAgYm9yZGVyLWxlZnQ6IGluaGVyaXQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAgMC4yNXJlbSAwLjI1cmVtIDA7IH1cXG5cXG4uY3VzdG9tLXJhbmdlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiBjYWxjKDFyZW0gKyAwLjRyZW0pO1xcbiAgcGFkZGluZzogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgICAgICBhcHBlYXJhbmNlOiBub25lOyB9XFxuICAuY3VzdG9tLXJhbmdlOmZvY3VzIHtcXG4gICAgb3V0bGluZTogbm9uZTsgfVxcbiAgICAuY3VzdG9tLXJhbmdlOmZvY3VzOjotd2Via2l0LXNsaWRlci10aHVtYiB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZmYsIDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTsgfVxcbiAgICAuY3VzdG9tLXJhbmdlOmZvY3VzOjotbW96LXJhbmdlLXRodW1iIHtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMCAxcHggI2ZmZiwgMCAwIDAgMC4ycmVtIHJnYmEoMCwgMTIzLCAyNTUsIDAuMjUpOyB9XFxuICAgIC5jdXN0b20tcmFuZ2U6Zm9jdXM6Oi1tcy10aHVtYiB7XFxuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMXB4ICNmZmYsIDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTsgfVxcbiAgLmN1c3RvbS1yYW5nZTo6LW1vei1mb2N1cy1vdXRlciB7XFxuICAgIGJvcmRlcjogMDsgfVxcbiAgLmN1c3RvbS1yYW5nZTo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgICB3aWR0aDogMXJlbTtcXG4gICAgaGVpZ2h0OiAxcmVtO1xcbiAgICBtYXJnaW4tdG9wOiAtMC4yNXJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gICAgYm9yZGVyOiAwO1xcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xcbiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3JkZXItY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7XFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgICAgICAgICBhcHBlYXJhbmNlOiBub25lOyB9XFxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gICAgICAuY3VzdG9tLXJhbmdlOjotd2Via2l0LXNsaWRlci10aHVtYiB7XFxuICAgICAgICB0cmFuc2l0aW9uOiBub25lOyB9IH1cXG4gICAgLmN1c3RvbS1yYW5nZTo6LXdlYmtpdC1zbGlkZXItdGh1bWI6YWN0aXZlIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNkN2ZmOyB9XFxuICAuY3VzdG9tLXJhbmdlOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFjayB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDAuNXJlbTtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZWUyZTY7XFxuICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07IH1cXG4gIC5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcbiAgICB3aWR0aDogMXJlbTtcXG4gICAgaGVpZ2h0OiAxcmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgICBib3JkZXI6IDA7XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcXG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7IH1cXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgICAgIC5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWIge1xcbiAgICAgICAgdHJhbnNpdGlvbjogbm9uZTsgfSB9XFxuICAgIC5jdXN0b20tcmFuZ2U6Oi1tb3otcmFuZ2UtdGh1bWI6YWN0aXZlIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNkN2ZmOyB9XFxuICAuY3VzdG9tLXJhbmdlOjotbW96LXJhbmdlLXRyYWNrIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMC41cmVtO1xcbiAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RlZTJlNjtcXG4gICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTsgfVxcbiAgLmN1c3RvbS1yYW5nZTo6LW1zLXRodW1iIHtcXG4gICAgd2lkdGg6IDFyZW07XFxuICAgIGhlaWdodDogMXJlbTtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjJyZW07XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjJyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICAgIGJvcmRlcjogMDtcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTtcXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xcbiAgICBhcHBlYXJhbmNlOiBub25lOyB9XFxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gICAgICAuY3VzdG9tLXJhbmdlOjotbXMtdGh1bWIge1xcbiAgICAgICAgdHJhbnNpdGlvbjogbm9uZTsgfSB9XFxuICAgIC5jdXN0b20tcmFuZ2U6Oi1tcy10aHVtYjphY3RpdmUge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNiM2Q3ZmY7IH1cXG4gIC5jdXN0b20tcmFuZ2U6Oi1tcy10cmFjayB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDAuNXJlbTtcXG4gICAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItd2lkdGg6IDAuNXJlbTsgfVxcbiAgLmN1c3RvbS1yYW5nZTo6LW1zLWZpbGwtbG93ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGVlMmU2O1xcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtOyB9XFxuICAuY3VzdG9tLXJhbmdlOjotbXMtZmlsbC11cHBlciB7XFxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RlZTJlNjtcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTsgfVxcbiAgLmN1c3RvbS1yYW5nZTpkaXNhYmxlZDo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWRiNWJkOyB9XFxuICAuY3VzdG9tLXJhbmdlOmRpc2FibGVkOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFjayB7XFxuICAgIGN1cnNvcjogZGVmYXVsdDsgfVxcbiAgLmN1c3RvbS1yYW5nZTpkaXNhYmxlZDo6LW1vei1yYW5nZS10aHVtYiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhZGI1YmQ7IH1cXG4gIC5jdXN0b20tcmFuZ2U6ZGlzYWJsZWQ6Oi1tb3otcmFuZ2UtdHJhY2sge1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG4gIC5jdXN0b20tcmFuZ2U6ZGlzYWJsZWQ6Oi1tcy10aHVtYiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhZGI1YmQ7IH1cXG5cXG4uY3VzdG9tLWNvbnRyb2wtbGFiZWw6OmJlZm9yZSxcXG4uY3VzdG9tLWZpbGUtbGFiZWwsXFxuLmN1c3RvbS1zZWxlY3Qge1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm9yZGVyLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0OyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAgIC5jdXN0b20tY29udHJvbC1sYWJlbDo6YmVmb3JlLFxcbiAgICAuY3VzdG9tLWZpbGUtbGFiZWwsXFxuICAgIC5jdXN0b20tc2VsZWN0IHtcXG4gICAgICB0cmFuc2l0aW9uOiBub25lOyB9IH1cXG5cXG4ubmF2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxcblxcbi5uYXYtbGluayB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtOyB9XFxuICAubmF2LWxpbms6aG92ZXIsIC5uYXYtbGluazpmb2N1cyB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcbiAgLm5hdi1saW5rLmRpc2FibGVkIHtcXG4gICAgY29sb3I6ICM2Yzc1N2Q7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cXG4ubmF2LXRhYnMge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZWUyZTY7IH1cXG4gIC5uYXYtdGFicyAubmF2LWl0ZW0ge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMXB4OyB9XFxuICAubmF2LXRhYnMgLm5hdi1saW5rIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAgIC5uYXYtdGFicyAubmF2LWxpbms6aG92ZXIsIC5uYXYtdGFicyAubmF2LWxpbms6Zm9jdXMge1xcbiAgICAgIGJvcmRlci1jb2xvcjogI2U5ZWNlZiAjZTllY2VmICNkZWUyZTY7IH1cXG4gICAgLm5hdi10YWJzIC5uYXYtbGluay5kaXNhYmxlZCB7XFxuICAgICAgY29sb3I6ICM2Yzc1N2Q7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsgfVxcbiAgLm5hdi10YWJzIC5uYXYtbGluay5hY3RpdmUsXFxuICAubmF2LXRhYnMgLm5hdi1pdGVtLnNob3cgLm5hdi1saW5rIHtcXG4gICAgY29sb3I6ICM0OTUwNTc7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgIGJvcmRlci1jb2xvcjogI2RlZTJlNiAjZGVlMmU2ICNmZmY7IH1cXG4gIC5uYXYtdGFicyAuZHJvcGRvd24tbWVudSB7XFxuICAgIG1hcmdpbi10b3A6IC0xcHg7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwOyB9XFxuXFxuLm5hdi1waWxscyAubmF2LWxpbmsge1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcblxcbi5uYXYtcGlsbHMgLm5hdi1saW5rLmFjdGl2ZSxcXG4ubmF2LXBpbGxzIC5zaG93ID4gLm5hdi1saW5rIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsgfVxcblxcbi5uYXYtZmlsbCAubmF2LWl0ZW0ge1xcbiAgZmxleDogMSAxIGF1dG87XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG4ubmF2LWp1c3RpZmllZCAubmF2LWl0ZW0ge1xcbiAgZmxleC1iYXNpczogMDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi50YWItY29udGVudCA+IC50YWItcGFuZSB7XFxuICBkaXNwbGF5OiBub25lOyB9XFxuXFxuLnRhYi1jb250ZW50ID4gLmFjdGl2ZSB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5uYXZiYXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTsgfVxcbiAgLm5hdmJhciA+IC5jb250YWluZXIsXFxuICAubmF2YmFyID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9XFxuXFxuLm5hdmJhci1icmFuZCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMC4zMTI1cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuMzEyNXJlbTtcXG4gIG1hcmdpbi1yaWdodDogMXJlbTtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxcbiAgLm5hdmJhci1icmFuZDpob3ZlciwgLm5hdmJhci1icmFuZDpmb2N1cyB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcblxcbi5uYXZiYXItbmF2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cXG4gIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxuICAgIHBhZGRpbmctbGVmdDogMDsgfVxcbiAgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICBwb3NpdGlvbjogc3RhdGljO1xcbiAgICBmbG9hdDogbm9uZTsgfVxcblxcbi5uYXZiYXItdGV4dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLXRvcDogMC41cmVtO1xcbiAgcGFkZGluZy1ib3R0b206IDAuNXJlbTsgfVxcblxcbi5uYXZiYXItY29sbGFwc2Uge1xcbiAgZmxleC1iYXNpczogMTAwJTtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IH1cXG5cXG4ubmF2YmFyLXRvZ2dsZXIge1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjc1cmVtO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcbiAgLm5hdmJhci10b2dnbGVyOmhvdmVyLCAubmF2YmFyLXRvZ2dsZXI6Zm9jdXMge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIC5uYXZiYXItdG9nZ2xlcjpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5uYXZiYXItdG9nZ2xlci1pY29uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxLjVlbTtcXG4gIGhlaWdodDogMS41ZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBiYWNrZ3JvdW5kOiBuby1yZXBlYXQgY2VudGVyIGNlbnRlcjtcXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJSAxMDAlOyB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NS45OHB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC1zbSA+IC5jb250YWluZXIsXFxuICAubmF2YmFyLWV4cGFuZC1zbSA+IC5jb250YWluZXItZmx1aWQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDA7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLm5hdmJhci1leHBhbmQtc20ge1xcbiAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC1zbSAubmF2YmFyLW5hdiB7XFxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdzsgfVxcbiAgICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5kcm9wZG93bi1tZW51IHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcbiAgICAgIC5uYXZiYXItZXhwYW5kLXNtIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW07XFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC1zbSA+IC5jb250YWluZXIsXFxuICAgIC5uYXZiYXItZXhwYW5kLXNtID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgICAgZmxleC13cmFwOiBub3dyYXA7IH1cXG4gICAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci1jb2xsYXBzZSB7XFxuICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbiAgICAgIGZsZXgtYmFzaXM6IGF1dG87IH1cXG4gICAgLm5hdmJhci1leHBhbmQtc20gLm5hdmJhci10b2dnbGVyIHtcXG4gICAgICBkaXNwbGF5OiBub25lOyB9IH1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogNzY3Ljk4cHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLW1kID4gLmNvbnRhaW5lcixcXG4gIC5uYXZiYXItZXhwYW5kLW1kID4gLmNvbnRhaW5lci1mbHVpZCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDA7XFxuICAgIHBhZGRpbmctbGVmdDogMDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC1tZCB7XFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLW1kIC5uYXZiYXItbmF2IHtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93OyB9XFxuICAgICAgLm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyB9XFxuICAgICAgLm5hdmJhci1leHBhbmQtbWQgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMC41cmVtOyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLW1kID4gLmNvbnRhaW5lcixcXG4gICAgLm5hdmJhci1leHBhbmQtbWQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgICAgZmxleC1iYXNpczogYXV0bzsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC1tZCAubmF2YmFyLXRvZ2dsZXIge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA5OTEuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5uYXZiYXItZXhwYW5kLWxnIHtcXG4gICAgZmxleC1mbG93OiByb3cgbm93cmFwO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7IH1cXG4gICAgLm5hdmJhci1leHBhbmQtbGcgLm5hdmJhci1uYXYge1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7IH1cXG4gICAgICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7IH1cXG4gICAgICAubmF2YmFyLWV4cGFuZC1sZyAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgICAgICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAwLjVyZW07IH1cXG4gICAgLm5hdmJhci1leHBhbmQtbGcgPiAuY29udGFpbmVyLFxcbiAgICAubmF2YmFyLWV4cGFuZC1sZyA+IC5jb250YWluZXItZmx1aWQge1xcbiAgICAgIGZsZXgtd3JhcDogbm93cmFwOyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDtcXG4gICAgICBmbGV4LWJhc2lzOiBhdXRvOyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLWxnIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgICAgZGlzcGxheTogbm9uZTsgfSB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDExOTkuOThweCkge1xcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAubmF2YmFyLWV4cGFuZC14bCB7XFxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLXhsIC5uYXZiYXItbmF2IHtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93OyB9XFxuICAgICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOyB9XFxuICAgICAgLm5hdmJhci1leHBhbmQteGwgLm5hdmJhci1uYXYgLm5hdi1saW5rIHtcXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMC41cmVtOyB9XFxuICAgIC5uYXZiYXItZXhwYW5kLXhsID4gLmNvbnRhaW5lcixcXG4gICAgLm5hdmJhci1leHBhbmQteGwgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgICBmbGV4LXdyYXA6IG5vd3JhcDsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLWNvbGxhcHNlIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgICAgZmxleC1iYXNpczogYXV0bzsgfVxcbiAgICAubmF2YmFyLWV4cGFuZC14bCAubmF2YmFyLXRvZ2dsZXIge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxcblxcbi5uYXZiYXItZXhwYW5kIHtcXG4gIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgfVxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgcGFkZGluZy1yaWdodDogMDtcXG4gICAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuICAubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7IH1cXG4gICAgLm5hdmJhci1leHBhbmQgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxcbiAgICAubmF2YmFyLWV4cGFuZCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTtcXG4gICAgICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTsgfVxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLFxcbiAgLm5hdmJhci1leHBhbmQgPiAuY29udGFpbmVyLWZsdWlkIHtcXG4gICAgZmxleC13cmFwOiBub3dyYXA7IH1cXG4gIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItY29sbGFwc2Uge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxuICAgIGZsZXgtYmFzaXM6IGF1dG87IH1cXG4gIC5uYXZiYXItZXhwYW5kIC5uYXZiYXItdG9nZ2xlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTsgfVxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLWJyYW5kOmhvdmVyLCAubmF2YmFyLWxpZ2h0IC5uYXZiYXItYnJhbmQ6Zm9jdXMge1xcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpOyB9XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbms6aG92ZXIsIC5uYXZiYXItbGlnaHQgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzIHtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTsgfVxcbiAgLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjMpOyB9XFxuXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5hY3RpdmUgPiAubmF2LWxpbmssXFxuLm5hdmJhci1saWdodCAubmF2YmFyLW5hdiAubmF2LWxpbmsuc2hvdyxcXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTsgfVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyIHtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsgfVxcblxcbi5uYXZiYXItbGlnaHQgLm5hdmJhci10b2dnbGVyLWljb24ge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHZpZXdCb3g9JzAgMCAzMCAzMCcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzZSUzY3BhdGggc3Ryb2tlPSdyZ2JhKDAsIDAsIDAsIDAuNSknIHN0cm9rZS13aWR0aD0nMicgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbWl0ZXJsaW1pdD0nMTAnIGQ9J000IDdoMjJNNCAxNWgyMk00IDIzaDIyJy8lM2UlM2Mvc3ZnJTNlXFxcIik7IH1cXG5cXG4ubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCB7XFxuICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpOyB9XFxuICAubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhIHtcXG4gICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC45KTsgfVxcbiAgICAubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhOmhvdmVyLCAubmF2YmFyLWxpZ2h0IC5uYXZiYXItdGV4dCBhOmZvY3VzIHtcXG4gICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjkpOyB9XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItYnJhbmQge1xcbiAgY29sb3I6ICNmZmY7IH1cXG4gIC5uYXZiYXItZGFyayAubmF2YmFyLWJyYW5kOmhvdmVyLCAubmF2YmFyLWRhcmsgLm5hdmJhci1icmFuZDpmb2N1cyB7XFxuICAgIGNvbG9yOiAjZmZmOyB9XFxuXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluayB7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpOyB9XFxuICAubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rOmhvdmVyLCAubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rOmZvY3VzIHtcXG4gICAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSk7IH1cXG4gIC5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAubmF2LWxpbmsuZGlzYWJsZWQge1xcbiAgICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTsgfVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLW5hdiAuc2hvdyA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLmFjdGl2ZSA+IC5uYXYtbGluayxcXG4ubmF2YmFyLWRhcmsgLm5hdmJhci1uYXYgLm5hdi1saW5rLnNob3csXFxuLm5hdmJhci1kYXJrIC5uYXZiYXItbmF2IC5uYXYtbGluay5hY3RpdmUge1xcbiAgY29sb3I6ICNmZmY7IH1cXG5cXG4ubmF2YmFyLWRhcmsgLm5hdmJhci10b2dnbGVyIHtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSk7XFxuICBib3JkZXItY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTsgfVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRvZ2dsZXItaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2Nzdmcgdmlld0JveD0nMCAwIDMwIDMwJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNlJTNjcGF0aCBzdHJva2U9J3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScgc3Ryb2tlLXdpZHRoPScyJyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1taXRlcmxpbWl0PScxMCcgZD0nTTQgN2gyMk00IDE1aDIyTTQgMjNoMjInLyUzZSUzYy9zdmclM2VcXFwiKTsgfVxcblxcbi5uYXZiYXItZGFyayAubmF2YmFyLXRleHQge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTsgfVxcbiAgLm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhIHtcXG4gICAgY29sb3I6ICNmZmY7IH1cXG4gICAgLm5hdmJhci1kYXJrIC5uYXZiYXItdGV4dCBhOmhvdmVyLCAubmF2YmFyLWRhcmsgLm5hdmJhci10ZXh0IGE6Zm9jdXMge1xcbiAgICAgIGNvbG9yOiAjZmZmOyB9XFxuXFxuLmNhcmQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBtaW4td2lkdGg6IDA7XFxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jbGlwOiBib3JkZXItYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyNSk7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAuY2FyZCA+IGhyIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xcbiAgICBtYXJnaW4tbGVmdDogMDsgfVxcbiAgLmNhcmQgPiAubGlzdC1ncm91cDpmaXJzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmZpcnN0LWNoaWxkIHtcXG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07IH1cXG4gIC5jYXJkID4gLmxpc3QtZ3JvdXA6bGFzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmxhc3QtY2hpbGQge1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4yNXJlbTsgfVxcblxcbi5jYXJkLWJvZHkge1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBwYWRkaW5nOiAxLjI1cmVtOyB9XFxuXFxuLmNhcmQtdGl0bGUge1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTsgfVxcblxcbi5jYXJkLXN1YnRpdGxlIHtcXG4gIG1hcmdpbi10b3A6IC0wLjM3NXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDA7IH1cXG5cXG4uY2FyZC10ZXh0Omxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogMDsgfVxcblxcbi5jYXJkLWxpbms6aG92ZXIge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxuXFxuLmNhcmQtbGluayArIC5jYXJkLWxpbmsge1xcbiAgbWFyZ2luLWxlZnQ6IDEuMjVyZW07IH1cXG5cXG4uY2FyZC1oZWFkZXIge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjAzKTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTI1KTsgfVxcbiAgLmNhcmQtaGVhZGVyOmZpcnN0LWNoaWxkIHtcXG4gICAgYm9yZGVyLXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KSBjYWxjKDAuMjVyZW0gLSAxcHgpIDAgMDsgfVxcbiAgLmNhcmQtaGVhZGVyICsgLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxuICAgIGJvcmRlci10b3A6IDA7IH1cXG5cXG4uY2FyZC1mb290ZXIge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjAzKTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMTI1KTsgfVxcbiAgLmNhcmQtZm9vdGVyOmxhc3QtY2hpbGQge1xcbiAgICBib3JkZXItcmFkaXVzOiAwIDAgY2FsYygwLjI1cmVtIC0gMXB4KSBjYWxjKDAuMjVyZW0gLSAxcHgpOyB9XFxuXFxuLmNhcmQtaGVhZGVyLXRhYnMge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC42MjVyZW07XFxuICBtYXJnaW4tYm90dG9tOiAtMC43NXJlbTtcXG4gIG1hcmdpbi1sZWZ0OiAtMC42MjVyZW07XFxuICBib3JkZXItYm90dG9tOiAwOyB9XFxuXFxuLmNhcmQtaGVhZGVyLXBpbGxzIHtcXG4gIG1hcmdpbi1yaWdodDogLTAuNjI1cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IC0wLjYyNXJlbTsgfVxcblxcbi5jYXJkLWltZy1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHBhZGRpbmc6IDEuMjVyZW07IH1cXG5cXG4uY2FyZC1pbWcge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItcmFkaXVzOiBjYWxjKDAuMjVyZW0gLSAxcHgpOyB9XFxuXFxuLmNhcmQtaW1nLXRvcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTsgfVxcblxcbi5jYXJkLWltZy1ib3R0b20ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogY2FsYygwLjI1cmVtIC0gMXB4KTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IGNhbGMoMC4yNXJlbSAtIDFweCk7IH1cXG5cXG4uY2FyZC1kZWNrIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyB9XFxuICAuY2FyZC1kZWNrIC5jYXJkIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDsgfVxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAgIC5jYXJkLWRlY2sge1xcbiAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAtMTVweDtcXG4gICAgICBtYXJnaW4tbGVmdDogLTE1cHg7IH1cXG4gICAgICAuY2FyZC1kZWNrIC5jYXJkIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4OiAxIDAgMCU7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxNXB4OyB9IH1cXG5cXG4uY2FyZC1ncm91cCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfVxcbiAgLmNhcmQtZ3JvdXAgPiAuY2FyZCB7XFxuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgICAuY2FyZC1ncm91cCB7XFxuICAgICAgZmxleC1mbG93OiByb3cgd3JhcDsgfVxcbiAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQge1xcbiAgICAgICAgZmxleDogMSAwIDAlO1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsgfVxcbiAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZCArIC5jYXJkIHtcXG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XFxuICAgICAgICAgIGJvcmRlci1sZWZ0OiAwOyB9XFxuICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOmZpcnN0LWNoaWxkIHtcXG4gICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxuICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6Zmlyc3QtY2hpbGQgLmNhcmQtaW1nLXRvcCxcXG4gICAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpmaXJzdC1jaGlsZCAuY2FyZC1oZWFkZXIge1xcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6Zmlyc3QtY2hpbGQgLmNhcmQtaW1nLWJvdHRvbSxcXG4gICAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpmaXJzdC1jaGlsZCAuY2FyZC1mb290ZXIge1xcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQge1xcbiAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1pbWctdG9wLFxcbiAgICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQgLmNhcmQtaGVhZGVyIHtcXG4gICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6bGFzdC1jaGlsZCAuY2FyZC1pbWctYm90dG9tLFxcbiAgICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOmxhc3QtY2hpbGQgLmNhcmQtZm9vdGVyIHtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwOyB9XFxuICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOm9ubHktY2hpbGQge1xcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCAuY2FyZC1pbWctdG9wLFxcbiAgICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOm9ubHktY2hpbGQgLmNhcmQtaGVhZGVyIHtcXG4gICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAgICAgICAgIC5jYXJkLWdyb3VwID4gLmNhcmQ6b25seS1jaGlsZCAuY2FyZC1pbWctYm90dG9tLFxcbiAgICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOm9ubHktY2hpbGQgLmNhcmQtZm9vdGVyIHtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtOyB9XFxuICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSB7XFxuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7IH1cXG4gICAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkgLmNhcmQtaW1nLXRvcCxcXG4gICAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkgLmNhcmQtaW1nLWJvdHRvbSxcXG4gICAgICAgICAgLmNhcmQtZ3JvdXAgPiAuY2FyZDpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCg6b25seS1jaGlsZCkgLmNhcmQtaGVhZGVyLFxcbiAgICAgICAgICAuY2FyZC1ncm91cCA+IC5jYXJkOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCk6bm90KDpvbmx5LWNoaWxkKSAuY2FyZC1mb290ZXIge1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDA7IH0gfVxcblxcbi5jYXJkLWNvbHVtbnMgLmNhcmQge1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTsgfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLmNhcmQtY29sdW1ucyB7XFxuICAgIC13ZWJraXQtY29sdW1uLWNvdW50OiAzO1xcbiAgICAgICAgICAgIGNvbHVtbi1jb3VudDogMztcXG4gICAgLXdlYmtpdC1jb2x1bW4tZ2FwOiAxLjI1cmVtO1xcbiAgICAgICAgICAgIGNvbHVtbi1nYXA6IDEuMjVyZW07XFxuICAgIG9ycGhhbnM6IDE7XFxuICAgIHdpZG93czogMTsgfVxcbiAgICAuY2FyZC1jb2x1bW5zIC5jYXJkIHtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgICAgd2lkdGg6IDEwMCU7IH0gfVxcblxcbi5hY2NvcmRpb24gLmNhcmQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgLmFjY29yZGlvbiAuY2FyZDpub3QoOmZpcnN0LW9mLXR5cGUpIC5jYXJkLWhlYWRlcjpmaXJzdC1jaGlsZCB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7IH1cXG4gIC5hY2NvcmRpb24gLmNhcmQ6bm90KDpmaXJzdC1vZi10eXBlKTpub3QoOmxhc3Qtb2YtdHlwZSkge1xcbiAgICBib3JkZXItYm90dG9tOiAwO1xcbiAgICBib3JkZXItcmFkaXVzOiAwOyB9XFxuICAuYWNjb3JkaW9uIC5jYXJkOmZpcnN0LW9mLXR5cGUge1xcbiAgICBib3JkZXItYm90dG9tOiAwO1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDsgfVxcbiAgLmFjY29yZGlvbiAuY2FyZDpsYXN0LW9mLXR5cGUge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMDsgfVxcbiAgLmFjY29yZGlvbiAuY2FyZCAuY2FyZC1oZWFkZXIge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMXB4OyB9XFxuXFxuLmJyZWFkY3J1bWIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG5cXG4uYnJlYWRjcnVtYi1pdGVtICsgLmJyZWFkY3J1bWItaXRlbSB7XFxuICBwYWRkaW5nLWxlZnQ6IDAuNXJlbTsgfVxcbiAgLmJyZWFkY3J1bWItaXRlbSArIC5icmVhZGNydW1iLWl0ZW06OmJlZm9yZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcGFkZGluZy1yaWdodDogMC41cmVtO1xcbiAgICBjb2xvcjogIzZjNzU3ZDtcXG4gICAgY29udGVudDogXFxcIi9cXFwiOyB9XFxuXFxuLmJyZWFkY3J1bWItaXRlbSArIC5icmVhZGNydW1iLWl0ZW06aG92ZXI6OmJlZm9yZSB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxcblxcbi5icmVhZGNydW1iLWl0ZW0gKyAuYnJlYWRjcnVtYi1pdGVtOmhvdmVyOjpiZWZvcmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxuXFxuLmJyZWFkY3J1bWItaXRlbS5hY3RpdmUge1xcbiAgY29sb3I6ICM2Yzc1N2Q7IH1cXG5cXG4ucGFnaW5hdGlvbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG5cXG4ucGFnZS1saW5rIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcGFkZGluZzogMC41cmVtIDAuNzVyZW07XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjI1O1xcbiAgY29sb3I6ICMwMDdiZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNjsgfVxcbiAgLnBhZ2UtbGluazpob3ZlciB7XFxuICAgIHotaW5kZXg6IDI7XFxuICAgIGNvbG9yOiAjMDA1NmIzO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICAgIGJvcmRlci1jb2xvcjogI2RlZTJlNjsgfVxcbiAgLnBhZ2UtbGluazpmb2N1cyB7XFxuICAgIHotaW5kZXg6IDI7XFxuICAgIG91dGxpbmU6IDA7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDAsIDEyMywgMjU1LCAwLjI1KTsgfVxcbiAgLnBhZ2UtbGluazpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKSB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5wYWdlLWl0ZW06Zmlyc3QtY2hpbGQgLnBhZ2UtbGluayB7XFxuICBtYXJnaW4tbGVmdDogMDtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtOyB9XFxuXFxuLnBhZ2UtaXRlbTpsYXN0LWNoaWxkIC5wYWdlLWxpbmsge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTsgfVxcblxcbi5wYWdlLWl0ZW0uYWN0aXZlIC5wYWdlLWxpbmsge1xcbiAgei1pbmRleDogMTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcXG4gIGJvcmRlci1jb2xvcjogIzAwN2JmZjsgfVxcblxcbi5wYWdlLWl0ZW0uZGlzYWJsZWQgLnBhZ2UtbGluayB7XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgY3Vyc29yOiBhdXRvO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogI2RlZTJlNjsgfVxcblxcbi5wYWdpbmF0aW9uLWxnIC5wYWdlLWxpbmsge1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjVyZW07XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxuICBsaW5lLWhlaWdodDogMS41OyB9XFxuXFxuLnBhZ2luYXRpb24tbGcgLnBhZ2UtaXRlbTpmaXJzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuM3JlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuM3JlbTsgfVxcblxcbi5wYWdpbmF0aW9uLWxnIC5wYWdlLWl0ZW06bGFzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4zcmVtOyB9XFxuXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtbGluayB7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBsaW5lLWhlaWdodDogMS41OyB9XFxuXFxuLnBhZ2luYXRpb24tc20gLnBhZ2UtaXRlbTpmaXJzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMnJlbTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMnJlbTsgfVxcblxcbi5wYWdpbmF0aW9uLXNtIC5wYWdlLWl0ZW06bGFzdC1jaGlsZCAucGFnZS1saW5rIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjJyZW07XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4ycmVtOyB9XFxuXFxuLmJhZGdlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDAuMjVlbSAwLjRlbTtcXG4gIGZvbnQtc2l6ZTogNzUlO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG4gIGEuYmFkZ2U6aG92ZXIsIGEuYmFkZ2U6Zm9jdXMge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIC5iYWRnZTplbXB0eSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7IH1cXG5cXG4uYnRuIC5iYWRnZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IC0xcHg7IH1cXG5cXG4uYmFkZ2UtcGlsbCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjZlbTtcXG4gIHBhZGRpbmctbGVmdDogMC42ZW07XFxuICBib3JkZXItcmFkaXVzOiAxMHJlbTsgfVxcblxcbi5iYWRnZS1wcmltYXJ5IHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjsgfVxcbiAgYS5iYWRnZS1wcmltYXJ5OmhvdmVyLCBhLmJhZGdlLXByaW1hcnk6Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNjJjYzsgfVxcblxcbi5iYWRnZS1zZWNvbmRhcnkge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkOyB9XFxuICBhLmJhZGdlLXNlY29uZGFyeTpob3ZlciwgYS5iYWRnZS1zZWNvbmRhcnk6Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MjsgfVxcblxcbi5iYWRnZS1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NTsgfVxcbiAgYS5iYWRnZS1zdWNjZXNzOmhvdmVyLCBhLmJhZGdlLXN1Y2Nlc3M6Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlN2UzNDsgfVxcblxcbi5iYWRnZS1pbmZvIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiODsgfVxcbiAgYS5iYWRnZS1pbmZvOmhvdmVyLCBhLmJhZGdlLWluZm86Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzExN2E4YjsgfVxcblxcbi5iYWRnZS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjMjEyNTI5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNzsgfVxcbiAgYS5iYWRnZS13YXJuaW5nOmhvdmVyLCBhLmJhZGdlLXdhcm5pbmc6Zm9jdXMge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUwMDsgfVxcblxcbi5iYWRnZS1kYW5nZXIge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1OyB9XFxuICBhLmJhZGdlLWRhbmdlcjpob3ZlciwgYS5iYWRnZS1kYW5nZXI6Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2JkMjEzMDsgfVxcblxcbi5iYWRnZS1saWdodCB7XFxuICBjb2xvcjogIzIxMjUyOTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7IH1cXG4gIGEuYmFkZ2UtbGlnaHQ6aG92ZXIsIGEuYmFkZ2UtbGlnaHQ6Zm9jdXMge1xcbiAgICBjb2xvcjogIzIxMjUyOTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNTsgfVxcblxcbi5iYWRnZS1kYXJrIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MDsgfVxcbiAgYS5iYWRnZS1kYXJrOmhvdmVyLCBhLmJhZGdlLWRhcms6Zm9jdXMge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFkMjEyNDsgfVxcblxcbi5qdW1ib3Ryb24ge1xcbiAgcGFkZGluZzogMnJlbSAxcmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlOWVjZWY7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07IH1cXG4gIEBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgICAuanVtYm90cm9uIHtcXG4gICAgICBwYWRkaW5nOiA0cmVtIDJyZW07IH0gfVxcblxcbi5qdW1ib3Ryb24tZmx1aWQge1xcbiAgcGFkZGluZy1yaWdodDogMDtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG4gIGJvcmRlci1yYWRpdXM6IDA7IH1cXG5cXG4uYWxlcnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgcGFkZGluZzogMC43NXJlbSAxLjI1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTsgfVxcblxcbi5hbGVydC1oZWFkaW5nIHtcXG4gIGNvbG9yOiBpbmhlcml0OyB9XFxuXFxuLmFsZXJ0LWxpbmsge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDsgfVxcblxcbi5hbGVydC1kaXNtaXNzaWJsZSB7XFxuICBwYWRkaW5nLXJpZ2h0OiA0cmVtOyB9XFxuICAuYWxlcnQtZGlzbWlzc2libGUgLmNsb3NlIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICBwYWRkaW5nOiAwLjc1cmVtIDEuMjVyZW07XFxuICAgIGNvbG9yOiBpbmhlcml0OyB9XFxuXFxuLmFsZXJ0LXByaW1hcnkge1xcbiAgY29sb3I6ICMwMDQwODU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NlNWZmO1xcbiAgYm9yZGVyLWNvbG9yOiAjYjhkYWZmOyB9XFxuICAuYWxlcnQtcHJpbWFyeSBociB7XFxuICAgIGJvcmRlci10b3AtY29sb3I6ICM5ZmNkZmY7IH1cXG4gIC5hbGVydC1wcmltYXJ5IC5hbGVydC1saW5rIHtcXG4gICAgY29sb3I6ICMwMDI3NTI7IH1cXG5cXG4uYWxlcnQtc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjMzgzZDQxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNTtcXG4gIGJvcmRlci1jb2xvcjogI2Q2ZDhkYjsgfVxcbiAgLmFsZXJ0LXNlY29uZGFyeSBociB7XFxuICAgIGJvcmRlci10b3AtY29sb3I6ICNjOGNiY2Y7IH1cXG4gIC5hbGVydC1zZWNvbmRhcnkgLmFsZXJ0LWxpbmsge1xcbiAgICBjb2xvcjogIzIwMjMyNjsgfVxcblxcbi5hbGVydC1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjMTU1NzI0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q0ZWRkYTtcXG4gIGJvcmRlci1jb2xvcjogI2MzZTZjYjsgfVxcbiAgLmFsZXJ0LXN1Y2Nlc3MgaHIge1xcbiAgICBib3JkZXItdG9wLWNvbG9yOiAjYjFkZmJiOyB9XFxuICAuYWxlcnQtc3VjY2VzcyAuYWxlcnQtbGluayB7XFxuICAgIGNvbG9yOiAjMGIyZTEzOyB9XFxuXFxuLmFsZXJ0LWluZm8ge1xcbiAgY29sb3I6ICMwYzU0NjA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDFlY2YxO1xcbiAgYm9yZGVyLWNvbG9yOiAjYmVlNWViOyB9XFxuICAuYWxlcnQtaW5mbyBociB7XFxuICAgIGJvcmRlci10b3AtY29sb3I6ICNhYmRkZTU7IH1cXG4gIC5hbGVydC1pbmZvIC5hbGVydC1saW5rIHtcXG4gICAgY29sb3I6ICMwNjJjMzM7IH1cXG5cXG4uYWxlcnQtd2FybmluZyB7XFxuICBjb2xvcjogIzg1NjQwNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYzY2Q7XFxuICBib3JkZXItY29sb3I6ICNmZmVlYmE7IH1cXG4gIC5hbGVydC13YXJuaW5nIGhyIHtcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZThhMTsgfVxcbiAgLmFsZXJ0LXdhcm5pbmcgLmFsZXJ0LWxpbmsge1xcbiAgICBjb2xvcjogIzUzM2YwMzsgfVxcblxcbi5hbGVydC1kYW5nZXIge1xcbiAgY29sb3I6ICM3MjFjMjQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhkN2RhO1xcbiAgYm9yZGVyLWNvbG9yOiAjZjVjNmNiOyB9XFxuICAuYWxlcnQtZGFuZ2VyIGhyIHtcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2YxYjBiNzsgfVxcbiAgLmFsZXJ0LWRhbmdlciAuYWxlcnQtbGluayB7XFxuICAgIGNvbG9yOiAjNDkxMjE3OyB9XFxuXFxuLmFsZXJ0LWxpZ2h0IHtcXG4gIGNvbG9yOiAjODE4MTgyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZmVmZTtcXG4gIGJvcmRlci1jb2xvcjogI2ZkZmRmZTsgfVxcbiAgLmFsZXJ0LWxpZ2h0IGhyIHtcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2VjZWNmNjsgfVxcbiAgLmFsZXJ0LWxpZ2h0IC5hbGVydC1saW5rIHtcXG4gICAgY29sb3I6ICM2ODY4Njg7IH1cXG5cXG4uYWxlcnQtZGFyayB7XFxuICBjb2xvcjogIzFiMWUyMTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNmQ4ZDk7XFxuICBib3JkZXItY29sb3I6ICNjNmM4Y2E7IH1cXG4gIC5hbGVydC1kYXJrIGhyIHtcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2I5YmJiZTsgfVxcbiAgLmFsZXJ0LWRhcmsgLmFsZXJ0LWxpbmsge1xcbiAgICBjb2xvcjogIzA0MDUwNTsgfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBwcm9ncmVzcy1iYXItc3RyaXBlcyB7XFxuICBmcm9tIHtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMXJlbSAwOyB9XFxuICB0byB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMDsgfSB9XFxuXFxuQGtleWZyYW1lcyBwcm9ncmVzcy1iYXItc3RyaXBlcyB7XFxuICBmcm9tIHtcXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMXJlbSAwOyB9XFxuICB0byB7XFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMDsgfSB9XFxuXFxuLnByb2dyZXNzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDFyZW07XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U5ZWNlZjtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG5cXG4ucHJvZ3Jlc3MtYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmO1xcbiAgdHJhbnNpdGlvbjogd2lkdGggMC42cyBlYXNlOyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAgIC5wcm9ncmVzcy1iYXIge1xcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcblxcbi5wcm9ncmVzcy1iYXItc3RyaXBlZCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoNDVkZWcsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgMjUlLCB0cmFuc3BhcmVudCAyNSUsIHRyYW5zcGFyZW50IDUwJSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE1KSA1MCUsIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNSkgNzUlLCB0cmFuc3BhcmVudCA3NSUsIHRyYW5zcGFyZW50KTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMXJlbSAxcmVtOyB9XFxuXFxuLnByb2dyZXNzLWJhci1hbmltYXRlZCB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogcHJvZ3Jlc3MtYmFyLXN0cmlwZXMgMXMgbGluZWFyIGluZmluaXRlO1xcbiAgICAgICAgICBhbmltYXRpb246IHByb2dyZXNzLWJhci1zdHJpcGVzIDFzIGxpbmVhciBpbmZpbml0ZTsgfVxcblxcbi5tZWRpYSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7IH1cXG5cXG4ubWVkaWEtYm9keSB7XFxuICBmbGV4OiAxOyB9XFxuXFxuLmxpc3QtZ3JvdXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBtYXJnaW4tYm90dG9tOiAwOyB9XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBjb2xvcjogIzQ5NTA1NztcXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICAgIGNvbG9yOiAjNDk1MDU3O1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmFjdGl2ZSB7XFxuICAgIGNvbG9yOiAjMjEyNTI5O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTllY2VmOyB9XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBhZGRpbmc6IDAuNzVyZW0gMS4yNXJlbTtcXG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEyNSk7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW06Zmlyc3QtY2hpbGQge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjI1cmVtO1xcbiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4yNXJlbTsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbTpsYXN0LWNoaWxkIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW07IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW06aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW06Zm9jdXMge1xcbiAgICB6LWluZGV4OiAxO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0uZGlzYWJsZWQsIC5saXN0LWdyb3VwLWl0ZW06ZGlzYWJsZWQge1xcbiAgICBjb2xvcjogIzZjNzU3ZDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0uYWN0aXZlIHtcXG4gICAgei1pbmRleDogMjtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICAgIGJvcmRlci1jb2xvcjogIzAwN2JmZjsgfVxcblxcbi5saXN0LWdyb3VwLWZsdXNoIC5saXN0LWdyb3VwLWl0ZW0ge1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwOyB9XFxuICAubGlzdC1ncm91cC1mbHVzaCAubGlzdC1ncm91cC1pdGVtOmxhc3QtY2hpbGQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMXB4OyB9XFxuXFxuLmxpc3QtZ3JvdXAtZmx1c2g6Zmlyc3QtY2hpbGQgLmxpc3QtZ3JvdXAtaXRlbTpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItdG9wOiAwOyB9XFxuXFxuLmxpc3QtZ3JvdXAtZmx1c2g6bGFzdC1jaGlsZCAubGlzdC1ncm91cC1pdGVtOmxhc3QtY2hpbGQge1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGJvcmRlci1ib3R0b206IDA7IH1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXByaW1hcnkge1xcbiAgY29sb3I6ICMwMDQwODU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhkYWZmOyB9XFxuICAubGlzdC1ncm91cC1pdGVtLXByaW1hcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1wcmltYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgICBjb2xvcjogIzAwNDA4NTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzlmY2RmZjsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS1wcmltYXJ5Lmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDQwODU7XFxuICAgIGJvcmRlci1jb2xvcjogIzAwNDA4NTsgfVxcblxcbi5saXN0LWdyb3VwLWl0ZW0tc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjMzgzZDQxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Q2ZDhkYjsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1zZWNvbmRhcnkubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICAgIGNvbG9yOiAjMzgzZDQxO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjYmNmOyB9XFxuICAubGlzdC1ncm91cC1pdGVtLXNlY29uZGFyeS5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzgzZDQxO1xcbiAgICBib3JkZXItY29sb3I6ICMzODNkNDE7IH1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3Mge1xcbiAgY29sb3I6ICMxNTU3MjQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzNlNmNiOyB9XFxuICAubGlzdC1ncm91cC1pdGVtLXN1Y2Nlc3MubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1zdWNjZXNzLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgICBjb2xvcjogIzE1NTcyNDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2IxZGZiYjsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS1zdWNjZXNzLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb24uYWN0aXZlIHtcXG4gICAgY29sb3I6ICNmZmY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNTU3MjQ7XFxuICAgIGJvcmRlci1jb2xvcjogIzE1NTcyNDsgfVxcblxcbi5saXN0LWdyb3VwLWl0ZW0taW5mbyB7XFxuICBjb2xvcjogIzBjNTQ2MDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZWU1ZWI7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0taW5mby5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmhvdmVyLCAubGlzdC1ncm91cC1pdGVtLWluZm8ubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpmb2N1cyB7XFxuICAgIGNvbG9yOiAjMGM1NDYwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWJkZGU1OyB9XFxuICAubGlzdC1ncm91cC1pdGVtLWluZm8ubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzBjNTQ2MDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjMGM1NDYwOyB9XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nIHtcXG4gIGNvbG9yOiAjODU2NDA0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZWViYTsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS13YXJuaW5nLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0td2FybmluZy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gICAgY29sb3I6ICM4NTY0MDQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmU4YTE7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0td2FybmluZy5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjODU2NDA0O1xcbiAgICBib3JkZXItY29sb3I6ICM4NTY0MDQ7IH1cXG5cXG4ubGlzdC1ncm91cC1pdGVtLWRhbmdlciB7XFxuICBjb2xvcjogIzcyMWMyNDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWM2Y2I7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tZGFuZ2VyLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0tZGFuZ2VyLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246Zm9jdXMge1xcbiAgICBjb2xvcjogIzcyMWMyNDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxYjBiNzsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS1kYW5nZXIubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzcyMWMyNDtcXG4gICAgYm9yZGVyLWNvbG9yOiAjNzIxYzI0OyB9XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1saWdodCB7XFxuICBjb2xvcjogIzgxODE4MjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGZkZmU7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tbGlnaHQubGlzdC1ncm91cC1pdGVtLWFjdGlvbjpob3ZlciwgLmxpc3QtZ3JvdXAtaXRlbS1saWdodC5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gICAgY29sb3I6ICM4MTgxODI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlY2VjZjY7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tbGlnaHQubGlzdC1ncm91cC1pdGVtLWFjdGlvbi5hY3RpdmUge1xcbiAgICBjb2xvcjogI2ZmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzgxODE4MjtcXG4gICAgYm9yZGVyLWNvbG9yOiAjODE4MTgyOyB9XFxuXFxuLmxpc3QtZ3JvdXAtaXRlbS1kYXJrIHtcXG4gIGNvbG9yOiAjMWIxZTIxO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2M2YzhjYTsgfVxcbiAgLmxpc3QtZ3JvdXAtaXRlbS1kYXJrLmxpc3QtZ3JvdXAtaXRlbS1hY3Rpb246aG92ZXIsIC5saXN0LWdyb3VwLWl0ZW0tZGFyay5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uOmZvY3VzIHtcXG4gICAgY29sb3I6ICMxYjFlMjE7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiOWJiYmU7IH1cXG4gIC5saXN0LWdyb3VwLWl0ZW0tZGFyay5saXN0LWdyb3VwLWl0ZW0tYWN0aW9uLmFjdGl2ZSB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWIxZTIxO1xcbiAgICBib3JkZXItY29sb3I6ICMxYjFlMjE7IH1cXG5cXG4uY2xvc2Uge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBjb2xvcjogIzAwMDtcXG4gIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmY7XFxuICBvcGFjaXR5OiAuNTsgfVxcbiAgLmNsb3NlOmhvdmVyIHtcXG4gICAgY29sb3I6ICMwMDA7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcbiAgLmNsb3NlOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgIC5jbG9zZTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTpob3ZlciwgLmNsb3NlOm5vdCg6ZGlzYWJsZWQpOm5vdCguZGlzYWJsZWQpOmZvY3VzIHtcXG4gICAgICBvcGFjaXR5OiAuNzU7IH1cXG5cXG5idXR0b24uY2xvc2Uge1xcbiAgcGFkZGluZzogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiAwO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgICAgICBhcHBlYXJhbmNlOiBub25lOyB9XFxuXFxuYS5jbG9zZS5kaXNhYmxlZCB7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxcblxcbi50b2FzdCB7XFxuICBtYXgtd2lkdGg6IDM1MHB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODUpO1xcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICBib3gtc2hhZG93OiAwIDAuMjVyZW0gMC43NXJlbSByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXG4gICAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcbiAgb3BhY2l0eTogMDsgfVxcbiAgLnRvYXN0Om5vdCg6bGFzdC1jaGlsZCkge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtOyB9XFxuICAudG9hc3Quc2hvd2luZyB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIC50b2FzdC5zaG93IHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG4gIC50b2FzdC5oaWRlIHtcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcblxcbi50b2FzdC1oZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNzVyZW07XFxuICBjb2xvcjogIzZjNzU3ZDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44NSk7XFxuICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4wNSk7IH1cXG5cXG4udG9hc3QtYm9keSB7XFxuICBwYWRkaW5nOiAwLjc1cmVtOyB9XFxuXFxuLm1vZGFsLW9wZW4ge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgLm1vZGFsLW9wZW4gLm1vZGFsIHtcXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgICBvdmVyZmxvdy15OiBhdXRvOyB9XFxuXFxuLm1vZGFsIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiAxMDUwO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG91dGxpbmU6IDA7IH1cXG5cXG4ubW9kYWwtZGlhbG9nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiBhdXRvO1xcbiAgbWFyZ2luOiAwLjVyZW07XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTsgfVxcbiAgLm1vZGFsLmZhZGUgLm1vZGFsLWRpYWxvZyB7XFxuICAgIHRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1vdXQ7XFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2Utb3V0O1xcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlLW91dCwgLXdlYmtpdC10cmFuc2Zvcm0gMC4zcyBlYXNlLW91dDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTBweCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwcHgpOyB9XFxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gICAgICAubW9kYWwuZmFkZSAubW9kYWwtZGlhbG9nIHtcXG4gICAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcbiAgLm1vZGFsLnNob3cgLm1vZGFsLWRpYWxvZyB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBub25lO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTsgfVxcblxcbi5tb2RhbC1kaWFsb2ctY2VudGVyZWQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSAoMC41cmVtICogMikpOyB9XFxuICAubW9kYWwtZGlhbG9nLWNlbnRlcmVkOjpiZWZvcmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gKDAuNXJlbSAqIDIpKTtcXG4gICAgY29udGVudDogXFxcIlxcXCI7IH1cXG5cXG4ubW9kYWwtY29udGVudCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIGJvcmRlci1yYWRpdXM6IDAuM3JlbTtcXG4gIG91dGxpbmU6IDA7IH1cXG5cXG4ubW9kYWwtYmFja2Ryb3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHotaW5kZXg6IDEwNDA7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDsgfVxcbiAgLm1vZGFsLWJhY2tkcm9wLmZhZGUge1xcbiAgICBvcGFjaXR5OiAwOyB9XFxuICAubW9kYWwtYmFja2Ryb3Auc2hvdyB7XFxuICAgIG9wYWNpdHk6IDAuNTsgfVxcblxcbi5tb2RhbC1oZWFkZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgcGFkZGluZzogMXJlbSAxcmVtO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOWVjZWY7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjNyZW07XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMC4zcmVtOyB9XFxuICAubW9kYWwtaGVhZGVyIC5jbG9zZSB7XFxuICAgIHBhZGRpbmc6IDFyZW0gMXJlbTtcXG4gICAgbWFyZ2luOiAtMXJlbSAtMXJlbSAtMXJlbSBhdXRvOyB9XFxuXFxuLm1vZGFsLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxuICBsaW5lLWhlaWdodDogMS41OyB9XFxuXFxuLm1vZGFsLWJvZHkge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBwYWRkaW5nOiAxcmVtOyB9XFxuXFxuLm1vZGFsLWZvb3RlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlOWVjZWY7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4zcmVtO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4zcmVtOyB9XFxuICAubW9kYWwtZm9vdGVyID4gOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLWxlZnQ6IC4yNXJlbTsgfVxcbiAgLm1vZGFsLWZvb3RlciA+IDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAuMjVyZW07IH1cXG5cXG4ubW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAtOTk5OXB4O1xcbiAgd2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDUwcHg7XFxuICBvdmVyZmxvdzogc2Nyb2xsOyB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAubW9kYWwtZGlhbG9nIHtcXG4gICAgbWF4LXdpZHRoOiA1MDBweDtcXG4gICAgbWFyZ2luOiAxLjc1cmVtIGF1dG87IH1cXG4gIC5tb2RhbC1kaWFsb2ctY2VudGVyZWQge1xcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSAoMS43NXJlbSAqIDIpKTsgfVxcbiAgICAubW9kYWwtZGlhbG9nLWNlbnRlcmVkOjpiZWZvcmUge1xcbiAgICAgIGhlaWdodDogY2FsYygxMDB2aCAtICgxLjc1cmVtICogMikpOyB9XFxuICAubW9kYWwtc20ge1xcbiAgICBtYXgtd2lkdGg6IDMwMHB4OyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC5tb2RhbC1sZyxcXG4gIC5tb2RhbC14bCB7XFxuICAgIG1heC13aWR0aDogODAwcHg7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC5tb2RhbC14bCB7XFxuICAgIG1heC13aWR0aDogMTE0MHB4OyB9IH1cXG5cXG4udG9vbHRpcCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxMDcwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIEFyaWFsLCBcXFwiTm90byBTYW5zXFxcIiwgc2Fucy1zZXJpZiwgXFxcIkFwcGxlIENvbG9yIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIEVtb2ppXFxcIiwgXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCIsIFxcXCJOb3RvIENvbG9yIEVtb2ppXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHRleHQtYWxpZ246IHN0YXJ0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgdGV4dC1zaGFkb3c6IG5vbmU7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB3b3JkLWJyZWFrOiBub3JtYWw7XFxuICB3b3JkLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICBsaW5lLWJyZWFrOiBhdXRvO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIG9wYWNpdHk6IDA7IH1cXG4gIC50b29sdGlwLnNob3cge1xcbiAgICBvcGFjaXR5OiAwLjk7IH1cXG4gIC50b29sdGlwIC5hcnJvdyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAwLjhyZW07XFxuICAgIGhlaWdodDogMC40cmVtOyB9XFxuICAgIC50b29sdGlwIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgY29udGVudDogXFxcIlxcXCI7XFxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICBib3JkZXItc3R5bGU6IHNvbGlkOyB9XFxuXFxuLmJzLXRvb2x0aXAtdG9wLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0ge1xcbiAgcGFkZGluZzogMC40cmVtIDA7IH1cXG4gIC5icy10b29sdGlwLXRvcCAuYXJyb3csIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3cge1xcbiAgICBib3R0b206IDA7IH1cXG4gICAgLmJzLXRvb2x0aXAtdG9wIC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjpiZWZvcmUge1xcbiAgICAgIHRvcDogMDtcXG4gICAgICBib3JkZXItd2lkdGg6IDAuNHJlbSAwLjRyZW0gMDtcXG4gICAgICBib3JkZXItdG9wLWNvbG9yOiAjMDAwOyB9XFxuXFxuLmJzLXRvb2x0aXAtcmlnaHQsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIHtcXG4gIHBhZGRpbmc6IDAgMC40cmVtOyB9XFxuICAuYnMtdG9vbHRpcC1yaWdodCAuYXJyb3csIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdyB7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAwLjRyZW07XFxuICAgIGhlaWdodDogMC44cmVtOyB9XFxuICAgIC5icy10b29sdGlwLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICAgICAgcmlnaHQ6IDA7XFxuICAgICAgYm9yZGVyLXdpZHRoOiAwLjRyZW0gMC40cmVtIDAuNHJlbSAwO1xcbiAgICAgIGJvcmRlci1yaWdodC1jb2xvcjogIzAwMDsgfVxcblxcbi5icy10b29sdGlwLWJvdHRvbSwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIHtcXG4gIHBhZGRpbmc6IDAuNHJlbSAwOyB9XFxuICAuYnMtdG9vbHRpcC1ib3R0b20gLmFycm93LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93IHtcXG4gICAgdG9wOiAwOyB9XFxuICAgIC5icy10b29sdGlwLWJvdHRvbSAuYXJyb3c6OmJlZm9yZSwgLmJzLXRvb2x0aXAtYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgICBib3R0b206IDA7XFxuICAgICAgYm9yZGVyLXdpZHRoOiAwIDAuNHJlbSAwLjRyZW07XFxuICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzAwMDsgfVxcblxcbi5icy10b29sdGlwLWxlZnQsIC5icy10b29sdGlwLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0ge1xcbiAgcGFkZGluZzogMCAwLjRyZW07IH1cXG4gIC5icy10b29sdGlwLWxlZnQgLmFycm93LCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdyB7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB3aWR0aDogMC40cmVtO1xcbiAgICBoZWlnaHQ6IDAuOHJlbTsgfVxcbiAgICAuYnMtdG9vbHRpcC1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtdG9vbHRpcC1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIGJvcmRlci13aWR0aDogMC40cmVtIDAgMC40cmVtIDAuNHJlbTtcXG4gICAgICBib3JkZXItbGVmdC1jb2xvcjogIzAwMDsgfVxcblxcbi50b29sdGlwLWlubmVyIHtcXG4gIG1heC13aWR0aDogMjAwcHg7XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07IH1cXG5cXG4ucG9wb3ZlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTA2MDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWF4LXdpZHRoOiAyNzZweDtcXG4gIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFJvYm90bywgXFxcIkhlbHZldGljYSBOZXVlXFxcIiwgQXJpYWwsIFxcXCJOb3RvIFNhbnNcXFwiLCBzYW5zLXNlcmlmLCBcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLCBcXFwiU2Vnb2UgVUkgU3ltYm9sXFxcIiwgXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHdvcmQtYnJlYWs6IG5vcm1hbDtcXG4gIHdvcmQtc3BhY2luZzogbm9ybWFsO1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIGxpbmUtYnJlYWs6IGF1dG87XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBib3JkZXItcmFkaXVzOiAwLjNyZW07IH1cXG4gIC5wb3BvdmVyIC5hcnJvdyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiAxcmVtO1xcbiAgICBoZWlnaHQ6IDAuNXJlbTtcXG4gICAgbWFyZ2luOiAwIDAuM3JlbTsgfVxcbiAgICAucG9wb3ZlciAuYXJyb3c6OmJlZm9yZSwgLnBvcG92ZXIgLmFycm93OjphZnRlciB7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsgfVxcblxcbi5icy1wb3BvdmVyLXRvcCwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTsgfVxcbiAgLmJzLXBvcG92ZXItdG9wIC5hcnJvdywgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdyB7XFxuICAgIGJvdHRvbTogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTsgfVxcbiAgLmJzLXBvcG92ZXItdG9wIC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwidG9wXFxcIl0gLmFycm93OjpiZWZvcmUsXFxuICAuYnMtcG9wb3Zlci10b3AgLmFycm93OjphZnRlcixcXG4gIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJ0b3BcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gICAgYm9yZGVyLXdpZHRoOiAwLjVyZW0gMC41cmVtIDA7IH1cXG4gIC5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgYm90dG9tOiAwO1xcbiAgICBib3JkZXItdG9wLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxuICBcXG4gIC5icy1wb3BvdmVyLXRvcCAuYXJyb3c6OmFmdGVyLFxcbiAgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInRvcFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgICBib3R0b206IDFweDtcXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjsgfVxcblxcbi5icy1wb3BvdmVyLXJpZ2h0LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSB7XFxuICBtYXJnaW4tbGVmdDogMC41cmVtOyB9XFxuICAuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3csIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdyB7XFxuICAgIGxlZnQ6IGNhbGMoKDAuNXJlbSArIDFweCkgKiAtMSk7XFxuICAgIHdpZHRoOiAwLjVyZW07XFxuICAgIGhlaWdodDogMXJlbTtcXG4gICAgbWFyZ2luOiAwLjNyZW0gMDsgfVxcbiAgLmJzLXBvcG92ZXItcmlnaHQgLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YmVmb3JlLFxcbiAgLmJzLXBvcG92ZXItcmlnaHQgLmFycm93OjphZnRlcixcXG4gIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJyaWdodFxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgICBib3JkZXItd2lkdGg6IDAuNXJlbSAwLjVyZW0gMC41cmVtIDA7IH1cXG4gIC5icy1wb3BvdmVyLXJpZ2h0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwicmlnaHRcXFwiXSAuYXJyb3c6OmJlZm9yZSB7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGJvcmRlci1yaWdodC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTsgfVxcbiAgXFxuICAuYnMtcG9wb3Zlci1yaWdodCAuYXJyb3c6OmFmdGVyLFxcbiAgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcInJpZ2h0XFxcIl0gLmFycm93OjphZnRlciB7XFxuICAgIGxlZnQ6IDFweDtcXG4gICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAjZmZmOyB9XFxuXFxuLmJzLXBvcG92ZXItYm90dG9tLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0ge1xcbiAgbWFyZ2luLXRvcDogMC41cmVtOyB9XFxuICAuYnMtcG9wb3Zlci1ib3R0b20gLmFycm93LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLmFycm93IHtcXG4gICAgdG9wOiBjYWxjKCgwLjVyZW0gKyAxcHgpICogLTEpOyB9XFxuICAuYnMtcG9wb3Zlci1ib3R0b20gLmFycm93OjpiZWZvcmUsIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJib3R0b21cXFwiXSAuYXJyb3c6OmJlZm9yZSxcXG4gIC5icy1wb3BvdmVyLWJvdHRvbSAuYXJyb3c6OmFmdGVyLFxcbiAgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgICBib3JkZXItd2lkdGg6IDAgMC41cmVtIDAuNXJlbSAwLjVyZW07IH1cXG4gIC5icy1wb3BvdmVyLWJvdHRvbSAuYXJyb3c6OmJlZm9yZSwgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgdG9wOiAwO1xcbiAgICBib3JkZXItYm90dG9tLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxuICBcXG4gIC5icy1wb3BvdmVyLWJvdHRvbSAuYXJyb3c6OmFmdGVyLFxcbiAgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImJvdHRvbVxcXCJdIC5hcnJvdzo6YWZ0ZXIge1xcbiAgICB0b3A6IDFweDtcXG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2ZmZjsgfVxcbiAgLmJzLXBvcG92ZXItYm90dG9tIC5wb3BvdmVyLWhlYWRlcjo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwiYm90dG9tXFxcIl0gLnBvcG92ZXItaGVhZGVyOjpiZWZvcmUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgbGVmdDogNTAlO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDFyZW07XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC41cmVtO1xcbiAgICBjb250ZW50OiBcXFwiXFxcIjtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmN2Y3Zjc7IH1cXG5cXG4uYnMtcG9wb3Zlci1sZWZ0LCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIHtcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtOyB9XFxuICAuYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdywgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3cge1xcbiAgICByaWdodDogY2FsYygoMC41cmVtICsgMXB4KSAqIC0xKTtcXG4gICAgd2lkdGg6IDAuNXJlbTtcXG4gICAgaGVpZ2h0OiAxcmVtO1xcbiAgICBtYXJnaW46IDAuM3JlbSAwOyB9XFxuICAuYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlLFxcbiAgLmJzLXBvcG92ZXItbGVmdCAuYXJyb3c6OmFmdGVyLFxcbiAgLmJzLXBvcG92ZXItYXV0b1t4LXBsYWNlbWVudF49XFxcImxlZnRcXFwiXSAuYXJyb3c6OmFmdGVyIHtcXG4gICAgYm9yZGVyLXdpZHRoOiAwLjVyZW0gMCAwLjVyZW0gMC41cmVtOyB9XFxuICAuYnMtcG9wb3Zlci1sZWZ0IC5hcnJvdzo6YmVmb3JlLCAuYnMtcG9wb3Zlci1hdXRvW3gtcGxhY2VtZW50Xj1cXFwibGVmdFxcXCJdIC5hcnJvdzo6YmVmb3JlIHtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxuICBcXG4gIC5icy1wb3BvdmVyLWxlZnQgLmFycm93OjphZnRlcixcXG4gIC5icy1wb3BvdmVyLWF1dG9beC1wbGFjZW1lbnRePVxcXCJsZWZ0XFxcIl0gLmFycm93OjphZnRlciB7XFxuICAgIHJpZ2h0OiAxcHg7XFxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjZmZmOyB9XFxuXFxuLnBvcG92ZXItaGVhZGVyIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjc1cmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlYmViO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogY2FsYygwLjNyZW0gLSAxcHgpO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGMoMC4zcmVtIC0gMXB4KTsgfVxcbiAgLnBvcG92ZXItaGVhZGVyOmVtcHR5IHtcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcblxcbi5wb3BvdmVyLWJvZHkge1xcbiAgcGFkZGluZzogMC41cmVtIDAuNzVyZW07XFxuICBjb2xvcjogIzIxMjUyOTsgfVxcblxcbi5jYXJvdXNlbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uY2Fyb3VzZWwucG9pbnRlci1ldmVudCB7XFxuICB0b3VjaC1hY3Rpb246IHBhbi15OyB9XFxuXFxuLmNhcm91c2VsLWlubmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxcbiAgLmNhcm91c2VsLWlubmVyOjphZnRlciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBjbGVhcjogYm90aDtcXG4gICAgY29udGVudDogXFxcIlxcXCI7IH1cXG5cXG4uY2Fyb3VzZWwtaXRlbSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbi1yaWdodDogLTEwMCU7XFxuICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgICAgICAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgdHJhbnNpdGlvbjogLXdlYmtpdC10cmFuc2Zvcm0gMC42cyBlYXNlLWluLW91dDtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjZzIGVhc2UtaW4tb3V0O1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNnMgZWFzZS1pbi1vdXQsIC13ZWJraXQtdHJhbnNmb3JtIDAuNnMgZWFzZS1pbi1vdXQ7IH1cXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcXG4gICAgLmNhcm91c2VsLWl0ZW0ge1xcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcblxcbi5jYXJvdXNlbC1pdGVtLmFjdGl2ZSxcXG4uY2Fyb3VzZWwtaXRlbS1uZXh0LFxcbi5jYXJvdXNlbC1pdGVtLXByZXYge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG4uY2Fyb3VzZWwtaXRlbS1uZXh0Om5vdCguY2Fyb3VzZWwtaXRlbS1sZWZ0KSxcXG4uYWN0aXZlLmNhcm91c2VsLWl0ZW0tcmlnaHQge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAlKTsgfVxcblxcbi5jYXJvdXNlbC1pdGVtLXByZXY6bm90KC5jYXJvdXNlbC1pdGVtLXJpZ2h0KSxcXG4uYWN0aXZlLmNhcm91c2VsLWl0ZW0tbGVmdCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTAwJSk7IH1cXG5cXG4uY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbSB7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogb3BhY2l0eTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBub25lO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IG5vbmU7IH1cXG5cXG4uY2Fyb3VzZWwtZmFkZSAuY2Fyb3VzZWwtaXRlbS5hY3RpdmUsXFxuLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0tbmV4dC5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuLmNhcm91c2VsLWZhZGUgLmNhcm91c2VsLWl0ZW0tcHJldi5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIHotaW5kZXg6IDE7XFxuICBvcGFjaXR5OiAxOyB9XFxuXFxuLmNhcm91c2VsLWZhZGUgLmFjdGl2ZS5jYXJvdXNlbC1pdGVtLWxlZnQsXFxuLmNhcm91c2VsLWZhZGUgLmFjdGl2ZS5jYXJvdXNlbC1pdGVtLXJpZ2h0IHtcXG4gIHotaW5kZXg6IDA7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogMHMgMC42cyBvcGFjaXR5OyB9XFxuICBAbWVkaWEgc2NyZWVuIGFuZCAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XFxuICAgIC5jYXJvdXNlbC1mYWRlIC5hY3RpdmUuY2Fyb3VzZWwtaXRlbS1sZWZ0LFxcbiAgICAuY2Fyb3VzZWwtZmFkZSAuYWN0aXZlLmNhcm91c2VsLWl0ZW0tcmlnaHQge1xcbiAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYsXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBib3R0b206IDA7XFxuICB6LWluZGV4OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiAxNSU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4xNXMgZWFzZTsgfVxcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgICAuY2Fyb3VzZWwtY29udHJvbC1wcmV2LFxcbiAgICAuY2Fyb3VzZWwtY29udHJvbC1uZXh0IHtcXG4gICAgICB0cmFuc2l0aW9uOiBub25lOyB9IH1cXG4gIC5jYXJvdXNlbC1jb250cm9sLXByZXY6aG92ZXIsIC5jYXJvdXNlbC1jb250cm9sLXByZXY6Zm9jdXMsXFxuICAuY2Fyb3VzZWwtY29udHJvbC1uZXh0OmhvdmVyLFxcbiAgLmNhcm91c2VsLWNvbnRyb2wtbmV4dDpmb2N1cyB7XFxuICAgIGNvbG9yOiAjZmZmO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIG91dGxpbmU6IDA7XFxuICAgIG9wYWNpdHk6IDAuOTsgfVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYge1xcbiAgbGVmdDogMDsgfVxcblxcbi5jYXJvdXNlbC1jb250cm9sLW5leHQge1xcbiAgcmlnaHQ6IDA7IH1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1wcmV2LWljb24sXFxuLmNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTsgfVxcblxcbi5jYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbiB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBmaWxsPSclMjNmZmYnIHZpZXdCb3g9JzAgMCA4IDgnJTNlJTNjcGF0aCBkPSdNNS4yNSAwbC00IDQgNCA0IDEuNS0xLjUtMi41LTIuNSAyLjUtMi41LTEuNS0xLjV6Jy8lM2UlM2Mvc3ZnJTNlXFxcIik7IH1cXG5cXG4uY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24ge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgZmlsbD0nJTIzZmZmJyB2aWV3Qm94PScwIDAgOCA4JyUzZSUzY3BhdGggZD0nTTIuNzUgMGwtMS41IDEuNSAyLjUgMi41LTIuNSAyLjUgMS41IDEuNSA0LTQtNC00eicvJTNlJTNjL3N2ZyUzZVxcXCIpOyB9XFxuXFxuLmNhcm91c2VsLWluZGljYXRvcnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBwYWRkaW5nLWxlZnQ6IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDE1JTtcXG4gIG1hcmdpbi1sZWZ0OiAxNSU7XFxuICBsaXN0LXN0eWxlOiBub25lOyB9XFxuICAuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaSB7XFxuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcbiAgICBmbGV4OiAwIDEgYXV0bztcXG4gICAgd2lkdGg6IDMwcHg7XFxuICAgIGhlaWdodDogM3B4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDNweDtcXG4gICAgdGV4dC1pbmRlbnQ6IC05OTlweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xcbiAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgICBvcGFjaXR5OiAuNTtcXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjZzIGVhc2U7IH1cXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xcbiAgICAgIC5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpIHtcXG4gICAgICAgIHRyYW5zaXRpb246IG5vbmU7IH0gfVxcbiAgLmNhcm91c2VsLWluZGljYXRvcnMgLmFjdGl2ZSB7XFxuICAgIG9wYWNpdHk6IDE7IH1cXG5cXG4uY2Fyb3VzZWwtY2FwdGlvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTUlO1xcbiAgYm90dG9tOiAyMHB4O1xcbiAgbGVmdDogMTUlO1xcbiAgei1pbmRleDogMTA7XFxuICBwYWRkaW5nLXRvcDogMjBweDtcXG4gIHBhZGRpbmctYm90dG9tOiAyMHB4O1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgc3Bpbm5lci1ib3JkZXIge1xcbiAgdG8ge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBzcGlubmVyLWJvcmRlciB7XFxuICB0byB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG4uc3Bpbm5lci1ib3JkZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDJyZW07XFxuICBoZWlnaHQ6IDJyZW07XFxuICB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XFxuICBib3JkZXI6IDAuMjVlbSBzb2xpZCBjdXJyZW50Q29sb3I7XFxuICBib3JkZXItcmlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgLXdlYmtpdC1hbmltYXRpb246IHNwaW5uZXItYm9yZGVyIC43NXMgbGluZWFyIGluZmluaXRlO1xcbiAgICAgICAgICBhbmltYXRpb246IHNwaW5uZXItYm9yZGVyIC43NXMgbGluZWFyIGluZmluaXRlOyB9XFxuXFxuLnNwaW5uZXItYm9yZGVyLXNtIHtcXG4gIHdpZHRoOiAxcmVtO1xcbiAgaGVpZ2h0OiAxcmVtO1xcbiAgYm9yZGVyLXdpZHRoOiAwLjJlbTsgfVxcblxcbkAtd2Via2l0LWtleWZyYW1lcyBzcGlubmVyLWdyb3cge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfSB9XFxuXFxuQGtleWZyYW1lcyBzcGlubmVyLWdyb3cge1xcbiAgMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTsgfVxcbiAgNTAlIHtcXG4gICAgb3BhY2l0eTogMTsgfSB9XFxuXFxuLnNwaW5uZXItZ3JvdyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMnJlbTtcXG4gIGhlaWdodDogMnJlbTtcXG4gIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIG9wYWNpdHk6IDA7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogc3Bpbm5lci1ncm93IC43NXMgbGluZWFyIGluZmluaXRlO1xcbiAgICAgICAgICBhbmltYXRpb246IHNwaW5uZXItZ3JvdyAuNzVzIGxpbmVhciBpbmZpbml0ZTsgfVxcblxcbi5zcGlubmVyLWdyb3ctc20ge1xcbiAgd2lkdGg6IDFyZW07XFxuICBoZWlnaHQ6IDFyZW07IH1cXG5cXG4uYWxpZ24tYmFzZWxpbmUge1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tdG9wIHtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3AgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1taWRkbGUge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZSAhaW1wb3J0YW50OyB9XFxuXFxuLmFsaWduLWJvdHRvbSB7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tdGV4dC1ib3R0b20ge1xcbiAgdmVydGljYWwtYWxpZ246IHRleHQtYm90dG9tICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tdGV4dC10b3Age1xcbiAgdmVydGljYWwtYWxpZ246IHRleHQtdG9wICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmctcHJpbWFyeSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7IH1cXG5cXG5hLmJnLXByaW1hcnk6aG92ZXIsIGEuYmctcHJpbWFyeTpmb2N1cyxcXG5idXR0b24uYmctcHJpbWFyeTpob3ZlcixcXG5idXR0b24uYmctcHJpbWFyeTpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2MmNjICFpbXBvcnRhbnQ7IH1cXG5cXG4uYmctc2Vjb25kYXJ5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Yzc1N2QgIWltcG9ydGFudDsgfVxcblxcbmEuYmctc2Vjb25kYXJ5OmhvdmVyLCBhLmJnLXNlY29uZGFyeTpmb2N1cyxcXG5idXR0b24uYmctc2Vjb25kYXJ5OmhvdmVyLFxcbmJ1dHRvbi5iZy1zZWNvbmRhcnk6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0NWI2MiAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLXN1Y2Nlc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzI4YTc0NSAhaW1wb3J0YW50OyB9XFxuXFxuYS5iZy1zdWNjZXNzOmhvdmVyLCBhLmJnLXN1Y2Nlc3M6Zm9jdXMsXFxuYnV0dG9uLmJnLXN1Y2Nlc3M6aG92ZXIsXFxuYnV0dG9uLmJnLXN1Y2Nlc3M6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlN2UzNCAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLWluZm8ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE3YTJiOCAhaW1wb3J0YW50OyB9XFxuXFxuYS5iZy1pbmZvOmhvdmVyLCBhLmJnLWluZm86Zm9jdXMsXFxuYnV0dG9uLmJnLWluZm86aG92ZXIsXFxuYnV0dG9uLmJnLWluZm86Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzExN2E4YiAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLXdhcm5pbmcge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzEwNyAhaW1wb3J0YW50OyB9XFxuXFxuYS5iZy13YXJuaW5nOmhvdmVyLCBhLmJnLXdhcm5pbmc6Zm9jdXMsXFxuYnV0dG9uLmJnLXdhcm5pbmc6aG92ZXIsXFxuYnV0dG9uLmJnLXdhcm5pbmc6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2QzOWUwMCAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLWRhbmdlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGMzNTQ1ICFpbXBvcnRhbnQ7IH1cXG5cXG5hLmJnLWRhbmdlcjpob3ZlciwgYS5iZy1kYW5nZXI6Zm9jdXMsXFxuYnV0dG9uLmJnLWRhbmdlcjpob3ZlcixcXG5idXR0b24uYmctZGFuZ2VyOmZvY3VzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiZDIxMzAgIWltcG9ydGFudDsgfVxcblxcbi5iZy1saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7IH1cXG5cXG5hLmJnLWxpZ2h0OmhvdmVyLCBhLmJnLWxpZ2h0OmZvY3VzLFxcbmJ1dHRvbi5iZy1saWdodDpob3ZlcixcXG5idXR0b24uYmctbGlnaHQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZTBlNSAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLWRhcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0M2E0MCAhaW1wb3J0YW50OyB9XFxuXFxuYS5iZy1kYXJrOmhvdmVyLCBhLmJnLWRhcms6Zm9jdXMsXFxuYnV0dG9uLmJnLWRhcms6aG92ZXIsXFxuYnV0dG9uLmJnLWRhcms6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFkMjEyNCAhaW1wb3J0YW50OyB9XFxuXFxuLmJnLXdoaXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmYgIWltcG9ydGFudDsgfVxcblxcbi5iZy10cmFuc3BhcmVudCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLXRvcCB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlci1yaWdodCB7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZGVlMmU2ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLWJvdHRvbSB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlci1sZWZ0IHtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RlZTJlNiAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlci0wIHtcXG4gIGJvcmRlcjogMCAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlci10b3AtMCB7XFxuICBib3JkZXItdG9wOiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLXJpZ2h0LTAge1xcbiAgYm9yZGVyLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLWJvdHRvbS0wIHtcXG4gIGJvcmRlci1ib3R0b206IDAgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItbGVmdC0wIHtcXG4gIGJvcmRlci1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLXByaW1hcnkge1xcbiAgYm9yZGVyLWNvbG9yOiAjMDA3YmZmICFpbXBvcnRhbnQ7IH1cXG5cXG4uYm9yZGVyLXNlY29uZGFyeSB7XFxuICBib3JkZXItY29sb3I6ICM2Yzc1N2QgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItc3VjY2VzcyB7XFxuICBib3JkZXItY29sb3I6ICMyOGE3NDUgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItaW5mbyB7XFxuICBib3JkZXItY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItd2FybmluZyB7XFxuICBib3JkZXItY29sb3I6ICNmZmMxMDcgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItZGFuZ2VyIHtcXG4gIGJvcmRlci1jb2xvcjogI2RjMzU0NSAhaW1wb3J0YW50OyB9XFxuXFxuLmJvcmRlci1saWdodCB7XFxuICBib3JkZXItY29sb3I6ICNmOGY5ZmEgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItZGFyayB7XFxuICBib3JkZXItY29sb3I6ICMzNDNhNDAgIWltcG9ydGFudDsgfVxcblxcbi5ib3JkZXItd2hpdGUge1xcbiAgYm9yZGVyLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7IH1cXG5cXG4ucm91bmRlZCB7XFxuICBib3JkZXItcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucm91bmRlZC10b3Age1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5yb3VuZGVkLXJpZ2h0IHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnJvdW5kZWQtYm90dG9tIHtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucm91bmRlZC1sZWZ0IHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5yb3VuZGVkLWNpcmNsZSB7XFxuICBib3JkZXItcmFkaXVzOiA1MCUgIWltcG9ydGFudDsgfVxcblxcbi5yb3VuZGVkLXBpbGwge1xcbiAgYm9yZGVyLXJhZGl1czogNTByZW0gIWltcG9ydGFudDsgfVxcblxcbi5yb3VuZGVkLTAge1xcbiAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50OyB9XFxuXFxuLmNsZWFyZml4OjphZnRlciB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNsZWFyOiBib3RoO1xcbiAgY29udGVudDogXFxcIlxcXCI7IH1cXG5cXG4uZC1ub25lIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcblxcbi5kLWlubGluZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgfVxcblxcbi5kLWlubGluZS1ibG9jayB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfVxcblxcbi5kLWJsb2NrIHtcXG4gIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH1cXG5cXG4uZC10YWJsZSB7XFxuICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50OyB9XFxuXFxuLmQtdGFibGUtcm93IHtcXG4gIGRpc3BsYXk6IHRhYmxlLXJvdyAhaW1wb3J0YW50OyB9XFxuXFxuLmQtdGFibGUtY2VsbCB7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cXG5cXG4uZC1mbGV4IHtcXG4gIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcblxcbi5kLWlubGluZS1mbGV4IHtcXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5kLXNtLW5vbmUge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXNtLWlubGluZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50OyB9XFxuICAuZC1zbS1pbmxpbmUtYmxvY2sge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2sgIWltcG9ydGFudDsgfVxcbiAgLmQtc20tYmxvY2sge1xcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB9XFxuICAuZC1zbS10YWJsZSB7XFxuICAgIGRpc3BsYXk6IHRhYmxlICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXNtLXRhYmxlLXJvdyB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLXJvdyAhaW1wb3J0YW50OyB9XFxuICAuZC1zbS10YWJsZS1jZWxsIHtcXG4gICAgZGlzcGxheTogdGFibGUtY2VsbCAhaW1wb3J0YW50OyB9XFxuICAuZC1zbS1mbGV4IHtcXG4gICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OyB9XFxuICAuZC1zbS1pbmxpbmUtZmxleCB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4ICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLmQtbWQtbm9uZSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcbiAgLmQtbWQtaW5saW5lIHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7IH1cXG4gIC5kLW1kLWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50OyB9XFxuICAuZC1tZC1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH1cXG4gIC5kLW1kLXRhYmxlIHtcXG4gICAgZGlzcGxheTogdGFibGUgIWltcG9ydGFudDsgfVxcbiAgLmQtbWQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7IH1cXG4gIC5kLW1kLXRhYmxlLWNlbGwge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cXG4gIC5kLW1kLWZsZXgge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7IH1cXG4gIC5kLW1kLWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDk5MnB4KSB7XFxuICAuZC1sZy1ub25lIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxuICAuZC1sZy1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmQtbGctaW5saW5lLWJsb2NrIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7IH1cXG4gIC5kLWxnLWJsb2NrIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfVxcbiAgLmQtbGctdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50OyB9XFxuICAuZC1sZy10YWJsZS1yb3cge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDsgfVxcbiAgLmQtbGctdGFibGUtY2VsbCB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDsgfVxcbiAgLmQtbGctZmxleCB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcbiAgLmQtbGctaW5saW5lLWZsZXgge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZC14bC1ub25lIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9XFxuICAuZC14bC1pbmxpbmUge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmQteGwtaW5saW5lLWJsb2NrIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXhsLWJsb2NrIHtcXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgfVxcbiAgLmQteGwtdGFibGUge1xcbiAgICBkaXNwbGF5OiB0YWJsZSAhaW1wb3J0YW50OyB9XFxuICAuZC14bC10YWJsZS1yb3cge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1yb3cgIWltcG9ydGFudDsgfVxcbiAgLmQteGwtdGFibGUtY2VsbCB7XFxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGwgIWltcG9ydGFudDsgfVxcbiAgLmQteGwtZmxleCB7XFxuICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsgfVxcbiAgLmQteGwtaW5saW5lLWZsZXgge1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleCAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgcHJpbnQge1xcbiAgLmQtcHJpbnQtbm9uZSB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgfVxcbiAgLmQtcHJpbnQtaW5saW5lIHtcXG4gICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXByaW50LWlubGluZS1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50OyB9XFxuICAuZC1wcmludC1ibG9jayB7XFxuICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXByaW50LXRhYmxlIHtcXG4gICAgZGlzcGxheTogdGFibGUgIWltcG9ydGFudDsgfVxcbiAgLmQtcHJpbnQtdGFibGUtcm93IHtcXG4gICAgZGlzcGxheTogdGFibGUtcm93ICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXByaW50LXRhYmxlLWNlbGwge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXByaW50LWZsZXgge1xcbiAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7IH1cXG4gIC5kLXByaW50LWlubGluZS1mbGV4IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXggIWltcG9ydGFudDsgfSB9XFxuXFxuLmVtYmVkLXJlc3BvbnNpdmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDA7XFxuICBvdmVyZmxvdzogaGlkZGVuOyB9XFxuICAuZW1iZWQtcmVzcG9uc2l2ZTo6YmVmb3JlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiOyB9XFxuICAuZW1iZWQtcmVzcG9uc2l2ZSAuZW1iZWQtcmVzcG9uc2l2ZS1pdGVtLFxcbiAgLmVtYmVkLXJlc3BvbnNpdmUgaWZyYW1lLFxcbiAgLmVtYmVkLXJlc3BvbnNpdmUgZW1iZWQsXFxuICAuZW1iZWQtcmVzcG9uc2l2ZSBvYmplY3QsXFxuICAuZW1iZWQtcmVzcG9uc2l2ZSB2aWRlbyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwO1xcbiAgICBib3R0b206IDA7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJvcmRlcjogMDsgfVxcblxcbi5lbWJlZC1yZXNwb25zaXZlLTIxYnk5OjpiZWZvcmUge1xcbiAgcGFkZGluZy10b3A6IDQyLjg1NzE0JTsgfVxcblxcbi5lbWJlZC1yZXNwb25zaXZlLTE2Ynk5OjpiZWZvcmUge1xcbiAgcGFkZGluZy10b3A6IDU2LjI1JTsgfVxcblxcbi5lbWJlZC1yZXNwb25zaXZlLTNieTQ6OmJlZm9yZSB7XFxuICBwYWRkaW5nLXRvcDogMTMzLjMzMzMzJTsgfVxcblxcbi5lbWJlZC1yZXNwb25zaXZlLTFieTE6OmJlZm9yZSB7XFxuICBwYWRkaW5nLXRvcDogMTAwJTsgfVxcblxcbi5mbGV4LXJvdyB7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7IH1cXG5cXG4uZmxleC1jb2x1bW4ge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50OyB9XFxuXFxuLmZsZXgtcm93LXJldmVyc2Uge1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG5cXG4uZmxleC1jb2x1bW4tcmV2ZXJzZSB7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDsgfVxcblxcbi5mbGV4LXdyYXAge1xcbiAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7IH1cXG5cXG4uZmxleC1ub3dyYXAge1xcbiAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDsgfVxcblxcbi5mbGV4LXdyYXAtcmV2ZXJzZSB7XFxuICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxuXFxuLmZsZXgtZmlsbCB7XFxuICBmbGV4OiAxIDEgYXV0byAhaW1wb3J0YW50OyB9XFxuXFxuLmZsZXgtZ3Jvdy0wIHtcXG4gIGZsZXgtZ3JvdzogMCAhaW1wb3J0YW50OyB9XFxuXFxuLmZsZXgtZ3Jvdy0xIHtcXG4gIGZsZXgtZ3JvdzogMSAhaW1wb3J0YW50OyB9XFxuXFxuLmZsZXgtc2hyaW5rLTAge1xcbiAgZmxleC1zaHJpbms6IDAgIWltcG9ydGFudDsgfVxcblxcbi5mbGV4LXNocmluay0xIHtcXG4gIGZsZXgtc2hyaW5rOiAxICFpbXBvcnRhbnQ7IH1cXG5cXG4uanVzdGlmeS1jb250ZW50LXN0YXJ0IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxuXFxuLmp1c3RpZnktY29udGVudC1lbmQge1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuXFxuLmp1c3RpZnktY29udGVudC1jZW50ZXIge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcblxcbi5qdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcblxcbi5qdXN0aWZ5LWNvbnRlbnQtYXJvdW5kIHtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24taXRlbXMtc3RhcnQge1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1pdGVtcy1lbmQge1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24taXRlbXMtY2VudGVyIHtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1pdGVtcy1iYXNlbGluZSB7XFxuICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1pdGVtcy1zdHJldGNoIHtcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tY29udGVudC1zdGFydCB7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tY29udGVudC1lbmQge1xcbiAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1jb250ZW50LWNlbnRlciB7XFxuICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1jb250ZW50LWJldHdlZW4ge1xcbiAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxuXFxuLmFsaWduLWNvbnRlbnQtYXJvdW5kIHtcXG4gIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxuXFxuLmFsaWduLWNvbnRlbnQtc3RyZXRjaCB7XFxuICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXG5cXG4uYWxpZ24tc2VsZi1hdXRvIHtcXG4gIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1zZWxmLXN0YXJ0IHtcXG4gIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1zZWxmLWVuZCB7XFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuXFxuLmFsaWduLXNlbGYtY2VudGVyIHtcXG4gIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuXFxuLmFsaWduLXNlbGYtYmFzZWxpbmUge1xcbiAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcblxcbi5hbGlnbi1zZWxmLXN0cmV0Y2gge1xcbiAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDU3NnB4KSB7XFxuICAuZmxleC1zbS1yb3cge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93ICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXNtLWNvbHVtbiB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4gIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtc20tcm93LXJldmVyc2Uge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2UgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtc20tY29sdW1uLXJldmVyc2Uge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2UgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtc20td3JhcCB7XFxuICAgIGZsZXgtd3JhcDogd3JhcCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1zbS1ub3dyYXAge1xcbiAgICBmbGV4LXdyYXA6IG5vd3JhcCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1zbS13cmFwLXJldmVyc2Uge1xcbiAgICBmbGV4LXdyYXA6IHdyYXAtcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1zbS1maWxsIHtcXG4gICAgZmxleDogMSAxIGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtc20tZ3Jvdy0wIHtcXG4gICAgZmxleC1ncm93OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXNtLWdyb3ctMSB7XFxuICAgIGZsZXgtZ3JvdzogMSAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1zbS1zaHJpbmstMCB7XFxuICAgIGZsZXgtc2hyaW5rOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXNtLXNocmluay0xIHtcXG4gICAgZmxleC1zaHJpbms6IDEgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1zdGFydCB7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxuICAuanVzdGlmeS1jb250ZW50LXNtLWVuZCB7XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1jZW50ZXIge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuICAuanVzdGlmeS1jb250ZW50LXNtLWJldHdlZW4ge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC1zbS1hcm91bmQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMtc20tc3RhcnQge1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMtc20tZW5kIHtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1pdGVtcy1zbS1jZW50ZXIge1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1pdGVtcy1zbS1iYXNlbGluZSB7XFxuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMtc20tc3RyZXRjaCB7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLXN0YXJ0IHtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1zbS1lbmQge1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1zbS1jZW50ZXIge1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tYmV0d2VlbiB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4gIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtc20tYXJvdW5kIHtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LXNtLXN0cmV0Y2gge1xcbiAgICBhbGlnbi1jb250ZW50OiBzdHJldGNoICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLXNtLWF1dG8ge1xcbiAgICBhbGlnbi1zZWxmOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLXNtLXN0YXJ0IHtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1zdGFydCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1zbS1lbmQge1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1zbS1jZW50ZXIge1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtc20tYmFzZWxpbmUge1xcbiAgICBhbGlnbi1zZWxmOiBiYXNlbGluZSAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1zbS1zdHJldGNoIHtcXG4gICAgYWxpZ24tc2VsZjogc3RyZXRjaCAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcXG4gIC5mbGV4LW1kLXJvdyB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3cgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbWQtY29sdW1uIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbiAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1tZC1yb3ctcmV2ZXJzZSB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1tZC1jb2x1bW4tcmV2ZXJzZSB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZSAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1tZC13cmFwIHtcXG4gICAgZmxleC13cmFwOiB3cmFwICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LW1kLW5vd3JhcCB7XFxuICAgIGZsZXgtd3JhcDogbm93cmFwICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LW1kLXdyYXAtcmV2ZXJzZSB7XFxuICAgIGZsZXgtd3JhcDogd3JhcC1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LW1kLWZpbGwge1xcbiAgICBmbGV4OiAxIDEgYXV0byAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1tZC1ncm93LTAge1xcbiAgICBmbGV4LWdyb3c6IDAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbWQtZ3Jvdy0xIHtcXG4gICAgZmxleC1ncm93OiAxICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LW1kLXNocmluay0wIHtcXG4gICAgZmxleC1zaHJpbms6IDAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbWQtc2hyaW5rLTEge1xcbiAgICBmbGV4LXNocmluazogMSAhaW1wb3J0YW50OyB9XFxuICAuanVzdGlmeS1jb250ZW50LW1kLXN0YXJ0IHtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbWQtZW5kIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuICAuanVzdGlmeS1jb250ZW50LW1kLWNlbnRlciB7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbWQtYmV0d2VlbiB7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxuICAuanVzdGlmeS1jb250ZW50LW1kLWFyb3VuZCB7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1pdGVtcy1tZC1zdGFydCB7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1pdGVtcy1tZC1lbmQge1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLW1kLWNlbnRlciB7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLW1kLWJhc2VsaW5lIHtcXG4gICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1pdGVtcy1tZC1zdHJldGNoIHtcXG4gICAgYWxpZ24taXRlbXM6IHN0cmV0Y2ggIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtc3RhcnQge1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LW1kLWVuZCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LW1kLWNlbnRlciB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1tZC1iZXR3ZWVuIHtcXG4gICAgYWxpZ24tY29udGVudDogc3BhY2UtYmV0d2VlbiAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1tZC1hcm91bmQge1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtbWQtc3RyZXRjaCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHN0cmV0Y2ggIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtbWQtYXV0byB7XFxuICAgIGFsaWduLXNlbGY6IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtbWQtc3RhcnQge1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLW1kLWVuZCB7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLW1kLWNlbnRlciB7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1tZC1iYXNlbGluZSB7XFxuICAgIGFsaWduLXNlbGY6IGJhc2VsaW5lICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLW1kLXN0cmV0Y2gge1xcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmZsZXgtbGctcm93IHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1sZy1jb2x1bW4ge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LWxnLXJvdy1yZXZlcnNlIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LWxnLWNvbHVtbi1yZXZlcnNlIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LWxnLXdyYXAge1xcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbGctbm93cmFwIHtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbGctd3JhcC1yZXZlcnNlIHtcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbGctZmlsbCB7XFxuICAgIGZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LWxnLWdyb3ctMCB7XFxuICAgIGZsZXgtZ3JvdzogMCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1sZy1ncm93LTEge1xcbiAgICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgtbGctc2hyaW5rLTAge1xcbiAgICBmbGV4LXNocmluazogMCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC1sZy1zaHJpbmstMSB7XFxuICAgIGZsZXgtc2hyaW5rOiAxICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctc3RhcnQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1lbmQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctY2VudGVyIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC1sZy1iZXR3ZWVuIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQtbGctYXJvdW5kIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0YXJ0IHtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLWVuZCB7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMtbGctY2VudGVyIHtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMtbGctYmFzZWxpbmUge1xcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLWxnLXN0cmV0Y2gge1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1sZy1zdGFydCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctZW5kIHtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQtbGctY2VudGVyIHtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWJldHdlZW4ge1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LWxnLWFyb3VuZCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC1sZy1zdHJldGNoIHtcXG4gICAgYWxpZ24tY29udGVudDogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1sZy1hdXRvIHtcXG4gICAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi1sZy1zdGFydCB7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtbGctZW5kIHtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtbGctY2VudGVyIHtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLWxnLWJhc2VsaW5lIHtcXG4gICAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYtbGctc3RyZXRjaCB7XFxuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2ggIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCkge1xcbiAgLmZsZXgteGwtcm93IHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdyAhaW1wb3J0YW50OyB9XFxuICAuZmxleC14bC1jb2x1bW4ge1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXhsLXJvdy1yZXZlcnNlIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXhsLWNvbHVtbi1yZXZlcnNlIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXhsLXdyYXAge1xcbiAgICBmbGV4LXdyYXA6IHdyYXAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgteGwtbm93cmFwIHtcXG4gICAgZmxleC13cmFwOiBub3dyYXAgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgteGwtd3JhcC1yZXZlcnNlIHtcXG4gICAgZmxleC13cmFwOiB3cmFwLXJldmVyc2UgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgteGwtZmlsbCB7XFxuICAgIGZsZXg6IDEgMSBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5mbGV4LXhsLWdyb3ctMCB7XFxuICAgIGZsZXgtZ3JvdzogMCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC14bC1ncm93LTEge1xcbiAgICBmbGV4LWdyb3c6IDEgIWltcG9ydGFudDsgfVxcbiAgLmZsZXgteGwtc2hyaW5rLTAge1xcbiAgICBmbGV4LXNocmluazogMCAhaW1wb3J0YW50OyB9XFxuICAuZmxleC14bC1zaHJpbmstMSB7XFxuICAgIGZsZXgtc2hyaW5rOiAxICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtc3RhcnQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC14bC1lbmQge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtY2VudGVyIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIgIWltcG9ydGFudDsgfVxcbiAgLmp1c3RpZnktY29udGVudC14bC1iZXR3ZWVuIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXG4gIC5qdXN0aWZ5LWNvbnRlbnQteGwtYXJvdW5kIHtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLXN0YXJ0IHtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLWVuZCB7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMteGwtY2VudGVyIHtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlciAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24taXRlbXMteGwtYmFzZWxpbmUge1xcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWl0ZW1zLXhsLXN0cmV0Y2gge1xcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC14bC1zdGFydCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQteGwtZW5kIHtcXG4gICAgYWxpZ24tY29udGVudDogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLWNvbnRlbnQteGwtY2VudGVyIHtcXG4gICAgYWxpZ24tY29udGVudDogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLWJldHdlZW4ge1xcbiAgICBhbGlnbi1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1jb250ZW50LXhsLWFyb3VuZCB7XFxuICAgIGFsaWduLWNvbnRlbnQ6IHNwYWNlLWFyb3VuZCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tY29udGVudC14bC1zdHJldGNoIHtcXG4gICAgYWxpZ24tY29udGVudDogc3RyZXRjaCAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi14bC1hdXRvIHtcXG4gICAgYWxpZ24tc2VsZjogYXV0byAhaW1wb3J0YW50OyB9XFxuICAuYWxpZ24tc2VsZi14bC1zdGFydCB7XFxuICAgIGFsaWduLXNlbGY6IGZsZXgtc3RhcnQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYteGwtZW5kIHtcXG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYteGwtY2VudGVyIHtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyICFpbXBvcnRhbnQ7IH1cXG4gIC5hbGlnbi1zZWxmLXhsLWJhc2VsaW5lIHtcXG4gICAgYWxpZ24tc2VsZjogYmFzZWxpbmUgIWltcG9ydGFudDsgfVxcbiAgLmFsaWduLXNlbGYteGwtc3RyZXRjaCB7XFxuICAgIGFsaWduLXNlbGY6IHN0cmV0Y2ggIWltcG9ydGFudDsgfSB9XFxuXFxuLmZsb2F0LWxlZnQge1xcbiAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDsgfVxcblxcbi5mbG9hdC1yaWdodCB7XFxuICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDsgfVxcblxcbi5mbG9hdC1ub25lIHtcXG4gIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpIHtcXG4gIC5mbG9hdC1zbS1sZWZ0IHtcXG4gICAgZmxvYXQ6IGxlZnQgIWltcG9ydGFudDsgfVxcbiAgLmZsb2F0LXNtLXJpZ2h0IHtcXG4gICAgZmxvYXQ6IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXG4gIC5mbG9hdC1zbS1ub25lIHtcXG4gICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAuZmxvYXQtbWQtbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5mbG9hdC1tZC1yaWdodCB7XFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50OyB9XFxuICAuZmxvYXQtbWQtbm9uZSB7XFxuICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLmZsb2F0LWxnLWxlZnQge1xcbiAgICBmbG9hdDogbGVmdCAhaW1wb3J0YW50OyB9XFxuICAuZmxvYXQtbGctcmlnaHQge1xcbiAgICBmbG9hdDogcmlnaHQgIWltcG9ydGFudDsgfVxcbiAgLmZsb2F0LWxnLW5vbmUge1xcbiAgICBmbG9hdDogbm9uZSAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KSB7XFxuICAuZmxvYXQteGwtbGVmdCB7XFxuICAgIGZsb2F0OiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXG4gIC5mbG9hdC14bC1yaWdodCB7XFxuICAgIGZsb2F0OiByaWdodCAhaW1wb3J0YW50OyB9XFxuICAuZmxvYXQteGwtbm9uZSB7XFxuICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7IH0gfVxcblxcbi5vdmVyZmxvdy1hdXRvIHtcXG4gIG92ZXJmbG93OiBhdXRvICFpbXBvcnRhbnQ7IH1cXG5cXG4ub3ZlcmZsb3ctaGlkZGVuIHtcXG4gIG92ZXJmbG93OiBoaWRkZW4gIWltcG9ydGFudDsgfVxcblxcbi5wb3NpdGlvbi1zdGF0aWMge1xcbiAgcG9zaXRpb246IHN0YXRpYyAhaW1wb3J0YW50OyB9XFxuXFxuLnBvc2l0aW9uLXJlbGF0aXZlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZSAhaW1wb3J0YW50OyB9XFxuXFxuLnBvc2l0aW9uLWFic29sdXRlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50OyB9XFxuXFxuLnBvc2l0aW9uLWZpeGVkIHtcXG4gIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50OyB9XFxuXFxuLnBvc2l0aW9uLXN0aWNreSB7XFxuICBwb3NpdGlvbjogLXdlYmtpdC1zdGlja3kgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiBzdGlja3kgIWltcG9ydGFudDsgfVxcblxcbi5maXhlZC10b3Age1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTAzMDsgfVxcblxcbi5maXhlZC1ib3R0b20ge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgcmlnaHQ6IDA7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgei1pbmRleDogMTAzMDsgfVxcblxcbkBzdXBwb3J0cyAoKHBvc2l0aW9uOiAtd2Via2l0LXN0aWNreSkgb3IgKHBvc2l0aW9uOiBzdGlja3kpKSB7XFxuICAuc3RpY2t5LXRvcCB7XFxuICAgIHBvc2l0aW9uOiAtd2Via2l0LXN0aWNreTtcXG4gICAgcG9zaXRpb246IHN0aWNreTtcXG4gICAgdG9wOiAwO1xcbiAgICB6LWluZGV4OiAxMDIwOyB9IH1cXG5cXG4uc3Itb25seSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwYWRkaW5nOiAwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgYm9yZGVyOiAwOyB9XFxuXFxuLnNyLW9ubHktZm9jdXNhYmxlOmFjdGl2ZSwgLnNyLW9ubHktZm9jdXNhYmxlOmZvY3VzIHtcXG4gIHBvc2l0aW9uOiBzdGF0aWM7XFxuICB3aWR0aDogYXV0bztcXG4gIGhlaWdodDogYXV0bztcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgY2xpcDogYXV0bztcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7IH1cXG5cXG4uc2hhZG93LXNtIHtcXG4gIGJveC1zaGFkb3c6IDAgMC4xMjVyZW0gMC4yNXJlbSByZ2JhKDAsIDAsIDAsIDAuMDc1KSAhaW1wb3J0YW50OyB9XFxuXFxuLnNoYWRvdyB7XFxuICBib3gtc2hhZG93OiAwIDAuNXJlbSAxcmVtIHJnYmEoMCwgMCwgMCwgMC4xNSkgIWltcG9ydGFudDsgfVxcblxcbi5zaGFkb3ctbGcge1xcbiAgYm94LXNoYWRvdzogMCAxcmVtIDNyZW0gcmdiYSgwLCAwLCAwLCAwLjE3NSkgIWltcG9ydGFudDsgfVxcblxcbi5zaGFkb3ctbm9uZSB7XFxuICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7IH1cXG5cXG4udy0yNSB7XFxuICB3aWR0aDogMjUlICFpbXBvcnRhbnQ7IH1cXG5cXG4udy01MCB7XFxuICB3aWR0aDogNTAlICFpbXBvcnRhbnQ7IH1cXG5cXG4udy03NSB7XFxuICB3aWR0aDogNzUlICFpbXBvcnRhbnQ7IH1cXG5cXG4udy0xMDAge1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgfVxcblxcbi53LWF1dG8ge1xcbiAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDsgfVxcblxcbi5oLTI1IHtcXG4gIGhlaWdodDogMjUlICFpbXBvcnRhbnQ7IH1cXG5cXG4uaC01MCB7XFxuICBoZWlnaHQ6IDUwJSAhaW1wb3J0YW50OyB9XFxuXFxuLmgtNzUge1xcbiAgaGVpZ2h0OiA3NSUgIWltcG9ydGFudDsgfVxcblxcbi5oLTEwMCB7XFxuICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDsgfVxcblxcbi5oLWF1dG8ge1xcbiAgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXctMTAwIHtcXG4gIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50OyB9XFxuXFxuLm1oLTEwMCB7XFxuICBtYXgtaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWluLXZ3LTEwMCB7XFxuICBtaW4td2lkdGg6IDEwMHZ3ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWluLXZoLTEwMCB7XFxuICBtaW4taGVpZ2h0OiAxMDB2aCAhaW1wb3J0YW50OyB9XFxuXFxuLnZ3LTEwMCB7XFxuICB3aWR0aDogMTAwdncgIWltcG9ydGFudDsgfVxcblxcbi52aC0xMDAge1xcbiAgaGVpZ2h0OiAxMDB2aCAhaW1wb3J0YW50OyB9XFxuXFxuLm0tMCB7XFxuICBtYXJnaW46IDAgIWltcG9ydGFudDsgfVxcblxcbi5tdC0wLFxcbi5teS0wIHtcXG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsgfVxcblxcbi5tci0wLFxcbi5teC0wIHtcXG4gIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxuXFxuLm1iLTAsXFxuLm15LTAge1xcbiAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxuXFxuLm1sLTAsXFxuLm14LTAge1xcbiAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcblxcbi5tLTEge1xcbiAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtMSxcXG4ubXktMSB7XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXItMSxcXG4ubXgtMSB7XFxuICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tYi0xLFxcbi5teS0xIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC0xLFxcbi5teC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubS0yIHtcXG4gIG1hcmdpbjogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtMixcXG4ubXktMiB7XFxuICBtYXJnaW4tdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tci0yLFxcbi5teC0yIHtcXG4gIG1hcmdpbi1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWItMixcXG4ubXktMiB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC0yLFxcbi5teC0yIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tLTMge1xcbiAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtMyxcXG4ubXktMyB7XFxuICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXItMyxcXG4ubXgtMyB7XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tYi0zLFxcbi5teS0zIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC0zLFxcbi5teC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubS00IHtcXG4gIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtNCxcXG4ubXktNCB7XFxuICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tci00LFxcbi5teC00IHtcXG4gIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWItNCxcXG4ubXktNCB7XFxuICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC00LFxcbi5teC00IHtcXG4gIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tLTUge1xcbiAgbWFyZ2luOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtNSxcXG4ubXktNSB7XFxuICBtYXJnaW4tdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXItNSxcXG4ubXgtNSB7XFxuICBtYXJnaW4tcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tYi01LFxcbi5teS01IHtcXG4gIG1hcmdpbi1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC01LFxcbi5teC01IHtcXG4gIG1hcmdpbi1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucC0wIHtcXG4gIHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxcblxcbi5wdC0wLFxcbi5weS0wIHtcXG4gIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHItMCxcXG4ucHgtMCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGItMCxcXG4ucHktMCB7XFxuICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxuXFxuLnBsLTAsXFxuLnB4LTAge1xcbiAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucC0xIHtcXG4gIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wdC0xLFxcbi5weS0xIHtcXG4gIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHItMSxcXG4ucHgtMSB7XFxuICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGItMSxcXG4ucHktMSB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnBsLTEsXFxuLnB4LTEge1xcbiAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucC0yIHtcXG4gIHBhZGRpbmc6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnB0LTIsXFxuLnB5LTIge1xcbiAgcGFkZGluZy10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnByLTIsXFxuLnB4LTIge1xcbiAgcGFkZGluZy1yaWdodDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGItMixcXG4ucHktMiB7XFxuICBwYWRkaW5nLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGwtMixcXG4ucHgtMiB7XFxuICBwYWRkaW5nLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnAtMyB7XFxuICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHQtMyxcXG4ucHktMyB7XFxuICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnByLTMsXFxuLnB4LTMge1xcbiAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnBiLTMsXFxuLnB5LTMge1xcbiAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wbC0zLFxcbi5weC0zIHtcXG4gIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnAtNCB7XFxuICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wdC00LFxcbi5weS00IHtcXG4gIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wci00LFxcbi5weC00IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnBiLTQsXFxuLnB5LTQge1xcbiAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnBsLTQsXFxuLnB4LTQge1xcbiAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wLTUge1xcbiAgcGFkZGluZzogM3JlbSAhaW1wb3J0YW50OyB9XFxuXFxuLnB0LTUsXFxuLnB5LTUge1xcbiAgcGFkZGluZy10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wci01LFxcbi5weC01IHtcXG4gIHBhZGRpbmctcmlnaHQ6IDNyZW0gIWltcG9ydGFudDsgfVxcblxcbi5wYi01LFxcbi5weS01IHtcXG4gIHBhZGRpbmctYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ucGwtNSxcXG4ucHgtNSB7XFxuICBwYWRkaW5nLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tLW4xIHtcXG4gIG1hcmdpbjogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tdC1uMSxcXG4ubXktbjEge1xcbiAgbWFyZ2luLXRvcDogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tci1uMSxcXG4ubXgtbjEge1xcbiAgbWFyZ2luLXJpZ2h0OiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1iLW4xLFxcbi5teS1uMSB7XFxuICBtYXJnaW4tYm90dG9tOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1sLW4xLFxcbi5teC1uMSB7XFxuICBtYXJnaW4tbGVmdDogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tLW4yIHtcXG4gIG1hcmdpbjogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm10LW4yLFxcbi5teS1uMiB7XFxuICBtYXJnaW4tdG9wOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXItbjIsXFxuLm14LW4yIHtcXG4gIG1hcmdpbi1yaWdodDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1iLW4yLFxcbi5teS1uMiB7XFxuICBtYXJnaW4tYm90dG9tOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWwtbjIsXFxuLm14LW4yIHtcXG4gIG1hcmdpbi1sZWZ0OiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubS1uMyB7XFxuICBtYXJnaW46IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXQtbjMsXFxuLm15LW4zIHtcXG4gIG1hcmdpbi10b3A6IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubXItbjMsXFxuLm14LW4zIHtcXG4gIG1hcmdpbi1yaWdodDogLTFyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tYi1uMyxcXG4ubXktbjMge1xcbiAgbWFyZ2luLWJvdHRvbTogLTFyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tbC1uMyxcXG4ubXgtbjMge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubS1uNCB7XFxuICBtYXJnaW46IC0xLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tdC1uNCxcXG4ubXktbjQge1xcbiAgbWFyZ2luLXRvcDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1yLW40LFxcbi5teC1uNCB7XFxuICBtYXJnaW4tcmlnaHQ6IC0xLjVyZW0gIWltcG9ydGFudDsgfVxcblxcbi5tYi1uNCxcXG4ubXktbjQge1xcbiAgbWFyZ2luLWJvdHRvbTogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1sLW40LFxcbi5teC1uNCB7XFxuICBtYXJnaW4tbGVmdDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm0tbjUge1xcbiAgbWFyZ2luOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm10LW41LFxcbi5teS1uNSB7XFxuICBtYXJnaW4tdG9wOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm1yLW41LFxcbi5teC1uNSB7XFxuICBtYXJnaW4tcmlnaHQ6IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWItbjUsXFxuLm15LW41IHtcXG4gIG1hcmdpbi1ib3R0b206IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG5cXG4ubWwtbjUsXFxuLm14LW41IHtcXG4gIG1hcmdpbi1sZWZ0OiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuXFxuLm0tYXV0byB7XFxuICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDsgfVxcblxcbi5tdC1hdXRvLFxcbi5teS1hdXRvIHtcXG4gIG1hcmdpbi10b3A6IGF1dG8gIWltcG9ydGFudDsgfVxcblxcbi5tci1hdXRvLFxcbi5teC1hdXRvIHtcXG4gIG1hcmdpbi1yaWdodDogYXV0byAhaW1wb3J0YW50OyB9XFxuXFxuLm1iLWF1dG8sXFxuLm15LWF1dG8ge1xcbiAgbWFyZ2luLWJvdHRvbTogYXV0byAhaW1wb3J0YW50OyB9XFxuXFxuLm1sLWF1dG8sXFxuLm14LWF1dG8ge1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG8gIWltcG9ydGFudDsgfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLm0tc20tMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tMCxcXG4gIC5teS1zbS0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9XFxuICAubXItc20tMCxcXG4gIC5teC1zbS0wIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS0wLFxcbiAgLm15LXNtLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS0wLFxcbiAgLm14LXNtLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50OyB9XFxuICAubS1zbS0xIHtcXG4gICAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1zbS0xLFxcbiAgLm15LXNtLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1zbS0xLFxcbiAgLm14LXNtLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLXNtLTEsXFxuICAubXktc20tMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLXNtLTEsXFxuICAubXgtc20tMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXNtLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tMixcXG4gIC5teS1zbS0yIHtcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1zbS0yLFxcbiAgLm14LXNtLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItc20tMixcXG4gIC5teS1zbS0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS0yLFxcbiAgLm14LXNtLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXNtLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXNtLTMsXFxuICAubXktc20tMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXNtLTMsXFxuICAubXgtc20tMyB7XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItc20tMyxcXG4gIC5teS1zbS0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwtc20tMyxcXG4gIC5teC1zbS0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tc20tNCB7XFxuICAgIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1zbS00LFxcbiAgLm15LXNtLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXNtLTQsXFxuICAubXgtc20tNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS00LFxcbiAgLm15LXNtLTQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLXNtLTQsXFxuICAubXgtc20tNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tc20tNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tNSxcXG4gIC5teS1zbS01IHtcXG4gICAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItc20tNSxcXG4gIC5teC1zbS01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS01LFxcbiAgLm15LXNtLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS01LFxcbiAgLm14LXNtLTUge1xcbiAgICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucC1zbS0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50OyB9XFxuICAucHQtc20tMCxcXG4gIC5weS1zbS0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsgfVxcbiAgLnByLXNtLTAsXFxuICAucHgtc20tMCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnBiLXNtLTAsXFxuICAucHktc20tMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wbC1zbS0wLFxcbiAgLnB4LXNtLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnAtc20tMSB7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LXNtLTEsXFxuICAucHktc20tMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1zbS0xLFxcbiAgLnB4LXNtLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1zbS0xLFxcbiAgLnB5LXNtLTEge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtc20tMSxcXG4gIC5weC1zbS0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLXNtLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LXNtLTIsXFxuICAucHktc20tMiB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLXNtLTIsXFxuICAucHgtc20tMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItc20tMixcXG4gIC5weS1zbS0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtc20tMixcXG4gIC5weC1zbS0yIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtc20tMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LXNtLTMsXFxuICAucHktc20tMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1zbS0zLFxcbiAgLnB4LXNtLTMge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1zbS0zLFxcbiAgLnB5LXNtLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtc20tMyxcXG4gIC5weC1zbS0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLXNtLTQge1xcbiAgICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LXNtLTQsXFxuICAucHktc20tNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLXNtLTQsXFxuICAucHgtc20tNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItc20tNCxcXG4gIC5weS1zbS00IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtc20tNCxcXG4gIC5weC1zbS00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtc20tNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LXNtLTUsXFxuICAucHktc20tNSB7XFxuICAgIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1zbS01LFxcbiAgLnB4LXNtLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1zbS01LFxcbiAgLnB5LXNtLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtc20tNSxcXG4gIC5weC1zbS01IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXNtLW4xIHtcXG4gICAgbWFyZ2luOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tbjEsXFxuICAubXktc20tbjEge1xcbiAgICBtYXJnaW4tdG9wOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItc20tbjEsXFxuICAubXgtc20tbjEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS1uMSxcXG4gIC5teS1zbS1uMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS1uMSxcXG4gIC5teC1zbS1uMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1zbS1uMiB7XFxuICAgIG1hcmdpbjogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tbjIsXFxuICAubXktc20tbjIge1xcbiAgICBtYXJnaW4tdG9wOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1zbS1uMixcXG4gIC5teC1zbS1uMiB7XFxuICAgIG1hcmdpbi1yaWdodDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItc20tbjIsXFxuICAubXktc20tbjIge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS1uMixcXG4gIC5teC1zbS1uMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXNtLW4zIHtcXG4gICAgbWFyZ2luOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tbjMsXFxuICAubXktc20tbjMge1xcbiAgICBtYXJnaW4tdG9wOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItc20tbjMsXFxuICAubXgtc20tbjMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS1uMyxcXG4gIC5teS1zbS1uMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS1uMyxcXG4gIC5teC1zbS1uMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1zbS1uNCB7XFxuICAgIG1hcmdpbjogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tbjQsXFxuICAubXktc20tbjQge1xcbiAgICBtYXJnaW4tdG9wOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1zbS1uNCxcXG4gIC5teC1zbS1uNCB7XFxuICAgIG1hcmdpbi1yaWdodDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItc20tbjQsXFxuICAubXktc20tbjQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS1uNCxcXG4gIC5teC1zbS1uNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXNtLW41IHtcXG4gICAgbWFyZ2luOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtc20tbjUsXFxuICAubXktc20tbjUge1xcbiAgICBtYXJnaW4tdG9wOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItc20tbjUsXFxuICAubXgtc20tbjUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1zbS1uNSxcXG4gIC5teS1zbS1uNSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1zbS1uNSxcXG4gIC5teC1zbS1uNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubS1zbS1hdXRvIHtcXG4gICAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1zbS1hdXRvLFxcbiAgLm15LXNtLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1zbS1hdXRvLFxcbiAgLm14LXNtLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1iLXNtLWF1dG8sXFxuICAubXktc20tYXV0byB7XFxuICAgIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1sLXNtLWF1dG8sXFxuICAubXgtc20tYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcbiAgLm0tbWQtMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtMCxcXG4gIC5teS1tZC0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9XFxuICAubXItbWQtMCxcXG4gIC5teC1tZC0wIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC0wLFxcbiAgLm15LW1kLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC0wLFxcbiAgLm14LW1kLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50OyB9XFxuICAubS1tZC0xIHtcXG4gICAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1tZC0xLFxcbiAgLm15LW1kLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1tZC0xLFxcbiAgLm14LW1kLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLW1kLTEsXFxuICAubXktbWQtMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLW1kLTEsXFxuICAubXgtbWQtMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLW1kLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtMixcXG4gIC5teS1tZC0yIHtcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1tZC0yLFxcbiAgLm14LW1kLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbWQtMixcXG4gIC5teS1tZC0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC0yLFxcbiAgLm14LW1kLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLW1kLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LW1kLTMsXFxuICAubXktbWQtMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLW1kLTMsXFxuICAubXgtbWQtMyB7XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbWQtMyxcXG4gIC5teS1tZC0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwtbWQtMyxcXG4gIC5teC1tZC0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tbWQtNCB7XFxuICAgIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1tZC00LFxcbiAgLm15LW1kLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLW1kLTQsXFxuICAubXgtbWQtNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC00LFxcbiAgLm15LW1kLTQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLW1kLTQsXFxuICAubXgtbWQtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tbWQtNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtNSxcXG4gIC5teS1tZC01IHtcXG4gICAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbWQtNSxcXG4gIC5teC1tZC01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC01LFxcbiAgLm15LW1kLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC01LFxcbiAgLm14LW1kLTUge1xcbiAgICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucC1tZC0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50OyB9XFxuICAucHQtbWQtMCxcXG4gIC5weS1tZC0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsgfVxcbiAgLnByLW1kLTAsXFxuICAucHgtbWQtMCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnBiLW1kLTAsXFxuICAucHktbWQtMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wbC1tZC0wLFxcbiAgLnB4LW1kLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnAtbWQtMSB7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LW1kLTEsXFxuICAucHktbWQtMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1tZC0xLFxcbiAgLnB4LW1kLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1tZC0xLFxcbiAgLnB5LW1kLTEge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbWQtMSxcXG4gIC5weC1tZC0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLW1kLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LW1kLTIsXFxuICAucHktbWQtMiB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLW1kLTIsXFxuICAucHgtbWQtMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItbWQtMixcXG4gIC5weS1tZC0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbWQtMixcXG4gIC5weC1tZC0yIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtbWQtMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LW1kLTMsXFxuICAucHktbWQtMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1tZC0zLFxcbiAgLnB4LW1kLTMge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1tZC0zLFxcbiAgLnB5LW1kLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbWQtMyxcXG4gIC5weC1tZC0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLW1kLTQge1xcbiAgICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LW1kLTQsXFxuICAucHktbWQtNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLW1kLTQsXFxuICAucHgtbWQtNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItbWQtNCxcXG4gIC5weS1tZC00IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbWQtNCxcXG4gIC5weC1tZC00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtbWQtNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LW1kLTUsXFxuICAucHktbWQtNSB7XFxuICAgIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1tZC01LFxcbiAgLnB4LW1kLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1tZC01LFxcbiAgLnB5LW1kLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbWQtNSxcXG4gIC5weC1tZC01IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLW1kLW4xIHtcXG4gICAgbWFyZ2luOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtbjEsXFxuICAubXktbWQtbjEge1xcbiAgICBtYXJnaW4tdG9wOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbWQtbjEsXFxuICAubXgtbWQtbjEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC1uMSxcXG4gIC5teS1tZC1uMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC1uMSxcXG4gIC5teC1tZC1uMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1tZC1uMiB7XFxuICAgIG1hcmdpbjogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtbjIsXFxuICAubXktbWQtbjIge1xcbiAgICBtYXJnaW4tdG9wOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1tZC1uMixcXG4gIC5teC1tZC1uMiB7XFxuICAgIG1hcmdpbi1yaWdodDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbWQtbjIsXFxuICAubXktbWQtbjIge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC1uMixcXG4gIC5teC1tZC1uMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLW1kLW4zIHtcXG4gICAgbWFyZ2luOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtbjMsXFxuICAubXktbWQtbjMge1xcbiAgICBtYXJnaW4tdG9wOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbWQtbjMsXFxuICAubXgtbWQtbjMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC1uMyxcXG4gIC5teS1tZC1uMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC1uMyxcXG4gIC5teC1tZC1uMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1tZC1uNCB7XFxuICAgIG1hcmdpbjogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtbjQsXFxuICAubXktbWQtbjQge1xcbiAgICBtYXJnaW4tdG9wOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1tZC1uNCxcXG4gIC5teC1tZC1uNCB7XFxuICAgIG1hcmdpbi1yaWdodDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbWQtbjQsXFxuICAubXktbWQtbjQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC1uNCxcXG4gIC5teC1tZC1uNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLW1kLW41IHtcXG4gICAgbWFyZ2luOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbWQtbjUsXFxuICAubXktbWQtbjUge1xcbiAgICBtYXJnaW4tdG9wOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbWQtbjUsXFxuICAubXgtbWQtbjUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1tZC1uNSxcXG4gIC5teS1tZC1uNSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1tZC1uNSxcXG4gIC5teC1tZC1uNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubS1tZC1hdXRvIHtcXG4gICAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1tZC1hdXRvLFxcbiAgLm15LW1kLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1tZC1hdXRvLFxcbiAgLm14LW1kLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1iLW1kLWF1dG8sXFxuICAubXktbWQtYXV0byB7XFxuICAgIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1sLW1kLWF1dG8sXFxuICAubXgtbWQtYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA5OTJweCkge1xcbiAgLm0tbGctMCB7XFxuICAgIG1hcmdpbjogMCAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctMCxcXG4gIC5teS1sZy0wIHtcXG4gICAgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyB9XFxuICAubXItbGctMCxcXG4gIC5teC1sZy0wIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy0wLFxcbiAgLm15LWxnLTAge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy0wLFxcbiAgLm14LWxnLTAge1xcbiAgICBtYXJnaW4tbGVmdDogMCAhaW1wb3J0YW50OyB9XFxuICAubS1sZy0xIHtcXG4gICAgbWFyZ2luOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1sZy0xLFxcbiAgLm15LWxnLTEge1xcbiAgICBtYXJnaW4tdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1sZy0xLFxcbiAgLm14LWxnLTEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLWxnLTEsXFxuICAubXktbGctMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLWxnLTEsXFxuICAubXgtbGctMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLWxnLTIge1xcbiAgICBtYXJnaW46IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctMixcXG4gIC5teS1sZy0yIHtcXG4gICAgbWFyZ2luLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1sZy0yLFxcbiAgLm14LWxnLTIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbGctMixcXG4gIC5teS1sZy0yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy0yLFxcbiAgLm14LWxnLTIge1xcbiAgICBtYXJnaW4tbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLWxnLTMge1xcbiAgICBtYXJnaW46IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LWxnLTMsXFxuICAubXktbGctMyB7XFxuICAgIG1hcmdpbi10b3A6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLWxnLTMsXFxuICAubXgtbGctMyB7XFxuICAgIG1hcmdpbi1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbGctMyxcXG4gIC5teS1sZy0zIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwtbGctMyxcXG4gIC5teC1sZy0zIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tbGctNCB7XFxuICAgIG1hcmdpbjogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1sZy00LFxcbiAgLm15LWxnLTQge1xcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLWxnLTQsXFxuICAubXgtbGctNCB7XFxuICAgIG1hcmdpbi1yaWdodDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy00LFxcbiAgLm15LWxnLTQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLWxnLTQsXFxuICAubXgtbGctNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0tbGctNSB7XFxuICAgIG1hcmdpbjogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctNSxcXG4gIC5teS1sZy01IHtcXG4gICAgbWFyZ2luLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbGctNSxcXG4gIC5teC1sZy01IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy01LFxcbiAgLm15LWxnLTUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy01LFxcbiAgLm14LWxnLTUge1xcbiAgICBtYXJnaW4tbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucC1sZy0wIHtcXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50OyB9XFxuICAucHQtbGctMCxcXG4gIC5weS1sZy0wIHtcXG4gICAgcGFkZGluZy10b3A6IDAgIWltcG9ydGFudDsgfVxcbiAgLnByLWxnLTAsXFxuICAucHgtbGctMCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnBiLWxnLTAsXFxuICAucHktbGctMCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wbC1sZy0wLFxcbiAgLnB4LWxnLTAge1xcbiAgICBwYWRkaW5nLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLnAtbGctMSB7XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LWxnLTEsXFxuICAucHktbGctMSB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1sZy0xLFxcbiAgLnB4LWxnLTEge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1sZy0xLFxcbiAgLnB5LWxnLTEge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbGctMSxcXG4gIC5weC1sZy0xIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLWxnLTIge1xcbiAgICBwYWRkaW5nOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LWxnLTIsXFxuICAucHktbGctMiB7XFxuICAgIHBhZGRpbmctdG9wOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLWxnLTIsXFxuICAucHgtbGctMiB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItbGctMixcXG4gIC5weS1sZy0yIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbGctMixcXG4gIC5weC1sZy0yIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtbGctMyB7XFxuICAgIHBhZGRpbmc6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LWxnLTMsXFxuICAucHktbGctMyB7XFxuICAgIHBhZGRpbmctdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1sZy0zLFxcbiAgLnB4LWxnLTMge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1sZy0zLFxcbiAgLnB5LWxnLTMge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbGctMyxcXG4gIC5weC1sZy0zIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLWxnLTQge1xcbiAgICBwYWRkaW5nOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LWxnLTQsXFxuICAucHktbGctNCB7XFxuICAgIHBhZGRpbmctdG9wOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnByLWxnLTQsXFxuICAucHgtbGctNCB7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGItbGctNCxcXG4gIC5weS1sZy00IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbGctNCxcXG4gIC5weC1sZy00IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAtbGctNSB7XFxuICAgIHBhZGRpbmc6IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLnB0LWxnLTUsXFxuICAucHktbGctNSB7XFxuICAgIHBhZGRpbmctdG9wOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci1sZy01LFxcbiAgLnB4LWxnLTUge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi1sZy01LFxcbiAgLnB5LWxnLTUge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucGwtbGctNSxcXG4gIC5weC1sZy01IHtcXG4gICAgcGFkZGluZy1sZWZ0OiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLWxnLW4xIHtcXG4gICAgbWFyZ2luOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctbjEsXFxuICAubXktbGctbjEge1xcbiAgICBtYXJnaW4tdG9wOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbGctbjEsXFxuICAubXgtbGctbjEge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy1uMSxcXG4gIC5teS1sZy1uMSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0wLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy1uMSxcXG4gIC5teC1sZy1uMSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1sZy1uMiB7XFxuICAgIG1hcmdpbjogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctbjIsXFxuICAubXktbGctbjIge1xcbiAgICBtYXJnaW4tdG9wOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1sZy1uMixcXG4gIC5teC1sZy1uMiB7XFxuICAgIG1hcmdpbi1yaWdodDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbGctbjIsXFxuICAubXktbGctbjIge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy1uMixcXG4gIC5teC1sZy1uMiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLWxnLW4zIHtcXG4gICAgbWFyZ2luOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctbjMsXFxuICAubXktbGctbjMge1xcbiAgICBtYXJnaW4tdG9wOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbGctbjMsXFxuICAubXgtbGctbjMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy1uMyxcXG4gIC5teS1sZy1uMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0xcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy1uMyxcXG4gIC5teC1sZy1uMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS1sZy1uNCB7XFxuICAgIG1hcmdpbjogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctbjQsXFxuICAubXktbGctbjQge1xcbiAgICBtYXJnaW4tdG9wOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1sZy1uNCxcXG4gIC5teC1sZy1uNCB7XFxuICAgIG1hcmdpbi1yaWdodDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWItbGctbjQsXFxuICAubXktbGctbjQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy1uNCxcXG4gIC5teC1sZy1uNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLWxnLW41IHtcXG4gICAgbWFyZ2luOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXQtbGctbjUsXFxuICAubXktbGctbjUge1xcbiAgICBtYXJnaW4tdG9wOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubXItbGctbjUsXFxuICAubXgtbGctbjUge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi1sZy1uNSxcXG4gIC5teS1sZy1uNSB7XFxuICAgIG1hcmdpbi1ib3R0b206IC0zcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC1sZy1uNSxcXG4gIC5teC1sZy1uNSB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubS1sZy1hdXRvIHtcXG4gICAgbWFyZ2luOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC1sZy1hdXRvLFxcbiAgLm15LWxnLWF1dG8ge1xcbiAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tci1sZy1hdXRvLFxcbiAgLm14LWxnLWF1dG8ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1iLWxnLWF1dG8sXFxuICAubXktbGctYXV0byB7XFxuICAgIG1hcmdpbi1ib3R0b206IGF1dG8gIWltcG9ydGFudDsgfVxcbiAgLm1sLWxnLWF1dG8sXFxuICAubXgtbGctYXV0byB7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC5tLXhsLTAge1xcbiAgICBtYXJnaW46IDAgIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLTAsXFxuICAubXkteGwtMCB7XFxuICAgIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDsgfVxcbiAgLm1yLXhsLTAsXFxuICAubXgteGwtMCB7XFxuICAgIG1hcmdpbi1yaWdodDogMCAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtMCxcXG4gIC5teS14bC0wIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtMCxcXG4gIC5teC14bC0wIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDsgfVxcbiAgLm0teGwtMSB7XFxuICAgIG1hcmdpbjogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQteGwtMSxcXG4gIC5teS14bC0xIHtcXG4gICAgbWFyZ2luLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXIteGwtMSxcXG4gIC5teC14bC0xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi14bC0xLFxcbiAgLm15LXhsLTEge1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC14bC0xLFxcbiAgLm14LXhsLTEge1xcbiAgICBtYXJnaW4tbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS14bC0yIHtcXG4gICAgbWFyZ2luOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLTIsXFxuICAubXkteGwtMiB7XFxuICAgIG1hcmdpbi10b3A6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXIteGwtMixcXG4gIC5teC14bC0yIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLXhsLTIsXFxuICAubXkteGwtMiB7XFxuICAgIG1hcmdpbi1ib3R0b206IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtMixcXG4gIC5teC14bC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS14bC0zIHtcXG4gICAgbWFyZ2luOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tdC14bC0zLFxcbiAgLm15LXhsLTMge1xcbiAgICBtYXJnaW4tdG9wOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci14bC0zLFxcbiAgLm14LXhsLTMge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLXhsLTMsXFxuICAubXkteGwtMyB7XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1sLXhsLTMsXFxuICAubXgteGwtMyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXhsLTQge1xcbiAgICBtYXJnaW46IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXQteGwtNCxcXG4gIC5teS14bC00IHtcXG4gICAgbWFyZ2luLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tci14bC00LFxcbiAgLm14LXhsLTQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtNCxcXG4gIC5teS14bC00IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC14bC00LFxcbiAgLm14LXhsLTQge1xcbiAgICBtYXJnaW4tbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5tLXhsLTUge1xcbiAgICBtYXJnaW46IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLTUsXFxuICAubXkteGwtNSB7XFxuICAgIG1hcmdpbi10b3A6IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXhsLTUsXFxuICAubXgteGwtNSB7XFxuICAgIG1hcmdpbi1yaWdodDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtNSxcXG4gIC5teS14bC01IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtNSxcXG4gIC5teC14bC01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLnAteGwtMCB7XFxuICAgIHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxcbiAgLnB0LXhsLTAsXFxuICAucHkteGwtMCB7XFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wci14bC0wLFxcbiAgLnB4LXhsLTAge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wYi14bC0wLFxcbiAgLnB5LXhsLTAge1xcbiAgICBwYWRkaW5nLWJvdHRvbTogMCAhaW1wb3J0YW50OyB9XFxuICAucGwteGwtMCxcXG4gIC5weC14bC0wIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXG4gIC5wLXhsLTEge1xcbiAgICBwYWRkaW5nOiAwLjI1cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wdC14bC0xLFxcbiAgLnB5LXhsLTEge1xcbiAgICBwYWRkaW5nLXRvcDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucHIteGwtMSxcXG4gIC5weC14bC0xIHtcXG4gICAgcGFkZGluZy1yaWdodDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGIteGwtMSxcXG4gIC5weS14bC0xIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBsLXhsLTEsXFxuICAucHgteGwtMSB7XFxuICAgIHBhZGRpbmctbGVmdDogMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAucC14bC0yIHtcXG4gICAgcGFkZGluZzogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wdC14bC0yLFxcbiAgLnB5LXhsLTIge1xcbiAgICBwYWRkaW5nLXRvcDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci14bC0yLFxcbiAgLnB4LXhsLTIge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBiLXhsLTIsXFxuICAucHkteGwtMiB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBsLXhsLTIsXFxuICAucHgteGwtMiB7XFxuICAgIHBhZGRpbmctbGVmdDogMC41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLXhsLTMge1xcbiAgICBwYWRkaW5nOiAxcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wdC14bC0zLFxcbiAgLnB5LXhsLTMge1xcbiAgICBwYWRkaW5nLXRvcDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucHIteGwtMyxcXG4gIC5weC14bC0zIHtcXG4gICAgcGFkZGluZy1yaWdodDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucGIteGwtMyxcXG4gIC5weS14bC0zIHtcXG4gICAgcGFkZGluZy1ib3R0b206IDFyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBsLXhsLTMsXFxuICAucHgteGwtMyB7XFxuICAgIHBhZGRpbmctbGVmdDogMXJlbSAhaW1wb3J0YW50OyB9XFxuICAucC14bC00IHtcXG4gICAgcGFkZGluZzogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wdC14bC00LFxcbiAgLnB5LXhsLTQge1xcbiAgICBwYWRkaW5nLXRvcDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wci14bC00LFxcbiAgLnB4LXhsLTQge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBiLXhsLTQsXFxuICAucHkteGwtNCB7XFxuICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBsLXhsLTQsXFxuICAucHgteGwtNCB7XFxuICAgIHBhZGRpbmctbGVmdDogMS41cmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wLXhsLTUge1xcbiAgICBwYWRkaW5nOiAzcmVtICFpbXBvcnRhbnQ7IH1cXG4gIC5wdC14bC01LFxcbiAgLnB5LXhsLTUge1xcbiAgICBwYWRkaW5nLXRvcDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucHIteGwtNSxcXG4gIC5weC14bC01IHtcXG4gICAgcGFkZGluZy1yaWdodDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAucGIteGwtNSxcXG4gIC5weS14bC01IHtcXG4gICAgcGFkZGluZy1ib3R0b206IDNyZW0gIWltcG9ydGFudDsgfVxcbiAgLnBsLXhsLTUsXFxuICAucHgteGwtNSB7XFxuICAgIHBhZGRpbmctbGVmdDogM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubS14bC1uMSB7XFxuICAgIG1hcmdpbjogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLW4xLFxcbiAgLm15LXhsLW4xIHtcXG4gICAgbWFyZ2luLXRvcDogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXhsLW4xLFxcbiAgLm14LXhsLW4xIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtbjEsXFxuICAubXkteGwtbjEge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMC4yNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtbjEsXFxuICAubXgteGwtbjEge1xcbiAgICBtYXJnaW4tbGVmdDogLTAuMjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0teGwtbjIge1xcbiAgICBtYXJnaW46IC0wLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLW4yLFxcbiAgLm15LXhsLW4yIHtcXG4gICAgbWFyZ2luLXRvcDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXIteGwtbjIsXFxuICAubXgteGwtbjIge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0wLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLXhsLW4yLFxcbiAgLm15LXhsLW4yIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtbjIsXFxuICAubXgteGwtbjIge1xcbiAgICBtYXJnaW4tbGVmdDogLTAuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS14bC1uMyB7XFxuICAgIG1hcmdpbjogLTFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLW4zLFxcbiAgLm15LXhsLW4zIHtcXG4gICAgbWFyZ2luLXRvcDogLTFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXhsLW4zLFxcbiAgLm14LXhsLW4zIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtbjMsXFxuICAubXkteGwtbjMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtbjMsXFxuICAubXgteGwtbjMge1xcbiAgICBtYXJnaW4tbGVmdDogLTFyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0teGwtbjQge1xcbiAgICBtYXJnaW46IC0xLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLW40LFxcbiAgLm15LXhsLW40IHtcXG4gICAgbWFyZ2luLXRvcDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubXIteGwtbjQsXFxuICAubXgteGwtbjQge1xcbiAgICBtYXJnaW4tcmlnaHQ6IC0xLjVyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1iLXhsLW40LFxcbiAgLm15LXhsLW40IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtbjQsXFxuICAubXgteGwtbjQge1xcbiAgICBtYXJnaW4tbGVmdDogLTEuNXJlbSAhaW1wb3J0YW50OyB9XFxuICAubS14bC1uNSB7XFxuICAgIG1hcmdpbjogLTNyZW0gIWltcG9ydGFudDsgfVxcbiAgLm10LXhsLW41LFxcbiAgLm15LXhsLW41IHtcXG4gICAgbWFyZ2luLXRvcDogLTNyZW0gIWltcG9ydGFudDsgfVxcbiAgLm1yLXhsLW41LFxcbiAgLm14LXhsLW41IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubWIteGwtbjUsXFxuICAubXkteGwtbjUge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtM3JlbSAhaW1wb3J0YW50OyB9XFxuICAubWwteGwtbjUsXFxuICAubXgteGwtbjUge1xcbiAgICBtYXJnaW4tbGVmdDogLTNyZW0gIWltcG9ydGFudDsgfVxcbiAgLm0teGwtYXV0byB7XFxuICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50OyB9XFxuICAubXQteGwtYXV0byxcXG4gIC5teS14bC1hdXRvIHtcXG4gICAgbWFyZ2luLXRvcDogYXV0byAhaW1wb3J0YW50OyB9XFxuICAubXIteGwtYXV0byxcXG4gIC5teC14bC1hdXRvIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tYi14bC1hdXRvLFxcbiAgLm15LXhsLWF1dG8ge1xcbiAgICBtYXJnaW4tYm90dG9tOiBhdXRvICFpbXBvcnRhbnQ7IH1cXG4gIC5tbC14bC1hdXRvLFxcbiAgLm14LXhsLWF1dG8ge1xcbiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50OyB9IH1cXG5cXG4udGV4dC1tb25vc3BhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFNGTW9uby1SZWd1bGFyLCBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgXFxcIkxpYmVyYXRpb24gTW9ub1xcXCIsIFxcXCJDb3VyaWVyIE5ld1xcXCIsIG1vbm9zcGFjZTsgfVxcblxcbi50ZXh0LWp1c3RpZnkge1xcbiAgdGV4dC1hbGlnbjoganVzdGlmeSAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtd3JhcCB7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1ub3dyYXAge1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcCAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtdHJ1bmNhdGUge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsgfVxcblxcbi50ZXh0LWxlZnQge1xcbiAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDsgfVxcblxcbi50ZXh0LWNlbnRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiA1NzZweCkge1xcbiAgLnRleHQtc20tbGVmdCB7XFxuICAgIHRleHQtYWxpZ246IGxlZnQgIWltcG9ydGFudDsgfVxcbiAgLnRleHQtc20tcmlnaHQge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodCAhaW1wb3J0YW50OyB9XFxuICAudGV4dC1zbS1jZW50ZXIge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDsgfSB9XFxuXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxuICAudGV4dC1tZC1sZWZ0IHtcXG4gICAgdGV4dC1hbGlnbjogbGVmdCAhaW1wb3J0YW50OyB9XFxuICAudGV4dC1tZC1yaWdodCB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0ICFpbXBvcnRhbnQ7IH1cXG4gIC50ZXh0LW1kLWNlbnRlciB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlciAhaW1wb3J0YW50OyB9IH1cXG5cXG5AbWVkaWEgKG1pbi13aWR0aDogOTkycHgpIHtcXG4gIC50ZXh0LWxnLWxlZnQge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXG4gIC50ZXh0LWxnLXJpZ2h0IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDsgfVxcbiAgLnRleHQtbGctY2VudGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7IH0gfVxcblxcbkBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpIHtcXG4gIC50ZXh0LXhsLWxlZnQge1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0ICFpbXBvcnRhbnQ7IH1cXG4gIC50ZXh0LXhsLXJpZ2h0IHtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQgIWltcG9ydGFudDsgfVxcbiAgLnRleHQteGwtY2VudGVyIHtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7IH0gfVxcblxcbi50ZXh0LWxvd2VyY2FzZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC11cHBlcmNhc2Uge1xcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtY2FwaXRhbGl6ZSB7XFxuICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZSAhaW1wb3J0YW50OyB9XFxuXFxuLmZvbnQtd2VpZ2h0LWxpZ2h0IHtcXG4gIGZvbnQtd2VpZ2h0OiAzMDAgIWltcG9ydGFudDsgfVxcblxcbi5mb250LXdlaWdodC1saWdodGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiBsaWdodGVyICFpbXBvcnRhbnQ7IH1cXG5cXG4uZm9udC13ZWlnaHQtbm9ybWFsIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDAgIWltcG9ydGFudDsgfVxcblxcbi5mb250LXdlaWdodC1ib2xkIHtcXG4gIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDsgfVxcblxcbi5mb250LXdlaWdodC1ib2xkZXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlciAhaW1wb3J0YW50OyB9XFxuXFxuLmZvbnQtaXRhbGljIHtcXG4gIGZvbnQtc3R5bGU6IGl0YWxpYyAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtd2hpdGUge1xcbiAgY29sb3I6ICNmZmYgIWltcG9ydGFudDsgfVxcblxcbi50ZXh0LXByaW1hcnkge1xcbiAgY29sb3I6ICMwMDdiZmYgIWltcG9ydGFudDsgfVxcblxcbmEudGV4dC1wcmltYXJ5OmhvdmVyLCBhLnRleHQtcHJpbWFyeTpmb2N1cyB7XFxuICBjb2xvcjogIzAwNTZiMyAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtc2Vjb25kYXJ5IHtcXG4gIGNvbG9yOiAjNmM3NTdkICFpbXBvcnRhbnQ7IH1cXG5cXG5hLnRleHQtc2Vjb25kYXJ5OmhvdmVyLCBhLnRleHQtc2Vjb25kYXJ5OmZvY3VzIHtcXG4gIGNvbG9yOiAjNDk0ZjU0ICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1zdWNjZXNzIHtcXG4gIGNvbG9yOiAjMjhhNzQ1ICFpbXBvcnRhbnQ7IH1cXG5cXG5hLnRleHQtc3VjY2Vzczpob3ZlciwgYS50ZXh0LXN1Y2Nlc3M6Zm9jdXMge1xcbiAgY29sb3I6ICMxOTY5MmMgIWltcG9ydGFudDsgfVxcblxcbi50ZXh0LWluZm8ge1xcbiAgY29sb3I6ICMxN2EyYjggIWltcG9ydGFudDsgfVxcblxcbmEudGV4dC1pbmZvOmhvdmVyLCBhLnRleHQtaW5mbzpmb2N1cyB7XFxuICBjb2xvcjogIzBmNjY3NCAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtd2FybmluZyB7XFxuICBjb2xvcjogI2ZmYzEwNyAhaW1wb3J0YW50OyB9XFxuXFxuYS50ZXh0LXdhcm5pbmc6aG92ZXIsIGEudGV4dC13YXJuaW5nOmZvY3VzIHtcXG4gIGNvbG9yOiAjYmE4YjAwICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1kYW5nZXIge1xcbiAgY29sb3I6ICNkYzM1NDUgIWltcG9ydGFudDsgfVxcblxcbmEudGV4dC1kYW5nZXI6aG92ZXIsIGEudGV4dC1kYW5nZXI6Zm9jdXMge1xcbiAgY29sb3I6ICNhNzFkMmEgIWltcG9ydGFudDsgfVxcblxcbi50ZXh0LWxpZ2h0IHtcXG4gIGNvbG9yOiAjZjhmOWZhICFpbXBvcnRhbnQ7IH1cXG5cXG5hLnRleHQtbGlnaHQ6aG92ZXIsIGEudGV4dC1saWdodDpmb2N1cyB7XFxuICBjb2xvcjogI2NiZDNkYSAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtZGFyayB7XFxuICBjb2xvcjogIzM0M2E0MCAhaW1wb3J0YW50OyB9XFxuXFxuYS50ZXh0LWRhcms6aG92ZXIsIGEudGV4dC1kYXJrOmZvY3VzIHtcXG4gIGNvbG9yOiAjMTIxNDE2ICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1ib2R5IHtcXG4gIGNvbG9yOiAjMjEyNTI5ICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1tdXRlZCB7XFxuICBjb2xvcjogIzZjNzU3ZCAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtYmxhY2stNTAge1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KSAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtd2hpdGUtNTAge1xcbiAgY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSAhaW1wb3J0YW50OyB9XFxuXFxuLnRleHQtaGlkZSB7XFxuICBmb250OiAwLzAgYTtcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIHRleHQtc2hhZG93OiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDA7IH1cXG5cXG4udGV4dC1kZWNvcmF0aW9uLW5vbmUge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lICFpbXBvcnRhbnQ7IH1cXG5cXG4udGV4dC1yZXNldCB7XFxuICBjb2xvcjogaW5oZXJpdCAhaW1wb3J0YW50OyB9XFxuXFxuLnZpc2libGUge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZSAhaW1wb3J0YW50OyB9XFxuXFxuLmludmlzaWJsZSB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDsgfVxcblxcbkBtZWRpYSBwcmludCB7XFxuICAqLFxcbiAgKjo6YmVmb3JlLFxcbiAgKjo6YWZ0ZXIge1xcbiAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xcbiAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7IH1cXG4gIGE6bm90KC5idG4pIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cXG4gIGFiYnJbdGl0bGVdOjphZnRlciB7XFxuICAgIGNvbnRlbnQ6IFxcXCIgKFxcXCIgYXR0cih0aXRsZSkgXFxcIilcXFwiOyB9XFxuICBwcmUge1xcbiAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDsgfVxcbiAgcHJlLFxcbiAgYmxvY2txdW90ZSB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNhZGI1YmQ7XFxuICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDsgfVxcbiAgdGhlYWQge1xcbiAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7IH1cXG4gIHRyLFxcbiAgaW1nIHtcXG4gICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkOyB9XFxuICBwLFxcbiAgaDIsXFxuICBoMyB7XFxuICAgIG9ycGhhbnM6IDM7XFxuICAgIHdpZG93czogMzsgfVxcbiAgaDIsXFxuICBoMyB7XFxuICAgIHBhZ2UtYnJlYWstYWZ0ZXI6IGF2b2lkOyB9XFxuICBAcGFnZSB7XFxuICAgIHNpemU6IGEzOyB9XFxuICBib2R5IHtcXG4gICAgbWluLXdpZHRoOiA5OTJweCAhaW1wb3J0YW50OyB9XFxuICAuY29udGFpbmVyIHtcXG4gICAgbWluLXdpZHRoOiA5OTJweCAhaW1wb3J0YW50OyB9XFxuICAubmF2YmFyIHtcXG4gICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLmJhZGdlIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgIzAwMDsgfVxcbiAgLnRhYmxlIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZSAhaW1wb3J0YW50OyB9XFxuICAgIC50YWJsZSB0ZCxcXG4gICAgLnRhYmxlIHRoIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmICFpbXBvcnRhbnQ7IH1cXG4gIC50YWJsZS1ib3JkZXJlZCB0aCxcXG4gIC50YWJsZS1ib3JkZXJlZCB0ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZWUyZTYgIWltcG9ydGFudDsgfVxcbiAgLnRhYmxlLWRhcmsge1xcbiAgICBjb2xvcjogaW5oZXJpdDsgfVxcbiAgICAudGFibGUtZGFyayB0aCxcXG4gICAgLnRhYmxlLWRhcmsgdGQsXFxuICAgIC50YWJsZS1kYXJrIHRoZWFkIHRoLFxcbiAgICAudGFibGUtZGFyayB0Ym9keSArIHRib2R5IHtcXG4gICAgICBib3JkZXItY29sb3I6ICNkZWUyZTY7IH1cXG4gIC50YWJsZSAudGhlYWQtZGFyayB0aCB7XFxuICAgIGNvbG9yOiBpbmhlcml0O1xcbiAgICBib3JkZXItY29sb3I6ICNkZWUyZTY7IH0gfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FwcC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS02LTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyohXG4gICogQm9vdHN0cmFwIHY0LjIuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncG9wcGVyLmpzJyksIHJlcXVpcmUoJ2pxdWVyeScpKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAncG9wcGVyLmpzJywgJ2pxdWVyeSddLCBmYWN0b3J5KSA6XG4gIChmYWN0b3J5KChnbG9iYWwuYm9vdHN0cmFwID0ge30pLGdsb2JhbC5Qb3BwZXIsZ2xvYmFsLmpRdWVyeSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsUG9wcGVyLCQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIFBvcHBlciA9IFBvcHBlciAmJiBQb3BwZXIuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFBvcHBlclsnZGVmYXVsdCddIDogUG9wcGVyO1xuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gICAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjIuMSk6IHV0aWwuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xuICB2YXIgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwOyAvLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5cbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xuICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZEVtdWxhdG9yKGR1cmF0aW9uKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICAkKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XG4gICAgICB9XG4gICAgfSwgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgJC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvcjtcbiAgICAkLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCk7XG4gIH1cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gIHZhciBVdGlsID0ge1xuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcbiAgICBnZXRVSUQ6IGZ1bmN0aW9uIGdldFVJRChwcmVmaXgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTsgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICAgICAgdmFyIGhyZWZBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgc2VsZWN0b3IgPSBocmVmQXR0ciAmJiBocmVmQXR0ciAhPT0gJyMnID8gaHJlZkF0dHIudHJpbSgpIDogJyc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxlY3RvciAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcbiAgICB9LFxuICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG5cblxuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7XG4gICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5ID0gJChlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZGVsYXknKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EZWxheSA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KTsgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuXG4gICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuXG5cbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xuICAgICAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gICAgICByZXR1cm4gKHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbiAgICB9LFxuICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB9LFxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpO1xuICAgIH0sXG4gICAgLy8gVE9ETzogUmVtb3ZlIGluIHY1XG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORCk7XG4gICAgfSxcbiAgICBpc0VsZW1lbnQ6IGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XG4gICAgfSxcbiAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBVdGlsLmlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKSArIFwiOiBcIiArIChcIk9wdGlvbiBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJcIiArIHZhbHVlVHlwZSArIFwiXFxcIiBcIikgKyAoXCJidXQgZXhwZWN0ZWQgdHlwZSBcXFwiXCIgKyBleHBlY3RlZFR5cGVzICsgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmaW5kU2hhZG93Um9vdDogZnVuY3Rpb24gZmluZFNoYWRvd1Jvb3QoZWxlbWVudCkge1xuICAgICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcblxuXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgICAgIHJldHVybiByb290IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHJvb3QgOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9IC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG5cblxuICAgICAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBVdGlsLmZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9O1xuICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMi4xJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0JztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xPU0U6IFwiY2xvc2VcIiArIEVWRU5UX0tFWSxcbiAgICBDTE9TRUQ6IFwiY2xvc2VkXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQWxlcnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHJvb3RFbGVtZW50ID0gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTtcblxuICAgICAgaWYgKGN1c3RvbUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Um9vdEVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChcIi5cIiArIENsYXNzTmFtZS5BTEVSVClbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlckNsb3NlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgICAgdmFyIGNsb3NlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkNMT1NFKTtcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KTtcbiAgICAgIHJldHVybiBjbG9zZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKCEkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgJChlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXN0cm95RWxlbWVudCA9IGZ1bmN0aW9uIF9kZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLmRldGFjaCgpLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKS5yZW1vdmUoKTtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzID0gZnVuY3Rpb24gX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFsZXJ0O1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRJU01JU1MsIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzKG5ldyBBbGVydCgpKSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEFsZXJ0O1xuXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQxID0gJ2J1dHRvbic7XG4gIHZhciBWRVJTSU9OJDEgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkMSA9ICdicy5idXR0b24nO1xuICB2YXIgRVZFTlRfS0VZJDEgPSBcIi5cIiArIERBVEFfS0VZJDE7XG4gIHZhciBEQVRBX0FQSV9LRVkkMSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDEgPSAkLmZuW05BTUUkMV07XG4gIHZhciBDbGFzc05hbWUkMSA9IHtcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIEJVVFRPTjogJ2J0bicsXG4gICAgRk9DVVM6ICdmb2N1cydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDEgPSB7XG4gICAgREFUQV9UT0dHTEVfQ0FSUk9UOiAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyxcbiAgICBJTlBVVDogJ2lucHV0Om5vdChbdHlwZT1cImhpZGRlblwiXSknLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEJVVFRPTjogJy5idG4nXG4gIH07XG4gIHZhciBFdmVudCQxID0ge1xuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkMSArIERBVEFfQVBJX0tFWSQxLFxuICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6IFwiZm9jdXNcIiArIEVWRU5UX0tFWSQxICsgREFUQV9BUElfS0VZJDEgKyBcIiBcIiArIChcImJsdXJcIiArIEVWRU5UX0tFWSQxICsgREFUQV9BUElfS0VZJDEpXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIEJ1dHRvbiA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJ1dHRvbihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yJDEuREFUQV9UT0dHTEUpWzBdO1xuXG4gICAgICBpZiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDEuSU5QVVQpO1xuXG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkMS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDEuQUNUSVZFKTtcblxuICAgICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDEuQUNUSVZFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQxLkFDVElWRSk7XG4gICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lJDEuQUNUSVZFKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkMS5BQ1RJVkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkMSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDEpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQxLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudCQxLkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQxLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKCEkKGJ1dHRvbikuaGFzQ2xhc3MoQ2xhc3NOYW1lJDEuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJChidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IkMS5CVVRUT04pO1xuICAgIH1cblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEV2ZW50JDEuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IkMS5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3RvciQxLkJVVFRPTilbMF07XG4gICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZSQxLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkMV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDFdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG4gICQuZm5bTkFNRSQxXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQxXSA9IEpRVUVSWV9OT19DT05GTElDVCQxO1xuICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkMiA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OJDIgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkMiA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkkMiA9IFwiLlwiICsgREFUQV9LRVkkMjtcbiAgdmFyIERBVEFfQVBJX0tFWSQyID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMiA9ICQuZm5bTkFNRSQyXTtcbiAgdmFyIEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuXG4gIHZhciBBUlJPV19SSUdIVF9LRVlDT0RFID0gMzk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHJpZ2h0IGFycm93IGtleVxuXG4gIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuICB2YXIgU1dJUEVfVEhSRVNIT0xEID0gNDA7XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNsaWRlOiBmYWxzZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlLFxuICAgIHRvdWNoOiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHdyYXA6ICdib29sZWFuJyxcbiAgICB0b3VjaDogJ2Jvb2xlYW4nXG4gIH07XG4gIHZhciBEaXJlY3Rpb24gPSB7XG4gICAgTkVYVDogJ25leHQnLFxuICAgIFBSRVY6ICdwcmV2JyxcbiAgICBMRUZUOiAnbGVmdCcsXG4gICAgUklHSFQ6ICdyaWdodCdcbiAgfTtcbiAgdmFyIEV2ZW50JDIgPSB7XG4gICAgU0xJREU6IFwic2xpZGVcIiArIEVWRU5UX0tFWSQyLFxuICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZJDIsXG4gICAgS0VZRE9XTjogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkkMixcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSQyLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZJDIsXG4gICAgVE9VQ0hTVEFSVDogXCJ0b3VjaHN0YXJ0XCIgKyBFVkVOVF9LRVkkMixcbiAgICBUT1VDSE1PVkU6IFwidG91Y2htb3ZlXCIgKyBFVkVOVF9LRVkkMixcbiAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZJDIsXG4gICAgUE9JTlRFUkRPV046IFwicG9pbnRlcmRvd25cIiArIEVWRU5UX0tFWSQyLFxuICAgIFBPSU5URVJVUDogXCJwb2ludGVydXBcIiArIEVWRU5UX0tFWSQyLFxuICAgIERSQUdfU1RBUlQ6IFwiZHJhZ3N0YXJ0XCIgKyBFVkVOVF9LRVkkMixcbiAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSQyICsgREFUQV9BUElfS0VZJDIsXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQyICsgREFUQV9BUElfS0VZJDJcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQyID0ge1xuICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgU0xJREU6ICdzbGlkZScsXG4gICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgICBMRUZUOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JyxcbiAgICBORVhUOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJVEVNOiAnY2Fyb3VzZWwtaXRlbScsXG4gICAgUE9JTlRFUl9FVkVOVDogJ3BvaW50ZXItZXZlbnQnXG4gIH07XG4gIHZhciBTZWxlY3RvciQyID0ge1xuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgIElURU1fSU1HOiAnLmNhcm91c2VsLWl0ZW0gaW1nJyxcbiAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJTkRJQ0FUT1JTOiAnLmNhcm91c2VsLWluZGljYXRvcnMnLFxuICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsXG4gICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xuICB9O1xuICB2YXIgUG9pbnRlclR5cGUgPSB7XG4gICAgVE9VQ0g6ICd0b3VjaCcsXG4gICAgUEVOOiAncGVuJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBDYXJvdXNlbCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gMDtcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuSU5ESUNBVE9SUyk7XG4gICAgICB0aGlzLl90b3VjaFN1cHBvcnRlZCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgICAgdGhpcy5fcG9pbnRlckV2ZW50ID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50IHx8IHdpbmRvdy5NU1BvaW50ZXJFdmVudCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDYXJvdXNlbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uTkVYVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiAkKHRoaXMuX2VsZW1lbnQpLmlzKCc6dmlzaWJsZScpICYmICQodGhpcy5fZWxlbWVudCkuY3NzKCd2aXNpYmlsaXR5JykgIT09ICdoaWRkZW4nKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3RvciQyLk5FWFRfUFJFVikpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkMi5BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKEV2ZW50JDIuU0xJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBEaXJlY3Rpb24uTkVYVCA6IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQyKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQyKTtcbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDIsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oYW5kbGVTd2lwZSA9IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZSgpIHtcbiAgICAgIHZhciBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcblxuICAgICAgaWYgKGFic0RlbHRheCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWDsgLy8gc3dpcGUgbGVmdFxuXG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCkge1xuICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgIH0gLy8gc3dpcGUgcmlnaHRcblxuXG4gICAgICBpZiAoZGlyZWN0aW9uIDwgMCkge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5LRVlET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9rZXlkb3duKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQyLk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucGF1c2UoZXZlbnQpO1xuICAgICAgICB9KS5vbihFdmVudCQyLk1PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuY3ljbGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fcG9pbnRlckV2ZW50ICYmIFBvaW50ZXJUeXBlW2V2ZW50Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0pIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hTdGFydFggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFg7XG4gICAgICAgIH0gZWxzZSBpZiAoIV90aGlzMy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtb3ZlID0gZnVuY3Rpb24gbW92ZShldmVudCkge1xuICAgICAgICAvLyBlbnN1cmUgc3dpcGluZyB3aXRoIG9uZSB0b3VjaCBhbmQgbm90IHBpbmNoaW5nXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy50b3VjaERlbHRhWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZW5kID0gZnVuY3Rpb24gZW5kKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9oYW5kbGVTd2lwZSgpO1xuXG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgX3RoaXMzLnBhdXNlKCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMy50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jeWNsZShldmVudCk7XG4gICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzMy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMi5JVEVNX0lNRykpLm9uKEV2ZW50JDIuRFJBR19TVEFSVCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5QT0lOVEVSRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5QT0lOVEVSVVAsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBlbmQoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ2xhc3NOYW1lJDIuUE9JTlRFUl9FVkVOVCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDIuVE9VQ0hTVEFSVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5UT1VDSE1PVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBtb3ZlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkMi5UT1VDSEVORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGVuZChldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xuICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMucHJldigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQyLklURU0pKSA6IFtdO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUJ5RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlzR29pbmdUb1dyYXAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHwgaXNOZXh0RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSBsYXN0SXRlbUluZGV4O1xuXG4gICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVYgPyAtMSA6IDE7XG4gICAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGl0ZW1JbmRleCA9PT0gLTEgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF07XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuQUNUSVZFX0lURU0pKTtcblxuICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDIuU0xJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMi5BQ1RJVkUpKTtcbiAgICAgICAgJChpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuXG4gICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTtcblxuICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICAgICQobmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ2xhc3NOYW1lJDIuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yJDIuQUNUSVZFX0lURU0pO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IGFjdGl2ZUVsZW1lbnQgJiYgdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgICAgdmFyIGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdmFyIGRpcmVjdGlvbmFsQ2xhc3NOYW1lO1xuICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lO1xuICAgICAgdmFyIGV2ZW50RGlyZWN0aW9uTmFtZTtcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQpIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5MRUZUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZSQyLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5SSUdIVDtcbiAgICAgICAgb3JkZXJDbGFzc05hbWUgPSBDbGFzc05hbWUkMi5QUkVWO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0RWxlbWVudCAmJiAkKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDIuU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkMi5TTElERSkpIHtcbiAgICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpO1xuICAgICAgICBVdGlsLnJlZmxvdyhuZXh0RWxlbWVudCk7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudEludGVydmFsID0gcGFyc2VJbnQobmV4dEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWludGVydmFsJyksIDEwKTtcblxuICAgICAgICBpZiAobmV4dEVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbDtcbiAgICAgICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSBuZXh0RWxlbWVudEludGVydmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENsYXNzTmFtZSQyLkFDVElWRSk7XG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lICsgXCIgXCIgKyBkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICAgX3RoaXM0Ll9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkKF90aGlzNC5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkMi5BQ1RJVkUpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQyKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsICQodGhpcykuZGF0YSgpKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkMiwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbYWN0aW9uXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgYWN0aW9uICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbYWN0aW9uXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwpIHtcbiAgICAgICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICAgICAgZGF0YS5jeWNsZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldCA9ICQoc2VsZWN0b3IpWzBdO1xuXG4gICAgICBpZiAoIXRhcmdldCB8fCAhJCh0YXJnZXQpLmhhc0NsYXNzKENsYXNzTmFtZSQyLkNBUk9VU0VMKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCAkKHRhcmdldCkuZGF0YSgpLCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgIHZhciBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGUtdG8nKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgY29uZmlnLmludGVydmFsID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZJDIpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudCQyLkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQyLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcbiAgJCh3aW5kb3cpLm9uKEV2ZW50JDIuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBjYXJvdXNlbHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMi5EQVRBX1JJREUpKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYXJvdXNlbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKGNhcm91c2Vsc1tpXSk7XG5cbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkMl0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkMl0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcblxuICAkLmZuW05BTUUkMl0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkMl0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkMjtcbiAgICByZXR1cm4gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkMyA9ICdjb2xsYXBzZSc7XG4gIHZhciBWRVJTSU9OJDMgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkMyA9ICdicy5jb2xsYXBzZSc7XG4gIHZhciBFVkVOVF9LRVkkMyA9IFwiLlwiICsgREFUQV9LRVkkMztcbiAgdmFyIERBVEFfQVBJX0tFWSQzID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMyA9ICQuZm5bTkFNRSQzXTtcbiAgdmFyIERlZmF1bHQkMSA9IHtcbiAgICB0b2dnbGU6IHRydWUsXG4gICAgcGFyZW50OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMSA9IHtcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcbiAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgRXZlbnQkMyA9IHtcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQzLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkMyxcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQzLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQzLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkMyArIERBVEFfQVBJX0tFWSQzXG4gIH07XG4gIHZhciBDbGFzc05hbWUkMyA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgQ09MTEFQU0U6ICdjb2xsYXBzZScsXG4gICAgQ09MTEFQU0lORzogJ2NvbGxhcHNpbmcnLFxuICAgIENPTExBUFNFRDogJ2NvbGxhcHNlZCdcbiAgfTtcbiAgdmFyIERpbWVuc2lvbiA9IHtcbiAgICBXSURUSDogJ3dpZHRoJyxcbiAgICBIRUlHSFQ6ICdoZWlnaHQnXG4gIH07XG4gIHZhciBTZWxlY3RvciQzID0ge1xuICAgIEFDVElWRVM6ICcuc2hvdywgLmNvbGxhcHNpbmcnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIENvbGxhcHNlID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1baHJlZj1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl0sXCIgKyAoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS10YXJnZXQ9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdXCIpKSk7XG4gICAgICB2YXIgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQzLkRBVEFfVE9HR0xFKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtID0gdG9nZ2xlTGlzdFtpXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAoZm91bmRFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kRWxlbSA9PT0gZWxlbWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVykpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZXM7XG4gICAgICB2YXIgYWN0aXZlc0RhdGE7XG5cbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkMy5BQ1RJVkVTKSkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5fY29uZmlnLnBhcmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQnKSA9PT0gX3RoaXMuX2NvbmZpZy5wYXJlbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSQzLkNPTExBUFNFKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgYWN0aXZlc0RhdGEgPSAkKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSQzKTtcblxuICAgICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQkMy5TSE9XKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcblxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpO1xuXG4gICAgICAgIGlmICghYWN0aXZlc0RhdGEpIHtcbiAgICAgICAgICAkKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVkkMywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQzLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTSU5HKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDA7XG5cbiAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgJChfdGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZSQzLlNIT1cpO1xuICAgICAgICBfdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cbiAgICAgICAgX3RoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJChfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudCQzLlNIT1dOKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgICAgdmFyIHNjcm9sbFNpemUgPSBcInNjcm9sbFwiICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQkMy5ISURFKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcblxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArIFwicHhcIjtcbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVyk7XG4gICAgICB2YXIgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJChbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSk7XG5cbiAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lJDMuU0hPVykpIHtcbiAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUkMy5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIF90aGlzMi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAkKF90aGlzMi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQkMy5ISURERU4pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0VHJhbnNpdGlvbmluZyA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQzKTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMSwgY29uZmlnKTtcbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDMsIGNvbmZpZywgRGVmYXVsdFR5cGUkMSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXREaW1lbnNpb24oKSB7XG4gICAgICB2YXIgaGFzV2lkdGggPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKERpbWVuc2lvbi5XSURUSCk7XG4gICAgICByZXR1cm4gaGFzV2lkdGggPyBEaW1lbnNpb24uV0lEVEggOiBEaW1lbnNpb24uSEVJR0hUO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBhcmVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnQoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHBhcmVudDtcblxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQ7IC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0b3IgPSBcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXBhcmVudD1cXFwiXCIgKyB0aGlzLl9jb25maWcucGFyZW50ICsgXCJcXFwiXVwiO1xuICAgICAgdmFyIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICAgJChjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHZhciBpc09wZW4gPSAkKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQzLlNIT1cpO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDMuQ09MTEFQU0VELCAhaXNPcGVuKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICAgIH1cbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZJDMpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCQxLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSQzLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDb2xsYXBzZTtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50JDMuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDMuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0cmlnZ2VyID0gJCh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9ycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICQoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZJDMpO1xuICAgICAgdmFyIGNvbmZpZyA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKTtcblxuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCR0YXJnZXQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDNdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDNdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG5cbiAgJC5mbltOQU1FJDNdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDNdID0gSlFVRVJZX05PX0NPTkZMSUNUJDM7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDQgPSAnZHJvcGRvd24nO1xuICB2YXIgVkVSU0lPTiQ0ID0gJzQuMi4xJztcbiAgdmFyIERBVEFfS0VZJDQgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZJDQgPSBcIi5cIiArIERBVEFfS0VZJDQ7XG4gIHZhciBEQVRBX0FQSV9LRVkkNCA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDQgPSAkLmZuW05BTUUkNF07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5XG5cbiAgdmFyIFRBQl9LRVlDT0RFID0gOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdGFiIGtleVxuXG4gIHZhciBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuXG4gIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXlcblxuICB2YXIgUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIID0gMzsgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG5cbiAgdmFyIFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChBUlJPV19VUF9LRVlDT0RFICsgXCJ8XCIgKyBBUlJPV19ET1dOX0tFWUNPREUgKyBcInxcIiArIEVTQ0FQRV9LRVlDT0RFKTtcbiAgdmFyIEV2ZW50JDQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ0LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNCxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDQsXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ0ICsgREFUQV9BUElfS0VZJDQsXG4gICAgS0VZRE9XTl9EQVRBX0FQSTogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkkNCArIERBVEFfQVBJX0tFWSQ0LFxuICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkkNCArIERBVEFfQVBJX0tFWSQ0XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNCA9IHtcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxuICAgIERST1BMRUZUOiAnZHJvcGxlZnQnLFxuICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcbiAgICBQT1NJVElPTl9TVEFUSUM6ICdwb3NpdGlvbi1zdGF0aWMnXG4gIH07XG4gIHZhciBTZWxlY3RvciQ0ID0ge1xuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLFxuICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgTUVOVTogJy5kcm9wZG93bi1tZW51JyxcbiAgICBOQVZCQVJfTkFWOiAnLm5hdmJhci1uYXYnLFxuICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcbiAgfTtcbiAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XG4gICAgVE9QOiAndG9wLXN0YXJ0JyxcbiAgICBUT1BFTkQ6ICd0b3AtZW5kJyxcbiAgICBCT1RUT006ICdib3R0b20tc3RhcnQnLFxuICAgIEJPVFRPTUVORDogJ2JvdHRvbS1lbmQnLFxuICAgIFJJR0hUOiAncmlnaHQtc3RhcnQnLFxuICAgIFJJR0hURU5EOiAncmlnaHQtZW5kJyxcbiAgICBMRUZUOiAnbGVmdC1zdGFydCcsXG4gICAgTEVGVEVORDogJ2xlZnQtZW5kJ1xuICB9O1xuICB2YXIgRGVmYXVsdCQyID0ge1xuICAgIG9mZnNldDogMCxcbiAgICBmbGlwOiB0cnVlLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50JyxcbiAgICByZWZlcmVuY2U6ICd0b2dnbGUnLFxuICAgIGRpc3BsYXk6ICdkeW5hbWljJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMiA9IHtcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIGZsaXA6ICdib29sZWFuJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIGRpc3BsYXk6ICdzdHJpbmcnXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIERyb3Bkb3duID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcGRvd24oZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQkNC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICQocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEaXNhYmxlIHRvdGFsbHkgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcblxuXG4gICAgICBpZiAoIXRoaXMuX2luTmF2YmFyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnLyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xuICAgICAgICB9IGVsc2UgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgICAvLyB0byBhbGxvdyB0aGUgbWVudSB0byBcImVzY2FwZVwiIHRoZSBzY3JvbGwgcGFyZW50J3MgYm91bmRhcmllc1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG5cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICQocGFyZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkNC5QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XG4gICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAkKHBhcmVudCkuY2xvc2VzdChTZWxlY3RvciQ0Lk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcbiAgICAgICQocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSB8fCAkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudCQ0LlNIT1csIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKTtcbiAgICAgICQocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRJU0FCTEVEKSB8fCAhJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUkNC5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQkNC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAkKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVykudHJpZ2dlcigkLkV2ZW50KEV2ZW50JDQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ0KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ0KTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50JDQuQ0xJQ0ssIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBfdGhpcy50b2dnbGUoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQodGhpcy5fZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ0LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRNZW51RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICAgIGlmICghdGhpcy5fbWVudSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkNC5NRU5VKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fbWVudTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgdmFyICRwYXJlbnREcm9wZG93biA9ICQodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxuXG4gICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZSQ0LkRST1BVUCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1A7XG5cbiAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuTUVOVVJJR0hUKSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUkNC5EUk9QUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFQ7XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUkNC5EUk9QTEVGVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5MRUZUO1xuICAgICAgfSBlbHNlIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZSQ0Lk1FTlVSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT01FTkQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGV0ZWN0TmF2YmFyID0gZnVuY3Rpb24gX2RldGVjdE5hdmJhcigpIHtcbiAgICAgIHJldHVybiAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoJy5uYXZiYXInKS5sZW5ndGggPiAwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9mZnNldENvbmYgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldENvbmYuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge30pO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0Q29uZi5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldENvbmYsXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5fY29uZmlnLmZsaXBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcblxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgICBwb3BwZXJDb25maWcubW9kaWZpZXJzLmFwcGx5U3R5bGUgPSB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBvcHBlckNvbmZpZztcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNCk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVkkNCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDQuREFUQV9UT0dHTEUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcblxuICAgICAgICB2YXIgY29udGV4dCA9ICQodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSQ0KTtcbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgIGlmICghJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudCQ0LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICAkKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDQuU0hPVyk7XG4gICAgICAgICQocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNC5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQkNC5ISURERU4sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBwYXJlbnQ7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudCB8fCBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcblxuXG4gICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgIC8vIElmIG5vdCBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAvLyAgLSBJZiBzcGFjZSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXG4gICAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgICAtIElmIHRyaWdnZXIgaW5zaWRlIHRoZSBtZW51ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJiAoZXZlbnQud2hpY2ggIT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBldmVudC53aGljaCAhPT0gQVJST1dfVVBfS0VZQ09ERSB8fCAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3RvciQ0Lk1FTlUpLmxlbmd0aCkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lJDQuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gJChwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ0LlNIT1cpO1xuXG4gICAgICBpZiAoIWlzQWN0aXZlIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICB2YXIgdG9nZ2xlID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkNC5EQVRBX1RPR0dMRSk7XG4gICAgICAgICAgJCh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ0LlZJU0lCTEVfSVRFTVMpKTtcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xuICAgICAgICAvLyBVcFxuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gRG93blxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDI7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkNC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3RvciQ0LkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudCQ0LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yJDQuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQkNC5DTElDS19EQVRBX0FQSSArIFwiIFwiICsgRXZlbnQkNC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50JDQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yJDQuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudCQ0LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3RvciQ0LkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkNF0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkNF0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAkLmZuW05BTUUkNF0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUUkNF0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkNDtcbiAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkNSA9ICdtb2RhbCc7XG4gIHZhciBWRVJTSU9OJDUgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkNSA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkkNSA9IFwiLlwiICsgREFUQV9LRVkkNTtcbiAgdmFyIERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNSA9ICQuZm5bTkFNRSQ1XTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFJDEgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0JDMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgZm9jdXM6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMyA9IHtcbiAgICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICBzaG93OiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIEV2ZW50JDUgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ1LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNSxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSQ1LFxuICAgIFJFU0laRTogXCJyZXNpemVcIiArIEVWRU5UX0tFWSQ1LFxuICAgIENMSUNLX0RJU01JU1M6IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgS0VZRE9XTl9ESVNNSVNTOiBcImtleWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgTU9VU0VVUF9ESVNNSVNTOiBcIm1vdXNldXAuZGlzbWlzc1wiICsgRVZFTlRfS0VZJDUsXG4gICAgTU9VU0VET1dOX0RJU01JU1M6IFwibW91c2Vkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1LFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNSArIERBVEFfQVBJX0tFWSQ1XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNSA9IHtcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgQkFDS0RST1A6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTjogJ21vZGFsLW9wZW4nLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDUgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcsXG4gICAgU1RJQ0tZX0NPTlRFTlQ6ICcuc3RpY2t5LXRvcCdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgTW9kYWwgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IkNS5ESUFMT0cpO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSAwO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gTW9kYWwucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQkNS5TSE9XLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblxuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQkNS5DTElDS19ESVNNSVNTLCBTZWxlY3RvciQ1LkRBVEFfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uKEV2ZW50JDUuTU9VU0VET1dOX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChfdGhpcy5fZWxlbWVudCkub25lKEV2ZW50JDUuTU9VU0VVUF9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKF90aGlzLl9lbGVtZW50KSkge1xuICAgICAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDUuSElERSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUkNS5GQURFKTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50JDUuRk9DVVNJTik7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ1LlNIT1cpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQkNS5DTElDS19ESVNNSVNTKTtcbiAgICAgICQodGhpcy5fZGlhbG9nKS5vZmYoRXZlbnQkNS5NT1VTRURPV05fRElTTUlTUyk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9oaWRlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIFt3aW5kb3csIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2RpYWxvZ10uZm9yRWFjaChmdW5jdGlvbiAoaHRtbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuICQoaHRtbEVsZW1lbnQpLm9mZihFVkVOVF9LRVkkNSk7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogYGRvY3VtZW50YCBoYXMgMiBldmVudHMgYEV2ZW50LkZPQ1VTSU5gIGFuZCBgRXZlbnQuQ0xJQ0tfREFUQV9BUElgXG4gICAgICAgKiBEbyBub3QgbW92ZSBgZG9jdW1lbnRgIGluIGBodG1sRWxlbWVudHNgIGFycmF5XG4gICAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRXZlbnQuQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAgICovXG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudCQ1LkZPQ1VTSU4pO1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDUpO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZGlhbG9nID0gbnVsbDtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBudWxsO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBudWxsO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gaGFuZGxlVXBkYXRlKCkge1xuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0JDMsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDUsIGNvbmZpZywgRGVmYXVsdFR5cGUkMyk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSk7XG5cbiAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkNS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICB0aGlzLl9lbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDUuU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICAgIF90aGlzMy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgJChfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9kaWFsb2cpO1xuICAgICAgICAkKHRoaXMuX2RpYWxvZykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIHRyYW5zaXRpb25Db21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb25Db21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2VuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uIF9lbmZvcmNlRm9jdXMoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgJChkb2N1bWVudCkub2ZmKEV2ZW50JDUuRk9DVVNJTikgLy8gR3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oRXZlbnQkNS5GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM0Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJChfdGhpczQuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIF90aGlzNC5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQ1LktFWURPV05fRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSQxKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBfdGhpczUuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50JDUuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAkKHdpbmRvdykub24oRXZlbnQkNS5SRVNJWkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczYuaGFuZGxlVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKHdpbmRvdykub2ZmKEV2ZW50JDUuUkVTSVpFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oaWRlTW9kYWwgPSBmdW5jdGlvbiBfaGlkZU1vZGFsKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG5cbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ1Lk9QRU4pO1xuXG4gICAgICAgIF90aGlzNy5fcmVzZXRBZGp1c3RtZW50cygpO1xuXG4gICAgICAgIF90aGlzNy5fcmVzZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICAkKF90aGlzNy5fZWxlbWVudCkudHJpZ2dlcihFdmVudCQ1LkhJRERFTik7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uIF9yZW1vdmVCYWNrZHJvcCgpIHtcbiAgICAgIGlmICh0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dCYWNrZHJvcCA9IGZ1bmN0aW9uIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICB2YXIgYW5pbWF0ZSA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDUuRkFERSkgPyBDbGFzc05hbWUkNS5GQURFIDogJyc7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkge1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUkNS5CQUNLRFJPUDtcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQoYW5pbWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCQ1LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzOC5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXM4Ll9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBfdGhpczguX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM4LmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFjaykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNS5TSE9XKTtcblxuICAgICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiBjYWxsYmFja1JlbW92ZSgpIHtcbiAgICAgICAgICBfdGhpczguX3JlbW92ZUJhY2tkcm9wKCk7XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ1LkZBREUpKSB7XG4gICAgICAgICAgdmFyIF9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO1xuXG4gICAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9OyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICAgIF9wcm90by5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG4gICAgICAgIHZhciBmaXhlZENvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkNS5GSVhFRF9DT05URU5UKSk7XG4gICAgICAgIHZhciBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDUuU1RJQ0tZX0NPTlRFTlQpKTsgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuXG4gICAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9KTsgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuXG4gICAgICAgICQoc3RpY2t5Q29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gZWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDUuT1BFTik7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3RvciQ1LkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFkZGluZyA9ICQoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgICAgfSk7IC8vIFJlc3RvcmUgc3RpY2t5IGNvbnRlbnRcblxuICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIgKyBTZWxlY3RvciQ1LlNUSUNLWV9DT05URU5UKSk7XG4gICAgICAkKGVsZW1lbnRzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFyZ2luID0gJChlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIFJlc3RvcmUgYm9keSBwYWRkaW5nXG5cbiAgICAgIHZhciBwYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIC8vIHRoeCBkLndhbHNoXG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lJDUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSQ1KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQkMywgJCh0aGlzKS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ1LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vZGFsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkNS5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkNS5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldDtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSAkKHRhcmdldCkuZGF0YShEQVRBX0tFWSQ1KSA/ICd0b2dnbGUnIDogX29iamVjdFNwcmVhZCh7fSwgJCh0YXJnZXQpLmRhdGEoKSwgJCh0aGlzKS5kYXRhKCkpO1xuXG4gICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gJCh0YXJnZXQpLm9uZShFdmVudCQ1LlNIT1csIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQub25lKEV2ZW50JDUuSElEREVOLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKF90aGlzMTApLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgX3RoaXMxMC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZywgdGhpcyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FJDVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG5cbiAgJC5mbltOQU1FJDVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDVdID0gSlFVRVJZX05PX0NPTkZMSUNUJDU7XG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDYgPSAndG9vbHRpcCc7XG4gIHZhciBWRVJTSU9OJDYgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkNiA9ICdicy50b29sdGlwJztcbiAgdmFyIEVWRU5UX0tFWSQ2ID0gXCIuXCIgKyBEQVRBX0tFWSQ2O1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDYgPSAkLmZuW05BTUUkNl07XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRGVmYXVsdFR5cGUkNCA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwJDEgPSB7XG4gICAgQVVUTzogJ2F1dG8nLFxuICAgIFRPUDogJ3RvcCcsXG4gICAgUklHSFQ6ICdyaWdodCcsXG4gICAgQk9UVE9NOiAnYm90dG9tJyxcbiAgICBMRUZUOiAnbGVmdCdcbiAgfTtcbiAgdmFyIERlZmF1bHQkNCA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBvZmZzZXQ6IDAsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50J1xuICB9O1xuICB2YXIgSG92ZXJTdGF0ZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgT1VUOiAnb3V0J1xuICB9O1xuICB2YXIgRXZlbnQkNiA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQ2LFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ2LFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDYsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQ2LFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVkkNixcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDYsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNixcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZJDYsXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkNixcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQ2XG4gIH07XG4gIHZhciBDbGFzc05hbWUkNiA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciQ2ID0ge1xuICAgIFRPT0xUSVA6ICcudG9vbHRpcCcsXG4gICAgVE9PTFRJUF9JTk5FUjogJy50b29sdGlwLWlubmVyJyxcbiAgICBBUlJPVzogJy5hcnJvdydcbiAgfTtcbiAgdmFyIFRyaWdnZXIgPSB7XG4gICAgSE9WRVI6ICdob3ZlcicsXG4gICAgRk9DVVM6ICdmb2N1cycsXG4gICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgTUFOVUFMOiAnbWFudWFsJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUb29sdGlwID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy8pJyk7XG4gICAgICB9IC8vIHByaXZhdGVcblxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fdGltZW91dCA9IDA7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsOyAvLyBQcm90ZWN0ZWRcblxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVG9vbHRpcC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7XG4gICAgfTtcblxuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgICAgdmFyIGNvbnRleHQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljaztcblxuICAgICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUkNi5TSE9XKSkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuICAgICAgJCh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJyk7XG5cbiAgICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgICAkKHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCQodGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuICAgICAgICB2YXIgc2hhZG93Um9vdCA9IFV0aWwuZmluZFNoYWRvd1Jvb3QodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdmFyIGlzSW5UaGVEb20gPSAkLmNvbnRhaW5zKHNoYWRvd1Jvb3QgIT09IG51bGwgPyBzaGFkb3dSb290IDogdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZSQ2LkZBREUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuX2dldENvbnRhaW5lcigpO1xuXG4gICAgICAgICQodGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgICAgIGlmICghJC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xuICAgICAgICAgICQodGlwKS5hcHBlbmRUbyhjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yJDYuQVJST1dcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCh0aXApLmFkZENsYXNzKENsYXNzTmFtZSQ2LlNIT1cpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuX2ZpeFRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJldkhvdmVyU3RhdGUgPSBfdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgJChfdGhpcy5lbGVtZW50KS50cmlnZ2VyKF90aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcblxuICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgIF90aGlzLl9sZWF2ZShudWxsLCBfdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUkNi5GQURFKSkge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMudGlwKTtcbiAgICAgICAgICAkKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKF90aGlzMi5faG92ZXJTdGF0ZSAhPT0gSG92ZXJTdGF0ZS5TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICAgIF90aGlzMi5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXG4gICAgICAgICQoX3RoaXMyLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMyLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgICAgaWYgKF90aGlzMi5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNi5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkZPQ1VTXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlO1xuXG4gICAgICBpZiAoJCh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDYuRkFERSkpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGlwKTtcbiAgICAgICAgJCh0aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTsgLy8gUHJvdGVjdGVkXG5cblxuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkKHRpcC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDYuVE9PTFRJUF9JTk5FUikpLCB0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ2LkZBREUgKyBcIiBcIiArIENsYXNzTmFtZSQ2LlNIT1cpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgICAvLyBDb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcbiAgICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgICBpZiAoISQoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkKGNvbnRlbnQpLnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50W2h0bWwgPyAnaHRtbCcgOiAndGV4dCddKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGl0bGU7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbnRhaW5lciA9IGZ1bmN0aW9uIF9nZXRDb250YWluZXIoKSB7XG4gICAgICBpZiAodGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICAgIH1cblxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuY29uZmlnLmNvbnRhaW5lcikpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoZG9jdW1lbnQpLmZpbmQodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gQXR0YWNobWVudE1hcCQxW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkKF90aGlzMy5lbGVtZW50KS5vbihfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRyaWdnZXIuTUFOVUFMKSB7XG4gICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgJChfdGhpczMuZWxlbWVudCkub24oZXZlbnRJbiwgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9lbnRlcihldmVudCk7XG4gICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fbGVhdmUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzMy5lbGVtZW50KSB7XG4gICAgICAgICAgX3RoaXMzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9maXhUaXRsZSA9IGZ1bmN0aW9uIF9maXhUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCB0aXRsZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJChjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDYuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgfTtcblxuICAgIF9wcm90by5fbGVhdmUgPSBmdW5jdGlvbiBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XG5cbiAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQodGhpcy5lbGVtZW50KS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuY29udGVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDYsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XG4gICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgICAgdmFyIHBvcHBlckluc3RhbmNlID0gcG9wcGVyRGF0YS5pbnN0YW5jZTtcbiAgICAgIHRoaXMudGlwID0gcG9wcGVySW5zdGFuY2UucG9wcGVyO1xuXG4gICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQocG9wcGVyRGF0YS5wbGFjZW1lbnQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9maXhUcmFuc2l0aW9uID0gZnVuY3Rpb24gX2ZpeFRyYW5zaXRpb24oKSB7XG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvbjtcblxuICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lJDYuRkFERSk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDYpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDYsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfS0VZJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50JDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVkkNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9vbHRpcDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkLmZuW05BTUUkNl0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRSQ2XS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7XG5cbiAgJC5mbltOQU1FJDZdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDZdID0gSlFVRVJZX05PX0NPTkZMSUNUJDY7XG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkNyA9ICdwb3BvdmVyJztcbiAgdmFyIFZFUlNJT04kNyA9ICc0LjIuMSc7XG4gIHZhciBEQVRBX0tFWSQ3ID0gJ2JzLnBvcG92ZXInO1xuICB2YXIgRVZFTlRfS0VZJDcgPSBcIi5cIiArIERBVEFfS0VZJDc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNyA9ICQuZm5bTkFNRSQ3XTtcbiAgdmFyIENMQVNTX1BSRUZJWCQxID0gJ2JzLXBvcG92ZXInO1xuICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYJDEgPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVgkMSArIFwiXFxcXFMrXCIsICdnJyk7XG5cbiAgdmFyIERlZmF1bHQkNSA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9KTtcblxuICB2YXIgRGVmYXVsdFR5cGUkNSA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcbiAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgfSk7XG5cbiAgdmFyIENsYXNzTmFtZSQ3ID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDcgPSB7XG4gICAgVElUTEU6ICcucG9wb3Zlci1oZWFkZXInLFxuICAgIENPTlRFTlQ6ICcucG9wb3Zlci1ib2R5J1xuICB9O1xuICB2YXIgRXZlbnQkNyA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSQ3LFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ3LFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZJDcsXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSQ3LFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZJDcsXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZJDcsXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSQ3XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFBvcG92ZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfVG9vbHRpcCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFBvcG92ZXIsIF9Ub29sdGlwKTtcblxuICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICByZXR1cm4gX1Rvb2x0aXAuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQb3BvdmVyLnByb3RvdHlwZTtcblxuICAgIC8vIE92ZXJyaWRlc1xuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCQxICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTsgLy8gV2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3RvciQ3LlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDb250ZW50KCk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb250ZW50ID0gY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yJDcuQ09OVEVOVCksIGNvbnRlbnQpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDbGFzc05hbWUkNy5GQURFICsgXCIgXCIgKyBDbGFzc05hbWUkNy5TSE9XKTtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgkMSk7XG5cbiAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDcpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZJDcsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIC8vIEdldHRlcnNcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfS0VZJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50JDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVkkNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUG9wb3ZlcjtcbiAgfShUb29sdGlwKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJC5mbltOQU1FJDddID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkN10uQ29uc3RydWN0b3IgPSBQb3BvdmVyO1xuXG4gICQuZm5bTkFNRSQ3XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ3XSA9IEpRVUVSWV9OT19DT05GTElDVCQ3O1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDggPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04kOCA9ICc0LjIuMSc7XG4gIHZhciBEQVRBX0tFWSQ4ID0gJ2JzLnNjcm9sbHNweSc7XG4gIHZhciBFVkVOVF9LRVkkOCA9IFwiLlwiICsgREFUQV9LRVkkODtcbiAgdmFyIERBVEFfQVBJX0tFWSQ2ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOCA9ICQuZm5bTkFNRSQ4XTtcbiAgdmFyIERlZmF1bHQkNiA9IHtcbiAgICBvZmZzZXQ6IDEwLFxuICAgIG1ldGhvZDogJ2F1dG8nLFxuICAgIHRhcmdldDogJydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDYgPSB7XG4gICAgb2Zmc2V0OiAnbnVtYmVyJyxcbiAgICBtZXRob2Q6ICdzdHJpbmcnLFxuICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBFdmVudCQ4ID0ge1xuICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVkkOCxcbiAgICBTQ1JPTEw6IFwic2Nyb2xsXCIgKyBFVkVOVF9LRVkkOCxcbiAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSQ4ICsgREFUQV9BUElfS0VZJDZcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQ4ID0ge1xuICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgQUNUSVZFOiAnYWN0aXZlJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IkOCA9IHtcbiAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgTkFWX0xJTktTOiAnLm5hdi1saW5rJyxcbiAgICBOQVZfSVRFTVM6ICcubmF2LWl0ZW0nLFxuICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgRFJPUERPV05fSVRFTVM6ICcuZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgfTtcbiAgdmFyIE9mZnNldE1ldGhvZCA9IHtcbiAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgIFBPU0lUSU9OOiAncG9zaXRpb24nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFNjcm9sbFNweSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSB0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3RvciQ4Lk5BVl9MSU5LUyArIFwiLFwiICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yJDguTElTVF9JVEVNUyArIFwiLFwiKSArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3RvciQ4LkRST1BET1dOX0lURU1TKTtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudCQ4LlNDUk9MTCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fcHJvY2VzcyhldmVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgICB0aGlzLl9wcm9jZXNzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBTY3JvbGxTcHkucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OO1xuICAgICAgdmFyIG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/IGF1dG9NZXRob2QgOiB0aGlzLl9jb25maWcubWV0aG9kO1xuICAgICAgdmFyIG9mZnNldEJhc2UgPSBvZmZzZXRNZXRob2QgPT09IE9mZnNldE1ldGhvZC5QT1NJVElPTiA/IHRoaXMuX2dldFNjcm9sbFRvcCgpIDogMDtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuICAgICAgdmFyIHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKTtcbiAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldFNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXRcbiAgICAgICAgICAgIHJldHVybiBbJCh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCB0YXJnZXRTZWxlY3Rvcl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXMyLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cbiAgICAgICAgX3RoaXMyLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDgpO1xuICAgICAgJCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZJDgpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9zZWxlY3RvciA9IG51bGw7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0JDYsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgaWQgPSAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSQ4KTtcbiAgICAgICAgICAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJywgaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLnRhcmdldCA9IFwiI1wiICsgaWQ7XG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkOCwgY29uZmlnLCBEZWZhdWx0VHlwZSQ2KTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gX2dldFNjcm9sbFRvcCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gX2dldFNjcm9sbEhlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0SGVpZ2h0ID0gZnVuY3Rpb24gX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9wcm9jZXNzID0gZnVuY3Rpb24gX3Byb2Nlc3MoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0O1xuXG4gICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG5cbiAgICAgIHZhciBtYXhTY3JvbGwgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgc2Nyb2xsSGVpZ2h0IC0gdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KCk7XG5cbiAgICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICYmIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbMF0gJiYgdGhpcy5fb2Zmc2V0c1swXSA+IDApIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldExlbmd0aCA9IHRoaXMuX29mZnNldHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gb2Zmc2V0TGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIHZhciBpc0FjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGhpcy5fdGFyZ2V0c1tpXSAmJiBzY3JvbGxUb3AgPj0gdGhpcy5fb2Zmc2V0c1tpXSAmJiAodHlwZW9mIHRoaXMuX29mZnNldHNbaSArIDFdID09PSAndW5kZWZpbmVkJyB8fCBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSk7XG5cbiAgICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZSh0YXJnZXQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldDtcblxuICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgdmFyIHF1ZXJpZXMgPSB0aGlzLl9zZWxlY3Rvci5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgXCJbZGF0YS10YXJnZXQ9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXSxcIiArIHNlbGVjdG9yICsgXCJbaHJlZj1cXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCJdXCI7XG4gICAgICB9KTtcblxuICAgICAgdmFyICRsaW5rID0gJChbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcmllcy5qb2luKCcsJykpKSk7XG5cbiAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUkOC5EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgICAkbGluay5jbG9zZXN0KFNlbGVjdG9yJDguRFJPUERPV04pLmZpbmQoU2VsZWN0b3IkOC5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKENsYXNzTmFtZSQ4LkFDVElWRSk7XG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZSQ4LkFDVElWRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZSQ4LkFDVElWRSk7IC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcbiAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG5cbiAgICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3RvciQ4Lk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yJDguTkFWX0xJTktTICsgXCIsIFwiICsgU2VsZWN0b3IkOC5MSVNUX0lURU1TKS5hZGRDbGFzcyhDbGFzc05hbWUkOC5BQ1RJVkUpOyAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlIHdoZW4gLm5hdi1saW5rIGlzIGluc2lkZSAubmF2LWl0ZW1cblxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yJDguTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IkOC5OQVZfSVRFTVMpLmNoaWxkcmVuKFNlbGVjdG9yJDguTkFWX0xJTktTKS5hZGRDbGFzcyhDbGFzc05hbWUkOC5BQ1RJVkUpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQkOC5BQ1RJVkFURSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkge1xuICAgICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSkuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkOC5BQ1RJVkUpO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZSQ4LkFDVElWRSk7XG4gICAgICB9KTtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZJDgpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSQ4LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ4O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2Nyb2xsU3B5O1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50JDguTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yJDguREFUQV9TUFkpKTtcbiAgICB2YXIgc2Nyb2xsU3B5c0xlbmd0aCA9IHNjcm9sbFNweXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IHNjcm9sbFNweXNMZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciAkc3B5ID0gJChzY3JvbGxTcHlzW2ldKTtcblxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRSQ4XSA9IFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUUkOF0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG5cbiAgJC5mbltOQU1FJDhdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJDhdID0gSlFVRVJZX05PX0NPTkZMSUNUJDg7XG4gICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ5ID0gJ3RhYic7XG4gIHZhciBWRVJTSU9OJDkgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkOSA9ICdicy50YWInO1xuICB2YXIgRVZFTlRfS0VZJDkgPSBcIi5cIiArIERBVEFfS0VZJDk7XG4gIHZhciBEQVRBX0FQSV9LRVkkNyA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDkgPSAkLmZuW05BTUUkOV07XG4gIHZhciBFdmVudCQ5ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkOSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ5ICsgREFUQV9BUElfS0VZJDdcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSQ5ID0ge1xuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yJDkgPSB7XG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9VTDogJz4gbGkgPiAuYWN0aXZlJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtdG9nZ2xlPVwibGlzdFwiXScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG4gICAgRFJPUERPV05fQUNUSVZFX0NISUxEOiAnPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUYWIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUYWIucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKSB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZSQ5LkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQ7XG4gICAgICB2YXIgcHJldmlvdXM7XG4gICAgICB2YXIgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IkOS5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTZWxlY3RvciQ5LkFDVElWRV9VTCA6IFNlbGVjdG9yJDkuQUNUSVZFO1xuICAgICAgICBwcmV2aW91cyA9ICQubWFrZUFycmF5KCQobGlzdEVsZW1lbnQpLmZpbmQoaXRlbVNlbGVjdG9yKSk7XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50JDkuSElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50JDkuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudCQ5LkhJRERFTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQkOS5TSE9XTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGRlbkV2ZW50KTtcbiAgICAgICAgJChfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZJDkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudHMgPSBjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBjb250YWluZXIubm9kZU5hbWUgPT09ICdPTCcpID8gJChjb250YWluZXIpLmZpbmQoU2VsZWN0b3IkOS5BQ1RJVkVfVUwpIDogJChjb250YWluZXIpLmNoaWxkcmVuKFNlbGVjdG9yJDkuQUNUSVZFKTtcbiAgICAgIHZhciBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgJChhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZSQ5LkZBREUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKTtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZSQ5LlNIT1cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICQoYWN0aXZlKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpO1xuICAgICAgICB2YXIgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU2VsZWN0b3IkOS5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdO1xuXG4gICAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgICAgJChkcm9wZG93bkNoaWxkKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUkOS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUkOS5TSE9XKTtcblxuICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAmJiAkKGVsZW1lbnQucGFyZW50Tm9kZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lJDkuRFJPUERPV05fTUVOVSkpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChTZWxlY3RvciQ5LkRST1BET1dOKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IkOS5EUk9QRE9XTl9UT0dHTEUpKTtcbiAgICAgICAgICAkKGRyb3Bkb3duVG9nZ2xlTGlzdCkuYWRkQ2xhc3MoQ2xhc3NOYW1lJDkuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZJDkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVkkOSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kOTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFiO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQkOS5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IkOS5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUUkOV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJDldLkNvbnN0cnVjdG9yID0gVGFiO1xuXG4gICQuZm5bTkFNRSQ5XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRSQ5XSA9IEpRVUVSWV9OT19DT05GTElDVCQ5O1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkYSA9ICd0b2FzdCc7XG4gIHZhciBWRVJTSU9OJGEgPSAnNC4yLjEnO1xuICB2YXIgREFUQV9LRVkkYSA9ICdicy50b2FzdCc7XG4gIHZhciBFVkVOVF9LRVkkYSA9IFwiLlwiICsgREFUQV9LRVkkYTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCRhID0gJC5mbltOQU1FJGFdO1xuICB2YXIgRXZlbnQkYSA9IHtcbiAgICBDTElDS19ESVNNSVNTOiBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSRhLFxuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJGEsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJGEsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkYSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJGFcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSRhID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBISURFOiAnaGlkZScsXG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIFNIT1dJTkc6ICdzaG93aW5nJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkNyA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICAgIGRlbGF5OiAnbnVtYmVyJ1xuICB9O1xuICB2YXIgRGVmYXVsdCQ3ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBhdXRvaGlkZTogdHJ1ZSxcbiAgICBkZWxheTogNTAwXG4gIH07XG4gIHZhciBTZWxlY3RvciRhID0ge1xuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgVG9hc3QgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb2FzdChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcblxuICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUb2FzdC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkYS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLkZBREUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkYS5TSE9XSU5HKTtcblxuICAgICAgICBfdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLlNIT1cpO1xuXG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQkYS5TSE9XTik7XG5cbiAgICAgICAgaWYgKF90aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUkYS5ISURFKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZSRhLlNIT1dJTkcpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUod2l0aG91dFRpbWVvdXQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZSRhLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50JGEuSElERSk7XG5cbiAgICAgIGlmICh3aXRob3V0VGltZW91dCkge1xuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5fY2xvc2UoKTtcbiAgICAgICAgfSwgdGhpcy5fY29uZmlnLmRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUkYS5TSE9XKSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJGEuU0hPVyk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50JGEuQ0xJQ0tfRElTTUlTUyk7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkYSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0JDcsICQodGhpcy5fZWxlbWVudCkuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJGEsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudCRhLkNMSUNLX0RJU01JU1MsIFNlbGVjdG9yJGEuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuaGlkZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2Nsb3NlID0gZnVuY3Rpb24gX2Nsb3NlKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczQuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUkYS5ISURFKTtcblxuICAgICAgICAkKF90aGlzNC5fZWxlbWVudCkudHJpZ2dlcihFdmVudCRhLkhJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lJGEuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSRhKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvYXN0KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVkkYSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb2FzdCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kYTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVG9hc3Q7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJC5mbltOQU1FJGFdID0gVG9hc3QuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FJGFdLkNvbnN0cnVjdG9yID0gVG9hc3Q7XG5cbiAgJC5mbltOQU1FJGFdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FJGFdID0gSlFVRVJZX05PX0NPTkZMSUNUJGE7XG4gICAgcmV0dXJuIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMi4xKTogaW5kZXguanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0LicpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICAgIHZhciBtaW5NYWpvciA9IDE7XG4gICAgdmFyIGx0TWFqb3IgPSAyO1xuICAgIHZhciBtaW5NaW5vciA9IDk7XG4gICAgdmFyIG1pblBhdGNoID0gMTtcbiAgICB2YXIgbWF4TWFqb3IgPSA0O1xuXG4gICAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpO1xuICAgIH1cbiAgfSkoKTtcblxuICBleHBvcnRzLlV0aWwgPSBVdGlsO1xuICBleHBvcnRzLkFsZXJ0ID0gQWxlcnQ7XG4gIGV4cG9ydHMuQnV0dG9uID0gQnV0dG9uO1xuICBleHBvcnRzLkNhcm91c2VsID0gQ2Fyb3VzZWw7XG4gIGV4cG9ydHMuQ29sbGFwc2UgPSBDb2xsYXBzZTtcbiAgZXhwb3J0cy5Ecm9wZG93biA9IERyb3Bkb3duO1xuICBleHBvcnRzLk1vZGFsID0gTW9kYWw7XG4gIGV4cG9ydHMuUG9wb3ZlciA9IFBvcG92ZXI7XG4gIGV4cG9ydHMuU2Nyb2xsc3B5ID0gU2Nyb2xsU3B5O1xuICBleHBvcnRzLlRhYiA9IFRhYjtcbiAgZXhwb3J0cy5Ub2FzdCA9IFRvYXN0O1xuICBleHBvcnRzLlRvb2x0aXAgPSBUb29sdGlwO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwXG4iLCJpbXBvcnQgJ2Jvb3RzdHJhcCdcclxuaW1wb3J0ICcuL3Njc3MvYXBwLnNjc3MnXHJcbmltcG9ydCAnLi9zdHlsZS5sZXNzJ1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwJ1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gIDxCcm93c2VyUm91dGVyPlxyXG4gICAgPEFwcCAvPlxyXG4gIDwvQnJvd3NlclJvdXRlcj4sXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcC1yZWFjdC1yb290JylcclxuKSJdLCJzb3VyY2VSb290IjoiIn0=